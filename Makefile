## ---------------------------------
## -- Standard Autoconf variables --
## ---------------------------------

SHELL = /bin/bash

prefix = /usr/local
exec_prefix = ${prefix}

bindir = ${exec_prefix}/bin
# sbindir = ${exec_prefix}/sbin
# libexecdir = ${exec_prefix}/libexec
# datarootdir = ${prefix}/share
# datadir = ${datarootdir}
# sysconfdir = ${prefix}/etc
# sharedstatedir = ${prefix}/com
# localstatedir = ${prefix}/var
# includedir = ${prefix}/include
# oldincludedir = /usr/include
# docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
# infodir = ${datarootdir}/info
# htmldir = ${docdir}
# dvidir = ${docdir}
# pdfdir = ${docdir}
# psdir = ${docdir}
libdir = ${exec_prefix}/lib
# lispdir = @lispdir@
# localedir = ${datarootdir}/locale


host = x86_64-linux-gnu
host_alias = 
build = x86_64-linux-gnu
build_alias = 
target = x86_64-linux-gnu
target_alias = 

srcdir = .
abs_srcdir = /git/fricas
top_srcdir = .
abs_top_srcdir = /git/fricas

# Notice that there is a bug in Autoconf 2.59 whereby the variable
# top_builddir is not defined.  So avoid to use it directly.  Use
# abs_top_builddir.
builddir = .
abs_builddir = /git/fricas
top_builddir = .
abs_top_builddir = /git/fricas
datadir = ${datarootdir}


AR = ar
CC = gcc
CFLAGS = -g -O2
OBJEXT = o
EXEEXT = 

AUTOCONF = autoconf
AWK = gawk
TARGET_AWK = /usr/bin/gawk
INSTALL = /usr/bin/install -c
install_sh = @install_sh@
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_script = $(install_sh) -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
## FIXME:  The test done with Autoconf-2.60 and later concludes
##         that "ln -s" is unusable on msys, and therefore defaults to
##         "cp -p", but that default is unusable for us.  For our
##         purpose "ln -s" is just fine on that platform.  Consequently
##         we are explicitly overrding that value here.
LN_S = ln -s
mkinstalldirs = $(top_srcdir)/config/mkinstalldirs
PATCH = @PATCH@
RANLIB = ranlib
TAR = tar
TOUCH = touch

# The list of make targets made recursively, by walking sub-directories
# Normally, this is a template generated by Automake, but we don't
# use Automake yet; so, we must do it the hard way.
# See the corresponding rules in setup-dep.mk
RECURSIVE_TARGETS = all-recursive check-recursive dvi-recursive \
		html-recursive info-recursive install-data-recursive \
		install-exec-recursive install-info-recursive \
		install-recursive installcheck-recursive \
		installdirs-recursive pdf-recursive ps-recursive \
		uninstall-info-recursive uninstall-recursive


## Normally, Automake will substitute the value for this variable.
## But, we don't have Automake yet.  So we punt on it.
MKDIR_P = mkdir -p

STAMP = echo timestamp >

## ---------------------
## -- Axiom variables --
## ---------------------

## Absolute path to the toplevel source directory for Axiom.  This is
## almost like Autoconf-standard abs_top_srcdir except that, it retains
## the same syntactic values in subdirectories.

## Where The Axiom distribution main source files are kept.
## Notice, this is the src/ directory within the toplevel source
## directory

fricas_top_srcdir = /git/fricas

fricas_src_srcdir = $(fricas_top_srcdir)/src
fricas_src_datadir = $(fricas_src_srcdir)/share
fricas_src_algdir = $(fricas_src_srcdir)/algebra

## Where tools for the build machine are built
fricas_builddir = /git/fricas/build/x86_64-linux-gnu
fricas_build_bindir = /git/fricas/build/x86_64-linux-gnu/bin
fricas_build_libdir = $(fricas_builddir)/lib
fricas_build_mandir = $(fricas_builddir)/man

fricas_configdir = $(abs_top_builddir)/config
fricas_c_macros = $(fricas_configdir)/fricas_c_macros.h

LATEX = /usr/bin/latex

## Staging directory for the target DESTDIR
fricas_targetdir = /git/fricas/target/x86_64-linux-gnu
fricas_target_bindir = $(fricas_targetdir)/bin
fricas_target_libdir = $(fricas_targetdir)/lib
fricas_target_srcdir = $(fricas_targetdir)/src
fricas_target_docdir = $(fricas_targetdir)/doc
fricas_target_datadir = $(fricas_targetdir)/share
fricas_target_texdir = $(fricas_target_datadir)/texmf/tex


FRICAS_X11_CFLAGS = 
FRICAS_X11_LDFLAGS =  -lXpm  -lSM -lICE -lX11 

fricas_includes = -I$(fricas_src_srcdir)/include -I$(fricas_configdir)

fricas_build_helper = $(abs_top_srcdir)/src/scripts/build_helper

## Where the staging build directory is found
AXIOM = /git/fricas/target/x86_64-linux-gnu
export AXIOM
BASE = 
export BASE

TMP=$(fricas_builddir)

## Old Axiom ENV variables

VERSION = FriCAS 2018-03-10

CCF=-O2 -Wall -D_GNU_SOURCE
LDF=-g

## -------------------------------------------
## -- Files generated for the build machine --
## -------------------------------------------
unpack_file = $(fricas_src_srcdir)/scripts/unpack_file

FRICAS_LISP = /usr/local/bin/sbcl
# Extension of the output file name returned by compile-file
LISPOBJEXT = fasl
FASLEXT = fasl


##

##
AXIOMXLROOT=${AXIOM}/compiler

## GCL command to end a session.
BYE=quit

## Clear suffix-based implicit rule table.
.SUFFIXES:

PREGENERATED=
PACKAGE_VERSION = 2018-03-10
PACKAGE_TARNAME = fricas

## ----------------------------------------
## -- Old-style Axiom makefile variables --
## ----------------------------------------

COMMAND_DIR=$(DESTDIR)$(libdir)/fricas/target/$(target)/bin
COMMAND=$(COMMAND_DIR)/fricas

subdir =

SUBDIRS = src

build_srcdir = $(builddir)/src

FRICAS_SRC_TARGETS = all-algebra all-asq all-axiomsys all-boot \
	all-clef all-doc all-graph all-hyper all-input all-interpsys \
	all-lib all-lisp all-sman all-src

BUILD_DATE:=`date`

.PHONY: all install $(FRICAS_SRC_TARGETS)
all: all-ax all-contrib

# If there is a directory "${PREGENERATED}/target", we can simply copy
# its contents to ${fricas_targetdir}.
# The pregenerated lisp files are under ${PREGENERATED}/src/algebra.
# The .daase files are are under ${PREGENERATED}/target/algebra.
# For more details see the "dist" target below.
pre-gen: stamp-rootdirs
	echo "PREGENERATED=[${PREGENERATED}]"
	if test -z "${PREGENERATED}"; then \
	  echo "Not using pre-generated data."; \
	elif test ! -d "${PREGENERATED}"; then \
	  echo "PREGENERATED directory does not exist."; \
	  exit 1; \
	else \
	  if test -d ${PREGENERATED}/target; then \
	    cp -r ${PREGENERATED}/target/* ${fricas_targetdir}; \
	  fi && \
	  ${STAMP} $@; \
	fi

# Generate the efricas script.
all-contrib: all-src
	cd contrib/emacs && ${MAKE}

all-ax: all-src
	@echo finished system build on `date` | tee >lastBuildDate

all-src: stamp-rootdirs 

all-input: all-src

check: all-src
	cd src/input; ${MAKE} check

viewports:
	cd src/doc; ${MAKE} MAYBE_VIEWPORTS=viewports

$(FRICAS_SRC_TARGETS): pre-gen
	cd $(build_srcdir) && $(MAKE) BUILD_DATE="${BUILD_DATE}" $@

stamp-rootdirs:
	${MKDIR_P} $(fricas_build_bindir)
	${MKDIR_P} $(fricas_build_libdir)
	${MKDIR_P} $(fricas_target_bindir)
	${MKDIR_P} $(fricas_target_libdir)
	${MKDIR_P} $(fricas_target_datadir)/spadhelp
	${MKDIR_P} $(fricas_target_datadir)/msgs
	${MKDIR_P} $(fricas_target_texdir)
	${MKDIR_P} $(fricas_targetdir)/algebra/
	${MKDIR_P} $(fricas_targetdir)/autoload
	${MKDIR_P} $(fricas_targetdir)/input
	${MKDIR_P} $(fricas_target_srcdir)/algebra
	${MKDIR_P} ${TMP}
	$(STAMP) stamp-rootdirs

reltarget = target/$(target)

fricas_lib = $(subst $(exec_prefix)/,,$(libdir))

install: install-src install-contrib

install-src:
	@echo Installing FriCAS in $(prefix)
	rm -rf '$(DESTDIR)$(libdir)/fricas'
	$(mkinstalldirs) '$(DESTDIR)$(libdir)/fricas'
	$(mkinstalldirs) '$(DESTDIR)$(libdir)/fricas/$(reltarget)/lib'
	for A in algebra autoload doc share src lib/graph ; do \
	  for B in `find $(reltarget)/$$A -type d -print` ; do \
	     $(mkinstalldirs) '$(DESTDIR)$(libdir)'/fricas/$$B \
	       || exit 1 ; \
	  done ; \
	  for B in `find $(reltarget)/$$A -type f -print` ; do \
	     $(INSTALL_DATA) $$B '$(DESTDIR)$(libdir)'/fricas/$$B \
	       || exit 1 ; \
	  done ; \
	done
	$(mkinstalldirs) '$(DESTDIR)$(libdir)/fricas/$(reltarget)/bin'
	for A in bin/AXIOMsys bin/asq bin/clef bin/htadd bin/hypertex \
	         bin/sman bin/viewAlone lib/ex2ht lib/hthits lib/session \
		 lib/spadbuf lib/spadclient lib/view2D lib/view3D \
		 lib/viewman ; do \
	   if [ -f $(reltarget)/$$A$(EXEEXT) ] ; then \
	      $(INSTALL_PROGRAM) $(reltarget)/$$A$(EXEEXT) \
	         '$(DESTDIR)$(libdir)'/fricas/$(reltarget)/$$A$(EXEEXT) \
		|| exit 1 ; \
	   fi ; \
	done
	if [ -f $(reltarget)/lib/libspad.so ] ; then \
	   $(INSTALL_PROGRAM) $(reltarget)/lib/libspad.so \
	       '$(DESTDIR)$(libdir)'/fricas/$(reltarget)/lib/libspad.so \
	     || exit 1 ; \
	fi
	if [ -f $(reltarget)/lib/gmp_wrap.so ] ; then \
	   $(INSTALL_PROGRAM) $(reltarget)/lib/gmp_wrap.so \
	       '$(DESTDIR)$(libdir)'/fricas/$(reltarget)/lib/gmp_wrap.so \
	     || exit 1 ; \
	fi
	for A in SPADEDIT htsearch presea ; do \
	   if [ -f $(reltarget)/lib/$$A ] ; then \
	      $(INSTALL_SCRIPT) $(reltarget)/lib/$$A \
	        '$(DESTDIR)$(libdir)'/fricas/$(reltarget)/lib/$$A \
	       || exit 1 ; \
	   fi ; \
	done
	for A in command.list copyright summary ; do \
	   $(INSTALL_DATA) $(reltarget)/lib/$$A \
	      '$(DESTDIR)$(libdir)'/fricas/$(reltarget)/lib/$$A \
	     || exit 1 ; \
	done
	echo '#!/bin/sh -' > '${COMMAND}'.tmp
	echo exec_prefix='"$${FRICAS_PREFIX:-$(exec_prefix)}"' \
               >> '${COMMAND}'.tmp
	if test "$(fricas_lib)" != "$(libdir)" ;  then \
	   echo \
	      AXIOM='"$${exec_prefix}/$(fricas_lib)/fricas/target/$(target)"' \
	       >> '${COMMAND}'.tmp ; \
	else \
	   echo AXIOM='"$(libdir)/fricas/target/$(target)"' \
               >> '${COMMAND}'.tmp ; \
	fi
	echo export AXIOM >> '${COMMAND}'.tmp

	cat $(fricas_src_srcdir)/etc/fricas >> '${COMMAND}'.tmp
	$(INSTALL_SCRIPT) '${COMMAND}'.tmp '${COMMAND}'
	-rm '${COMMAND}'.tmp
	rm -f '$(DESTDIR)$(bindir)'/fricas
	$(mkinstalldirs) '$(DESTDIR)$(bindir)'
	$(INSTALL_SCRIPT) '$(COMMAND)' '$(DESTDIR)$(bindir)/fricas'
	if test x"no" = xyes ; then \
	    cd src/aldor && $(MAKE) install; \
	fi
	@echo 79 FriCAS installation finished.

install-contrib:
	$(mkinstalldirs) '$(DESTDIR)$(bindir)'
	$(mkinstalldirs) '$(DESTDIR)${exec_prefix}/lib/fricas/emacs'
	cd contrib/emacs && $(MAKE) install;
	@echo 79 FriCAS contrib installation finished.


mostlyclean-local: clean-distdir
	@-rm -f lastBuildDate

clean-local: mostlyclean-local
	-rm -f stamp-*
	-cd contrib/emacs && ${MAKE} clean
	-rm -rf $(fricas_targetdir)
	-rm -rf build/$(target)

distclean-local: clean-local
	@-rm -rf build
	-rm -rf target
	-cd contrib/emacs && ${MAKE} distclean
	@-rm -f config.status config.log config_cl.out
	@-rm -f Makefile

$(top_builddir)/config.status: $(top_srcdir)/configure
	$(SHELL) ./config.status --recheck

$(RECURSIVE_TARGETS): stamp-rootdirs 

###################################################################
# "make dist" creates a distribution tarball with precomputed machine
# independent files like *.lsp, *.daase, *.ht, *.pht, *.VIEW/*, *.help.
# Running "make dist" must be called *after* a full (out-of-source)
# build. The "out-of-source" build is necessary, since we "cp -r" from
# the fricas checkout directory.
#
# The tarball data will be temporarily copied into a local directory
# then tar'ed and bzipped.
#
# We do not make this target dependent on "all", though, because it is
# currently not possible to restart the build from an interrupted
# build process.
#
distdir=${PACKAGE_TARNAME}-${PACKAGE_VERSION}
disttargetdir=${distdir}/pre-generated/target
distsrcdir=${distdir}/pre-generated/src
DIST_TARBALL=${distdir}.tar.bz2

out-of-source-check:
	test "${abs_builddir}" != ${abs_top_srcdir}

# copy databases and algebra bootstrap files
dbs=browse.daase category.daase compress.daase interp.daase operation.daase\
    libdb.text comdb.text USERS.DAASE DEPENDENTS.DAASE

generated_dbs=${addprefix ${disttargetdir}/algebra/, ${dbs}}
${generated_dbs}: ${disttargetdir}/%: ${fricas_targetdir}/%
	test -d ${disttargetdir}/algebra || ${MKDIR_P} ${disttargetdir}/algebra
	cp -r $< $@

dist-lisp: ${generated_dbs}
	(cd src/algebra; ls -d *.NRLIB | sed 's,\.NRLIB$$,,') > nrlibs
	${MKDIR_P} ${distsrcdir}/algebra
	for A in $$(cat nrlibs); do \
	  cp src/algebra/$${A}.NRLIB/$${A}.lsp ${distsrcdir}/algebra/$${A}.lsp;\
	done

# We assume that the *.help files are available from a directory
# ${helpsrcdir}. It is an error if this variable is not set.
help-sanity-check:
	test -f ${helpsrcdir}/Integer.help \
	|| (echo "helpfiles are missing"; \
	    echo "use 'make dist helpsrcdir=/path/to/spadhelp'"; \
	    exit 1)

# .help files that are generated during the documentation build under
# src/doc will be taken care of by the dist-doc target.
dist-help: help-sanity-check
	${MKDIR_P} ${disttargetdir}/share/spadhelp
	cp ${helpsrcdir}/* ${disttargetdir}/share/spadhelp

# Copy generated .ht and .pht and *.VIEW/* files to distribution directory.
dist-doc:
	cd src/doc; ${MAKE} disttargetdir="../../${disttargetdir}" dist

${DIST_TARBALL}: out-of-source-check lastBuildDate dist-help dist-lisp dist-doc
	cp -r ${abs_top_srcdir}/* ${distdir}
	find ${distdir} -type d -name .svn -exec rm -rf {} \+
	tar cjf $@ ${distdir}

dist: ${DIST_TARBALL}

clean-distdir:
	-rm -rf ${distdir} ${DIST_TARBALL}
## ---------------------------------------
## -- Standard boilerplate dependencies --
## ---------------------------------------

# Recursive rules, usually automatically generated by Automake.
# Since we do not use (yet) Automake, we mimic the behaviour as
# close as possible.
# Recursive wall of sub-directories is based on the variable
# SUBDIRS.  That variable usually contains the of sub-directories
# to be made in depth-first postfix.  However, that order can
# be changed to depth-first prefix by explicitly including "."
# in SUBDIRS.  Rules ending with '-ax' are those specific to the
# the current directory.  Notice that the '-ax' rules are similar
# to Automake generated '-am'.
.PHONY: $(RECURSIVE_TARGETS)
$(RECURSIVE_TARGETS):
	failcmd='exit 1'; \
	for f in $$MAKEFLAGS; do \
	   case $$f in \
	      *=* | --[!k]*) ;; \
	      *k*) failcmd='fail=yes';; \
	   esac; \
	done; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; list='$(SUBDIRS)'; \
	for subdir in $$list; do \
	   echo "Making $$target in $$subdir"; \
	   if test "$$subdir" = "."; then \
	      dot_seen=yes; \
	      local_target="$$target-ax"; \
	   else \
	      local_target="$$target"; \
	   fi; \
	   (cd $$subdir && $(MAKE) $$local_target) || eval $$failcmd; \
	done; \
	if test "$$dot_seen" = "no"; then \
	   $(MAKE) "$$target-ax" || exit 1; \
	fi; test -z "$$fail"

# Recursive cleanup is done in reverse, postfix order of ordinary build.
.PHONY: mostlyclean-recursive
.PHONY: clean-recursive
.PHONY: distclean-recursive
.PHONY: maintainer-clean-recursive
mostlyclean-recursive clean-recursive distclean-recursive \
maintainer-clean-recursive:
	@failcmd='exit 1'; \
	for f in $$MAKEFLAGS; do \
	   case $$f in \
	      *=* | --[!k]*) ;; \
	      *k*) failcmd='fail=yes';; \
	   esac; \
	done; \
	dot_seen=no; \
	list='$(SUBDIRS)' ; \
	rev=''; \
	for subdir in $$list; do \
	   if test "$$subdir" != "."; then \
	      rev="$$subdir $$rev"; \
	   fi; \
	done; \
	rev="$$rev ."; \
	target=`echo $@ | sed s/-recursive//`; \
	for subdir in $$rev; do \
	   echo "Making $$target in $$subdir"; \
	   if test "$$subdir" = "."; then \
	      local_target="$$target-ax"; \
	   else \
	      local_target="$$target"; \
	   fi; \
	   (cd $$subdir && $(MAKE) $$local_target) || eval $$failcmd; \
	done && test -z "$$fail"

## Rules to make DVI files from pamphlets

.PRECIOUS: %.tex
.PRECIOUS: %.dvi

.PHONY: dvi
dvi: dvi-recursive

$(top_srcdir)/configure: $(top_srcdir)/configure.ac \
			 $(top_srcdir)/config/fricas.m4
	cd $(top_srcdir) && $(AUTOCONF)


.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_srcdir)/config/var-def.mk \
	  $(top_srcdir)/config/setup-dep.mk \
	  $(abs_top_builddir)/config.status
	cd $(abs_top_builddir) && $(SHELL) ./config.status $(subdir)$@

## Cleanup.
##   Each Makefile is responsible of defining targets named
##   mostlyclean-local, clean-local, and distclean-local.
.PHONY: mostlyclean-generic mostlyclean-local mostlyclean mostlyclean-ax
mostlyclean-generic:
	-rm -f *~
	-rm -f *.log *.aux *.toc

mostlyclean: mostlyclean-recursive
mostlyclean-ax: mostlyclean-generic mostlyclean-local

.PHONY: clean-generic clean-local clean clean-ax
clean-generic: mostlyclean-generic
	-rm -f *.dvi

clean: clean-recursive
clean-ax: clean-generic clean-local

.PHONY: distclean-generic distclean-local distclean distclean-ax
distclean-generic: clean-generic
	-rm -rf $(fricas_target_docdir)/$(subdir)

distclean: distclean-recursive
	-rm Makefile

distclean-ax: distclean-generic distclean-local
