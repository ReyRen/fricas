## ---------------------------------
## -- Standard Autoconf variables --
## ---------------------------------

SHELL = /bin/bash

prefix = /usr/local
exec_prefix = ${prefix}

bindir = ${exec_prefix}/bin
# sbindir = ${exec_prefix}/sbin
# libexecdir = ${exec_prefix}/libexec
# datarootdir = ${prefix}/share
# datadir = ${datarootdir}
# sysconfdir = ${prefix}/etc
# sharedstatedir = ${prefix}/com
# localstatedir = ${prefix}/var
# includedir = ${prefix}/include
# oldincludedir = /usr/include
# docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
# infodir = ${datarootdir}/info
# htmldir = ${docdir}
# dvidir = ${docdir}
# pdfdir = ${docdir}
# psdir = ${docdir}
libdir = ${exec_prefix}/lib
# lispdir = @lispdir@
# localedir = ${datarootdir}/locale


host = x86_64-linux-gnu
host_alias = 
build = x86_64-linux-gnu
build_alias = 
target = x86_64-linux-gnu
target_alias = 

srcdir = .
abs_srcdir = /git/fricas/src/aldor
top_srcdir = ../..
abs_top_srcdir = /git/fricas

# Notice that there is a bug in Autoconf 2.59 whereby the variable
# top_builddir is not defined.  So avoid to use it directly.  Use
# abs_top_builddir.
builddir = .
abs_builddir = /git/fricas/src/aldor
top_builddir = ../..
abs_top_builddir = /git/fricas
datadir = ${datarootdir}


AR = ar
CC = gcc
CFLAGS = -g -O2
OBJEXT = o
EXEEXT = 

AUTOCONF = autoconf
AWK = gawk
TARGET_AWK = /usr/bin/gawk
INSTALL = /usr/bin/install -c
install_sh = @install_sh@
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_script = $(install_sh) -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
## FIXME:  The test done with Autoconf-2.60 and later concludes
##         that "ln -s" is unusable on msys, and therefore defaults to
##         "cp -p", but that default is unusable for us.  For our
##         purpose "ln -s" is just fine on that platform.  Consequently
##         we are explicitly overrding that value here.
LN_S = ln -s
mkinstalldirs = $(top_srcdir)/config/mkinstalldirs
PATCH = @PATCH@
RANLIB = ranlib
TAR = tar
TOUCH = touch

# The list of make targets made recursively, by walking sub-directories
# Normally, this is a template generated by Automake, but we don't
# use Automake yet; so, we must do it the hard way.
# See the corresponding rules in setup-dep.mk
RECURSIVE_TARGETS = all-recursive check-recursive dvi-recursive \
		html-recursive info-recursive install-data-recursive \
		install-exec-recursive install-info-recursive \
		install-recursive installcheck-recursive \
		installdirs-recursive pdf-recursive ps-recursive \
		uninstall-info-recursive uninstall-recursive


## Normally, Automake will substitute the value for this variable.
## But, we don't have Automake yet.  So we punt on it.
MKDIR_P = mkdir -p

STAMP = echo timestamp >

## ---------------------
## -- Axiom variables --
## ---------------------

## Absolute path to the toplevel source directory for Axiom.  This is
## almost like Autoconf-standard abs_top_srcdir except that, it retains
## the same syntactic values in subdirectories.

## Where The Axiom distribution main source files are kept.
## Notice, this is the src/ directory within the toplevel source
## directory

fricas_top_srcdir = /git/fricas

fricas_src_srcdir = $(fricas_top_srcdir)/src
fricas_src_datadir = $(fricas_src_srcdir)/share
fricas_src_algdir = $(fricas_src_srcdir)/algebra

## Where tools for the build machine are built
fricas_builddir = /git/fricas/build/x86_64-linux-gnu
fricas_build_bindir = /git/fricas/build/x86_64-linux-gnu/bin
fricas_build_libdir = $(fricas_builddir)/lib
fricas_build_mandir = $(fricas_builddir)/man

fricas_configdir = $(abs_top_builddir)/config
fricas_c_macros = $(fricas_configdir)/fricas_c_macros.h

LATEX = /usr/bin/latex

## Staging directory for the target DESTDIR
fricas_targetdir = /git/fricas/target/x86_64-linux-gnu
fricas_target_bindir = $(fricas_targetdir)/bin
fricas_target_libdir = $(fricas_targetdir)/lib
fricas_target_srcdir = $(fricas_targetdir)/src
fricas_target_docdir = $(fricas_targetdir)/doc
fricas_target_datadir = $(fricas_targetdir)/share
fricas_target_texdir = $(fricas_target_datadir)/texmf/tex


FRICAS_X11_CFLAGS = 
FRICAS_X11_LDFLAGS =  -lXpm  -lSM -lICE -lX11 

fricas_includes = -I$(fricas_src_srcdir)/include -I$(fricas_configdir)

fricas_build_helper = $(abs_top_srcdir)/src/scripts/build_helper

## Where the staging build directory is found
AXIOM = /git/fricas/target/x86_64-linux-gnu
export AXIOM
BASE = 
export BASE

TMP=$(fricas_builddir)

## Old Axiom ENV variables

VERSION = FriCAS 2018-03-10

CCF=-O2 -Wall -D_GNU_SOURCE
LDF=-g

## -------------------------------------------
## -- Files generated for the build machine --
## -------------------------------------------
unpack_file = $(fricas_src_srcdir)/scripts/unpack_file

FRICAS_LISP = /usr/local/bin/sbcl
# Extension of the output file name returned by compile-file
LISPOBJEXT = fasl
FASLEXT = fasl


##

##
AXIOMXLROOT=${AXIOM}/compiler

## GCL command to end a session.
BYE=quit

## Clear suffix-based implicit rule table.
.SUFFIXES:

PREGENERATED=
PACKAGE_VERSION = 2018-03-10
PACKAGE_TARNAME = fricas
# (Patch) Subject: Re: aldor/axiom interoperability
# http://article.gmane.org/gmane.comp.mathematics.axiom.devel/19315/match=broadbery



MAKEFLAGS += -Wwarn-undefined-variables
ALDOR=

###################################################################
# WARNING: THE FOLLOWING DOCUMENTATION MIGHT BE INCORRECT.
#
# This Makefile is only responsible to prepare the stage for the
# actual compilation of libaxiom.al.
# The main output is the file cliques.mk which is a Makefile that
# will be included in Makefile2.
# cliques.mk basically contains for each domain from the Axiom library
# its (recursive) dependencies on other domains. In fact, that is
# not exactly true since several domains are grouped together in
# cliques due to a lot of interdependencies in the axiom library.
# Fortunately, there are only a few cliques left that have more
# than one element. Most interdependencies are broken by the types
# that appear in initlist.as.
# Furthermore, cliques.mk contains a number of dependencies for and on
# a number of basic aldor files and, in particular, the files
# axlit.as and axextend.as. The latter two files extend various
# Axiom domains so that certain Aldor can interpret literals etc.
# Naturally, these files depend on existing Axiom types and thus
# must occur somewhere in the middle of the Axiom type hierarchy,
# i.e., compilation order.
#
# The whole Makefile is about to find out where axlit and axextend
# live in the compilation order and find out about the cliques of
# the Axiom library.
###################################################################

# For the compilation of libaxiom.al we must use the compiled form of
# the database. Since the variable DAASE is already set in var-def.mk,
# we explicitly override it here for the call of AXIOMsys.
INTERPSYS = DAASE=$(fricas_targetdir) FRICAS_INITFILE='' $(fricas_target_bindir)/AXIOMsys

default: axiom.as al/libaxiom.al runtimefiles

clean:
	-rm domains.mk mkinit* initlist.lst initlist.ap
	-rm easylist.lsp
	-rm libaxiom.lst aldordepfiles domaindepfiles
	-rm -rf tmp init_ap gendeps ap ao al
	-rm cliques cliques.mk


###################################################################
# Here we produce the list of all domains, categories and packages
# that are available in the algebra directory. This is where the
# .spad files are extracted to.
spaddir=$(abs_top_builddir)/src/algebra
domains.mk:
	echo "domains := \\" > $@
	echo ')lisp (dolist (c (|allConstructors|)) (format t "~A \\~%" (|constructor?| c))) (quit)'|($(INTERPSYS))|grep '\\'|grep -v '.*- \\'|grep -v NIL|sed -e 's/.*-> //'|sort >> $@
	echo >> $@

include domains.mk

###################################################################
###################################################################
# Now we are going to generate dependency files.
# The dependencies are generated with the help gendepap.lsp.
# There are 3 categories of dependency files.
# 1. Initial dependencies connected to a given initlist.as.
# 2. Dependencies generated from the $(domains).
# 3. Dependencies of a few aldor files given by $(aldor_srcs).
# These dependencies will be listed in the directory "gendeps".
###################################################################
###################################################################
GENAX=$(srcdir)/gendepap.lsp
###################################################################
# 1. Initial dependencies connected to a given initlist.as.
###################################################################
# With the following stanzas initial dependencies will be generated
# from the file initlist.as.
#
# The file initlist.lst will look like:
## init_D1
## ...
## init_Dn
#
# At the same time for each domain Di a file gendeps/init_Di.dep is
# generated which contains the dependencies for Di. That file will
# look as follows.
## DEPi1
## ...
## DEPin_i
#
# Furthermore, for each Di a file init_ap/init_Di.ap that contains the
# ap form (parsed aldor source) of Di.
# These files are only a part of what will later be ap/init_Di.ap.
# (see Makefile2.in).
###################################################################
# Generate initlist.ap from initlist.as.
# initlist.as lists the initial type that are used to break
# a lot of big circular dependencies in the Axiom algebra library.
initlist.ap: initlist.as tmp/.dir
	$(ALDOR) -Fap=tmp/$@ $<
	sed -e 's/\([->A-Za-z0-9\\]\+\)/|\1|/g' tmp/$@ > $@


###################################################################
# Generate easlist.lsp. It is used internally in the
# 'print-dependencies' function in $(GENAX) and used in all
# the later calls of $(GENAX).
easylist.lsp: mkeasy.lsp initlist.ap tmp/.dir
	$(INTERPSYS) < $< > tmp/mkeasy.log
	test -f $@

mkeasy.lsp:
	echo ')lisp (load "$(GENAX)")' > $@
	echo ')lisp (generate-easy "easylist.lsp")' >> $@
	echo ')lisp (quit)' >> $@



###################################################################
# Generate (from initlist.ap) initlist.lst and initial files and
# dependencies in the init_ap and gendeps directories.
geninit_dirs = init_ap ap gendeps tmp
initlist.lst: mkinit.lsp easylist.lsp $(patsubst %,%/.dir,$(geninit_dirs))
	$(INTERPSYS) < $< > tmp/mkinit.log
	test -f $@

# here and in the following we use )lisp instead of )fin, because )fin
# does not work in ecl based FriCAS.
mkinit.lsp:
	echo ')lisp (load "$(GENAX)")' > $@
	echo ')lisp (generate-init "initlist.lst")' >> $@
	echo ')lisp (quit)' >> $@


###################################################################
# 2. Dependencies generated from the $(domains).
###################################################################
domain_dep_files = $(patsubst %,gendeps/%.dep,$(domains))
$(domain_dep_files): gendeps/%.dep: tmp/dep_%.lsp tmp/.dir initlist.lst
	$(INTERPSYS) < $< > tmp/dep_$*.log
	test -f $@

domain_lsp_files = $(patsubst %,tmp/dep_%.lsp,$(domains))
$(domain_lsp_files): tmp/dep_%.lsp: tmp/.dir gendeps/.dir
	echo ')lisp (load "$(GENAX)")' > $@
	echo ')lisp (generate-deps (quote ($*)))' >> $@
	echo ')lisp (quit)' >> $@

domaindepfiles: $(domain_dep_files)
	touch $@


###################################################################
# 3. Dependencies of a few aldor files given by $(aldor_srcs).
###################################################################
# The .as files in aldor subirectory are taken from the Aldor source.
ALDOR_top_srcdir=${fricas_top_srcdir}/src/aldor
ALDORBASICS=$(ALDOR_top_srcdir)/aldor
ALDORLANG=$(ALDOR_top_srcdir)/aldor
XCAT=cat

axiom.as axlit.as stub.as: %.as: $(ALDORBASICS)/%.as
	$(XCAT) $< > $@

axextend.as: $(ALDORBASICS)/axextend.as
	$(XCAT) $< | \
	sed -e '/^extend Matrix/ s/Ring/AbelianMonoid/' > $@

minimach.as: $(ALDORBASICS)/minimach.as
	$(XCAT) $< | \
	sed -e 's/^#.*//;s/Language;/AxiomLib;inline from AxiomLib;/' > $@

lang.as: $(ALDORLANG)/lang.as
	$(XCAT) $< > $@

subsetc.as: stub.as
	grep AxiomLib $< > $@
	tail -4 $< >> $@


aldor_lang       = lang
aldor_basics     = minimach boolean0
aldor_extensions = axextend axlit
# subsetc.as contains a definition for the SPAD builtin type
# SubsetCategory.
aldor_misc = subsetc
aldor_srcs = $(aldor_lang) $(aldor_basics) $(aldor_extensions) $(aldor_misc)

aldor_dep_files = $(patsubst %,gendeps/%.dep,$(aldor_srcs))
$(aldor_dep_files): gendeps/%.dep: tmp/dep_%.lsp initlist.lst gendeps/.dir
	echo 'Generating dependency of $*.'
	$(INTERPSYS) < $< > tmp/dep_$*.log
	test -f $@

aldor_lsp_files = $(patsubst %,tmp/dep_%.lsp,$(aldor_srcs))
$(aldor_lsp_files): tmp/dep_%.lsp: ap/%.ap tmp/.dir
	echo ')lisp (load "$(GENAX)")' > $@
	echo ')lisp (generate-deps-from-ap-files (quote (|$*|)))' >> $@
	echo ')lisp (quit)' >> $@

aldor_ap_files = $(patsubst %,ap/%.ap,$(aldor_srcs))
$(aldor_ap_files): ap/%.ap: %.as ap/.dir tmp/.dir
	$(ALDOR) -Fap=tmp/$*.ap $<
	sed -e 's/\([->A-Za-z0-9\\]\+\)/|\1|/g' tmp/$*.ap > $@

aldordepfiles: $(aldor_dep_files)
	touch $@


###################################################################
# Starting from the list initlist.lst, we create a file libaxiom.lst.
# That file contains pairs of the form
## keyword filename
# where keyword is one of "base", "initaxiom", "axiom", and "aldorext".
# libaxiom.lst is used for the computation of cliques in the
# axiom library, see program 'cliques'.
#
# Note that the function dep-type-or-nil in gendepap.lsp tests whether an
# identifier is indeed an Axiom type. Therefore, it is necessary to make
# attrib.as a dependency of every axiom clique.
libaxiom.lst: initlist.lst
	sed -e 's/^/initaxiom /' initlist.lst > $@
	for i in $(aldor_lang);       do echo "lang $$i"     >> $@; done
	for i in $(aldor_basics);     do echo "base $$i"     >> $@; done
	for i in $(aldor_misc);       do echo "base $$i"     >> $@; done
	for i in $(domains);          do echo "axiom $$i"    >> $@; done
	for i in $(aldor_extensions); do echo "aldorext $$i" >> $@; done


###################################################################
# The program 'cliques' computes cliques according to the dependencies from
# the gendeps directory. It writes a collection of Makefile variable
# assignments and Makefile targets to stdout.
CLIQUEOPTS=-mno-abbrev -mno-mactext -laldor -fx -c args=-lm
cliques: cliques.as
#	$(ALDOR) $(CLIQUEOPTS) $<
	$(ALDOR) $(CLIQUEOPTS) -dTRACE $<

cliques.mk: libaxiom.lst cliques domaindepfiles aldordepfiles
	./cliques libaxiom.lst > $@


###################################################################
# After we have generated cliques.mk, we can do the real work an start
# compilation of al/libaxiom.al.
al/libaxiom.al: cliques.mk al/.dir
	$(MAKE) -f Makefile2 aldor_srcs="$(aldor_srcs)" GENAX="$(GENAX)"


###################################################################
# Runtime - things required to run aldor files
runtimefiles: al/libaxiom.al
	$(MAKE) runtimelib

# The target 'runtimelib' is here as a direct entry point for cases
# where al/libaxiom.al is already assumed to be up-to-date.
runtimelib:
	$(MAKE) -f Makefile3 aldor_srcs="$(aldor_srcs)"


#
# :: Directories
#

###################################################################
# Creation of build subdirectories.
# TODO: Maybe that can be removed some day. There is no real need to create
# subdirectories.
%/.dir:
	${MKDIR_P} $(patsubst %/.dir,%,$@)
	touch -t 199901010000 $@

#
# :: Installation
#

.PHONY: install
###################################################################
# We need libaxiom.al and the .o (runtime support) files in the lib
# subdirectory.
install: install-libalgebra install-runtimefiles

# Destination directory for the algebra files and aldor libraries.
install_target_dir = $(DESTDIR)$(libdir)/fricas/target/$(target)
install_algebra_dir = $(install_target_dir)/algebra
install-libalgebra:
	$(INSTALL_DATA) al/libaxiom.al $(install_algebra_dir)
	$(INSTALL_DATA) axiom.as $(install_algebra_dir)

# runtime_files should be the same as in Makefile3.in
runtime_files = $(patsubst %,lib/%.$(FASLEXT), runtime $(aldor_srcs))
install_aldor_dir = $(install_target_dir)/aldor
install-runtimefiles: installdir-runtimefiles
	for f in $(runtime_files); do \
	  $(INSTALL_DATA) $$f '$(install_aldor_dir)/lib'; \
	done

installdir-runtimefiles:
	$(mkinstalldirs) '$(install_aldor_dir)/lib'
## ---------------------------------------
## -- Standard boilerplate dependencies --
## ---------------------------------------

# Recursive rules, usually automatically generated by Automake.
# Since we do not use (yet) Automake, we mimic the behaviour as
# close as possible.
# Recursive wall of sub-directories is based on the variable
# SUBDIRS.  That variable usually contains the of sub-directories
# to be made in depth-first postfix.  However, that order can
# be changed to depth-first prefix by explicitly including "."
# in SUBDIRS.  Rules ending with '-ax' are those specific to the
# the current directory.  Notice that the '-ax' rules are similar
# to Automake generated '-am'.
.PHONY: $(RECURSIVE_TARGETS)
$(RECURSIVE_TARGETS):
	failcmd='exit 1'; \
	for f in $$MAKEFLAGS; do \
	   case $$f in \
	      *=* | --[!k]*) ;; \
	      *k*) failcmd='fail=yes';; \
	   esac; \
	done; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; list='$(SUBDIRS)'; \
	for subdir in $$list; do \
	   echo "Making $$target in $$subdir"; \
	   if test "$$subdir" = "."; then \
	      dot_seen=yes; \
	      local_target="$$target-ax"; \
	   else \
	      local_target="$$target"; \
	   fi; \
	   (cd $$subdir && $(MAKE) $$local_target) || eval $$failcmd; \
	done; \
	if test "$$dot_seen" = "no"; then \
	   $(MAKE) "$$target-ax" || exit 1; \
	fi; test -z "$$fail"

# Recursive cleanup is done in reverse, postfix order of ordinary build.
.PHONY: mostlyclean-recursive
.PHONY: clean-recursive
.PHONY: distclean-recursive
.PHONY: maintainer-clean-recursive
mostlyclean-recursive clean-recursive distclean-recursive \
maintainer-clean-recursive:
	@failcmd='exit 1'; \
	for f in $$MAKEFLAGS; do \
	   case $$f in \
	      *=* | --[!k]*) ;; \
	      *k*) failcmd='fail=yes';; \
	   esac; \
	done; \
	dot_seen=no; \
	list='$(SUBDIRS)' ; \
	rev=''; \
	for subdir in $$list; do \
	   if test "$$subdir" != "."; then \
	      rev="$$subdir $$rev"; \
	   fi; \
	done; \
	rev="$$rev ."; \
	target=`echo $@ | sed s/-recursive//`; \
	for subdir in $$rev; do \
	   echo "Making $$target in $$subdir"; \
	   if test "$$subdir" = "."; then \
	      local_target="$$target-ax"; \
	   else \
	      local_target="$$target"; \
	   fi; \
	   (cd $$subdir && $(MAKE) $$local_target) || eval $$failcmd; \
	done && test -z "$$fail"

## Rules to make DVI files from pamphlets

.PRECIOUS: %.tex
.PRECIOUS: %.dvi

.PHONY: dvi
dvi: dvi-recursive

$(top_srcdir)/configure: $(top_srcdir)/configure.ac \
			 $(top_srcdir)/config/fricas.m4
	cd $(top_srcdir) && $(AUTOCONF)


.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_srcdir)/config/var-def.mk \
	  $(top_srcdir)/config/setup-dep.mk \
	  $(abs_top_builddir)/config.status
	cd $(abs_top_builddir) && $(SHELL) ./config.status $(subdir)$@

## Cleanup.
##   Each Makefile is responsible of defining targets named
##   mostlyclean-local, clean-local, and distclean-local.
.PHONY: mostlyclean-generic mostlyclean-local mostlyclean mostlyclean-ax
mostlyclean-generic:
	-rm -f *~
	-rm -f *.log *.aux *.toc

mostlyclean: mostlyclean-recursive
mostlyclean-ax: mostlyclean-generic mostlyclean-local

.PHONY: clean-generic clean-local clean clean-ax
clean-generic: mostlyclean-generic
	-rm -f *.dvi

clean: clean-recursive
clean-ax: clean-generic clean-local

.PHONY: distclean-generic distclean-local distclean distclean-ax
distclean-generic: clean-generic
	-rm -rf $(fricas_target_docdir)/$(subdir)

distclean: distclean-recursive
	-rm Makefile

distclean-ax: distclean-generic distclean-local
