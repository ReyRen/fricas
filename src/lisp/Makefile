## ---------------------------------
## -- Standard Autoconf variables --
## ---------------------------------

SHELL = /bin/bash

prefix = /usr/local
exec_prefix = ${prefix}

bindir = ${exec_prefix}/bin
# sbindir = ${exec_prefix}/sbin
# libexecdir = ${exec_prefix}/libexec
# datarootdir = ${prefix}/share
# datadir = ${datarootdir}
# sysconfdir = ${prefix}/etc
# sharedstatedir = ${prefix}/com
# localstatedir = ${prefix}/var
# includedir = ${prefix}/include
# oldincludedir = /usr/include
# docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
# infodir = ${datarootdir}/info
# htmldir = ${docdir}
# dvidir = ${docdir}
# pdfdir = ${docdir}
# psdir = ${docdir}
libdir = ${exec_prefix}/lib
# lispdir = @lispdir@
# localedir = ${datarootdir}/locale


host = x86_64-linux-gnu
host_alias = 
build = x86_64-linux-gnu
build_alias = 
target = x86_64-linux-gnu
target_alias = 

srcdir = .
abs_srcdir = /git/fricas/src/lisp
top_srcdir = ../..
abs_top_srcdir = /git/fricas

# Notice that there is a bug in Autoconf 2.59 whereby the variable
# top_builddir is not defined.  So avoid to use it directly.  Use
# abs_top_builddir.
builddir = .
abs_builddir = /git/fricas/src/lisp
top_builddir = ../..
abs_top_builddir = /git/fricas
datadir = ${datarootdir}


AR = ar
CC = gcc
CFLAGS = -g -O2
OBJEXT = o
EXEEXT = 

AUTOCONF = autoconf
AWK = gawk
TARGET_AWK = /usr/bin/gawk
INSTALL = /usr/bin/install -c
install_sh = @install_sh@
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_script = $(install_sh) -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
## FIXME:  The test done with Autoconf-2.60 and later concludes
##         that "ln -s" is unusable on msys, and therefore defaults to
##         "cp -p", but that default is unusable for us.  For our
##         purpose "ln -s" is just fine on that platform.  Consequently
##         we are explicitly overrding that value here.
LN_S = ln -s
mkinstalldirs = $(top_srcdir)/config/mkinstalldirs
PATCH = @PATCH@
RANLIB = ranlib
TAR = tar
TOUCH = touch

# The list of make targets made recursively, by walking sub-directories
# Normally, this is a template generated by Automake, but we don't
# use Automake yet; so, we must do it the hard way.
# See the corresponding rules in setup-dep.mk
RECURSIVE_TARGETS = all-recursive check-recursive dvi-recursive \
		html-recursive info-recursive install-data-recursive \
		install-exec-recursive install-info-recursive \
		install-recursive installcheck-recursive \
		installdirs-recursive pdf-recursive ps-recursive \
		uninstall-info-recursive uninstall-recursive


## Normally, Automake will substitute the value for this variable.
## But, we don't have Automake yet.  So we punt on it.
MKDIR_P = mkdir -p

STAMP = echo timestamp >

## ---------------------
## -- Axiom variables --
## ---------------------

## Absolute path to the toplevel source directory for Axiom.  This is
## almost like Autoconf-standard abs_top_srcdir except that, it retains
## the same syntactic values in subdirectories.

## Where The Axiom distribution main source files are kept.
## Notice, this is the src/ directory within the toplevel source
## directory

fricas_top_srcdir = /git/fricas

fricas_src_srcdir = $(fricas_top_srcdir)/src
fricas_src_datadir = $(fricas_src_srcdir)/share
fricas_src_algdir = $(fricas_src_srcdir)/algebra

## Where tools for the build machine are built
fricas_builddir = /git/fricas/build/x86_64-linux-gnu
fricas_build_bindir = /git/fricas/build/x86_64-linux-gnu/bin
fricas_build_libdir = $(fricas_builddir)/lib
fricas_build_mandir = $(fricas_builddir)/man

fricas_configdir = $(abs_top_builddir)/config
fricas_c_macros = $(fricas_configdir)/fricas_c_macros.h

LATEX = /usr/bin/latex

## Staging directory for the target DESTDIR
fricas_targetdir = /git/fricas/target/x86_64-linux-gnu
fricas_target_bindir = $(fricas_targetdir)/bin
fricas_target_libdir = $(fricas_targetdir)/lib
fricas_target_srcdir = $(fricas_targetdir)/src
fricas_target_docdir = $(fricas_targetdir)/doc
fricas_target_datadir = $(fricas_targetdir)/share
fricas_target_texdir = $(fricas_target_datadir)/texmf/tex


FRICAS_X11_CFLAGS = 
FRICAS_X11_LDFLAGS =  -lXpm  -lSM -lICE -lX11 

fricas_includes = -I$(fricas_src_srcdir)/include -I$(fricas_configdir)

fricas_build_helper = $(abs_top_srcdir)/src/scripts/build_helper

## Where the staging build directory is found
AXIOM = /git/fricas/target/x86_64-linux-gnu
export AXIOM
BASE = 
export BASE

TMP=$(fricas_builddir)

## Old Axiom ENV variables

VERSION = FriCAS 2018-03-10

CCF=-O2 -Wall -D_GNU_SOURCE
LDF=-g

## -------------------------------------------
## -- Files generated for the build machine --
## -------------------------------------------
unpack_file = $(fricas_src_srcdir)/scripts/unpack_file

FRICAS_LISP = /usr/local/bin/sbcl
# Extension of the output file name returned by compile-file
LISPOBJEXT = fasl
FASLEXT = fasl


##

##
AXIOMXLROOT=${AXIOM}/compiler

## GCL command to end a session.
BYE=quit

## Clear suffix-based implicit rule table.
.SUFFIXES:

PREGENERATED=
PACKAGE_VERSION = 2018-03-10
PACKAGE_TARNAME = fricas
# The purpose of this Makefile is to create a fresh Lisp image,
# $(OUT)/lisp, augmented with a useful routines defined in
# fricas-lisp file.  This effectively creates our own dialect
# of Lisp, which is used during the rest of build process

fricas_quiet_flags = --noinform --noprint --no-sysinit --no-userinit
lisp_flavor=sbcl
fricas_gcl_rsym_hack = :
fricas_c_runtime_extra =  -lutil
fricas_algebra_optimization = nil
fricas_has_directory_operations = yes
GMP_WRAP_SO_TARGET = 
GMP_LIBDIR = 
GMP_EXT = so
LISP_CMD = $(FRICAS_LISP) $(fricas_quiet_flags)

## Create a fresh image for building interpsys and AXIOMsys
OUT = $(fricas_build_bindir)

subdir = src/lisp/

build_libdir = $(abs_top_builddir)/src/lib

lisp_DEPENDENCIES = $(build_libdir)/cfuns-c.o \
		    $(build_libdir)/sockio-c.o \
		    $(build_libdir)/libspad.a

ifeq ($(lisp_flavor),sbcl)
NUM_GMP = num_gmpx.lisp
else
ifeq ($(lisp_flavor),openmcl)
NUM_GMP = num_gmpx.lisp
else
NUM_GMP =
endif
endif

.PHONY: all all-lisp
all: all-ax all-lisp

all-ax all-lisp: $(OUT)/lisp$(EXEEXT)

## Create a fresh image for building interpsys and AXIOMsys
## These objects files are the C runtime support
## and must be compiled into the Lisp image,
## as they must be present in the final interpreter
## and image.
## Use $(BASE) because Lisp (gcl) is native on Windows
lisp_c_objects = \
		$(BASE)$(build_libdir)/bsdsignal.o \
		$(BASE)$(build_libdir)/cfuns-c.o \
		$(BASE)$(build_libdir)/sockio-c.o

$(OUT)/lisp$(EXEEXT): do_it.$(lisp_flavor)

do_it.gcl: fricas-lisp.lisp fricas-package.lisp fricas-config.lisp \
           primitives.lisp
	$(fricas_gcl_rsym_hack)
	echo '(load "fricas-package.lisp") (load "fricas-config.lisp")' \
	     '(load "fricas-lisp.lisp")' \
	     '(setq compiler::*default-system-p* t)' \
	     '(compile-file "fricas-lisp.lisp")' \
             '(compile-file "primitives.lisp")' | $(FRICAS_LISP)
	echo '(compiler::link nil "prelisp" ' \
              ' (format nil "(progn (let ((*load-path* (cons ~S *load-path*))'\
                                        ' (si::*load-types* ~S))' \
                                       ' (compiler::emit-fn t))' \
                                  ' (when (fboundp (quote si::sgc-on))' \
                                        ' (si::sgc-on nil))' \
                                  ' (setq compiler::*default-system-p* t))"' \
                      ' si::*system-directory* (quote (list ".lsp")))' \
               '  "$(lisp_c_objects) $(fricas_c_runtime_extra)")' \
            | $(FRICAS_LISP)
	echo '(load "fricas-package.lisp") (load "fricas-config.lisp")' \
	     '(load "fricas-lisp.$(OBJEXT)")' '(load "primitives.$(OBJEXT)")' \
	     '(in-package "FRICAS-LISP") (save-core "$(OUT)/lisp$(EXEEXT)")' \
	    | ./prelisp$(EXEEXT)
	$(STAMP) $@

fricas-lisp.lisp: $(srcdir)/fricas-lisp.lisp
	cp $< $@

fricas-package.lisp: $(srcdir)/fricas-package.lisp
	cp $< $@

primitives.lisp : $(srcdir)/primitives.lisp
	cp $< $@

num_gmpx.lisp: $(srcdir)/num_gmp.lisp
	if [ x$(GMP_WRAP_SO_TARGET) != x ] ; then \
	    sed -e "s|libgmp.so|$(GMP_LIBDIR)libgmp.$(GMP_EXT)|" $< > $@ ; \
	else \
	    (echo '(in-package "FRICAS-LISP")' ; \
	     echo '(defun init-gmp(x) nil)' ; \
	     echo '(defun unistall-gmp-multiplication() nil)') > $@ ; \
	fi

fricas-config.lisp:
	echo '(in-package "FRICAS-LISP")' > $@
	echo '(defparameter algebra-optimization' \
	     '(quote $(fricas_algebra_optimization)))' >> $@
	if [ x$(fricas_has_directory_operations) = xyes ] ; then \
	    echo '(if (not (member :fricas_has_remove_directory' \
                          ' *features*)) ' \
	             '(push :fricas_has_remove_directory *features*))' \
	       >> $@ ; \
	fi

do_it.ecl: fricas-lisp.lisp fricas-package.lisp fricas-config.lisp \
           primitives.lisp
	echo "(in-package \"FRICAS-LISP\")" > fricas-ecl.lisp
	echo "(defvar *fricas-extra-c-files* (quote (" \
	     $(patsubst %, "\"%\"", $(lisp_c_objects)) \
	     ")))" >> fricas-ecl.lisp
	echo "(defvar *fricas-initial-lisp-objects* (quote (" \
	      $(patsubst %, "\"$(BASE)$(abs_builddir)/%\"", \
	          fricas-package.o fricas-config.o fricas-ecl.o \
		  fricas-lisp.o primitives.o) ")))" \
	            >> fricas-ecl.lisp
	echo "(defvar *fricas-initial-lisp-forms* nil)" >> fricas-ecl.lisp
	echo '(load "fricas-package.lisp")' \
	     '(load "fricas-config.lisp")' \
	     '(load "fricas-ecl.lisp")' \
	     '(load "fricas-lisp.lisp")' \
	     '(in-package "FRICAS-LISP")' \
	     '(fricas_compile_file "fricas-package.lisp"' \
                              ' "fricas-package.$(LISPOBJEXT)")' \
	     '(fricas_compile_file "fricas-config.lisp"' \
                              ' "fricas-config.$(LISPOBJEXT)")' \
	     '(fricas_compile_file "fricas-ecl.lisp"' \
                              ' "fricas-ecl.$(LISPOBJEXT)")' \
	     '(fricas_compile_file "fricas-lisp.lisp"' \
                              ' "fricas-lisp.$(LISPOBJEXT)")' \
	     '(fricas_compile_file "primitives.lisp"' \
                              ' "primitives.$(LISPOBJEXT)")' \
	     '(make-program "${OUT}/lisp$(EXEEXT)" nil)' | $(FRICAS_LISP)
	$(STAMP) $@

do_it.sbcl do_it.clisp do_it.openmcl do_it.lispworks: \
   fricas-lisp.lisp fricas-package.lisp fricas-config.lisp $(NUM_GMP) \
   primitives.lisp
	echo '(load "fricas-package.lisp")' \
	    '(load "fricas-config.lisp")' \
            '#+(or :sbcl :openmcl) (load (compile-file "num_gmpx.lisp"))' \
	    '(load (compile-file "fricas-lisp.lisp"))' \
	    '(load (compile-file "primitives.lisp"))' \
            '(in-package "FRICAS-LISP") (save-core "${OUT}/lisp$(EXEEXT)")' \
         | $(LISP_CMD)
	 $(STAMP) $@

do_it.cmucl: fricas-lisp.lisp fricas-package.lisp \
           fricas-config.lisp primitives.lisp
	echo '(load "fricas-package.lisp")' \
	    '(load "fricas-config.lisp")' \
	    '(setf (ext:search-list "libspad:")' \
	    '(quote ("${fricas_target_libdir}/")))' \
	    '(ext:load-foreign "libspad:libspad.so")' \
	    '(load (compile-file "fricas-lisp.lisp"))' \
	    '(load (compile-file "primitives.lisp"))' \
	    '(defswitch "-")' \
            '(in-package "FRICAS-LISP") (save-core "${OUT}/lisp$(EXEEXT)")' \
         | $(FRICAS_LISP)
	 $(STAMP) $@

# Build GCL takes quite a while, so we don't clean the
# directory in mostlyclean.  Rather, we do that in clean.
mostlyclean-local:

clean-local: mostlyclean
	-rm -f $(OUT)/lisp$(EXEEXT) prelisp$(EXEEXT) do_it.$(lisp_flavor)
	-rm -f *.$(LISPOBJEXT) fricas-ecl.lisp fricas-config.lisp $(NUM_GMP)
	-rm -f *.fn *.data *.lib

distclean-local: clean-local
	-rm -f Makefile
## ---------------------------------------
## -- Standard boilerplate dependencies --
## ---------------------------------------

# Recursive rules, usually automatically generated by Automake.
# Since we do not use (yet) Automake, we mimic the behaviour as
# close as possible.
# Recursive wall of sub-directories is based on the variable
# SUBDIRS.  That variable usually contains the of sub-directories
# to be made in depth-first postfix.  However, that order can
# be changed to depth-first prefix by explicitly including "."
# in SUBDIRS.  Rules ending with '-ax' are those specific to the
# the current directory.  Notice that the '-ax' rules are similar
# to Automake generated '-am'.
.PHONY: $(RECURSIVE_TARGETS)
$(RECURSIVE_TARGETS):
	failcmd='exit 1'; \
	for f in $$MAKEFLAGS; do \
	   case $$f in \
	      *=* | --[!k]*) ;; \
	      *k*) failcmd='fail=yes';; \
	   esac; \
	done; \
	dot_seen=no; \
	target=`echo $@ | sed s/-recursive//`; list='$(SUBDIRS)'; \
	for subdir in $$list; do \
	   echo "Making $$target in $$subdir"; \
	   if test "$$subdir" = "."; then \
	      dot_seen=yes; \
	      local_target="$$target-ax"; \
	   else \
	      local_target="$$target"; \
	   fi; \
	   (cd $$subdir && $(MAKE) $$local_target) || eval $$failcmd; \
	done; \
	if test "$$dot_seen" = "no"; then \
	   $(MAKE) "$$target-ax" || exit 1; \
	fi; test -z "$$fail"

# Recursive cleanup is done in reverse, postfix order of ordinary build.
.PHONY: mostlyclean-recursive
.PHONY: clean-recursive
.PHONY: distclean-recursive
.PHONY: maintainer-clean-recursive
mostlyclean-recursive clean-recursive distclean-recursive \
maintainer-clean-recursive:
	@failcmd='exit 1'; \
	for f in $$MAKEFLAGS; do \
	   case $$f in \
	      *=* | --[!k]*) ;; \
	      *k*) failcmd='fail=yes';; \
	   esac; \
	done; \
	dot_seen=no; \
	list='$(SUBDIRS)' ; \
	rev=''; \
	for subdir in $$list; do \
	   if test "$$subdir" != "."; then \
	      rev="$$subdir $$rev"; \
	   fi; \
	done; \
	rev="$$rev ."; \
	target=`echo $@ | sed s/-recursive//`; \
	for subdir in $$rev; do \
	   echo "Making $$target in $$subdir"; \
	   if test "$$subdir" = "."; then \
	      local_target="$$target-ax"; \
	   else \
	      local_target="$$target"; \
	   fi; \
	   (cd $$subdir && $(MAKE) $$local_target) || eval $$failcmd; \
	done && test -z "$$fail"

## Rules to make DVI files from pamphlets

.PRECIOUS: %.tex
.PRECIOUS: %.dvi

.PHONY: dvi
dvi: dvi-recursive

$(top_srcdir)/configure: $(top_srcdir)/configure.ac \
			 $(top_srcdir)/config/fricas.m4
	cd $(top_srcdir) && $(AUTOCONF)


.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_srcdir)/config/var-def.mk \
	  $(top_srcdir)/config/setup-dep.mk \
	  $(abs_top_builddir)/config.status
	cd $(abs_top_builddir) && $(SHELL) ./config.status $(subdir)$@

## Cleanup.
##   Each Makefile is responsible of defining targets named
##   mostlyclean-local, clean-local, and distclean-local.
.PHONY: mostlyclean-generic mostlyclean-local mostlyclean mostlyclean-ax
mostlyclean-generic:
	-rm -f *~
	-rm -f *.log *.aux *.toc

mostlyclean: mostlyclean-recursive
mostlyclean-ax: mostlyclean-generic mostlyclean-local

.PHONY: clean-generic clean-local clean clean-ax
clean-generic: mostlyclean-generic
	-rm -f *.dvi

clean: clean-recursive
clean-ax: clean-generic clean-local

.PHONY: distclean-generic distclean-local distclean distclean-ax
distclean-generic: clean-generic
	-rm -rf $(fricas_target_docdir)/$(subdir)

distclean: distclean-recursive
	-rm Makefile

distclean-ax: distclean-generic distclean-local
