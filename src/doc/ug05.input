
-- Input for page ugLangLoopsWhilePage
)clear all

i := 1
while i < 1 repeat
  output "hello"
  i := i + 1

(x, y) := (1, 1)
while x < 4 and y < 10 repeat
  output [x,y]
  x := x + 1
  y := y + 2

(x, y) := (1, 1)
while x < 4 while y < 10 repeat
  if x + y > 7 then break
  output [x,y]
  x := x + 1
  y := y + 2

m := matrix [[21,37,53,14], [8,-24,22,-16], [2,10,15,14], [26,33,55,-13]]
r := 1
(lastrow, lastcol) := (nrows(m), ncols(m))
while r <= lastrow repeat
  c := 1  -- index of first column
  while c <= lastcol repeat
    if elt(m,r,c) < 0 then
      output [r, c, elt(m,r,c)]
      r := lastrow
      break     -- don't look any further
    c := c + 1
  r := r + 1


-- Input for page ugLangLoopsForInNPage
)clear all

for i in 15.. while not prime?(i) repeat output(i)

-- Input for page ugLangLoopsForInNMPage
)clear all

for i in 10..12 repeat output(i^3)
a := [1,2,3]
for i in 1..#a repeat output(a.i)
m := matrix [[1,2],[4,3],[9,0]]
for i in 1..nrows(m) repeat output row(m,i)
for i in 1..5 repeat
  if odd?(i) then iterate
  output(i)


-- Input for page ugLangLoopsReturnPage
)clear all

f() ==
  i := 1
  repeat
    if factorial(i) > 1000 then return i
    i := i + 1

f()
f() ==
  i := 1
  repeat
    if factorial(i) > 1000 then return i
    i := i + 1
  0

f()

-- Input for page ugLangLoopsForInXLPage
)clear all

l := [0,-5,3]
for x in l repeat output(x)
for f in factors(factor(2400000)) repeat output(f)

-- Input for page ugLangIfPage
)clear all

x + 1 = y

-- Input for page ugLangLoopsBreakVsPage
)clear all


-- Input for page ugLangLoopsCompIntPage
)clear all


-- Input for page ugLangLoopsForInNMSPage
)clear all

for i in 1..5 by 2 repeat output(i)
for i in 5..1 by -2 repeat output(i)

-- Input for page ugLangLoopsIteratePage
)clear all

i := 0
repeat
  i := i + 1
  if i > 5 then break
  if odd?(i) then iterate
  output(i)


-- Input for page ugLangItsPage
)clear all

mylist := [i for i in 1..10]
mystream := [i for i in 1..]
[i for i in 1..10 | prime? i]
[i for i in 1.. | prime? i]
[i for i in 1..10 while i*i < 700]
[i for i in 1.. while i*i < 700]
matrix [[x^i+j for i in 1..3] for j in 10..12]
[[i/j for i in j+1..] for j in 1..]
[i/j for i in 3.. by 10 for j in 2..]
[i^j for i in 1..7 for j in 2.. ]
[[[i,j] for i in 10..15 | prime? i] for j in 17..22 | j = squareFreePart j]

-- Input for page ugLangStreamsPrimesPage
)clear all

primes : Stream Integer := [i for i in 2.. | prime? i]
primes := stream(nextPrime,2)
smallPrimes := [p for p in primes | p > 1000]
[p for p in smallPrimes for i in 1..11]
[p for p in smallPrimes while p < 1200]
complete %
twinPrimes := [[p,p+2] for p in primes | prime?(p + 2)]
firstOfTwins:= [p for p in primes for q in rest primes | q=p+2]
firstTriplets := [p for p in firstOfTwins for q in rest firstOfTwins | q = p+2];
firstTriplets.1
primes.2045

-- Input for page ugLangLoopsForInPredPage
)clear all

for n in 0..4 | odd? n repeat output n
for i in 1..50 repeat
  for j in 1..50 | factorial(i+j) < 25 repeat
    output [i,j]


-- Input for page ugLangLoopsBreakMorePage
)clear all

i := 0
repeat
  i := i + 1
  if i^2 > 100 then break

i
i := 0
repeat
  i := i + 1
  i^2 > 100 => break

i
(n, i, f) := (100, 1, 1)
repeat
  if i > n then break
  f := f * i
  i := i + 1

f
m := matrix [[21,37,53,14], [8,-24,22,-16], [2,10,15,14], [26,33,55,-13]]
(r, c) := (1, 1)
(lastrow, lastcol) := (nrows(m), ncols(m))
repeat
  if r > lastrow then break
  c := 1
  repeat
    if c > lastcol then break
    if elt(m,r,c) < 0 then
      output [r, c, elt(m,r,c)]
      r := lastrow
      break     -- don't look any further
    c := c + 1
  r := r + 1


-- Input for page ugLangLoopsPage
)clear all


-- Input for page ugLangBlocksPage
)clear all

a :=
  i := gcd(234,672)
  i := 3*i^5 - i + 1
  1 / i

a := (i := gcd(234,672); i := 3*i^5 - i + 1; 1 / i)
(a := 1; b := 2; c := 3; [a,b,c])
d :=
   c := a^2 + b^2
   sqrt(c * 1.3)

h := 2.1 +
   1.0
   3.5

eval(x^2 - x*y^2,
     z := %pi/2.0 - exp(4.1)
     x = z
   )

if h > 3.1 then 1.0 else (z := cos(h); max(z,0.5))
if h > 3.1 then
    1.0
  else
    z := cos(h)
    max(z,0.5)

a := (b := factorial(12); c := (d := eulerPhi(22); factorial(d));b+c)
a :=
  b := factorial(12)
  c :=
    d := eulerPhi(22)
    factorial(d)
  b+c

a :=
  c := factorial 10
  d := fibonacci 10
  c + d = 3628855 => c
  d


-- Input for page ugLangAssignPage
)clear all

a := 1
b := a
a := 2
b
a == 1
b == a
a
b
a == 2
a
b
(x,y) := (1,2)
(x,y) := (y,x)
x
y

-- Input for page ugLangLoopsParPage
)clear all

l := [1,3,5,7]
m := [100,200]
sum := 0
for x in l for y in m repeat
    sum := sum + x*y

sum
l := [2,3,5,7,11,13,17,19,23,29,31,37]
sum := 0
for i in 0.. for x in l repeat sum := i * x
sum
for i in 1..10
    for j in 151..160 | odd? j
      while i + j < 160 repeat
        output [i,j]


-- Input for page ugLangPage
)clear all


-- Input for page ugLangLoopsForInPage
)clear all


-- Input for page ugLangLoopsBreakPage
)clear all

f() ==
  i := 1
  repeat
    if factorial(i) > 1000 then break
    i := i + 1
  i

f()
(i,j) := (1, 1)
repeat
  repeat
    if (i + j) > 10 then break
    j := j + 1
  if (i + j) > 10 then break
  i := i + 1

