6174                (MAKEPROP '|Character| 'NILADIC T)
(|Character|)
|domain|
(((|Character|)
  (|Join| (|OrderedFinite|)
          (CATEGORY |domain| (SIGNATURE |ord| ((|Integer|) $))
           (SIGNATURE |char| ($ (|Integer|))) (SIGNATURE |char| ($ (|String|)))
           (SIGNATURE |space| ($)) (SIGNATURE |quote| ($))
           (SIGNATURE |escape| ($)) (SIGNATURE |newline| ($))
           (SIGNATURE |upperCase| ($ $)) (SIGNATURE |lowerCase| ($ $))
           (SIGNATURE |digit?| ((|Boolean|) $))
           (SIGNATURE |hexDigit?| ((|Boolean|) $))
           (SIGNATURE |alphabetic?| ((|Boolean|) $))
           (SIGNATURE |upperCase?| ((|Boolean|) $))
           (SIGNATURE |lowerCase?| ((|Boolean|) $))
           (SIGNATURE |alphanumeric?| ((|Boolean|) $)))))
 (T |Character|))
(|Join| (|OrderedFinite|)
        (CATEGORY |domain| (SIGNATURE |ord| ((|Integer|) $))
         (SIGNATURE |char| ($ (|Integer|))) (SIGNATURE |char| ($ (|String|)))
         (SIGNATURE |space| ($)) (SIGNATURE |quote| ($))
         (SIGNATURE |escape| ($)) (SIGNATURE |newline| ($))
         (SIGNATURE |upperCase| ($ $)) (SIGNATURE |lowerCase| ($ $))
         (SIGNATURE |digit?| ((|Boolean|) $))
         (SIGNATURE |hexDigit?| ((|Boolean|) $))
         (SIGNATURE |alphabetic?| ((|Boolean|) $))
         (SIGNATURE |upperCase?| ((|Boolean|) $))
         (SIGNATURE |lowerCase?| ((|Boolean|) $))
         (SIGNATURE |alphanumeric?| ((|Boolean|) $))))
"/git/fricas/src/algebra/CHAR.spad"
((|ord| (*1 *2 *1)
  (AND (|isDomain| *2 (|Integer|)) (|isDomain| *1 (|Character|))))
 (|char| (*1 *1 *2)
         (AND (|isDomain| *2 (|Integer|)) (|isDomain| *1 (|Character|))))
 (|char| (*1 *1 *2)
         (AND (|isDomain| *2 (|String|)) (|isDomain| *1 (|Character|))))
 (|space| (*1 *1) (|isDomain| *1 (|Character|)))
 (|quote| (*1 *1) (|isDomain| *1 (|Character|)))
 (|escape| (*1 *1) (|isDomain| *1 (|Character|)))
 (|newline| (*1 *1) (|isDomain| *1 (|Character|)))
 (|upperCase| (*1 *1 *1) (|isDomain| *1 (|Character|)))
 (|lowerCase| (*1 *1 *1) (|isDomain| *1 (|Character|)))
 (|digit?| (*1 *2 *1)
           (AND (|isDomain| *2 (|Boolean|)) (|isDomain| *1 (|Character|))))
 (|hexDigit?| (*1 *2 *1)
  (AND (|isDomain| *2 (|Boolean|)) (|isDomain| *1 (|Character|))))
 (|alphabetic?| (*1 *2 *1)
  (AND (|isDomain| *2 (|Boolean|)) (|isDomain| *1 (|Character|))))
 (|upperCase?| (*1 *2 *1)
  (AND (|isDomain| *2 (|Boolean|)) (|isDomain| *1 (|Character|))))
 (|lowerCase?| (*1 *2 *1)
  (AND (|isDomain| *2 (|Boolean|)) (|isDomain| *1 (|Character|))))
 (|alphanumeric?| (*1 *2 *1)
  (AND (|isDomain| *2 (|Boolean|)) (|isDomain| *1 (|Character|)))))
((~= (((|Boolean|) $ $) NIL)) (|upperCase?| (((|Boolean|) $) 34))
 (|upperCase| (($ $) 44)) (|space| (($) 20))
 (|smaller?| (((|Boolean|) $ $) NIL)) (|size| (((|NonNegativeInteger|)) 11))
 (|random| (($) 19)) (|quote| (($) 21)) (|ord| (((|Integer|) $) 16))
 (|newline| (($) 23)) (|min| (($ $ $) NIL)) (|max| (($ $ $) NIL))
 (|lowerCase?| (((|Boolean|) $) 36)) (|lowerCase| (($ $) 45))
 (|lookup| (((|PositiveInteger|) $) 17)) (|latex| (((|String|) $) 42))
 (|index| (($ (|PositiveInteger|)) 15)) (|hexDigit?| (((|Boolean|) $) 32))
 (|hashUpdate!| (((|HashState|) (|HashState|) $) 47))
 (|hash| (((|SingleInteger|) $) NIL)) (|escape| (($) 22))
 (|enumerate| (((|List| $)) NIL)) (|digit?| (((|Boolean|) $) 30))
 (|convert| (((|InputForm|) $) NIL)) (|coerce| (((|OutputForm|) $) 25))
 (|char| (($ (|Integer|)) 13) (($ (|String|)) 43))
 (|alphanumeric?| (((|Boolean|) $) 40)) (|alphabetic?| (((|Boolean|) $) 38))
 (>= (((|Boolean|) $ $) NIL)) (> (((|Boolean|) $ $) NIL))
 (= (((|Boolean|) $ $) 8)) (<= (((|Boolean|) $ $) NIL))
 (< (((|Boolean|) $ $) 9)))
CHAR
(((|OrderedFinite|) . T))
(((|BasicType|) . T) ((|CoercibleTo| (|OutputForm|)) . T) ((|Comparable|) . T)
 ((|ConvertibleTo| (|InputForm|)) . T) ((|Finite|) . T) ((|OrderedFinite|) . T)
 ((|OrderedSet|) . T) ((|PartialOrder|) . T) ((|SetCategory|) . T))
((|constructor| (NIL "This domain provides the basic character data type."))
 (|alphanumeric?|
  (((|Boolean|) $)
   "\\spad{alphanumeric?(c)} tests if \\spad{c} is either a letter or number,{} \\spadignore{i.e.} one of 0..9,{} a..\\spad{z} or A..\\spad{Z}."))
 (|lowerCase?|
  (((|Boolean|) $)
   "\\spad{lowerCase?(c)} tests if \\spad{c} is an lower case letter,{} \\spadignore{i.e.} one of a..\\spad{z}."))
 (|upperCase?|
  (((|Boolean|) $)
   "\\spad{upperCase?(c)} tests if \\spad{c} is an upper case letter,{} \\spadignore{i.e.} one of A..\\spad{Z}."))
 (|alphabetic?|
  (((|Boolean|) $)
   "\\spad{alphabetic?(c)} tests if \\spad{c} is a letter,{} \\spadignore{i.e.} one of a..\\spad{z} or A..\\spad{Z}."))
 (|hexDigit?|
  (((|Boolean|) $)
   "\\spad{hexDigit?(c)} tests if \\spad{c} is a hexadecimal numeral,{} \\spadignore{i.e.} one of 0..9,{} a..\\spad{f} or A..\\spad{F}."))
 (|digit?|
  (((|Boolean|) $)
   "\\spad{digit?(c)} tests if \\spad{c} is a digit character,{} \\spadignore{i.e.} one of 0..9."))
 (|lowerCase|
  (($ $)
   "\\spad{lowerCase(c)} converts an upper case letter to the corresponding lower case letter. If \\spad{c} is not an upper case letter,{} then it is returned unchanged."))
 (|upperCase|
  (($ $)
   "\\spad{upperCase(c)} converts a lower case letter to the corresponding upper case letter. If \\spad{c} is not a lower case letter,{} then it is returned unchanged."))
 (|newline| (($) "\\spad{newline()} provides the newline character."))
 (|escape|
  (($)
   "\\spad{escape()} provides the escape character,{} \\spad{_},{} which is used to allow quotes and other characters {\\em within} strings."))
 (|quote|
  (($) "\\spad{quote()} provides the string quote character,{} \\spad{\"}."))
 (|space| (($) "\\spad{space()} provides the blank character."))
 (|char|
  (($ (|String|))
   "\\spad{char(s)} provides a character from a string \\spad{s} of length one.")
  (($ (|Integer|))
   "\\spad{char(i)} provides a character corresponding to the integer code \\spad{i}. It is always \\spad{true} that \\spad{ord char i = i}."))
 (|ord|
  (((|Integer|) $)
   "\\spad{ord(c)} provides an integral code corresponding to the character \\spad{c}. It is always \\spad{true} that \\spad{char ord c = c}.")))
(("documentation" 0 3937) ("ancestors" 0 3710) ("parents" 0 3684)
 ("abbreviation" 0 3679) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 2628) ("modemaps" 0 1477) ("sourceFile" 0 1441)
 ("constructorCategory" 0 789) ("constructorModemap" 0 78)
 ("constructorKind" 0 69) ("constructorForm" 0 55) ("NILADIC" 0 20))