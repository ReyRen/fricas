13214               (MAKEPROP '|TheSymbolTable| 'NILADIC T)
(|TheSymbolTable|)
|domain|
(((|TheSymbolTable|)
  (|Join| (|CoercibleTo| (|OutputForm|))
          (CATEGORY |domain| (SIGNATURE |showTheSymbolTable| ($))
           (SIGNATURE |clearTheSymbolTable| ((|Void|)))
           (SIGNATURE |clearTheSymbolTable| ((|Void|) (|Symbol|)))
           (SIGNATURE |declare!|
            ((|FortranType|) (|Symbol|) (|FortranType|) (|Symbol|) $))
           (SIGNATURE |declare!|
            ((|FortranType|) (|List| (|Symbol|)) (|FortranType|) (|Symbol|) $))
           (SIGNATURE |declare!| ((|FortranType|) (|Symbol|) (|FortranType|)))
           (SIGNATURE |declare!|
            ((|FortranType|) (|Symbol|) (|FortranType|) (|Symbol|)))
           (SIGNATURE |newSubProgram| ((|Void|) (|Symbol|)))
           (SIGNATURE |currentSubProgram| ((|Symbol|)))
           (SIGNATURE |endSubProgram| ((|Symbol|)))
           (SIGNATURE |argumentList!|
            ((|Void|) (|Symbol|) (|List| (|Symbol|)) $))
           (SIGNATURE |argumentList!|
            ((|Void|) (|Symbol|) (|List| (|Symbol|))))
           (SIGNATURE |argumentList!| ((|Void|) (|List| (|Symbol|))))
           (SIGNATURE |returnType!|
            ((|Void|) (|Symbol|)
             (|Union| (|:| |fst| (|FortranScalarType|)) (|:| |void| #1="void"))
             $))
           (SIGNATURE |returnType!|
            ((|Void|) (|Symbol|)
             (|Union| (|:| |fst| (|FortranScalarType|)) (|:| |void| #1#))))
           (SIGNATURE |returnType!|
            ((|Void|)
             (|Union| (|:| |fst| (|FortranScalarType|)) (|:| |void| #1#))))
           (SIGNATURE |printHeader| ((|Void|) (|Symbol|) $))
           (SIGNATURE |printHeader| ((|Void|) (|Symbol|)))
           (SIGNATURE |printHeader| ((|Void|)))
           (SIGNATURE |printTypes| ((|Void|) (|Symbol|)))
           (SIGNATURE |empty| ($))
           (SIGNATURE |returnTypeOf|
            ((|Union| (|:| |fst| (|FortranScalarType|)) (|:| |void| #1#))
             (|Symbol|) $))
           (SIGNATURE |argumentListOf| ((|List| (|Symbol|)) (|Symbol|) $))
           (SIGNATURE |symbolTableOf| ((|SymbolTable|) (|Symbol|) $)))))
 (T |TheSymbolTable|))
(|Join| (|CoercibleTo| (|OutputForm|))
        (CATEGORY |domain| (SIGNATURE |showTheSymbolTable| ($))
         (SIGNATURE |clearTheSymbolTable| ((|Void|)))
         (SIGNATURE |clearTheSymbolTable| ((|Void|) (|Symbol|)))
         (SIGNATURE |declare!|
          ((|FortranType|) (|Symbol|) (|FortranType|) (|Symbol|) $))
         (SIGNATURE |declare!|
          ((|FortranType|) (|List| (|Symbol|)) (|FortranType|) (|Symbol|) $))
         (SIGNATURE |declare!| ((|FortranType|) (|Symbol|) (|FortranType|)))
         (SIGNATURE |declare!|
          ((|FortranType|) (|Symbol|) (|FortranType|) (|Symbol|)))
         (SIGNATURE |newSubProgram| ((|Void|) (|Symbol|)))
         (SIGNATURE |currentSubProgram| ((|Symbol|)))
         (SIGNATURE |endSubProgram| ((|Symbol|)))
         (SIGNATURE |argumentList!|
          ((|Void|) (|Symbol|) (|List| (|Symbol|)) $))
         (SIGNATURE |argumentList!| ((|Void|) (|Symbol|) (|List| (|Symbol|))))
         (SIGNATURE |argumentList!| ((|Void|) (|List| (|Symbol|))))
         (SIGNATURE |returnType!|
          ((|Void|) (|Symbol|)
           (|Union| (|:| |fst| (|FortranScalarType|)) (|:| |void| #1="void"))
           $))
         (SIGNATURE |returnType!|
          ((|Void|) (|Symbol|)
           (|Union| (|:| |fst| (|FortranScalarType|)) (|:| |void| #1#))))
         (SIGNATURE |returnType!|
          ((|Void|)
           (|Union| (|:| |fst| (|FortranScalarType|)) (|:| |void| #1#))))
         (SIGNATURE |printHeader| ((|Void|) (|Symbol|) $))
         (SIGNATURE |printHeader| ((|Void|) (|Symbol|)))
         (SIGNATURE |printHeader| ((|Void|)))
         (SIGNATURE |printTypes| ((|Void|) (|Symbol|))) (SIGNATURE |empty| ($))
         (SIGNATURE |returnTypeOf|
          ((|Union| (|:| |fst| (|FortranScalarType|)) (|:| |void| #1#))
           (|Symbol|) $))
         (SIGNATURE |argumentListOf| ((|List| (|Symbol|)) (|Symbol|) $))
         (SIGNATURE |symbolTableOf| ((|SymbolTable|) (|Symbol|) $))))
"/git/fricas/src/algebra/SYMS.spad"
((|showTheSymbolTable| (*1 *1) (|isDomain| *1 (|TheSymbolTable|)))
 (|clearTheSymbolTable| (*1 *2)
  (AND (|isDomain| *2 (|Void|)) (|isDomain| *1 (|TheSymbolTable|))))
 (|clearTheSymbolTable| (*1 *2 *3)
  (AND (|isDomain| *3 (|Symbol|)) (|isDomain| *2 (|Void|))
       (|isDomain| *1 (|TheSymbolTable|))))
 (|declare!| (*1 *2 *3 *2 *3 *1)
  (AND (|isDomain| *2 (|FortranType|)) (|isDomain| *3 (|Symbol|))
       (|isDomain| *1 (|TheSymbolTable|))))
 (|declare!| (*1 *2 *3 *2 *4 *1)
  (AND (|isDomain| *2 (|FortranType|)) (|isDomain| *3 (|List| (|Symbol|)))
       (|isDomain| *4 (|Symbol|)) (|isDomain| *1 (|TheSymbolTable|))))
 (|declare!| (*1 *2 *3 *2)
  (AND (|isDomain| *2 (|FortranType|)) (|isDomain| *3 (|Symbol|))
       (|isDomain| *1 (|TheSymbolTable|))))
 (|declare!| (*1 *2 *3 *2 *3)
  (AND (|isDomain| *2 (|FortranType|)) (|isDomain| *3 (|Symbol|))
       (|isDomain| *1 (|TheSymbolTable|))))
 (|newSubProgram| (*1 *2 *3)
  (AND (|isDomain| *3 (|Symbol|)) (|isDomain| *2 (|Void|))
       (|isDomain| *1 (|TheSymbolTable|))))
 (|currentSubProgram| (*1 *2)
  (AND (|isDomain| *2 (|Symbol|)) (|isDomain| *1 (|TheSymbolTable|))))
 (|endSubProgram| (*1 *2)
  (AND (|isDomain| *2 (|Symbol|)) (|isDomain| *1 (|TheSymbolTable|))))
 (|argumentList!| (*1 *2 *3 *4 *1)
  (AND (|isDomain| *4 (|List| (|Symbol|))) (|isDomain| *3 (|Symbol|))
       (|isDomain| *2 (|Void|)) (|isDomain| *1 (|TheSymbolTable|))))
 (|argumentList!| (*1 *2 *3 *4)
  (AND (|isDomain| *4 (|List| (|Symbol|))) (|isDomain| *3 (|Symbol|))
       (|isDomain| *2 (|Void|)) (|isDomain| *1 (|TheSymbolTable|))))
 (|argumentList!| (*1 *2 *3)
  (AND (|isDomain| *3 (|List| (|Symbol|))) (|isDomain| *2 (|Void|))
       (|isDomain| *1 (|TheSymbolTable|))))
 (|returnType!| (*1 *2 *3 *4 *1)
  (AND (|isDomain| *3 (|Symbol|))
       (|isDomain| *4
                   (|Union| (|:| |fst| (|FortranScalarType|))
                            (|:| |void| #1="void")))
       (|isDomain| *2 (|Void|)) (|isDomain| *1 (|TheSymbolTable|))))
 (|returnType!| (*1 *2 *3 *4)
  (AND (|isDomain| *3 (|Symbol|))
       (|isDomain| *4
                   (|Union| (|:| |fst| (|FortranScalarType|))
                            (|:| |void| #1#)))
       (|isDomain| *2 (|Void|)) (|isDomain| *1 (|TheSymbolTable|))))
 (|returnType!| (*1 *2 *3)
  (AND
   (|isDomain| *3 (|Union| (|:| |fst| (|FortranScalarType|)) (|:| |void| #1#)))
   (|isDomain| *2 (|Void|)) (|isDomain| *1 (|TheSymbolTable|))))
 (|printHeader| (*1 *2 *3 *1)
  (AND (|isDomain| *3 (|Symbol|)) (|isDomain| *2 (|Void|))
       (|isDomain| *1 (|TheSymbolTable|))))
 (|printHeader| (*1 *2 *3)
  (AND (|isDomain| *3 (|Symbol|)) (|isDomain| *2 (|Void|))
       (|isDomain| *1 (|TheSymbolTable|))))
 (|printHeader| (*1 *2)
  (AND (|isDomain| *2 (|Void|)) (|isDomain| *1 (|TheSymbolTable|))))
 (|printTypes| (*1 *2 *3)
  (AND (|isDomain| *3 (|Symbol|)) (|isDomain| *2 (|Void|))
       (|isDomain| *1 (|TheSymbolTable|))))
 (|empty| (*1 *1) (|isDomain| *1 (|TheSymbolTable|)))
 (|returnTypeOf| (*1 *2 *3 *1)
  (AND (|isDomain| *3 (|Symbol|))
       (|isDomain| *2
                   (|Union| (|:| |fst| (|FortranScalarType|))
                            (|:| |void| #1#)))
       (|isDomain| *1 (|TheSymbolTable|))))
 (|argumentListOf| (*1 *2 *3 *1)
  (AND (|isDomain| *3 (|Symbol|)) (|isDomain| *2 (|List| (|Symbol|)))
       (|isDomain| *1 (|TheSymbolTable|))))
 (|symbolTableOf| (*1 *2 *3 *1)
  (AND (|isDomain| *3 (|Symbol|)) (|isDomain| *2 (|SymbolTable|))
       (|isDomain| *1 (|TheSymbolTable|)))))
((|symbolTableOf| (((|SymbolTable|) (|Symbol|) $) 24))
 (|showTheSymbolTable| (($) 28))
 (|returnTypeOf|
  (((|Union| (|:| |fst| (|FortranScalarType|)) (|:| |void| #1="void"))
    (|Symbol|) $)
   21))
 (|returnType!|
  (((|Void|) (|Symbol|)
    (|Union| (|:| |fst| (|FortranScalarType|)) (|:| |void| #1#)) $)
   40)
  (((|Void|) (|Symbol|)
    (|Union| (|:| |fst| (|FortranScalarType|)) (|:| |void| #1#)))
   41)
  (((|Void|) (|Union| (|:| |fst| (|FortranScalarType|)) (|:| |void| #1#))) 42))
 (|printTypes| (((|Void|) (|Symbol|)) 56))
 (|printHeader| (((|Void|) (|Symbol|) $) 53) (((|Void|) (|Symbol|)) 54)
  (((|Void|)) 55))
 (|newSubProgram| (((|Void|) (|Symbol|)) 36))
 (|endSubProgram| (((|Symbol|)) 35)) (|empty| (($) 33))
 (|declare!| (((|FortranType|) (|Symbol|) (|FortranType|) (|Symbol|) $) 44)
  (((|FortranType|) (|List| (|Symbol|)) (|FortranType|) (|Symbol|) $) 48)
  (((|FortranType|) (|Symbol|) (|FortranType|)) 45)
  (((|FortranType|) (|Symbol|) (|FortranType|) (|Symbol|)) 49))
 (|currentSubProgram| (((|Symbol|)) 34)) (|coerce| (((|OutputForm|) $) 27))
 (|clearTheSymbolTable| (((|Void|)) 29) (((|Void|) (|Symbol|)) 32))
 (|argumentListOf| (((|List| (|Symbol|)) (|Symbol|) $) 23))
 (|argumentList!| (((|Void|) (|Symbol|) (|List| (|Symbol|)) $) 37)
  (((|Void|) (|Symbol|) (|List| (|Symbol|))) 38)
  (((|Void|) (|List| (|Symbol|))) 39)))
SYMS
(((|CoercibleTo| (|OutputForm|)) . T))
(((|CoercibleTo| (|OutputForm|)) . T))
((|constructor|
  (NIL
   "Creates and manipulates one global symbol table for FORTRAN code generation,{} containing details of types,{} dimensions,{} and argument lists."))
 (|symbolTableOf|
  (((|SymbolTable|) (|Symbol|) $)
   "\\spad{symbolTableOf(f,{} tab)} returns the symbol table of \\spad{f}"))
 (|argumentListOf|
  (((|List| (|Symbol|)) (|Symbol|) $)
   "\\spad{argumentListOf(f,{} tab)} returns the argument list of \\spad{f}"))
 (|returnTypeOf|
  (((|Union| (|:| |fst| (|FortranScalarType|)) (|:| |void| #1="void"))
    (|Symbol|) $)
   "\\spad{returnTypeOf(f,{} tab)} returns the type of the object returned by \\spad{f}"))
 (|empty| (($) "\\spad{empty()} creates a new,{} empty symbol table."))
 (|printTypes|
  (((|Void|) (|Symbol|))
   "\\spad{printTypes(tab)} produces FORTRAN type declarations from \\spad{tab},{} on the current FORTRAN output stream"))
 (|printHeader|
  (((|Void|))
   "\\spad{printHeader()} produces the FORTRAN header for the current subprogram in the global symbol table on the current FORTRAN output stream.")
  (((|Void|) (|Symbol|))
   "\\spad{printHeader(f)} produces the FORTRAN header for subprogram \\spad{f} in the global symbol table on the current FORTRAN output stream.")
  (((|Void|) (|Symbol|) $)
   "\\spad{printHeader(f,{} tab)} produces the FORTRAN header for subprogram \\spad{f} in symbol table tab on the current FORTRAN output stream."))
 (|returnType!|
  (((|Void|) (|Union| (|:| |fst| (|FortranScalarType|)) (|:| |void| #1#)))
   "\\spad{returnType!(t)} declares that the return type of he current subprogram in the global symbol table is \\spad{t}.")
  (((|Void|) (|Symbol|)
    (|Union| (|:| |fst| (|FortranScalarType|)) (|:| |void| #1#)))
   "\\spad{returnType!(f,{} t)} declares that the return type of subprogram \\spad{f} in the global symbol table is \\spad{t}.")
  (((|Void|) (|Symbol|)
    (|Union| (|:| |fst| (|FortranScalarType|)) (|:| |void| #1#)) $)
   "\\spad{returnType!(f,{} t,{} tab)} declares that the return type of subprogram \\spad{f} in symbol table tab is \\spad{t}."))
 (|argumentList!|
  (((|Void|) (|List| (|Symbol|)))
   "\\spad{argumentList!(l)} declares that the argument list for the current subprogram in the global symbol table is \\spad{l}.")
  (((|Void|) (|Symbol|) (|List| (|Symbol|)))
   "\\spad{argumentList!(f,{} l)} declares that the argument list for subprogram \\spad{f} in the global symbol table is \\spad{l}.")
  (((|Void|) (|Symbol|) (|List| (|Symbol|)) $)
   "\\spad{argumentList!(f,{} l,{} tab)} declares that the argument list for subprogram \\spad{f} in symbol table tab is \\spad{l}."))
 (|endSubProgram|
  (((|Symbol|))
   "\\spad{endSubProgram()} asserts that we are no longer processing the current subprogram."))
 (|currentSubProgram|
  (((|Symbol|))
   "\\spad{currentSubProgram()} returns the name of the current subprogram being processed"))
 (|newSubProgram|
  (((|Void|) (|Symbol|))
   "\\spad{newSubProgram(f)} asserts that from now on type declarations are part of subprogram \\spad{f}."))
 (|declare!|
  (((|FortranType|) (|Symbol|) (|FortranType|) (|Symbol|))
   "\\spad{declare!(u,{} t,{} asp)} declares the parameter \\spad{u} to have type \\spad{t} in asp.")
  (((|FortranType|) (|Symbol|) (|FortranType|))
   "\\spad{declare!(u,{} t)} declares the parameter \\spad{u} to have type \\spad{t} in the current level of the symbol table.")
  (((|FortranType|) (|List| (|Symbol|)) (|FortranType|) (|Symbol|) $)
   "\\spad{declare!(u,{} t,{} asp,{} tab)} declares the parameters \\spad{u} of subprogram \\spad{asp} to have type \\spad{t} in symbol table tab.")
  (((|FortranType|) (|Symbol|) (|FortranType|) (|Symbol|) $)
   "\\spad{declare!(u,{} t,{} asp,{} tab)} declares the parameter \\spad{u} of subprogram \\spad{asp} to have type \\spad{t} in symbol table tab."))
 (|clearTheSymbolTable|
  (((|Void|) (|Symbol|))
   "\\spad{clearTheSymbolTable(x)} removes the symbol \\spad{x} from the table")
  (((|Void|))
   "\\spad{clearTheSymbolTable()} clears the current symbol table."))
 (|showTheSymbolTable|
  (($) "\\spad{showTheSymbolTable()} returns the current symbol table.")))
(("documentation" 0 9111) ("ancestors" 0 9072) ("parents" 0 9033)
 ("abbreviation" 0 9028) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 7672) ("modemaps" 0 4166) ("sourceFile" 0 4130)
 ("constructorCategory" 0 2180) ("constructorModemap" 0 88)
 ("constructorKind" 0 79) ("constructorForm" 0 60) ("NILADIC" 0 20))