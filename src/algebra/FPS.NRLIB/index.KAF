14210               (MAKEPROP '|FloatingPointSystem| 'NILADIC T)
(|FloatingPointSystem|)
|category|
(((|FloatingPointSystem|) (|Category|)) (T |FloatingPointSystem|))
(|Join| (|RealNumberSystem|) (|Approximate|) (|ConvertibleTo| (|String|))
        (CATEGORY |domain| (SIGNATURE / ($ $ (|Integer|)))
         (SIGNATURE |float| ($ (|Integer|) (|Integer|)))
         (SIGNATURE |float| ($ (|Integer|) (|Integer|) (|PositiveInteger|)))
         (SIGNATURE |order| ((|Integer|) $))
         (SIGNATURE |base| ((|PositiveInteger|)))
         (SIGNATURE |exponent| ((|Integer|) $))
         (SIGNATURE |mantissa| ((|Integer|) $))
         (SIGNATURE |toString| ((|String|) $))
         (SIGNATURE |toString| ((|String|) $ (|NonNegativeInteger|)))
         (SIGNATURE |bits| ((|PositiveInteger|)))
         (SIGNATURE |digits| ((|PositiveInteger|)))
         (SIGNATURE |precision| ((|PositiveInteger|)))
         (IF (|has| $ (|arbitraryPrecision|))
             (PROGN
              (SIGNATURE |bits| ((|PositiveInteger|) (|PositiveInteger|)))
              (SIGNATURE |digits| ((|PositiveInteger|) (|PositiveInteger|)))
              (SIGNATURE |precision| ((|PositiveInteger|) (|PositiveInteger|)))
              (SIGNATURE |increasePrecision| ((|PositiveInteger|) (|Integer|)))
              (SIGNATURE |decreasePrecision|
               ((|PositiveInteger|) (|Integer|))))
             |noBranch|)
         (IF (|has| $ (|arbitraryExponent|))
             |noBranch|
             (IF (|has| $ (|arbitraryPrecision|))
                 |noBranch|
                 (PROGN (SIGNATURE |min| ($)) (SIGNATURE |max| ($)))))))
"/git/fricas/src/algebra/FPS.spad"
((/ (*1 *1 *1 *2)
    (AND (|ofCategory| *1 (|FloatingPointSystem|))
         (|isDomain| *2 (|Integer|))))
 (|float| (*1 *1 *2 *2)
          (AND (|isDomain| *2 (|Integer|))
               (|ofCategory| *1 (|FloatingPointSystem|))))
 (|float| (*1 *1 *2 *2 *3)
          (AND (|isDomain| *2 (|Integer|)) (|isDomain| *3 (|PositiveInteger|))
               (|ofCategory| *1 (|FloatingPointSystem|))))
 (|order| (*1 *2 *1)
  (AND (|ofCategory| *1 (|FloatingPointSystem|)) (|isDomain| *2 (|Integer|))))
 (|base| (*1 *2)
  (AND (|ofCategory| *1 (|FloatingPointSystem|))
       (|isDomain| *2 (|PositiveInteger|))))
 (|exponent| (*1 *2 *1)
  (AND (|ofCategory| *1 (|FloatingPointSystem|)) (|isDomain| *2 (|Integer|))))
 (|mantissa| (*1 *2 *1)
  (AND (|ofCategory| *1 (|FloatingPointSystem|)) (|isDomain| *2 (|Integer|))))
 (|toString| (*1 *2 *1)
  (AND (|ofCategory| *1 (|FloatingPointSystem|)) (|isDomain| *2 (|String|))))
 (|toString| (*1 *2 *1 *3)
  (AND (|ofCategory| *1 (|FloatingPointSystem|))
       (|isDomain| *3 (|NonNegativeInteger|)) (|isDomain| *2 (|String|))))
 (|bits| (*1 *2)
  (AND (|ofCategory| *1 (|FloatingPointSystem|))
       (|isDomain| *2 (|PositiveInteger|))))
 (|digits| (*1 *2)
  (AND (|ofCategory| *1 (|FloatingPointSystem|))
       (|isDomain| *2 (|PositiveInteger|))))
 (|precision| (*1 *2)
  (AND (|ofCategory| *1 (|FloatingPointSystem|))
       (|isDomain| *2 (|PositiveInteger|))))
 (|bits| (*1 *2 *2)
  (AND (|isDomain| *2 (|PositiveInteger|))
       (|ofCategory| *1 (|arbitraryPrecision|))
       (|ofCategory| *1 (|FloatingPointSystem|))))
 (|digits| (*1 *2 *2)
  (AND (|isDomain| *2 (|PositiveInteger|))
       (|ofCategory| *1 (|arbitraryPrecision|))
       (|ofCategory| *1 (|FloatingPointSystem|))))
 (|precision| (*1 *2 *2)
  (AND (|isDomain| *2 (|PositiveInteger|))
       (|ofCategory| *1 (|arbitraryPrecision|))
       (|ofCategory| *1 (|FloatingPointSystem|))))
 (|increasePrecision| (*1 *2 *3)
  (AND (|isDomain| *3 (|Integer|)) (|ofCategory| *1 (|arbitraryPrecision|))
       (|ofCategory| *1 (|FloatingPointSystem|))
       (|isDomain| *2 (|PositiveInteger|))))
 (|decreasePrecision| (*1 *2 *3)
  (AND (|isDomain| *3 (|Integer|)) (|ofCategory| *1 (|arbitraryPrecision|))
       (|ofCategory| *1 (|FloatingPointSystem|))
       (|isDomain| *2 (|PositiveInteger|))))
 (|min| (*1 *1)
  (AND (|ofCategory| *1 (|FloatingPointSystem|))
       (|not| (|ofCategory| *1 (|arbitraryPrecision|)))
       (|not| (|ofCategory| *1 (|arbitraryExponent|)))))
 (|max| (*1 *1)
  (AND (|ofCategory| *1 (|FloatingPointSystem|))
       (|not| (|ofCategory| *1 (|arbitraryPrecision|)))
       (|not| (|ofCategory| *1 (|arbitraryExponent|))))))
((~= (((|Boolean|) $ $) 6)) (|zero?| (((|Boolean|) $) 6))
 (|wholePart| (((|Integer|) $) 6))
 (|unitNormal|
  (((|Record| (|:| |unit| $) (|:| |canonical| $) (|:| |associate| $)) $) 6))
 (|unitCanonical| (($ $) 6)) (|unit?| (((|Boolean|) $) 6))
 (|truncate| (($ $) 6))
 (|toString| (((|String|) $) 6) (((|String|) $ (|NonNegativeInteger|)) 6))
 (|subtractIfCan| (((|Union| $ "failed") $ $) 6)) (|squareFreePart| (($ $) 6))
 (|squareFree| (((|Factored| $) $) 6)) (|sqrt| (($ $) 6))
 (|smaller?| (((|Boolean|) $ $) 6)) (|sizeLess?| (((|Boolean|) $ $) 6))
 (|sign| (((|Integer|) $) 6)) (|sample| (($) 6 T CONST)) (|round| (($ $) 6))
 (|rightRecip| (((|Union| $ #1="failed") $) 6))
 (|rightPower| (($ $ (|PositiveInteger|)) 6) (($ $ (|NonNegativeInteger|)) 6))
 (|retractIfCan| (((|Union| (|Integer|) #2="failed") $) 6)
  (((|Union| (|Fraction| (|Integer|)) #2#) $) 6))
 (|retract| (((|Integer|) $) 6) (((|Fraction| (|Integer|)) $) 6))
 (|rem| (($ $ $) 6)) (|recip| (((|Union| $ #1#) $) 6)) (|quo| (($ $ $) 6))
 (|principalIdeal|
  (((|Record| (|:| |coef| (|List| $)) (|:| |generator| $)) (|List| $)) 6))
 (|prime?| (((|Boolean|) $) 6))
 (|precision| (((|PositiveInteger|)) 6)
  (((|PositiveInteger|) (|PositiveInteger|)) 6
   (|has| $ (|arbitraryPrecision|))))
 (|positive?| (((|Boolean|) $) 6))
 (|patternMatch|
  (((|PatternMatchResult| (|Float|) $) $ (|Pattern| (|Float|))
    (|PatternMatchResult| (|Float|) $))
   6))
 (|order| (((|Integer|) $) 6)) (|opposite?| (((|Boolean|) $ $) 6))
 (|one?| (((|Boolean|) $) 6)) (|nthRoot| (($ $ (|Integer|)) 6))
 (|norm| (($ $) 6)) (|negative?| (((|Boolean|) $) 6))
 (|multiEuclidean| (((|Union| (|List| $) #3="failed") (|List| $) $) 6))
 (|min| (($ $ $) 6)
  (($) 6
   (AND (|not| (|has| $ (|arbitraryPrecision|)))
        (|not| (|has| $ (|arbitraryExponent|))))))
 (|max| (($ $ $) 6)
  (($) 6
   (AND (|not| (|has| $ (|arbitraryPrecision|)))
        (|not| (|has| $ (|arbitraryExponent|))))))
 (|mantissa| (((|Integer|) $) 6)) (|leftRecip| (((|Union| $ #1#) $) 6))
 (|leftPower| (($ $ (|PositiveInteger|)) 6) (($ $ (|NonNegativeInteger|)) 6))
 (|lcmCoef|
  (((|Record| (|:| |llcm_res| $) (|:| |coeff1| $) (|:| |coeff2| $)) $ $) 6))
 (|lcm| (($ $ $) 6) (($ (|List| $)) 6)) (|latex| (((|String|) $) 6))
 (|inv| (($ $) 6))
 (|increasePrecision|
  (((|PositiveInteger|) (|Integer|)) 6 (|has| $ (|arbitraryPrecision|))))
 (|hashUpdate!| (((|HashState|) (|HashState|) $) 6))
 (|hash| (((|SingleInteger|) $) 6))
 (|gcdPolynomial|
  (((|SparseUnivariatePolynomial| $) (|SparseUnivariatePolynomial| $)
    (|SparseUnivariatePolynomial| $))
   6))
 (|gcd| (($ $ $) 6) (($ (|List| $)) 6)) (|fractionPart| (($ $) 6))
 (|floor| (($ $) 6))
 (|float| (($ (|Integer|) (|Integer|)) 6)
          (($ (|Integer|) (|Integer|) (|PositiveInteger|)) 6))
 (|factor| (((|Factored| $) $) 6))
 (|extendedEuclidean|
  (((|Record| (|:| |coef1| $) (|:| |coef2| $) (|:| |generator| $)) $ $) 6)
  (((|Union| (|Record| (|:| |coef1| $) (|:| |coef2| $)) #3#) $ $ $) 6))
 (|exquo| (((|Union| $ "failed") $ $) 6))
 (|expressIdealMember| (((|Union| (|List| $) "failed") (|List| $) $) 6))
 (|exponent| (((|Integer|) $) 6))
 (|euclideanSize| (((|NonNegativeInteger|) $) 6))
 (|divide| (((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $) 6))
 (|digits| (((|PositiveInteger|)) 6)
  (((|PositiveInteger|) (|PositiveInteger|)) 6
   (|has| $ (|arbitraryPrecision|))))
 (|decreasePrecision|
  (((|PositiveInteger|) (|Integer|)) 6 (|has| $ (|arbitraryPrecision|))))
 (|convert| (((|Float|) $) 6) (((|DoubleFloat|) $) 6)
            (((|Pattern| (|Float|)) $) 6) (((|String|) $) 6))
 (|commutator| (($ $ $) 6))
 (|coerce| (((|OutputForm|) $) 6) (($ $) 6) (($ (|Integer|)) 6)
           (($ (|Fraction| (|Integer|))) 6))
 (|characteristic| (((|NonNegativeInteger|)) 6)) (|ceiling| (($ $) 6))
 (|bits| (((|PositiveInteger|)) 6)
  (((|PositiveInteger|) (|PositiveInteger|)) 6
   (|has| $ (|arbitraryPrecision|))))
 (|base| (((|PositiveInteger|)) 6)) (|associator| (($ $ $ $) 6))
 (|associates?| (((|Boolean|) $ $) 6)) (|antiCommutator| (($ $ $) 6))
 (|annihilate?| (((|Boolean|) $ $) 6)) (|abs| (($ $) 6))
 (^ (($ $ (|PositiveInteger|)) 6) (($ $ (|NonNegativeInteger|)) 6)
  (($ $ (|Integer|)) 6) (($ $ (|Fraction| (|Integer|))) 6))
 (|Zero| (($) 6 T CONST)) (|One| (($) 6 T CONST)) (>= (((|Boolean|) $ $) 6))
 (> (((|Boolean|) $ $) 6)) (= (((|Boolean|) $ $) 6)) (<= (((|Boolean|) $ $) 6))
 (< (((|Boolean|) $ $) 6)) (/ (($ $ $) 6) (($ $ (|Integer|)) 6))
 (- (($ $ $) 6) (($ $) 6)) (+ (($ $ $) 6))
 (* (($ (|PositiveInteger|) $) 6) (($ $ $) 6) (($ (|Integer|) $) 6)
    (($ (|NonNegativeInteger|) $) 6) (($ $ (|Fraction| (|Integer|))) 6)
    (($ (|Fraction| (|Integer|)) $) 6)))
FPS
(((|RealNumberSystem|) . T) ((|Approximate|) . T)
 ((|ConvertibleTo| (|String|)) . T))
(((|AbelianGroup|) . T) ((|AbelianMonoid|) . T) ((|AbelianSemiGroup|) . T)
 ((|Algebra| (|Fraction| (|Integer|))) . T) ((|Algebra| $) . T)
 ((|Approximate|) . T) ((|BasicType|) . T) ((|BiModule| |t#1| |t#1|) . T)
 ((|BiModule| $ $) . T) ((|CancellationAbelianMonoid|) . T)
 ((|CharacteristicZero|) . T) ((|CoercibleTo| (|OutputForm|)) . T)
 ((|CommutativeRing|) . T) ((|CommutativeStar|) . T) ((|Comparable|) . T)
 ((|ConvertibleTo| (|String|)) . T)
 ((|ConvertibleTo| (|Pattern| (|Float|))) . T)
 ((|ConvertibleTo| (|Float|)) . T) ((|ConvertibleTo| (|DoubleFloat|)) . T)
 ((|DivisionRing|) . T) ((|EntireRing|) . T) ((|EuclideanDomain|) . T)
 ((|Field|) . T) ((|GcdDomain|) . T) ((|IntegralDomain|) . T)
 ((|LeftModule| |t#1|) . T) ((|LeftOreRing|) . T) ((|Magma|) . T)
 ((|MagmaWithUnit|) . T) ((|Module| |t#1|) . T) ((|Monoid|) . T)
 ((|NonAssociativeRing|) . T) ((|NonAssociativeRng|) . T)
 ((|NonAssociativeSemiRing|) . T) ((|NonAssociativeSemiRng|) . T)
 ((|OrderedAbelianGroup|) . T) ((|OrderedAbelianMonoid|) . T)
 ((|OrderedAbelianSemiGroup|) . T) ((|OrderedCancellationAbelianMonoid|) . T)
 ((|OrderedRing|) . T) ((|OrderedSet|) . T) ((|PartialOrder|) . T)
 ((|PatternMatchable| (|Float|)) . T) ((|PrincipalIdealDomain|) . T)
 ((|RadicalCategory|) . T) ((|RealConstant|) . T) ((|RealNumberSystem|) . T)
 ((|RetractableTo| (|Fraction| (|Integer|))) . T)
 ((|RetractableTo| (|Integer|)) . T) ((|RightModule| |t#2|) . T) ((|Ring|) . T)
 ((|Rng|) . T) ((|SemiGroup|) . T) ((|SemiRing|) . T) ((|SemiRng|) . T)
 ((|SetCategory|) . T) ((|TwoSidedRecip|) . T)
 ((|UniqueFactorizationDomain|) . T) ((|canonicalUnitNormal|) . T)
 ((|canonicalsClosed|) . T) ((|noZeroDivisors|) . T) ((|unitsKnown|) . T))
((|constructor|
  (NIL
   "This category is intended as a model for floating point systems. A floating point system is a model for the real numbers. In fact,{} it is an approximation in the sense that not all real numbers are exactly representable by floating point numbers. A floating point system is characterized by the following: \\blankline \\indented{2}{1: \\spadfunFrom{base}{FloatingPointSystem} of the \\spadfunFrom{exponent}{FloatingPointSystem}.} \\indented{9}{(actual implemenations are usually binary or decimal)} \\indented{2}{2: \\spadfunFrom{precision}{FloatingPointSystem} of the \\spadfunFrom{mantissa}{FloatingPointSystem} (arbitrary or fixed)} \\indented{2}{3: rounding error for operations} \\blankline Because a Float is an approximation to the real numbers,{} even though it is defined to be a join of a Field and OrderedRing,{} some of the attributes do not hold. In particular associative(\\spad{\"+\"}) does not hold. Algorithms defined over a field need special considerations when the field is a floating point system."))
 (|max| (($) "\\spad{max()} returns the maximum floating point number."))
 (|min| (($) "\\spad{min()} returns the minimum floating point number."))
 (|decreasePrecision|
  (((|PositiveInteger|) (|Integer|))
   "\\spad{decreasePrecision(n)} decreases the current \\spadfunFrom{precision}{FloatingPointSystem} precision by \\spad{n} decimal digits."))
 (|increasePrecision|
  (((|PositiveInteger|) (|Integer|))
   "\\spad{increasePrecision(n)} increases the current \\spadfunFrom{precision}{FloatingPointSystem} by \\spad{n} decimal digits."))
 (|precision|
  (((|PositiveInteger|) (|PositiveInteger|))
   "\\spad{precision(n)} set the precision in the base to \\spad{n} decimal digits.")
  (((|PositiveInteger|))
   "\\spad{precision()} returns the precision in digits base."))
 (|digits|
  (((|PositiveInteger|) (|PositiveInteger|))
   "\\spad{digits(d)} set the \\spadfunFrom{precision}{FloatingPointSystem} to \\spad{d} digits.")
  (((|PositiveInteger|))
   "\\spad{digits()} returns ceiling\\spad{'s} precision in decimal digits."))
 (|bits|
  (((|PositiveInteger|) (|PositiveInteger|))
   "\\spad{bits(n)} set the \\spadfunFrom{precision}{FloatingPointSystem} to \\spad{n} bits.")
  (((|PositiveInteger|))
   "\\spad{bits()} returns ceiling\\spad{'s} precision in bits."))
 (|toString|
  (((|String|) $ (|NonNegativeInteger|))
   "\\spad{toString(x,{} n)} returns a string representation of \\spad{x} truncated to \\spad{n} decimal digits.")
  (((|String|) $)
   "\\spad{toString(x)} returns the string representation of \\spad{x}."))
 (|mantissa|
  (((|Integer|) $)
   "\\spad{mantissa(x)} returns the mantissa part of \\spad{x}."))
 (|exponent|
  (((|Integer|) $)
   "\\spad{exponent(x)} returns the \\spadfunFrom{exponent}{FloatingPointSystem} part of \\spad{x}."))
 (|base|
  (((|PositiveInteger|))
   "\\spad{base()} returns the base of the \\spadfunFrom{exponent}{FloatingPointSystem}."))
 (|order|
  (((|Integer|) $)
   "\\spad{order x} is the order of magnitude of \\spad{x}. Note: \\spad{base ^ order x <= |x| < base ^ (1 + order x)}."))
 (|float|
  (($ (|Integer|) (|Integer|) (|PositiveInteger|))
   "\\spad{float(a,{} e,{} b)} returns \\spad{a * b ^ e}.")
  (($ (|Integer|) (|Integer|))
   "\\spad{float(a,{} e)} returns \\spad{a * base() ^ e}."))
 (/
  (($ $ (|Integer|))
   "\\spad{x / i} computes the division from \\spad{x} by an integer \\spad{i}.")))
(("documentation" 0 10787) ("ancestors" 0 9083) ("parents" 0 8996)
 ("abbreviation" 0 8992) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 4318) ("modemaps" 0 1653) ("sourceFile" 0 1618)
 ("constructorCategory" 0 167) ("constructorModemap" 0 100)
 ("constructorKind" 0 89) ("constructorForm" 0 65) ("NILADIC" 0 20))