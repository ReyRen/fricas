11937               (|MatrixManipulation| R |Row| |Col| M)
|package|
(((|MatrixManipulation| |#1| |#2| |#3| |#4|)
  (CATEGORY |package| (SIGNATURE |element| (|#4| |#4| (|Integer|) (|Integer|)))
   (SIGNATURE |rowMatrix| (|#4| |#4| (|Integer|)))
   (SIGNATURE |rows| (|#4| |#4| (|List| (|Integer|))))
   (SIGNATURE |rows| (|#4| |#4| (|Segment| (|Integer|))))
   (SIGNATURE |columnMatrix| (|#4| |#4| (|Integer|)))
   (SIGNATURE |columns| (|#4| |#4| (|List| (|Integer|))))
   (SIGNATURE |columns| (|#4| |#4| (|Segment| (|Integer|))))
   (SIGNATURE |subMatrix|
    (|#4| |#4| (|List| (|Integer|)) (|List| (|Integer|))))
   (SIGNATURE |subMatrix|
    (|#4| |#4| (|Segment| (|Integer|)) (|Segment| (|Integer|))))
   (IF (|has| |#1| (|AbelianMonoid|))
       (PROGN
        (SIGNATURE |diagonalMatrix| (|#4| |#4| (|Integer|)))
        (SIGNATURE |diagonalMatrix| (|#4| |#4|))
        (SIGNATURE |bandMatrix| (|#4| |#4| (|List| (|Integer|))))
        (SIGNATURE |bandMatrix| (|#4| |#4| (|Segment| (|Integer|)))))
       |noBranch|)
   (SIGNATURE |blockSplit|
    ((|List| (|List| |#4|)) |#4| (|List| (|NonNegativeInteger|))
     (|PositiveInteger|)))
   (SIGNATURE |blockSplit|
    ((|List| (|List| |#4|)) |#4| (|PositiveInteger|)
     (|List| (|NonNegativeInteger|)))))
  (|Type|) (|FiniteLinearAggregate| |#1|) (|FiniteLinearAggregate| |#1|)
  (|TwoDimensionalArrayCategory| |#1| |#2| |#3|))
 (T |MatrixManipulation|))
(CATEGORY |package| (SIGNATURE |element| (|#4| |#4| (|Integer|) (|Integer|)))
 (SIGNATURE |rowMatrix| (|#4| |#4| (|Integer|)))
 (SIGNATURE |rows| (|#4| |#4| (|List| (|Integer|))))
 (SIGNATURE |rows| (|#4| |#4| (|Segment| (|Integer|))))
 (SIGNATURE |columnMatrix| (|#4| |#4| (|Integer|)))
 (SIGNATURE |columns| (|#4| |#4| (|List| (|Integer|))))
 (SIGNATURE |columns| (|#4| |#4| (|Segment| (|Integer|))))
 (SIGNATURE |subMatrix| (|#4| |#4| (|List| (|Integer|)) (|List| (|Integer|))))
 (SIGNATURE |subMatrix|
  (|#4| |#4| (|Segment| (|Integer|)) (|Segment| (|Integer|))))
 (IF (|has| |#1| (|AbelianMonoid|))
     (PROGN
      (SIGNATURE |diagonalMatrix| (|#4| |#4| (|Integer|)))
      (SIGNATURE |diagonalMatrix| (|#4| |#4|))
      (SIGNATURE |bandMatrix| (|#4| |#4| (|List| (|Integer|))))
      (SIGNATURE |bandMatrix| (|#4| |#4| (|Segment| (|Integer|)))))
     |noBranch|)
 (SIGNATURE |blockSplit|
  ((|List| (|List| |#4|)) |#4| (|List| (|NonNegativeInteger|))
   (|PositiveInteger|)))
 (SIGNATURE |blockSplit|
  ((|List| (|List| |#4|)) |#4| (|PositiveInteger|)
   (|List| (|NonNegativeInteger|)))))
"/git/fricas/src/algebra/MAMA.spad"
((|blockSplit| (*1 *2 *3 *4 *5)
  (AND (|isDomain| *4 (|PositiveInteger|))
       (|isDomain| *5 (|List| (|NonNegativeInteger|)))
       (|ofCategory| *6 (|Type|))
       (|ofCategory| *7 (|FiniteLinearAggregate| *6))
       (|ofCategory| *8 (|FiniteLinearAggregate| *6))
       (|isDomain| *2 (|List| (|List| *3)))
       (|isDomain| *1 (|MatrixManipulation| *6 *7 *8 *3))
       (|ofCategory| *3 (|TwoDimensionalArrayCategory| *6 *7 *8))))
 (|blockSplit| (*1 *2 *3 *4 *5)
  (AND (|isDomain| *4 (|List| (|NonNegativeInteger|)))
       (|isDomain| *5 (|PositiveInteger|)) (|ofCategory| *6 (|Type|))
       (|ofCategory| *7 (|FiniteLinearAggregate| *6))
       (|ofCategory| *8 (|FiniteLinearAggregate| *6))
       (|isDomain| *2 (|List| (|List| *3)))
       (|isDomain| *1 (|MatrixManipulation| *6 *7 *8 *3))
       (|ofCategory| *3 (|TwoDimensionalArrayCategory| *6 *7 *8))))
 (|bandMatrix| (*1 *2 *2 *3)
  (AND (|isDomain| *3 (|Segment| (|Integer|)))
       (|ofCategory| *4 (|AbelianMonoid|)) (|ofCategory| *4 (|Type|))
       (|ofCategory| *5 (|FiniteLinearAggregate| *4))
       (|ofCategory| *6 (|FiniteLinearAggregate| *4))
       (|isDomain| *1 (|MatrixManipulation| *4 *5 *6 *2))
       (|ofCategory| *2 (|TwoDimensionalArrayCategory| *4 *5 *6))))
 (|bandMatrix| (*1 *2 *2 *3)
  (AND (|isDomain| *3 (|List| (|Integer|))) (|ofCategory| *4 (|AbelianMonoid|))
       (|ofCategory| *4 (|Type|))
       (|ofCategory| *5 (|FiniteLinearAggregate| *4))
       (|ofCategory| *6 (|FiniteLinearAggregate| *4))
       (|isDomain| *1 (|MatrixManipulation| *4 *5 *6 *2))
       (|ofCategory| *2 (|TwoDimensionalArrayCategory| *4 *5 *6))))
 (|diagonalMatrix| (*1 *2 *2)
  (AND (|ofCategory| *3 (|AbelianMonoid|)) (|ofCategory| *3 (|Type|))
       (|ofCategory| *4 (|FiniteLinearAggregate| *3))
       (|ofCategory| *5 (|FiniteLinearAggregate| *3))
       (|isDomain| *1 (|MatrixManipulation| *3 *4 *5 *2))
       (|ofCategory| *2 (|TwoDimensionalArrayCategory| *3 *4 *5))))
 (|diagonalMatrix| (*1 *2 *2 *3)
  (AND (|isDomain| *3 (|Integer|)) (|ofCategory| *4 (|AbelianMonoid|))
       (|ofCategory| *4 (|Type|))
       (|ofCategory| *5 (|FiniteLinearAggregate| *4))
       (|ofCategory| *6 (|FiniteLinearAggregate| *4))
       (|isDomain| *1 (|MatrixManipulation| *4 *5 *6 *2))
       (|ofCategory| *2 (|TwoDimensionalArrayCategory| *4 *5 *6))))
 (|subMatrix| (*1 *2 *2 *3 *3)
  (AND (|isDomain| *3 (|Segment| (|Integer|))) (|ofCategory| *4 (|Type|))
       (|ofCategory| *5 (|FiniteLinearAggregate| *4))
       (|ofCategory| *6 (|FiniteLinearAggregate| *4))
       (|isDomain| *1 (|MatrixManipulation| *4 *5 *6 *2))
       (|ofCategory| *2 (|TwoDimensionalArrayCategory| *4 *5 *6))))
 (|subMatrix| (*1 *2 *2 *3 *3)
  (AND (|isDomain| *3 (|List| (|Integer|))) (|ofCategory| *4 (|Type|))
       (|ofCategory| *5 (|FiniteLinearAggregate| *4))
       (|ofCategory| *6 (|FiniteLinearAggregate| *4))
       (|isDomain| *1 (|MatrixManipulation| *4 *5 *6 *2))
       (|ofCategory| *2 (|TwoDimensionalArrayCategory| *4 *5 *6))))
 (|columns| (*1 *2 *2 *3)
  (AND (|isDomain| *3 (|Segment| (|Integer|))) (|ofCategory| *4 (|Type|))
       (|ofCategory| *5 (|FiniteLinearAggregate| *4))
       (|ofCategory| *6 (|FiniteLinearAggregate| *4))
       (|isDomain| *1 (|MatrixManipulation| *4 *5 *6 *2))
       (|ofCategory| *2 (|TwoDimensionalArrayCategory| *4 *5 *6))))
 (|columns| (*1 *2 *2 *3)
  (AND (|isDomain| *3 (|List| (|Integer|))) (|ofCategory| *4 (|Type|))
       (|ofCategory| *5 (|FiniteLinearAggregate| *4))
       (|ofCategory| *6 (|FiniteLinearAggregate| *4))
       (|isDomain| *1 (|MatrixManipulation| *4 *5 *6 *2))
       (|ofCategory| *2 (|TwoDimensionalArrayCategory| *4 *5 *6))))
 (|columnMatrix| (*1 *2 *2 *3)
  (AND (|isDomain| *3 (|Integer|)) (|ofCategory| *4 (|Type|))
       (|ofCategory| *5 (|FiniteLinearAggregate| *4))
       (|ofCategory| *6 (|FiniteLinearAggregate| *4))
       (|isDomain| *1 (|MatrixManipulation| *4 *5 *6 *2))
       (|ofCategory| *2 (|TwoDimensionalArrayCategory| *4 *5 *6))))
 (|rows| (*1 *2 *2 *3)
  (AND (|isDomain| *3 (|Segment| (|Integer|))) (|ofCategory| *4 (|Type|))
       (|ofCategory| *5 (|FiniteLinearAggregate| *4))
       (|ofCategory| *6 (|FiniteLinearAggregate| *4))
       (|isDomain| *1 (|MatrixManipulation| *4 *5 *6 *2))
       (|ofCategory| *2 (|TwoDimensionalArrayCategory| *4 *5 *6))))
 (|rows| (*1 *2 *2 *3)
  (AND (|isDomain| *3 (|List| (|Integer|))) (|ofCategory| *4 (|Type|))
       (|ofCategory| *5 (|FiniteLinearAggregate| *4))
       (|ofCategory| *6 (|FiniteLinearAggregate| *4))
       (|isDomain| *1 (|MatrixManipulation| *4 *5 *6 *2))
       (|ofCategory| *2 (|TwoDimensionalArrayCategory| *4 *5 *6))))
 (|rowMatrix| (*1 *2 *2 *3)
  (AND (|isDomain| *3 (|Integer|)) (|ofCategory| *4 (|Type|))
       (|ofCategory| *5 (|FiniteLinearAggregate| *4))
       (|ofCategory| *6 (|FiniteLinearAggregate| *4))
       (|isDomain| *1 (|MatrixManipulation| *4 *5 *6 *2))
       (|ofCategory| *2 (|TwoDimensionalArrayCategory| *4 *5 *6))))
 (|element| (*1 *2 *2 *3 *3)
  (AND (|isDomain| *3 (|Integer|)) (|ofCategory| *4 (|Type|))
       (|ofCategory| *5 (|FiniteLinearAggregate| *4))
       (|ofCategory| *6 (|FiniteLinearAggregate| *4))
       (|isDomain| *1 (|MatrixManipulation| *4 *5 *6 *2))
       (|ofCategory| *2 (|TwoDimensionalArrayCategory| *4 *5 *6)))))
((|subMatrix| ((|#4| |#4| (|Segment| (|Integer|)) (|Segment| (|Integer|))) 45)
  ((|#4| |#4| (|List| (|Integer|)) (|List| (|Integer|))) 23))
 (|rows| ((|#4| |#4| (|Segment| (|Integer|))) 25)
  ((|#4| |#4| (|List| (|Integer|))) 24))
 (|rowMatrix| ((|#4| |#4| (|Integer|)) 15))
 (|element| ((|#4| |#4| (|Integer|) (|Integer|)) 12))
 (|diagonalMatrix| ((|#4| |#4|) 39 (|has| |#1| (|AbelianMonoid|)))
  ((|#4| |#4| (|Integer|)) 38 (|has| |#1| (|AbelianMonoid|))))
 (|columns| ((|#4| |#4| (|Segment| (|Integer|))) 31)
  ((|#4| |#4| (|List| (|Integer|))) 30))
 (|columnMatrix| ((|#4| |#4| (|Integer|)) 28))
 (|blockSplit|
  (((|List| (|List| |#4|)) |#4| (|PositiveInteger|)
    (|List| (|NonNegativeInteger|)))
   55)
  (((|List| (|List| |#4|)) |#4| (|List| (|NonNegativeInteger|))
    (|PositiveInteger|))
   52))
 (|bandMatrix|
  ((|#4| |#4| (|Segment| (|Integer|))) 41 (|has| |#1| (|AbelianMonoid|)))
  ((|#4| |#4| (|List| (|Integer|))) 40 (|has| |#1| (|AbelianMonoid|)))))
((|HasCategory| |#1| '(|AbelianMonoid|)))
MAMA
((|constructor|
  (NIL
   "Some functions for manipulating (dense) matrices. Supported are various kinds of slicing,{} splitting and stacking of matrices. The functions resemble operations often used in numerical linear algebra algorithms."))
 (|blockSplit|
  (((|List| (|List| |#4|)) |#4| (|PositiveInteger|)
    (|List| (|NonNegativeInteger|)))
   "\\spad{blockSplit} splits a matrix into multiple submatrices row and column wise,{} dividing a matrix into blocks.")
  (((|List| (|List| |#4|)) |#4| (|List| (|NonNegativeInteger|))
    (|PositiveInteger|))
   "\\spad{blockSplit} splits a matrix into multiple submatrices row and column wise,{} dividing a matrix into blocks."))
 (|bandMatrix|
  ((|#4| |#4| (|Segment| (|Integer|)))
   "\\spad{bandMatrix} returns multiple diagonals out of a matrix. The diagonals are put into a matrix of same shape as the original one. Positive integer arguments select upper off-diagonals,{} negative ones lower off-diagonals.")
  ((|#4| |#4| (|List| (|Integer|)))
   "\\spad{bandMatrix} returns multiple diagonals out of a matrix. The diagonals are put into a matrix of same shape as the original one. Positive integer arguments select upper off-diagonals,{} negative ones lower off-diagonals."))
 (|diagonalMatrix|
  ((|#4| |#4|)
   "\\spad{diagonalMatrix} returns the main diagonal out of a matrix. The diagonal is put into a matrix of same shape as the original one.")
  ((|#4| |#4| (|Integer|))
   "\\spad{diagonalMatrix} returns a diagonal out of a matrix. The diagonal is put into a matrix of same shape as the original one. Positive integer arguments select upper off-diagonals,{} negative ones lower off-diagonals."))
 (|subMatrix|
  ((|#4| |#4| (|Segment| (|Integer|)) (|Segment| (|Integer|)))
   "\\spad{subMatrix} returns several elements out of a matrix. The elements are stacked into a submatrix.")
  ((|#4| |#4| (|List| (|Integer|)) (|List| (|Integer|)))
   "\\spad{subMatrix} returns several elements out of a matrix. The elements are stacked into a submatrix."))
 (|columns|
  ((|#4| |#4| (|Segment| (|Integer|)))
   "\\spad{columns} returns several columns out of a matrix. The columns are stacked into a matrix.")
  ((|#4| |#4| (|List| (|Integer|)))
   "\\spad{columns} returns several columns out of a matrix. The columns are stacked into a matrix."))
 (|columnMatrix|
  ((|#4| |#4| (|Integer|))
   "\\spad{columnMatrix} returns a single column out of a matrix. The column is put into a one by \\spad{N} matrix."))
 (|rows|
  ((|#4| |#4| (|Segment| (|Integer|)))
   "\\spad{rows} returns several rows out of a matrix. The rows are stacked into a matrix.")
  ((|#4| |#4| (|List| (|Integer|)))
   "\\spad{rows} returns several rows out of a matrix. The rows are stacked into a matrix."))
 (|rowMatrix|
  ((|#4| |#4| (|Integer|))
   "\\spad{rowMatrix} returns a single row out of a matrix. The row is put into a one by \\spad{N} matrix."))
 (|element|
  ((|#4| |#4| (|Integer|) (|Integer|))
   "\\spad{element} returns a single element out of a matrix. The element is put into a one by one matrix.")))
(("documentation" 0 8882) ("ancestors" 0 NIL) ("parents" 0 NIL)
 ("abbreviation" 0 8877) ("predicates" 0 8835) ("superDomain" 0 NIL)
 ("operationAlist" 0 7864) ("modemaps" 0 2548) ("sourceFile" 0 2512)
 ("constructorCategory" 0 1413) ("constructorModemap" 0 69)
 ("constructorKind" 0 59) ("constructorForm" 0 20))