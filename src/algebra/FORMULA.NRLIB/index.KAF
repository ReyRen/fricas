6448                (MAKEPROP '|ScriptFormulaFormat| 'NILADIC T)
(|ScriptFormulaFormat|)
|domain|
(((|ScriptFormulaFormat|)
  (|Join| (|SetCategory|)
          (CATEGORY |domain| (SIGNATURE |coerce| ($ (|OutputForm|)))
           (SIGNATURE |convert| ($ (|OutputForm|) (|Integer|)))
           (SIGNATURE |display| ((|Void|) $ (|Integer|)))
           (SIGNATURE |display| ((|Void|) $))
           (SIGNATURE |epilogue| ((|List| (|String|)) $))
           (SIGNATURE |formula| ((|List| (|String|)) $)) (SIGNATURE |new| ($))
           (SIGNATURE |prologue| ((|List| (|String|)) $))
           (SIGNATURE |setEpilogue!|
            ((|List| (|String|)) $ (|List| (|String|))))
           (SIGNATURE |setFormula!|
            ((|List| (|String|)) $ (|List| (|String|))))
           (SIGNATURE |setPrologue!|
            ((|List| (|String|)) $ (|List| (|String|)))))))
 (T |ScriptFormulaFormat|))
(|Join| (|SetCategory|)
        (CATEGORY |domain| (SIGNATURE |coerce| ($ (|OutputForm|)))
         (SIGNATURE |convert| ($ (|OutputForm|) (|Integer|)))
         (SIGNATURE |display| ((|Void|) $ (|Integer|)))
         (SIGNATURE |display| ((|Void|) $))
         (SIGNATURE |epilogue| ((|List| (|String|)) $))
         (SIGNATURE |formula| ((|List| (|String|)) $)) (SIGNATURE |new| ($))
         (SIGNATURE |prologue| ((|List| (|String|)) $))
         (SIGNATURE |setEpilogue!| ((|List| (|String|)) $ (|List| (|String|))))
         (SIGNATURE |setFormula!| ((|List| (|String|)) $ (|List| (|String|))))
         (SIGNATURE |setPrologue!|
          ((|List| (|String|)) $ (|List| (|String|))))))
"/git/fricas/src/algebra/FORMULA.spad"
((|coerce| (*1 *1 *2)
           (AND (|isDomain| *2 (|OutputForm|))
                (|isDomain| *1 (|ScriptFormulaFormat|))))
 (|convert| (*1 *1 *2 *3)
            (AND (|isDomain| *2 (|OutputForm|)) (|isDomain| *3 (|Integer|))
                 (|isDomain| *1 (|ScriptFormulaFormat|))))
 (|display| (*1 *2 *1 *3)
            (AND (|isDomain| *3 (|Integer|)) (|isDomain| *2 (|Void|))
                 (|isDomain| *1 (|ScriptFormulaFormat|))))
 (|display| (*1 *2 *1)
            (AND (|isDomain| *2 (|Void|))
                 (|isDomain| *1 (|ScriptFormulaFormat|))))
 (|epilogue| (*1 *2 *1)
  (AND (|isDomain| *2 (|List| (|String|)))
       (|isDomain| *1 (|ScriptFormulaFormat|))))
 (|formula| (*1 *2 *1)
  (AND (|isDomain| *2 (|List| (|String|)))
       (|isDomain| *1 (|ScriptFormulaFormat|))))
 (|new| (*1 *1) (|isDomain| *1 (|ScriptFormulaFormat|)))
 (|prologue| (*1 *2 *1)
  (AND (|isDomain| *2 (|List| (|String|)))
       (|isDomain| *1 (|ScriptFormulaFormat|))))
 (|setEpilogue!| (*1 *2 *1 *2)
  (AND (|isDomain| *2 (|List| (|String|)))
       (|isDomain| *1 (|ScriptFormulaFormat|))))
 (|setFormula!| (*1 *2 *1 *2)
  (AND (|isDomain| *2 (|List| (|String|)))
       (|isDomain| *1 (|ScriptFormulaFormat|))))
 (|setPrologue!| (*1 *2 *1 *2)
  (AND (|isDomain| *2 (|List| (|String|)))
       (|isDomain| *1 (|ScriptFormulaFormat|)))))
((~= (((|Boolean|) $ $) NIL))
 (|setPrologue!| (((|List| (|String|)) $ (|List| (|String|))) 39))
 (|setFormula!| (((|List| (|String|)) $ (|List| (|String|))) 40))
 (|setEpilogue!| (((|List| (|String|)) $ (|List| (|String|))) 41))
 (|prologue| (((|List| (|String|)) $) 36)) (|new| (($) 23))
 (|latex| (((|String|) $) NIL))
 (|hashUpdate!| (((|HashState|) (|HashState|) $) NIL))
 (|hash| (((|SingleInteger|) $) NIL)) (|formula| (((|List| (|String|)) $) 37))
 (|epilogue| (((|List| (|String|)) $) 38))
 (|display| (((|Void|) $ (|Integer|)) 34) (((|Void|) $) 35))
 (|convert| (($ (|OutputForm|) (|Integer|)) 31))
 (|coerce| (((|OutputForm|) $) 43) (($ (|OutputForm|)) 27))
 (= (((|Boolean|) $ $) NIL)))
FORMULA
(((|SetCategory|) . T))
(((|BasicType|) . T) ((|CoercibleTo| (|OutputForm|)) . T) ((|SetCategory|) . T))
((|constructor|
  (NIL
   "\\spadtype{ScriptFormulaFormat} provides a coercion from \\spadtype{OutputForm} to IBM SCRIPT/VS Mathematical Formula Format. The basic SCRIPT formula format object consists of three parts: a prologue,{} a formula part and an epilogue. The functions \\spadfun{prologue},{} \\spadfun{formula} and \\spadfun{epilogue} extract these parts,{} respectively. The central parts of the expression go into the formula part. The other parts can be set (\\spadfun{setPrologue!},{} \\spadfun{setEpilogue!}) so that contain the appropriate tags for printing. For example,{} the prologue and epilogue might simply contain \":df.\" and \":edf.\" so that the formula section will be printed in display math mode."))
 (|setPrologue!|
  (((|List| (|String|)) $ (|List| (|String|)))
   "\\spad{setPrologue!(t,{} strings)} sets the prologue section of a formatted object \\spad{t} to strings."))
 (|setFormula!|
  (((|List| (|String|)) $ (|List| (|String|)))
   "\\spad{setFormula!(t,{} strings)} sets the formula section of a formatted object \\spad{t} to strings."))
 (|setEpilogue!|
  (((|List| (|String|)) $ (|List| (|String|)))
   "\\spad{setEpilogue!(t,{} strings)} sets the epilogue section of a formatted object \\spad{t} to strings."))
 (|prologue|
  (((|List| (|String|)) $)
   "\\spad{prologue(t)} extracts the prologue section of a formatted object \\spad{t}."))
 (|new|
  (($)
   "\\spad{new()} create a new,{} empty object. Use \\spadfun{setPrologue!},{} \\spadfun{setFormula!} and \\spadfun{setEpilogue!} to set the various components of this object."))
 (|formula|
  (((|List| (|String|)) $)
   "\\spad{formula(t)} extracts the formula section of a formatted object \\spad{t}."))
 (|epilogue|
  (((|List| (|String|)) $)
   "\\spad{epilogue(t)} extracts the epilogue section of a formatted object \\spad{t}."))
 (|display|
  (((|Void|) $)
   "\\spad{display(t)} outputs the formatted code \\spad{t} so that each line has length less than or equal to the value set by the system command \\spadsyscom{set output length}.")
  (((|Void|) $ (|Integer|))
   "\\spad{display(t,{} width)} outputs the formatted code \\spad{t} so that each line has length less than or equal to \\spadvar{width}."))
 (|convert|
  (($ (|OutputForm|) (|Integer|))
   "\\spad{convert(o,{} step)} changes \\spad{o} in standard output format to SCRIPT formula format and also adds the given step number. This is useful if you want to create equations with given numbers or have the equation numbers correspond to the interpreter step numbers."))
 (|coerce|
  (($ (|OutputForm|))
   "\\spad{coerce(o)} changes \\spad{o} in the standard output format to SCRIPT formula format.")))
(("documentation" 0 3778) ("ancestors" 0 3697) ("parents" 0 3673)
 ("abbreviation" 0 3665) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 2966) ("modemaps" 0 1626) ("sourceFile" 0 1587)
 ("constructorCategory" 0 894) ("constructorModemap" 0 98)
 ("constructorKind" 0 89) ("constructorForm" 0 65) ("NILADIC" 0 20))