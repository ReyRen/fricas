12786               (|Permutation| S)
|domain|
(((|Permutation| |#1|)
  (|Join| (|PermutationCategory| |#1|)
          (CATEGORY |domain|
           (SIGNATURE |listRepresentation|
            ((|Record| (|:| |preimage| (|List| |#1|))
                       (|:| |image| (|List| |#1|)))
             $))
           (SIGNATURE |coercePreimagesImages| ($ (|List| (|List| |#1|))))
           (SIGNATURE |coerce| ($ (|List| (|List| |#1|))))
           (SIGNATURE |coerce| ($ (|List| |#1|)))
           (SIGNATURE |coerceListOfPairs| ($ (|List| (|List| |#1|))))
           (SIGNATURE |degree| ((|NonNegativeInteger|) $))
           (SIGNATURE |movedPoints| ((|Set| |#1|) $))
           (SIGNATURE |cyclePartition| ((|Partition|) $))
           (SIGNATURE |order| ((|NonNegativeInteger|) $))
           (SIGNATURE |numberOfCycles| ((|NonNegativeInteger|) $))
           (SIGNATURE |sign| ((|Integer|) $))
           (SIGNATURE |even?| ((|Boolean|) $))
           (SIGNATURE |odd?| ((|Boolean|) $))
           (SIGNATURE |sort| ((|List| $) (|List| $)))
           (IF (|has| |#1| (|Finite|))
               (SIGNATURE |fixedPoints| ((|Set| |#1|) $))
               |noBranch|)
           (IF (|has| |#1| (|IntegerNumberSystem|))
               (SIGNATURE |coerceImages| ($ (|List| |#1|)))
               (IF (|has| |#1| (|Finite|))
                   (SIGNATURE |coerceImages| ($ (|List| |#1|)))
                   |noBranch|))))
  (|SetCategory|))
 (T |Permutation|))
(|Join| (|PermutationCategory| |#1|)
        (CATEGORY |domain|
         (SIGNATURE |listRepresentation|
          ((|Record| (|:| |preimage| (|List| |#1|))
                     (|:| |image| (|List| |#1|)))
           $))
         (SIGNATURE |coercePreimagesImages| ($ (|List| (|List| |#1|))))
         (SIGNATURE |coerce| ($ (|List| (|List| |#1|))))
         (SIGNATURE |coerce| ($ (|List| |#1|)))
         (SIGNATURE |coerceListOfPairs| ($ (|List| (|List| |#1|))))
         (SIGNATURE |degree| ((|NonNegativeInteger|) $))
         (SIGNATURE |movedPoints| ((|Set| |#1|) $))
         (SIGNATURE |cyclePartition| ((|Partition|) $))
         (SIGNATURE |order| ((|NonNegativeInteger|) $))
         (SIGNATURE |numberOfCycles| ((|NonNegativeInteger|) $))
         (SIGNATURE |sign| ((|Integer|) $)) (SIGNATURE |even?| ((|Boolean|) $))
         (SIGNATURE |odd?| ((|Boolean|) $))
         (SIGNATURE |sort| ((|List| $) (|List| $)))
         (IF (|has| |#1| (|Finite|))
             (SIGNATURE |fixedPoints| ((|Set| |#1|) $))
             |noBranch|)
         (IF (|has| |#1| (|IntegerNumberSystem|))
             (SIGNATURE |coerceImages| ($ (|List| |#1|)))
             (IF (|has| |#1| (|Finite|))
                 (SIGNATURE |coerceImages| ($ (|List| |#1|)))
                 |noBranch|))))
"/git/fricas/src/algebra/PERM.spad"
((|listRepresentation| (*1 *2 *1)
  (AND
   (|isDomain| *2
               (|Record| (|:| |preimage| (|List| *3))
                         (|:| |image| (|List| *3))))
   (|isDomain| *1 (|Permutation| *3)) (|ofCategory| *3 (|SetCategory|))))
 (|coercePreimagesImages| (*1 *1 *2)
  (AND (|isDomain| *2 (|List| (|List| *3))) (|ofCategory| *3 (|SetCategory|))
       (|isDomain| *1 (|Permutation| *3))))
 (|coerce| (*1 *1 *2)
           (AND (|isDomain| *2 (|List| (|List| *3)))
                (|ofCategory| *3 (|SetCategory|))
                (|isDomain| *1 (|Permutation| *3))))
 (|coerce| (*1 *1 *2)
           (AND (|isDomain| *2 (|List| *3)) (|ofCategory| *3 (|SetCategory|))
                (|isDomain| *1 (|Permutation| *3))))
 (|coerceListOfPairs| (*1 *1 *2)
  (AND (|isDomain| *2 (|List| (|List| *3))) (|ofCategory| *3 (|SetCategory|))
       (|isDomain| *1 (|Permutation| *3))))
 (|degree| (*1 *2 *1)
  (AND (|isDomain| *2 (|NonNegativeInteger|))
       (|isDomain| *1 (|Permutation| *3)) (|ofCategory| *3 (|SetCategory|))))
 (|movedPoints| (*1 *2 *1)
  (AND (|isDomain| *2 (|Set| *3)) (|isDomain| *1 (|Permutation| *3))
       (|ofCategory| *3 (|SetCategory|))))
 (|cyclePartition| (*1 *2 *1)
  (AND (|isDomain| *2 (|Partition|)) (|isDomain| *1 (|Permutation| *3))
       (|ofCategory| *3 (|SetCategory|))))
 (|order| (*1 *2 *1)
  (AND (|isDomain| *2 (|NonNegativeInteger|))
       (|isDomain| *1 (|Permutation| *3)) (|ofCategory| *3 (|SetCategory|))))
 (|numberOfCycles| (*1 *2 *1)
  (AND (|isDomain| *2 (|NonNegativeInteger|))
       (|isDomain| *1 (|Permutation| *3)) (|ofCategory| *3 (|SetCategory|))))
 (|sign| (*1 *2 *1)
  (AND (|isDomain| *2 (|Integer|)) (|isDomain| *1 (|Permutation| *3))
       (|ofCategory| *3 (|SetCategory|))))
 (|even?| (*1 *2 *1)
  (AND (|isDomain| *2 (|Boolean|)) (|isDomain| *1 (|Permutation| *3))
       (|ofCategory| *3 (|SetCategory|))))
 (|odd?| (*1 *2 *1)
  (AND (|isDomain| *2 (|Boolean|)) (|isDomain| *1 (|Permutation| *3))
       (|ofCategory| *3 (|SetCategory|))))
 (|sort| (*1 *2 *2)
  (AND (|isDomain| *2 (|List| (|Permutation| *3)))
       (|isDomain| *1 (|Permutation| *3)) (|ofCategory| *3 (|SetCategory|))))
 (|fixedPoints| (*1 *2 *1)
  (AND (|isDomain| *2 (|Set| *3)) (|isDomain| *1 (|Permutation| *3))
       (|ofCategory| *3 (|Finite|)) (|ofCategory| *3 (|SetCategory|))))
 (|coerceImages| (*1 *1 *2)
  (OR
   (AND (|isDomain| *2 (|List| *3)) (|ofCategory| *3 (|Finite|))
        (|ofCategory| *3 (|SetCategory|)) (|isDomain| *1 (|Permutation| *3)))
   (AND (|isDomain| *2 (|List| *3)) (|ofCategory| *3 (|IntegerNumberSystem|))
        (|ofCategory| *3 (|SetCategory|)) (|isDomain| *1 (|Permutation| *3))))))
((~= (((|Boolean|) $ $) NIL)) (|sort| (((|List| $) (|List| $)) 75))
 (|smaller?|
  (((|Boolean|) $ $) NIL
   (OR (|has| |#1| (|Finite|)) (|has| |#1| (|OrderedSet|)))))
 (|sign| (((|Integer|) $) 59)) (|sample| (($) NIL T CONST))
 (|rightRecip| (((|Union| $ #1="failed") $) NIL))
 (|rightPower| (($ $ (|PositiveInteger|)) NIL)
  (($ $ (|NonNegativeInteger|)) NIL))
 (|recip| (((|Union| $ #1#) $) NIL)) (|order| (((|NonNegativeInteger|) $) 57))
 (|orbit| (((|Set| |#1|) $ |#1|) 48)) (|one?| (((|Boolean|) $) NIL))
 (|odd?| (((|Boolean|) $) 62))
 (|numberOfCycles| (((|NonNegativeInteger|) $) 60))
 (|movedPoints| (((|Set| |#1|) $) 41))
 (|min| (($ $ $) NIL (OR (|has| |#1| (|Finite|)) (|has| |#1| (|OrderedSet|)))))
 (|max| (($ $ $) NIL (OR (|has| |#1| (|Finite|)) (|has| |#1| (|OrderedSet|)))))
 (|listRepresentation|
  (((|Record| (|:| |preimage| (|List| |#1|)) (|:| |image| (|List| |#1|))) $)
   36))
 (|leftRecip| (((|Union| $ #1#) $) NIL))
 (|leftPower| (($ $ (|PositiveInteger|)) NIL)
  (($ $ (|NonNegativeInteger|)) NIL))
 (|latex| (((|String|) $) NIL)) (|inv| (($ $) 91))
 (|hashUpdate!| (((|HashState|) (|HashState|) $) NIL))
 (|hash| (((|SingleInteger|) $) NIL))
 (|fixedPoints| (((|Set| |#1|) $) 97 (|has| |#1| (|Finite|))))
 (|even?| (((|Boolean|) $) 58)) (|eval| ((|#1| $ |#1|) 46))
 (|elt| ((|#1| $ |#1|) 92)) (|degree| (((|NonNegativeInteger|) $) 43))
 (|cycles| (($ (|List| (|List| |#1|))) 83))
 (|cyclePartition| (((|Partition|) $) 52)) (|cycle| (($ (|List| |#1|)) 21))
 (|conjugate| (($ $ $) NIL)) (|commutator| (($ $ $) NIL))
 (|coercePreimagesImages| (($ (|List| (|List| |#1|))) 38))
 (|coerceListOfPairs| (($ (|List| (|List| |#1|))) 87))
 (|coerceImages|
  (($ (|List| |#1|)) 94
   (OR (|has| |#1| (|Finite|)) (|has| |#1| (|IntegerNumberSystem|)))))
 (|coerce| (((|OutputForm|) $) 82) (($ (|List| (|List| |#1|))) 65)
           (($ (|List| |#1|)) 66))
 (^ (($ $ (|PositiveInteger|)) NIL) (($ $ (|NonNegativeInteger|)) NIL)
  (($ $ (|Integer|)) NIL))
 (|One| (($) 16 T CONST))
 (>=
  (((|Boolean|) $ $) NIL
   (OR (|has| |#1| (|Finite|)) (|has| |#1| (|OrderedSet|)))))
 (>
  (((|Boolean|) $ $) NIL
   (OR (|has| |#1| (|Finite|)) (|has| |#1| (|OrderedSet|)))))
 (= (((|Boolean|) $ $) 44))
 (<=
  (((|Boolean|) $ $) NIL
   (OR (|has| |#1| (|Finite|)) (|has| |#1| (|OrderedSet|)))))
 (< (((|Boolean|) $ $) 64)) (/ (($ $ $) NIL)) (* (($ $ $) 22)))
((|HasCategory| |#1| '(|Finite|))
 (OR (|HasCategory| |#1| '(|Finite|)) (|HasCategory| |#1| '(|OrderedSet|)))
 (OR (|HasCategory| |#1| '(|Finite|))
     (|HasCategory| |#1| '(|IntegerNumberSystem|))))
PERM
(((|PermutationCategory| |#1|) . T))
(((|BasicType|) . T) ((|CoercibleTo| (|OutputForm|)) . T)
 ((|Comparable|) OR (|has| |t#1| (|OrderedSet|)) (|has| |t#1| (|Finite|)))
 ((|Group|) . T) ((|Magma|) . T) ((|MagmaWithUnit|) . T) ((|Monoid|) . T)
 ((|OrderedSet|) OR (|has| |t#1| (|OrderedSet|)) (|has| |t#1| (|Finite|)))
 ((|PartialOrder|) OR (|has| |t#1| (|OrderedSet|)) (|has| |t#1| (|Finite|)))
 ((|PermutationCategory| |#1|) . T) ((|SemiGroup|) . T) ((|SetCategory|) . T)
 ((|TwoSidedRecip|) . T) ((|unitsKnown|) . T))
((|constructor|
  (NIL
   "Permutation(\\spad{S}) implements the group of all bijections \\indented{2}{on a set \\spad{S},{} which move only a finite number of points.} \\indented{2}{A permutation is considered as a map from \\spad{S} into \\spad{S}. In particular} \\indented{2}{multiplication is defined as composition of maps:} \\indented{2}{{\\em pi1 * pi2 = pi1 o pi2}.} \\indented{2}{The internal representation of permuatations are two lists} \\indented{2}{of equal length representing preimages and images.}"))
 (|coerceImages|
  (($ (|List| |#1|))
   "\\spad{coerceImages(ls)} coerces the list {\\em ls} to a permutation whose image is given by {\\em ls} and the preimage is fixed to be {\\em [1,{} ...,{} n]}. Note: {coerceImages(\\spad{ls})=coercePreimagesImages([1,{} ...,{} \\spad{n}],{} \\spad{ls})}. We assume that both preimage and image do not contain repetitions."))
 (|fixedPoints|
  (((|Set| |#1|) $)
   "\\spad{fixedPoints(p)} returns the points fixed by the permutation \\spad{p}."))
 (|sort|
  (((|List| $) (|List| $))
   "\\spad{sort(lp)} sorts a list of permutations {\\em lp} according to cycle structure first according to length of cycles,{} second,{} if \\spad{S} has \\spadtype{Finite} or \\spad{S} has \\spadtype{OrderedSet} according to lexicographical order of entries in cycles of equal length."))
 (|odd?|
  (((|Boolean|) $)
   "\\spad{odd?(p)} returns \\spad{true} if and only if \\spad{p} is an odd permutation \\spadignore{i.e.} {\\em sign(p)} is {\\em -1}."))
 (|even?|
  (((|Boolean|) $)
   "\\spad{even?(p)} returns \\spad{true} if and only if \\spad{p} is an even permutation,{} \\spadignore{i.e.} {\\em sign(p)} is 1."))
 (|sign|
  (((|Integer|) $)
   "\\spad{sign(p)} returns the signum of the permutation \\spad{p},{} \\spad{+1} or \\spad{-1}."))
 (|numberOfCycles|
  (((|NonNegativeInteger|) $)
   "\\spad{numberOfCycles(p)} returns the number of non-trivial cycles of the permutation \\spad{p}."))
 (|order|
  (((|NonNegativeInteger|) $)
   "\\spad{order(p)} returns the order of a permutation \\spad{p} as a group element."))
 (|cyclePartition|
  (((|Partition|) $)
   "\\spad{cyclePartition(p)} returns the cycle structure of a permutation \\spad{p} including cycles of length 1 only if \\spad{S} is finite."))
 (|movedPoints|
  (((|Set| |#1|) $)
   "\\spad{movedPoints(p)} returns the set of points moved by the permutation \\spad{p}."))
 (|degree|
  (((|NonNegativeInteger|) $)
   "\\spad{degree(p)} retuns the number of points moved by the permutation \\spad{p}."))
 (|coerceListOfPairs|
  (($ (|List| (|List| |#1|)))
   "\\spad{coerceListOfPairs(lls)} coerces a list of pairs {\\em lls} to a permutation. Error: if not consistent,{} \\spadignore{i.e.} the set of the first elements coincides with the set of second elements. coerce(\\spad{p}) generates output of the permutation \\spad{p} with domain OutputForm."))
 (|coerce|
  (($ (|List| |#1|))
   "\\spad{coerce(ls)} coerces a cycle {\\em ls},{} \\spadignore{i.e.} a list with not repetitions to a permutation,{} which maps {\\em ls.i} to {\\em ls.i+1},{} indices modulo the length of the list. Error: if repetitions occur.")
  (($ (|List| (|List| |#1|)))
   "\\spad{coerce(lls)} coerces a list of cycles {\\em lls} to a permutation,{} each cycle being a list with no repetitions,{} is coerced to the permutation,{} which maps {\\em ls.i} to {\\em ls.i+1},{} indices modulo the length of the list,{} then these permutations are mutiplied. Error: if repetitions occur in one cycle."))
 (|coercePreimagesImages|
  (($ (|List| (|List| |#1|)))
   "\\spad{coercePreimagesImages(lls)} coerces the representation {\\em lls} of a permutation as a list of preimages and images to a permutation. We assume that both preimage and image do not contain repetitions."))
 (|listRepresentation|
  (((|Record| (|:| |preimage| (|List| |#1|)) (|:| |image| (|List| |#1|))) $)
   "\\spad{listRepresentation(p)} produces a representation {\\em rep} of the permutation \\spad{p} as a list of preimages and images,{} \\spad{i}.\\spad{e} \\spad{p} maps {\\em (rep.preimage).k} to {\\em (rep.image).k} for all indices \\spad{k}. Elements of \\spad{S} not in {\\em (rep.preimage).k} are fixed points,{} and these are the only fixed points of the permutation.")))
(("documentation" 0 8543) ("ancestors" 0 8059) ("parents" 0 8022)
 ("abbreviation" 0 8017) ("predicates" 0 7816) ("superDomain" 0 NIL)
 ("operationAlist" 0 5455) ("modemaps" 0 2788) ("sourceFile" 0 2752)
 ("constructorCategory" 0 1462) ("constructorModemap" 0 47)
 ("constructorKind" 0 38) ("constructorForm" 0 20))