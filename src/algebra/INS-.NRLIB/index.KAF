7106                (|IntegerNumberSystem&| S)
|domain|
(((|IntegerNumberSystem&| |#1|)
  (CATEGORY |domain| (SIGNATURE |invmod| (|#1| |#1| |#1|))
   (SIGNATURE |powmod| (|#1| |#1| |#1| |#1|)) (SIGNATURE |mask| (|#1| |#1|))
   (SIGNATURE |copy| (|#1| |#1|))
   (SIGNATURE |rationalIfCan|
    ((|Union| (|Fraction| (|Integer|)) "failed") |#1|))
   (SIGNATURE |rational| ((|Fraction| (|Integer|)) |#1|))
   (SIGNATURE |rational?| ((|Boolean|) |#1|))
   (SIGNATURE |symmetricRemainder| (|#1| |#1| |#1|))
   (SIGNATURE |bit?| ((|Boolean|) |#1| |#1|))
   (SIGNATURE |even?| ((|Boolean|) |#1|)) (SIGNATURE |init| (|#1|))
   (SIGNATURE |nextItem| ((|Union| |#1| "failed") |#1|))
   (SIGNATURE |convert| ((|DoubleFloat|) |#1|))
   (SIGNATURE |convert| ((|Float|) |#1|))
   (SIGNATURE |permutation| (|#1| |#1| |#1|))
   (SIGNATURE |factorial| (|#1| |#1|)) (SIGNATURE |binomial| (|#1| |#1| |#1|))
   (SIGNATURE |patternMatch|
    ((|PatternMatchResult| (|Integer|) |#1|) |#1| (|Pattern| (|Integer|))
     (|PatternMatchResult| (|Integer|) |#1|)))
   (SIGNATURE |convert| ((|Pattern| (|Integer|)) |#1|))
   (SIGNATURE |convert| ((|InputForm|) |#1|))
   (SIGNATURE |retract| ((|Integer|) |#1|))
   (SIGNATURE |retractIfCan| ((|Union| (|Integer|) "failed") |#1|))
   (SIGNATURE |convert| ((|Integer|) |#1|))
   (SIGNATURE |differentiate| (|#1| |#1|))
   (SIGNATURE |differentiate| (|#1| |#1| (|NonNegativeInteger|)))
   (SIGNATURE |positive?| ((|Boolean|) |#1|))
   (SIGNATURE |euclideanSize| ((|NonNegativeInteger|) |#1|))
   (SIGNATURE |factor| ((|Factored| |#1|) |#1|))
   (SIGNATURE |squareFree| ((|Factored| |#1|) |#1|))
   (SIGNATURE |prime?| ((|Boolean|) |#1|))
   (SIGNATURE |characteristic| ((|NonNegativeInteger|))))
  (|IntegerNumberSystem|))
 (T |IntegerNumberSystem&|))
(CATEGORY |domain| (SIGNATURE |invmod| (|#1| |#1| |#1|))
 (SIGNATURE |powmod| (|#1| |#1| |#1| |#1|)) (SIGNATURE |mask| (|#1| |#1|))
 (SIGNATURE |copy| (|#1| |#1|))
 (SIGNATURE |rationalIfCan| ((|Union| (|Fraction| (|Integer|)) "failed") |#1|))
 (SIGNATURE |rational| ((|Fraction| (|Integer|)) |#1|))
 (SIGNATURE |rational?| ((|Boolean|) |#1|))
 (SIGNATURE |symmetricRemainder| (|#1| |#1| |#1|))
 (SIGNATURE |bit?| ((|Boolean|) |#1| |#1|))
 (SIGNATURE |even?| ((|Boolean|) |#1|)) (SIGNATURE |init| (|#1|))
 (SIGNATURE |nextItem| ((|Union| |#1| "failed") |#1|))
 (SIGNATURE |convert| ((|DoubleFloat|) |#1|))
 (SIGNATURE |convert| ((|Float|) |#1|))
 (SIGNATURE |permutation| (|#1| |#1| |#1|)) (SIGNATURE |factorial| (|#1| |#1|))
 (SIGNATURE |binomial| (|#1| |#1| |#1|))
 (SIGNATURE |patternMatch|
  ((|PatternMatchResult| (|Integer|) |#1|) |#1| (|Pattern| (|Integer|))
   (|PatternMatchResult| (|Integer|) |#1|)))
 (SIGNATURE |convert| ((|Pattern| (|Integer|)) |#1|))
 (SIGNATURE |convert| ((|InputForm|) |#1|))
 (SIGNATURE |retract| ((|Integer|) |#1|))
 (SIGNATURE |retractIfCan| ((|Union| (|Integer|) "failed") |#1|))
 (SIGNATURE |convert| ((|Integer|) |#1|))
 (SIGNATURE |differentiate| (|#1| |#1|))
 (SIGNATURE |differentiate| (|#1| |#1| (|NonNegativeInteger|)))
 (SIGNATURE |positive?| ((|Boolean|) |#1|))
 (SIGNATURE |euclideanSize| ((|NonNegativeInteger|) |#1|))
 (SIGNATURE |factor| ((|Factored| |#1|) |#1|))
 (SIGNATURE |squareFree| ((|Factored| |#1|) |#1|))
 (SIGNATURE |prime?| ((|Boolean|) |#1|))
 (SIGNATURE |characteristic| ((|NonNegativeInteger|))))
"/git/fricas/src/algebra/INS.spad"
((|characteristic| (*1 *2)
  (AND (|isDomain| *2 (|NonNegativeInteger|))
       (|isDomain| *1 (|IntegerNumberSystem&| *3))
       (|ofCategory| *3 (|IntegerNumberSystem|)))))
((|symmetricRemainder| (($ $ $) 80)) (|squareFree| (((|Factored| $) $) 47))
 (|retractIfCan| (((|Union| (|Integer|) "failed") $) 59))
 (|retract| (((|Integer|) $) 37))
 (|rationalIfCan| (((|Union| (|Fraction| (|Integer|)) "failed") $) 74))
 (|rational?| (((|Boolean|) $) 23))
 (|rational| (((|Fraction| (|Integer|)) $) 72)) (|prime?| (((|Boolean|) $) 50))
 (|powmod| (($ $ $ $) 87)) (|positive?| (((|Boolean|) $) 15))
 (|permutation| (($ $ $) 57))
 (|patternMatch|
  (((|PatternMatchResult| (|Integer|) $) $ (|Pattern| (|Integer|))
    (|PatternMatchResult| (|Integer|) $))
   69))
 (|nextItem| (((|Union| $ "failed") $) 64)) (|mask| (($ $) 22))
 (|invmod| (($ $ $) 85)) (|init| (($) 60)) (|factorial| (($ $) 53))
 (|factor| (((|Factored| $) $) 45)) (|even?| (((|Boolean|) $) 13))
 (|euclideanSize| (((|NonNegativeInteger|) $) 28))
 (|differentiate| (($ $ (|NonNegativeInteger|)) NIL) (($ $) 10))
 (|copy| (($ $) 16))
 (|convert| (((|Integer|) $) NIL) (((|InputForm|) $) 36)
            (((|Pattern| (|Integer|)) $) 40) (((|Float|) $) 31)
            (((|DoubleFloat|) $) 33))
 (|characteristic| (((|NonNegativeInteger|)) 8))
 (|bit?| (((|Boolean|) $ $) 19)) (|binomial| (($ $ $) 55)))
INS-
((|constructor|
  (NIL "An \\spad{IntegerNumberSystem} is a model for the integers."))
 (|invmod|
  (($ $ $)
   "\\spad{invmod(a,{} b)},{} \\spad{0<=a<b>1},{} \\spad{(a,{} b)=1} means \\spad{1/a mod b}."))
 (|powmod|
  (($ $ $ $)
   "\\spad{powmod(a,{} b,{} p)},{} \\spad{0<=a,{} b<p>1},{} means \\spad{a^b mod p}."))
 (|mulmod|
  (($ $ $ $)
   "\\spad{mulmod(a,{} b,{} p)},{} \\spad{0<=a,{} b<p>1},{} means \\spad{a*b mod p}."))
 (|submod|
  (($ $ $ $)
   "\\spad{submod(a,{} b,{} p)},{} \\spad{0<=a,{} b<p>1},{} means \\spad{a-b mod p}."))
 (|addmod|
  (($ $ $ $)
   "\\spad{addmod(a,{} b,{} p)},{} \\spad{0<=a,{} b<p>1},{} means \\spad{a+b mod p}."))
 (|mask|
  (($ $) "\\spad{mask(n)} returns \\spad{2^n-1} (an \\spad{n} bit mask)."))
 (|dec| (($ $) "\\spad{dec(x)} returns \\spad{x - 1}."))
 (|inc| (($ $) "\\spad{inc(x)} returns \\spad{x + 1}."))
 (|copy| (($ $) "\\spad{copy(n)} gives a copy of \\spad{n}."))
 (|random|
  (($ $) "\\spad{random(n)} creates a random element from 0 to \\spad{n-1}."))
 (|rationalIfCan|
  (((|Union| (|Fraction| (|Integer|)) "failed") $)
   "\\spad{rationalIfCan(n)} creates a rational number,{} or returns \"failed\" if this is not possible."))
 (|rational|
  (((|Fraction| (|Integer|)) $)
   "\\spad{rational(n)} creates a rational number (see \\spadtype{Fraction Integer})."))
 (|rational?|
  (((|Boolean|) $)
   "\\spad{rational?(n)} tests if \\spad{n} is a rational number (see \\spadtype{Fraction Integer})."))
 (|symmetricRemainder|
  (($ $ $)
   "\\spad{symmetricRemainder(a,{} b)} (where \\spad{b > 1}) yields \\spad{r} where \\spad{ -b/2 <= r < b/2 }."))
 (|positiveRemainder|
  (($ $ $)
   "\\spad{positiveRemainder(a,{} b)} (where \\spad{b > 1}) yields \\spad{r} where \\spad{0 <= r < b} and \\spad{r = a rem b}."))
 (|bit?|
  (((|Boolean|) $ $)
   "\\spad{bit?(n,{} i)} returns \\spad{true} if and only if \\spad{i}-th bit of \\spad{n} is a 1."))
 (|shift|
  (($ $ $) "\\spad{shift(a,{} i)} shift \\spad{a} by \\spad{i} digits."))
 (|length| (($ $) "\\spad{length(a)} length of \\spad{a} in digits."))
 (|base|
  (($)
   "\\spad{base()} returns the base for the operations of \\spad{IntegerNumberSystem}."))
 (|even?|
  (((|Boolean|) $)
   "\\spad{even?(n)} returns \\spad{true} if and only if \\spad{n} is even."))
 (|odd?|
  (((|Boolean|) $)
   "\\spad{odd?(n)} returns \\spad{true} if and only if \\spad{n} is odd.")))
(("documentation" 0 4734) ("ancestors" 0 NIL) ("parents" 0 NIL)
 ("abbreviation" 0 4729) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 3543) ("modemaps" 0 3367) ("sourceFile" 0 3332)
 ("constructorCategory" 0 1770) ("constructorModemap" 0 56)
 ("constructorKind" 0 47) ("constructorForm" 0 20))