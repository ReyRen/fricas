)abbrev domain LEXP LieExponentials
++ Author: Michel Petitot (petitot@lifl.fr).
++ Date Created: 91
++ Basic Functions:
++ Related Constructors:
++ Also See:
++ AMS Classifications:
++ Keywords:
++ References:
++ Description:
++ Management of the Lie Group associated with a
++ free nilpotent Lie algebra. Every Lie bracket with
++ length greater than \spad{Order} are
++ assumed to be null.
++ The implementation inherits from the \spadtype{XPBWPolynomial}
++ domain constructor: Lyndon
++ coordinates are exponential coordinates
++ of the second kind. \newline Author: Michel Petitot (petitot@lifl.fr).

LieExponentials(VarSet, R, Order) : XDPcat == XDPdef where

  EX     ==> OutputForm
  PI     ==> PositiveInteger
  NNI    ==> NonNegativeInteger
  I      ==> Integer
  RN     ==> Fraction(I)
  R      : Join(CommutativeRing, Module RN)
  Order  : PI
  VarSet : OrderedSet
  LWORD  ==> LyndonWord(VarSet)
  LWORDS ==> List LWORD
  BASIS  ==> PoincareBirkhoffWittLyndonBasis(VarSet)
  TERM   ==> Record(k : BASIS, c : R)
  LTERMS ==> List(TERM)
  LPOLY  ==> LiePolynomial(VarSet, R)
  XDPOLY ==> XDistributedPolynomial(VarSet, R)
  PBWPOLY==> XPBWPolynomial(VarSet, R)
  TERM1  ==> Record(k : LWORD, c : R)
  EQ     ==> Equation(R)

  XDPcat == Group with
    exp         : LPOLY -> %
      ++ \spad{exp(p)} returns the exponential of \spad{p}.
    log         : % -> LPOLY
      ++ \spad{log(p)} returns the logarithm of \spad{p}.
    listOfTerms : % -> LTERMS
      ++ \spad{listOfTerms(p)} returns the internal representation of \spad{p}.
    coerce      : % -> XDPOLY
      ++ \spad{coerce(g)} returns the internal representation of \spad{g}.
    coerce      : % -> PBWPOLY
      ++ \spad{coerce(g)} returns the internal representation of \spad{g}.
    mirror      : % -> %
      ++ \spad{mirror(g)} is the mirror of the internal representation of \spad{g}.
    varList     : % -> List VarSet
      ++ \spad{varList(g)} returns the list of variables of \spad{g}.
    LyndonBasis : List VarSet -> List LPOLY
      ++ \spad{LyndonBasis(lv)} returns the Lyndon basis of the nilpotent free
      ++ Lie algebra.
    LyndonCoordinates : % -> List TERM1
      ++ \spad{LyndonCoordinates(g)} returns the exponential coordinates of \spad{g}.
    identification : (%, %) -> List EQ
      ++ \spad{identification(g, h)} returns the list of equations \spad{g_i = h_i},
      ++ where \spad{g_i} (resp. \spad{h_i}) are exponential coordinates
      ++ of \spad{g} (resp. \spad{h}).

  XDPdef == PBWPOLY add

    -- Representation
       Rep := PBWPOLY

    -- local functions
       compareTerm1s : (TERM1, TERM1) -> Boolean
       out : TERM1 -> EX
       ident : (List TERM1, List TERM1) -> List EQ

       ident(l1, l2) ==
         import(TERM1)
         empty?(l1) => [equation(0$R, t.c)$EQ for t in l2]
         empty?(l2) => [equation(t.c, 0$R)$EQ for t in l1]
         u1 : LWORD := l1.first.k; c1 : R := l1.first.c
         u2 : LWORD := l2.first.k; c2 : R := l2.first.c
         u1 = u2 =>
            r : R := c1 - c2
            r = 0 => ident(rest l1, rest l2)
            cons(equation(c1, c2)$EQ, ident(rest l1, rest l2))
         lexico(u1, u2)$LWORD =>
            cons(equation(0$R, c2)$EQ, ident(l1, rest l2))
         cons(equation(c1, 0$R)$EQ, ident(rest l1, l2))

       -- inverse lexicographic  order
       compareTerm1s(u : TERM1, v : TERM1) : Boolean == lexico(v.k, u.k)$LWORD

       out(t : TERM1) : EX ==
         t.c =$R 1 => char("e")$Character :: EX ^ t.k ::EX
         char("e")$Character :: EX ^ (t.c::EX * t.k::EX)

    -- definitions
       identification(x, y) ==
          l1 : List TERM1 := LyndonCoordinates x
          l2 : List TERM1 := LyndonCoordinates y
          ident(l1, l2)

       LyndonCoordinates x ==
         lt : List TERM1 := [[l::LWORD, t.c]$TERM1 for t in listOfTerms x | _
                             (l := retractIfCan(t.k)$BASIS) case LWORD ]
         lt := sort(compareTerm1s, lt)

       x : % * y : % == product(x::Rep, y::Rep, Order::I::NNI)$Rep

       exp p == exp(p::Rep, Order::I::NNI)$Rep

       log p == LiePolyIfCan(log(p, Order::I::NNI))$Rep :: LPOLY

       coerce(p : %) : EX ==
          p = 1$% => 1$R :: EX
          lt : List TERM1 := LyndonCoordinates p
          reduce(_*, [out t for t in lt])$List(EX)


       LyndonBasis(lv) ==
         [LiePoly(l)$LPOLY for l in LyndonWordsList(lv, Order)$LWORD]

       coerce(p : %) : PBWPOLY == p::Rep

       inv x ==
         x = 1 => 1
         lt : LTERMS := listOfTerms mirror x
         lt := [[t.k, (odd? length(t.k)$BASIS => - t.c; t.c)]$TERM for t in lt ]
         lt pretend %

--Copyright (c) 1991-2002, The Numerical ALgorithms Group Ltd.
--All rights reserved.
--
--Redistribution and use in source and binary forms, with or without
--modification, are permitted provided that the following conditions are
--met:
--
--    - Redistributions of source code must retain the above copyright
--      notice, this list of conditions and the following disclaimer.
--
--    - Redistributions in binary form must reproduce the above copyright
--      notice, this list of conditions and the following disclaimer in
--      the documentation and/or other materials provided with the
--      distribution.
--
--    - Neither the name of The Numerical ALgorithms Group Ltd. nor the
--      names of its contributors may be used to endorse or promote products
--      derived from this software without specific prior written permission.
--
--THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
--IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
--TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
--PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
--OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
--EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
--PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
--PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
--LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
--NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
--SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
