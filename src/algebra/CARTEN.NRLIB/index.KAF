14836               (|CartesianTensor| |minix| |dim| R)
|domain|
(((|CartesianTensor| |#1| |#2| |#3|)
  (|Join| (|GradedAlgebra| |#3| (|NonNegativeInteger|))
          (|GradedModule| (|Integer|) (|NonNegativeInteger|))
          (CATEGORY |domain|
           (SIGNATURE |coerce| ($ (|DirectProduct| |#2| |#3|)))
           (SIGNATURE |coerce| ($ (|SquareMatrix| |#2| |#3|)))
           (SIGNATURE |coerce| ($ (|List| |#3|)))
           (SIGNATURE |coerce| ($ (|List| $)))
           (SIGNATURE |rank| ((|NonNegativeInteger|) $))
           (SIGNATURE |elt| (|#3| $)) (SIGNATURE |elt| (|#3| $ (|Integer|)))
           (SIGNATURE |elt| (|#3| $ (|Integer|) (|Integer|)))
           (SIGNATURE |elt| (|#3| $ (|Integer|) (|Integer|) (|Integer|)))
           (SIGNATURE |elt|
            (|#3| $ (|Integer|) (|Integer|) (|Integer|) (|Integer|)))
           (SIGNATURE |elt| (|#3| $ (|List| (|Integer|))))
           (SIGNATURE |product| ($ $ $)) (SIGNATURE * ($ $ $))
           (SIGNATURE |contract| ($ $ (|Integer|) $ (|Integer|)))
           (SIGNATURE |contract| ($ $ (|Integer|) (|Integer|)))
           (SIGNATURE |transpose| ($ $))
           (SIGNATURE |transpose| ($ $ (|Integer|) (|Integer|)))
           (SIGNATURE |reindex| ($ $ (|List| (|Integer|))))
           (SIGNATURE |kroneckerDelta| ($)) (SIGNATURE |leviCivitaSymbol| ($))
           (SIGNATURE |ravel| ((|List| |#3|) $))
           (SIGNATURE |unravel| ($ (|List| |#3|))) (SIGNATURE |sample| ($))))
  (|Integer|) (|NonNegativeInteger|) (|CommutativeRing|))
 (T |CartesianTensor|))
(|Join| (|GradedAlgebra| |#3| (|NonNegativeInteger|))
        (|GradedModule| (|Integer|) (|NonNegativeInteger|))
        (CATEGORY |domain| (SIGNATURE |coerce| ($ (|DirectProduct| |#2| |#3|)))
         (SIGNATURE |coerce| ($ (|SquareMatrix| |#2| |#3|)))
         (SIGNATURE |coerce| ($ (|List| |#3|)))
         (SIGNATURE |coerce| ($ (|List| $)))
         (SIGNATURE |rank| ((|NonNegativeInteger|) $))
         (SIGNATURE |elt| (|#3| $)) (SIGNATURE |elt| (|#3| $ (|Integer|)))
         (SIGNATURE |elt| (|#3| $ (|Integer|) (|Integer|)))
         (SIGNATURE |elt| (|#3| $ (|Integer|) (|Integer|) (|Integer|)))
         (SIGNATURE |elt|
          (|#3| $ (|Integer|) (|Integer|) (|Integer|) (|Integer|)))
         (SIGNATURE |elt| (|#3| $ (|List| (|Integer|))))
         (SIGNATURE |product| ($ $ $)) (SIGNATURE * ($ $ $))
         (SIGNATURE |contract| ($ $ (|Integer|) $ (|Integer|)))
         (SIGNATURE |contract| ($ $ (|Integer|) (|Integer|)))
         (SIGNATURE |transpose| ($ $))
         (SIGNATURE |transpose| ($ $ (|Integer|) (|Integer|)))
         (SIGNATURE |reindex| ($ $ (|List| (|Integer|))))
         (SIGNATURE |kroneckerDelta| ($)) (SIGNATURE |leviCivitaSymbol| ($))
         (SIGNATURE |ravel| ((|List| |#3|) $))
         (SIGNATURE |unravel| ($ (|List| |#3|))) (SIGNATURE |sample| ($))))
"/git/fricas/src/algebra/CARTEN.spad"
((|product| (*1 *1 *1 *1)
  (AND (|isDomain| *1 (|CartesianTensor| *2 *3 *4)) (|ofType| *2 (|Integer|))
       (|ofType| *3 (|NonNegativeInteger|))
       (|ofCategory| *4 (|CommutativeRing|))))
 (|coerce| (*1 *1 *2)
           (AND (|isDomain| *2 (|DirectProduct| *4 *5))
                (|ofType| *4 (|NonNegativeInteger|))
                (|ofCategory| *5 (|CommutativeRing|))
                (|isDomain| *1 (|CartesianTensor| *3 *4 *5))
                (|ofType| *3 (|Integer|))))
 (|coerce| (*1 *1 *2)
           (AND (|isDomain| *2 (|SquareMatrix| *4 *5))
                (|ofType| *4 (|NonNegativeInteger|))
                (|ofCategory| *5 (|CommutativeRing|))
                (|isDomain| *1 (|CartesianTensor| *3 *4 *5))
                (|ofType| *3 (|Integer|))))
 (|coerce| (*1 *1 *2)
           (AND (|isDomain| *2 (|List| *5))
                (|ofCategory| *5 (|CommutativeRing|))
                (|isDomain| *1 (|CartesianTensor| *3 *4 *5))
                (|ofType| *3 (|Integer|))
                (|ofType| *4 (|NonNegativeInteger|))))
 (|coerce| (*1 *1 *2)
           (AND (|isDomain| *2 (|List| (|CartesianTensor| *3 *4 *5)))
                (|isDomain| *1 (|CartesianTensor| *3 *4 *5))
                (|ofType| *3 (|Integer|)) (|ofType| *4 (|NonNegativeInteger|))
                (|ofCategory| *5 (|CommutativeRing|))))
 (|rank| (*1 *2 *1)
  (AND (|isDomain| *2 (|NonNegativeInteger|))
       (|isDomain| *1 (|CartesianTensor| *3 *4 *5)) (|ofType| *3 (|Integer|))
       (|ofType| *4 *2) (|ofCategory| *5 (|CommutativeRing|))))
 (|elt| (*1 *2 *1)
  (AND (|ofCategory| *2 (|CommutativeRing|))
       (|isDomain| *1 (|CartesianTensor| *3 *4 *2)) (|ofType| *3 (|Integer|))
       (|ofType| *4 (|NonNegativeInteger|))))
 (|elt| (*1 *2 *1 *3)
  (AND (|isDomain| *3 (|Integer|)) (|ofCategory| *2 (|CommutativeRing|))
       (|isDomain| *1 (|CartesianTensor| *4 *5 *2)) (|ofType| *4 *3)
       (|ofType| *5 (|NonNegativeInteger|))))
 (|elt| (*1 *2 *1 *3 *3)
  (AND (|isDomain| *3 (|Integer|)) (|ofCategory| *2 (|CommutativeRing|))
       (|isDomain| *1 (|CartesianTensor| *4 *5 *2)) (|ofType| *4 *3)
       (|ofType| *5 (|NonNegativeInteger|))))
 (|elt| (*1 *2 *1 *3 *3 *3)
  (AND (|isDomain| *3 (|Integer|)) (|ofCategory| *2 (|CommutativeRing|))
       (|isDomain| *1 (|CartesianTensor| *4 *5 *2)) (|ofType| *4 *3)
       (|ofType| *5 (|NonNegativeInteger|))))
 (|elt| (*1 *2 *1 *3 *3 *3 *3)
  (AND (|isDomain| *3 (|Integer|)) (|ofCategory| *2 (|CommutativeRing|))
       (|isDomain| *1 (|CartesianTensor| *4 *5 *2)) (|ofType| *4 *3)
       (|ofType| *5 (|NonNegativeInteger|))))
 (|elt| (*1 *2 *1 *3)
  (AND (|isDomain| *3 (|List| (|Integer|)))
       (|ofCategory| *2 (|CommutativeRing|))
       (|isDomain| *1 (|CartesianTensor| *4 *5 *2)) (|ofType| *4 (|Integer|))
       (|ofType| *5 (|NonNegativeInteger|))))
 (* (*1 *1 *1 *1)
    (AND (|isDomain| *1 (|CartesianTensor| *2 *3 *4)) (|ofType| *2 (|Integer|))
         (|ofType| *3 (|NonNegativeInteger|))
         (|ofCategory| *4 (|CommutativeRing|))))
 (|contract| (*1 *1 *1 *2 *1 *2)
  (AND (|isDomain| *2 (|Integer|)) (|isDomain| *1 (|CartesianTensor| *3 *4 *5))
       (|ofType| *3 *2) (|ofType| *4 (|NonNegativeInteger|))
       (|ofCategory| *5 (|CommutativeRing|))))
 (|contract| (*1 *1 *1 *2 *2)
  (AND (|isDomain| *2 (|Integer|)) (|isDomain| *1 (|CartesianTensor| *3 *4 *5))
       (|ofType| *3 *2) (|ofType| *4 (|NonNegativeInteger|))
       (|ofCategory| *5 (|CommutativeRing|))))
 (|transpose| (*1 *1 *1)
  (AND (|isDomain| *1 (|CartesianTensor| *2 *3 *4)) (|ofType| *2 (|Integer|))
       (|ofType| *3 (|NonNegativeInteger|))
       (|ofCategory| *4 (|CommutativeRing|))))
 (|transpose| (*1 *1 *1 *2 *2)
  (AND (|isDomain| *2 (|Integer|)) (|isDomain| *1 (|CartesianTensor| *3 *4 *5))
       (|ofType| *3 *2) (|ofType| *4 (|NonNegativeInteger|))
       (|ofCategory| *5 (|CommutativeRing|))))
 (|reindex| (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|List| (|Integer|)))
       (|isDomain| *1 (|CartesianTensor| *3 *4 *5)) (|ofType| *3 (|Integer|))
       (|ofType| *4 (|NonNegativeInteger|))
       (|ofCategory| *5 (|CommutativeRing|))))
 (|kroneckerDelta| (*1 *1)
  (AND (|isDomain| *1 (|CartesianTensor| *2 *3 *4)) (|ofType| *2 (|Integer|))
       (|ofType| *3 (|NonNegativeInteger|))
       (|ofCategory| *4 (|CommutativeRing|))))
 (|leviCivitaSymbol| (*1 *1)
  (AND (|isDomain| *1 (|CartesianTensor| *2 *3 *4)) (|ofType| *2 (|Integer|))
       (|ofType| *3 (|NonNegativeInteger|))
       (|ofCategory| *4 (|CommutativeRing|))))
 (|ravel| (*1 *2 *1)
  (AND (|isDomain| *2 (|List| *5)) (|isDomain| *1 (|CartesianTensor| *3 *4 *5))
       (|ofType| *3 (|Integer|)) (|ofType| *4 (|NonNegativeInteger|))
       (|ofCategory| *5 (|CommutativeRing|))))
 (|unravel| (*1 *1 *2)
  (AND (|isDomain| *2 (|List| *5)) (|ofCategory| *5 (|CommutativeRing|))
       (|isDomain| *1 (|CartesianTensor| *3 *4 *5)) (|ofType| *3 (|Integer|))
       (|ofType| *4 (|NonNegativeInteger|))))
 (|sample| (*1 *1)
  (AND (|isDomain| *1 (|CartesianTensor| *2 *3 *4)) (|ofType| *2 (|Integer|))
       (|ofType| *3 (|NonNegativeInteger|))
       (|ofCategory| *4 (|CommutativeRing|)))))
((~= (((|Boolean|) $ $) NIL)) (|unravel| (($ (|List| |#3|)) 39))
 (|transpose| (($ $) 98) (($ $ (|Integer|) (|Integer|)) 97))
 (|sample| (($) 17)) (|retractIfCan| (((|Union| |#3| "failed") $) 59))
 (|retract| ((|#3| $) NIL)) (|reindex| (($ $ (|List| (|Integer|))) 99))
 (|ravel| (((|List| |#3|) $) 35)) (|rank| (((|NonNegativeInteger|) $) 43))
 (|product| (($ $ $) 92)) (|leviCivitaSymbol| (($) 42))
 (|latex| (((|String|) $) NIL)) (|kroneckerDelta| (($) 16))
 (|hashUpdate!| (((|HashState|) (|HashState|) $) NIL))
 (|hash| (((|SingleInteger|) $) NIL))
 (|elt| ((|#3| $) 45) ((|#3| $ (|Integer|)) 46)
  ((|#3| $ (|Integer|) (|Integer|)) 47)
  ((|#3| $ (|Integer|) (|Integer|) (|Integer|)) 48)
  ((|#3| $ (|Integer|) (|Integer|) (|Integer|) (|Integer|)) 49)
  ((|#3| $ (|List| (|Integer|))) 51))
 (|degree| (((|NonNegativeInteger|) $) 44))
 (|contract| (($ $ (|Integer|) $ (|Integer|)) 93)
  (($ $ (|Integer|) (|Integer|)) 95))
 (|coerce| (((|OutputForm|) $) 66) (($ |#3|) 67)
           (($ (|DirectProduct| |#2| |#3|)) 74)
           (($ (|SquareMatrix| |#2| |#3|)) 77) (($ (|List| |#3|)) 52)
           (($ (|List| $)) 57))
 (|Zero| (($) 68 T CONST)) (|One| (($) 69 T CONST)) (= (((|Boolean|) $ $) 79))
 (- (($ $) 85) (($ $ $) 83)) (+ (($ $ $) 81))
 (* (($ |#3| $) 90) (($ $ |#3|) 91) (($ $ (|Integer|)) 88)
    (($ (|Integer|) $) 87) (($ $ $) 94)))
CARTEN
(((|GradedAlgebra| |#3| (|NonNegativeInteger|)) . T)
 ((|GradedModule| (|Integer|) (|NonNegativeInteger|)) . T))
(((|BasicType|) . T) ((|CoercibleTo| (|OutputForm|)) . T)
 ((|GradedAlgebra| |#3| (|NonNegativeInteger|)) . T)
 ((|GradedModule| (|Integer|) (|NonNegativeInteger|)) . T)
 ((|GradedModule| |t#1| |t#2|) . T) ((|RetractableTo| |t#1|) . T)
 ((|SetCategory|) . T))
((|constructor|
  (NIL
   "CartesianTensor(minix,{} dim,{} \\spad{R}) provides Cartesian tensors with components belonging to a commutative ring \\spad{R}. These tensors can have any number of indices. Each index takes values from \\spad{minix} to \\spad{minix + dim - 1}."))
 (|sample| (($) "\\spad{sample()} returns an object of type \\%."))
 (|unravel|
  (($ (|List| |#3|))
   "\\spad{unravel(t)} produces a tensor from a list of components such that \\indented{2}{\\spad{unravel(ravel(t)) = t}.}"))
 (|ravel|
  (((|List| |#3|) $)
   "\\spad{ravel(t)} produces a list of components from a tensor such that \\indented{2}{\\spad{unravel(ravel(t)) = t}.}"))
 (|leviCivitaSymbol|
  (($)
   "\\spad{leviCivitaSymbol()} is the rank \\spad{dim} tensor defined by \\spad{leviCivitaSymbol()(i1,{} ...idim) = +1/0/-1} if \\spad{i1,{} ...,{} idim} is an even/is nota /is an odd permutation of \\spad{minix,{} ...,{} minix+dim-1}."))
 (|kroneckerDelta|
  (($)
   "\\spad{kroneckerDelta()} is the rank 2 tensor defined by \\indented{3}{\\spad{kroneckerDelta()(i,{} j)}} \\indented{6}{\\spad{= 1\\space{2}if i = j}} \\indented{6}{\\spad{= 0 if\\space{2}i \\~= j}}"))
 (|reindex|
  (($ $ (|List| (|Integer|)))
   "\\spad{reindex(t,{} [i1,{} ...,{} idim])} permutes the indices of \\spad{t}. For example,{} if \\spad{r = reindex(t,{} [4,{} 1,{} 2,{} 3])} for a rank 4 tensor \\spad{t},{} then \\spad{r} is the rank for tensor given by \\indented{4}{\\spad{r(i,{} j,{} k,{} l) = t(l,{} i,{} j,{} k)}.}"))
 (|transpose|
  (($ $ (|Integer|) (|Integer|))
   "\\spad{transpose(t,{} i,{} j)} exchanges the \\spad{i}\\spad{-}th and \\spad{j}\\spad{-}th indices of \\spad{t}. For example,{} if \\spad{r = transpose(t,{} 2,{} 3)} for a rank 4 tensor \\spad{t},{} then \\spad{r} is the rank 4 tensor given by \\indented{4}{\\spad{r(i,{} j,{} k,{} l) = t(i,{} k,{} j,{} l)}.}")
  (($ $)
   "\\spad{transpose(t)} exchanges the first and last indices of \\spad{t}. For example,{} if \\spad{r = transpose(t)} for a rank 4 tensor \\spad{t},{} then \\spad{r} is the rank 4 tensor given by \\indented{4}{\\spad{r(i,{} j,{} k,{} l) = t(l,{} j,{} k,{} i)}.}"))
 (|contract|
  (($ $ (|Integer|) (|Integer|))
   "\\spad{contract(t,{} i,{} j)} is the contraction of tensor \\spad{t} which sums along the \\spad{i}\\spad{-}th and \\spad{j}\\spad{-}th indices. For example,{} if \\spad{r = contract(t,{} 1,{} 3)} for a rank 4 tensor \\spad{t},{} then \\spad{r} is the rank 2 \\spad{(= 4 - 2)} tensor given by \\indented{4}{\\spad{r(i,{} j) = sum(h=1..dim,{} t(h,{} i,{} h,{} j))}.}")
  (($ $ (|Integer|) $ (|Integer|))
   "\\spad{contract(t,{} i,{} s,{} j)} is the inner product of tenors \\spad{s} and \\spad{t} which sums along the \\spad{k1}\\spad{-}th index of \\spad{t} and the \\spad{k2}\\spad{-}th index of \\spad{s}. For example,{} if \\spad{r = contract(s,{} 2,{} t,{} 1)} for rank 3 tensors rank 3 tensors \\spad{s} and \\spad{t},{} then \\spad{r} is the rank 4 \\spad{(= 3 + 3 - 2)} tensor given by \\indented{4}{\\spad{r(i,{} j,{} k,{} l) = sum(h=1..dim,{} s(i,{} h,{} j)*t(h,{} k,{} l))}.}"))
 (*
  (($ $ $)
   "\\spad{s*t} is the inner product of the tensors \\spad{s} and \\spad{t} which contracts the last index of \\spad{s} with the first index of \\spad{t},{} \\spadignore{i.e.} \\indented{4}{\\spad{t*s = contract(t,{} rank t,{} s,{} 1)}} \\indented{4}{\\spad{t*s = sum(k=1..N,{} t[i1,{} ..,{} iN,{} k]*s[k,{} j1,{} ..,{} jM])}} This is compatible with the use of \\spad{M*v} to denote the matrix-vector inner product."))
 (|product|
  (($ $ $)
   "\\spad{product(s,{} t)} is the outer product of the tensors \\spad{s} and \\spad{t}. For example,{} if \\spad{r = product(s,{} t)} for rank 2 tensors \\spad{s} and \\spad{t},{} then \\spad{r} is a rank 4 tensor given by \\indented{4}{\\spad{r(i,{} j,{} k,{} l) = s(i,{} j)*t(k,{} l)}.}"))
 (|elt|
  ((|#3| $ (|List| (|Integer|)))
   "\\spad{elt(t,{} [i1,{} ...,{} iN])} gives a component of a rank \\spad{N} tensor.")
  ((|#3| $ (|Integer|) (|Integer|) (|Integer|) (|Integer|))
   "\\spad{elt(t,{} i,{} j,{} k,{} l)} gives a component of a rank 4 tensor.")
  ((|#3| $ (|Integer|) (|Integer|) (|Integer|))
   "\\spad{elt(t,{} i,{} j,{} k)} gives a component of a rank 3 tensor.")
  ((|#3| $ (|Integer|) (|Integer|))
   "\\spad{elt(t,{} i,{} j)} gives a component of a rank 2 tensor.")
  ((|#3| $ (|Integer|))
   "\\spad{elt(t,{} i)} gives a component of a rank 1 tensor.")
  ((|#3| $) "\\spad{elt(t)} gives the component of a rank 0 tensor."))
 (|rank|
  (((|NonNegativeInteger|) $)
   "\\spad{rank(t)} returns the tensorial rank of \\spad{t} (that is,{} the number of indices). This is the same as the graded module degree."))
 (|coerce|
  (($ (|List| $))
   "\\spad{coerce([t_1,{} ...,{} t_dim])} allows tensors to be constructed using lists.")
  (($ (|List| |#3|))
   "\\spad{coerce([r_1,{} ...,{} r_dim])} allows tensors to be constructed using lists.")
  (($ (|SquareMatrix| |#2| |#3|))
   "\\spad{coerce(m)} views a matrix as a rank 2 tensor.")
  (($ (|DirectProduct| |#2| |#3|))
   "\\spad{coerce(v)} views a vector as a rank 1 tensor.")))
(("documentation" 0 9759) ("ancestors" 0 9499) ("parents" 0 9386)
 ("abbreviation" 0 9379) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 8027) ("modemaps" 0 2893) ("sourceFile" 0 2855)
 ("constructorCategory" 0 1547) ("constructorModemap" 0 65)
 ("constructorKind" 0 56) ("constructorForm" 0 20))