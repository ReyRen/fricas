)abbrev category SETAGG SetAggregate
++ Author: Michael Monagan; revised by Manuel Bronstein and Richard Jenks
++ Date Created: August 87 through August 88
++ Basic Operations:
++ Related Constructors:
++ Also See:
++ AMS Classifications:
++ Keywords:
++ References:
++ Description:
++ A set category lists a collection of set-theoretic operations
++ useful for both finite sets and multisets.
++ Note however that finite sets are distinct from multisets.
++ Although the operations defined for set categories are
++ common to both, the relationship between the two cannot
++ be described by inclusion or inheritance.
SetAggregate(S : SetCategory):
  Category == Join(SetCategory, Collection(S), PartialOrder) with
   set : () -> %
     ++ set()$D creates an empty set aggregate of type D.
   set : List S -> %
     ++ set([x, y, ..., z]) creates a set aggregate containing items x, y, ..., z.
   intersect : (%, %) -> %
     ++ intersect(u, v) returns the set aggregate w consisting of
     ++ elements common to both set aggregates u and v.
     ++ Note: equivalent to the notation (not currently supported)
     ++ [x for x in u | member?(x, v)].
   difference : (%, %) -> %
     ++ difference(u, v) returns the set aggregate w consisting of
     ++ elements in set aggregate u but not in set aggregate v.
     ++ If u and v have no elements in common, \spad{difference(u, v)}
     ++ returns a copy of u.
     ++ Note: equivalent to the notation (not currently supported)
     ++ \spad{[x for x in u | not member?(x, v)]}.
   difference : (%, S) -> %
     ++ difference(u, x) returns the set aggregate u with element x removed.
     ++ If u does not contain x, a copy of u is returned.
     ++ Note: \spad{difference(s, x) = difference(s, set [x])}.
   symmetricDifference : (%, %) -> %
     ++ symmetricDifference(u, v) returns the set aggregate of elements x which
     ++ are members of set aggregate u or set aggregate v but not both.
     ++ If u and v have no elements in common, \spad{symmetricDifference(u, v)}
     ++ returns a copy of u.
     ++ Note: \spad{symmetricDifference(u, v) = union(difference(u, v), difference(v, u))}
   subset? : (%, %) -> Boolean
     ++ subset?(u, v) tests if u is a subset of v.
     ++ Note: equivalent to
     ++ \spad{reduce(and, [member?(x, v) for x in members(u)], true, false)}.
   union : (%, %) -> %
     ++ union(u, v) returns the set aggregate of elements which are members
     ++ of either set aggregate u or v.
   union : (%, S) -> %
     ++ union(u, x) returns the set aggregate u with the element x added.
     ++ If u already contains x, \spad{union(u, x)} returns a copy of u.
   union : (S, %) -> %
     ++ union(x, u) returns the set aggregate u with the element x added.
     ++ If u already contains x, \spad{union(x, u)} returns a copy of u.
 add
  symmetricDifference(x, y) == union(difference(x, y), difference(y, x))
  union(s : %, x : S) == union(s, set([x]))
  union(x : S, s : %) == union(s, set([x]))
  difference(s : %, x : S) == difference(s, set([x]))


