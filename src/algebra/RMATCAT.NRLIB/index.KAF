22411               (|RectangularMatrixCategory| |m| |n| R |Row| |Col|)
|category|
(((|RectangularMatrixCategory| |#1| |#2| |#3| |#4| |#5|) (|Category|)
  (|NonNegativeInteger|) (|NonNegativeInteger|)
  (|Join| (|SemiRng|) (|AbelianMonoid|)) (|DirectProductCategory| |t#2| |t#3|)
  (|DirectProductCategory| |t#1| |t#3|))
 (T |RectangularMatrixCategory|))
(|Join| (|BiModule| |t#3| |t#3|) (|HomogeneousAggregate| |t#3|)
        (|finiteAggregate|)
        (CATEGORY |domain|
         (IF (|has| |t#3| (|Finite|))
             (ATTRIBUTE (|Finite|))
             |noBranch|)
         (IF (|has| |t#3| (|CommutativeRing|))
             (ATTRIBUTE (|Module| |t#3|))
             |noBranch|)
         (SIGNATURE |matrix| ($ (|List| (|List| |t#3|))))
         (SIGNATURE |square?| ((|Boolean|) $))
         (SIGNATURE |diagonal?| ((|Boolean|) $))
         (SIGNATURE |symmetric?| ((|Boolean|) $))
         (IF (|has| |t#3| (|AbelianGroup|))
             (SIGNATURE |antisymmetric?| ((|Boolean|) $))
             |noBranch|)
         (SIGNATURE |antisymmetric?| ((|Boolean|) $))
         (SIGNATURE |minRowIndex| ((|Integer|) $))
         (SIGNATURE |maxRowIndex| ((|Integer|) $))
         (SIGNATURE |minColIndex| ((|Integer|) $))
         (SIGNATURE |maxColIndex| ((|Integer|) $))
         (SIGNATURE |nrows| ((|NonNegativeInteger|) $))
         (SIGNATURE |ncols| ((|NonNegativeInteger|) $))
         (SIGNATURE |listOfLists| ((|List| (|List| |t#3|)) $))
         (SIGNATURE |elt| (|t#3| $ (|Integer|) (|Integer|)))
         (SIGNATURE |qelt| (|t#3| $ (|Integer|) (|Integer|)))
         (SIGNATURE |elt| (|t#3| $ (|Integer|) (|Integer|) |t#3|))
         (SIGNATURE |row| (|t#4| $ (|Integer|)))
         (SIGNATURE |column| (|t#5| $ (|Integer|)))
         (SIGNATURE |map| ($ (|Mapping| |t#3| |t#3|) $))
         (SIGNATURE |map| ($ (|Mapping| |t#3| |t#3| |t#3|) $ $))
         (IF (|has| |t#3| (|IntegralDomain|))
             (SIGNATURE |exquo| ((|Union| $ "failed") $ |t#3|))
             |noBranch|)
         (IF (|has| |t#3| (|Field|))
             (SIGNATURE / ($ $ |t#3|))
             |noBranch|)
         (IF (|has| |t#3| (|EuclideanDomain|))
             (PROGN
              (SIGNATURE |rowEchelon| ($ $))
              (SIGNATURE |columnSpace| ((|List| |t#5|) $)))
             |noBranch|)
         (IF (|has| |t#3| (|IntegralDomain|))
             (PROGN
              (SIGNATURE |rank| ((|NonNegativeInteger|) $))
              (SIGNATURE |nullity| ((|NonNegativeInteger|) $))
              (SIGNATURE |nullSpace| ((|List| |t#5|) $)))
             |noBranch|)))
"/git/fricas/src/algebra/RMATCAT.spad"
((|map| (*1 *1 *2 *1)
  (AND (|isDomain| *2 (|Mapping| *5 *5))
       (|ofCategory| *1 (|RectangularMatrixCategory| *3 *4 *5 *6 *7))
       (|ofCategory| *5 (|Join| (|SemiRng|) (|AbelianMonoid|)))
       (|ofCategory| *6 (|DirectProductCategory| *4 *5))
       (|ofCategory| *7 (|DirectProductCategory| *3 *5))))
 (|matrix| (*1 *1 *2)
  (AND (|isDomain| *2 (|List| (|List| *5)))
       (|ofCategory| *5 (|Join| (|SemiRng|) (|AbelianMonoid|)))
       (|ofCategory| *1 (|RectangularMatrixCategory| *3 *4 *5 *6 *7))
       (|ofCategory| *6 (|DirectProductCategory| *4 *5))
       (|ofCategory| *7 (|DirectProductCategory| *3 *5))))
 (|square?| (*1 *2 *1)
  (AND (|ofCategory| *1 (|RectangularMatrixCategory| *3 *4 *5 *6 *7))
       (|ofCategory| *5 (|Join| (|SemiRng|) (|AbelianMonoid|)))
       (|ofCategory| *6 (|DirectProductCategory| *4 *5))
       (|ofCategory| *7 (|DirectProductCategory| *3 *5))
       (|isDomain| *2 (|Boolean|))))
 (|diagonal?| (*1 *2 *1)
  (AND (|ofCategory| *1 (|RectangularMatrixCategory| *3 *4 *5 *6 *7))
       (|ofCategory| *5 (|Join| (|SemiRng|) (|AbelianMonoid|)))
       (|ofCategory| *6 (|DirectProductCategory| *4 *5))
       (|ofCategory| *7 (|DirectProductCategory| *3 *5))
       (|isDomain| *2 (|Boolean|))))
 (|symmetric?| (*1 *2 *1)
  (AND (|ofCategory| *1 (|RectangularMatrixCategory| *3 *4 *5 *6 *7))
       (|ofCategory| *5 (|Join| (|SemiRng|) (|AbelianMonoid|)))
       (|ofCategory| *6 (|DirectProductCategory| *4 *5))
       (|ofCategory| *7 (|DirectProductCategory| *3 *5))
       (|isDomain| *2 (|Boolean|))))
 (|antisymmetric?| (*1 *2 *1)
  (AND (|ofCategory| *1 (|RectangularMatrixCategory| *3 *4 *5 *6 *7))
       (|ofCategory| *5 (|Join| (|SemiRng|) (|AbelianMonoid|)))
       (|ofCategory| *6 (|DirectProductCategory| *4 *5))
       (|ofCategory| *7 (|DirectProductCategory| *3 *5))
       (|isDomain| *2 (|Boolean|))))
 (|minRowIndex| (*1 *2 *1)
  (AND (|ofCategory| *1 (|RectangularMatrixCategory| *3 *4 *5 *6 *7))
       (|ofCategory| *5 (|Join| (|SemiRng|) (|AbelianMonoid|)))
       (|ofCategory| *6 (|DirectProductCategory| *4 *5))
       (|ofCategory| *7 (|DirectProductCategory| *3 *5))
       (|isDomain| *2 (|Integer|))))
 (|maxRowIndex| (*1 *2 *1)
  (AND (|ofCategory| *1 (|RectangularMatrixCategory| *3 *4 *5 *6 *7))
       (|ofCategory| *5 (|Join| (|SemiRng|) (|AbelianMonoid|)))
       (|ofCategory| *6 (|DirectProductCategory| *4 *5))
       (|ofCategory| *7 (|DirectProductCategory| *3 *5))
       (|isDomain| *2 (|Integer|))))
 (|minColIndex| (*1 *2 *1)
  (AND (|ofCategory| *1 (|RectangularMatrixCategory| *3 *4 *5 *6 *7))
       (|ofCategory| *5 (|Join| (|SemiRng|) (|AbelianMonoid|)))
       (|ofCategory| *6 (|DirectProductCategory| *4 *5))
       (|ofCategory| *7 (|DirectProductCategory| *3 *5))
       (|isDomain| *2 (|Integer|))))
 (|maxColIndex| (*1 *2 *1)
  (AND (|ofCategory| *1 (|RectangularMatrixCategory| *3 *4 *5 *6 *7))
       (|ofCategory| *5 (|Join| (|SemiRng|) (|AbelianMonoid|)))
       (|ofCategory| *6 (|DirectProductCategory| *4 *5))
       (|ofCategory| *7 (|DirectProductCategory| *3 *5))
       (|isDomain| *2 (|Integer|))))
 (|nrows| (*1 *2 *1)
  (AND (|ofCategory| *1 (|RectangularMatrixCategory| *3 *4 *5 *6 *7))
       (|ofCategory| *5 (|Join| (|SemiRng|) (|AbelianMonoid|)))
       (|ofCategory| *6 (|DirectProductCategory| *4 *5))
       (|ofCategory| *7 (|DirectProductCategory| *3 *5))
       (|isDomain| *2 (|NonNegativeInteger|))))
 (|ncols| (*1 *2 *1)
  (AND (|ofCategory| *1 (|RectangularMatrixCategory| *3 *4 *5 *6 *7))
       (|ofCategory| *5 (|Join| (|SemiRng|) (|AbelianMonoid|)))
       (|ofCategory| *6 (|DirectProductCategory| *4 *5))
       (|ofCategory| *7 (|DirectProductCategory| *3 *5))
       (|isDomain| *2 (|NonNegativeInteger|))))
 (|listOfLists| (*1 *2 *1)
  (AND (|ofCategory| *1 (|RectangularMatrixCategory| *3 *4 *5 *6 *7))
       (|ofCategory| *5 (|Join| (|SemiRng|) (|AbelianMonoid|)))
       (|ofCategory| *6 (|DirectProductCategory| *4 *5))
       (|ofCategory| *7 (|DirectProductCategory| *3 *5))
       (|isDomain| *2 (|List| (|List| *5)))))
 (|elt| (*1 *2 *1 *3 *3)
  (AND (|isDomain| *3 (|Integer|))
       (|ofCategory| *1 (|RectangularMatrixCategory| *4 *5 *2 *6 *7))
       (|ofCategory| *6 (|DirectProductCategory| *5 *2))
       (|ofCategory| *7 (|DirectProductCategory| *4 *2))
       (|ofCategory| *2 (|Join| (|SemiRng|) (|AbelianMonoid|)))))
 (|qelt| (*1 *2 *1 *3 *3)
  (AND (|isDomain| *3 (|Integer|))
       (|ofCategory| *1 (|RectangularMatrixCategory| *4 *5 *2 *6 *7))
       (|ofCategory| *6 (|DirectProductCategory| *5 *2))
       (|ofCategory| *7 (|DirectProductCategory| *4 *2))
       (|ofCategory| *2 (|Join| (|SemiRng|) (|AbelianMonoid|)))))
 (|elt| (*1 *2 *1 *3 *3 *2)
  (AND (|isDomain| *3 (|Integer|))
       (|ofCategory| *1 (|RectangularMatrixCategory| *4 *5 *2 *6 *7))
       (|ofCategory| *2 (|Join| (|SemiRng|) (|AbelianMonoid|)))
       (|ofCategory| *6 (|DirectProductCategory| *5 *2))
       (|ofCategory| *7 (|DirectProductCategory| *4 *2))))
 (|row| (*1 *2 *1 *3)
  (AND (|isDomain| *3 (|Integer|))
       (|ofCategory| *1 (|RectangularMatrixCategory| *4 *5 *6 *2 *7))
       (|ofCategory| *6 (|Join| (|SemiRng|) (|AbelianMonoid|)))
       (|ofCategory| *7 (|DirectProductCategory| *4 *6))
       (|ofCategory| *2 (|DirectProductCategory| *5 *6))))
 (|column| (*1 *2 *1 *3)
  (AND (|isDomain| *3 (|Integer|))
       (|ofCategory| *1 (|RectangularMatrixCategory| *4 *5 *6 *7 *2))
       (|ofCategory| *6 (|Join| (|SemiRng|) (|AbelianMonoid|)))
       (|ofCategory| *7 (|DirectProductCategory| *5 *6))
       (|ofCategory| *2 (|DirectProductCategory| *4 *6))))
 (|map| (*1 *1 *2 *1 *1)
  (AND (|isDomain| *2 (|Mapping| *5 *5 *5))
       (|ofCategory| *1 (|RectangularMatrixCategory| *3 *4 *5 *6 *7))
       (|ofCategory| *5 (|Join| (|SemiRng|) (|AbelianMonoid|)))
       (|ofCategory| *6 (|DirectProductCategory| *4 *5))
       (|ofCategory| *7 (|DirectProductCategory| *3 *5))))
 (|exquo| (*1 *1 *1 *2)
  (|partial| AND (|ofCategory| *1 (|RectangularMatrixCategory| *3 *4 *2 *5 *6))
   (|ofCategory| *2 (|Join| (|SemiRng|) (|AbelianMonoid|)))
   (|ofCategory| *5 (|DirectProductCategory| *4 *2))
   (|ofCategory| *6 (|DirectProductCategory| *3 *2))
   (|ofCategory| *2 (|IntegralDomain|))))
 (/ (*1 *1 *1 *2)
    (AND (|ofCategory| *1 (|RectangularMatrixCategory| *3 *4 *2 *5 *6))
         (|ofCategory| *2 (|Join| (|SemiRng|) (|AbelianMonoid|)))
         (|ofCategory| *5 (|DirectProductCategory| *4 *2))
         (|ofCategory| *6 (|DirectProductCategory| *3 *2))
         (|ofCategory| *2 (|Field|))))
 (|rowEchelon| (*1 *1 *1)
  (AND (|ofCategory| *1 (|RectangularMatrixCategory| *2 *3 *4 *5 *6))
       (|ofCategory| *4 (|Join| (|SemiRng|) (|AbelianMonoid|)))
       (|ofCategory| *5 (|DirectProductCategory| *3 *4))
       (|ofCategory| *6 (|DirectProductCategory| *2 *4))
       (|ofCategory| *4 (|EuclideanDomain|))))
 (|columnSpace| (*1 *2 *1)
  (AND (|ofCategory| *1 (|RectangularMatrixCategory| *3 *4 *5 *6 *7))
       (|ofCategory| *5 (|Join| (|SemiRng|) (|AbelianMonoid|)))
       (|ofCategory| *6 (|DirectProductCategory| *4 *5))
       (|ofCategory| *7 (|DirectProductCategory| *3 *5))
       (|ofCategory| *5 (|EuclideanDomain|)) (|isDomain| *2 (|List| *7))))
 (|rank| (*1 *2 *1)
  (AND (|ofCategory| *1 (|RectangularMatrixCategory| *3 *4 *5 *6 *7))
       (|ofCategory| *5 (|Join| (|SemiRng|) (|AbelianMonoid|)))
       (|ofCategory| *6 (|DirectProductCategory| *4 *5))
       (|ofCategory| *7 (|DirectProductCategory| *3 *5))
       (|ofCategory| *5 (|IntegralDomain|))
       (|isDomain| *2 (|NonNegativeInteger|))))
 (|nullity| (*1 *2 *1)
  (AND (|ofCategory| *1 (|RectangularMatrixCategory| *3 *4 *5 *6 *7))
       (|ofCategory| *5 (|Join| (|SemiRng|) (|AbelianMonoid|)))
       (|ofCategory| *6 (|DirectProductCategory| *4 *5))
       (|ofCategory| *7 (|DirectProductCategory| *3 *5))
       (|ofCategory| *5 (|IntegralDomain|))
       (|isDomain| *2 (|NonNegativeInteger|))))
 (|nullSpace| (*1 *2 *1)
  (AND (|ofCategory| *1 (|RectangularMatrixCategory| *3 *4 *5 *6 *7))
       (|ofCategory| *5 (|Join| (|SemiRng|) (|AbelianMonoid|)))
       (|ofCategory| *6 (|DirectProductCategory| *4 *5))
       (|ofCategory| *7 (|DirectProductCategory| *3 *5))
       (|ofCategory| *5 (|IntegralDomain|)) (|isDomain| *2 (|List| *7)))))
((~= (((|Boolean|) $ $) 6))
 (|zero?|
  (((|Boolean|) $) 6
   (OR
    (|and| (OR (|has| |#3| (|AbelianMonoid|)) (|has| |#3| (|AbelianMonoid|)))
     (|has| |#3| (|CommutativeRing|)))
    (|has| |#3| (|AbelianMonoid|)) (|has| |#3| (|AbelianMonoid|)))))
 (|symmetric?| (((|Boolean|) $) 6))
 (|subtractIfCan|
  (((|Union| $ "failed") $ $) 6
   (OR
    (|and| (OR (|has| |#3| (|AbelianGroup|)) (|has| |#3| (|AbelianGroup|)))
     (|has| |#3| (|CommutativeRing|)))
    (|has| |#3| (|AbelianGroup|)) (|has| |#3| (|AbelianGroup|)))))
 (|square?| (((|Boolean|) $) 6))
 (|smaller?| (((|Boolean|) $ $) 6 (|has| |#3| (|Finite|))))
 (|size?| (((|Boolean|) $ (|NonNegativeInteger|)) 6))
 (|size| (((|NonNegativeInteger|)) 6 (|has| |#3| (|Finite|))))
 (|sample| (($) 6 T CONST))
 (|rowEchelon| (($ $) 6 (|has| |#3| (|EuclideanDomain|))))
 (|row| ((|#4| $ (|Integer|)) 6))
 (|rank| (((|NonNegativeInteger|) $) 6 (|has| |#3| (|IntegralDomain|))))
 (|random| (($) 6 (|has| |#3| (|Finite|))))
 (|qelt| ((|#3| $ (|Integer|) (|Integer|)) 6))
 (|parts| (((|List| |#3|) $) 6 (|has| $ (|finiteAggregate|))))
 (|opposite?|
  (((|Boolean|) $ $) 6
   (OR
    (|and| (OR (|has| |#3| (|AbelianMonoid|)) (|has| |#3| (|AbelianMonoid|)))
     (|has| |#3| (|CommutativeRing|)))
    (|has| |#3| (|AbelianMonoid|)) (|has| |#3| (|AbelianMonoid|)))))
 (|nullity| (((|NonNegativeInteger|) $) 6 (|has| |#3| (|IntegralDomain|))))
 (|nullSpace| (((|List| |#5|) $) 6 (|has| |#3| (|IntegralDomain|))))
 (|nrows| (((|NonNegativeInteger|) $) 6))
 (|ncols| (((|NonNegativeInteger|) $) 6))
 (|more?| (((|Boolean|) $ (|NonNegativeInteger|)) 6))
 (|minRowIndex| (((|Integer|) $) 6)) (|minColIndex| (((|Integer|) $) 6))
 (|min|
  ((|#3| $) 6 (AND (|has| |#3| (|OrderedSet|)) (|has| $ (|finiteAggregate|)))))
 (|members| (((|List| |#3|) $) 6 (|has| $ (|finiteAggregate|))))
 (|member?|
  (((|Boolean|) |#3| $) 6
   (AND (|has| |#3| (|BasicType|)) (|has| $ (|finiteAggregate|)))))
 (|maxRowIndex| (((|Integer|) $) 6)) (|maxColIndex| (((|Integer|) $) 6))
 (|max|
  ((|#3| $) 6 (AND (|has| |#3| (|OrderedSet|)) (|has| $ (|finiteAggregate|))))
  ((|#3| (|Mapping| (|Boolean|) |#3| |#3|) $) 6 (|has| $ (|finiteAggregate|))))
 (|matrix| (($ (|List| (|List| |#3|))) 6))
 (|map!| (($ (|Mapping| |#3| |#3|) $) 6 (|has| $ (|shallowlyMutable|))))
 (|map| (($ (|Mapping| |#3| |#3|) $) 6) (($ (|Mapping| |#3| |#3| |#3|) $ $) 6))
 (|lookup| (((|PositiveInteger|) $) 6 (|has| |#3| (|Finite|))))
 (|listOfLists| (((|List| (|List| |#3|)) $) 6))
 (|less?| (((|Boolean|) $ (|NonNegativeInteger|)) 6))
 (|latex| (((|String|) $) 6))
 (|index| (($ (|PositiveInteger|)) 6 (|has| |#3| (|Finite|))))
 (|hashUpdate!| (((|HashState|) (|HashState|) $) 6))
 (|hash| (((|SingleInteger|) $) 6))
 (|exquo| (((|Union| $ "failed") $ |#3|) 6 (|has| |#3| (|IntegralDomain|))))
 (|every?|
  (((|Boolean|) (|Mapping| (|Boolean|) |#3|) $) 6
   (|has| $ (|finiteAggregate|))))
 (|eval|
  (($ $ (|List| |#3|) (|List| |#3|)) 6
   (AND (|has| |#3| (|Evalable| |#3|)) (|has| |#3| (|SetCategory|))))
  (($ $ |#3| |#3|) 6
   (AND (|has| |#3| (|Evalable| |#3|)) (|has| |#3| (|SetCategory|))))
  (($ $ (|Equation| |#3|)) 6
   (AND (|has| |#3| (|Evalable| |#3|)) (|has| |#3| (|SetCategory|))))
  (($ $ (|List| (|Equation| |#3|))) 6
   (AND (|has| |#3| (|Evalable| |#3|)) (|has| |#3| (|SetCategory|)))))
 (|eq?| (((|Boolean|) $ $) 6))
 (|enumerate| (((|List| $)) 6 (|has| |#3| (|Finite|))))
 (|empty?| (((|Boolean|) $) 6)) (|empty| (($) 6))
 (|elt| ((|#3| $ (|Integer|) (|Integer|)) 6)
  ((|#3| $ (|Integer|) (|Integer|) |#3|) 6))
 (|diagonal?| (((|Boolean|) $) 6))
 (|count|
  (((|NonNegativeInteger|) |#3| $) 6
   (AND (|has| |#3| (|BasicType|)) (|has| $ (|finiteAggregate|))))
  (((|NonNegativeInteger|) (|Mapping| (|Boolean|) |#3|) $) 6
   (|has| $ (|finiteAggregate|))))
 (|copy| (($ $) 6)) (|convert| (((|InputForm|) $) 6 (|has| |#3| (|Finite|))))
 (|columnSpace| (((|List| |#5|) $) 6 (|has| |#3| (|EuclideanDomain|))))
 (|column| ((|#5| $ (|Integer|)) 6)) (|coerce| (((|OutputForm|) $) 6))
 (|any?|
  (((|Boolean|) (|Mapping| (|Boolean|) |#3|) $) 6
   (|has| $ (|finiteAggregate|))))
 (|antisymmetric?| (((|Boolean|) $) 6))
 (|Zero|
  (($) 6
   (OR
    (|and| (OR (|has| |#3| (|AbelianMonoid|)) (|has| |#3| (|AbelianMonoid|)))
     (|has| |#3| (|CommutativeRing|)))
    (|has| |#3| (|AbelianMonoid|)) (|has| |#3| (|AbelianMonoid|)))
   CONST))
 (= (((|Boolean|) $ $) 6)) (/ (($ $ |#3|) 6 (|has| |#3| (|Field|))))
 (-
  (($ $ $) 6
   (OR
    (|and| (OR (|has| |#3| (|AbelianGroup|)) (|has| |#3| (|AbelianGroup|)))
     (|has| |#3| (|CommutativeRing|)))
    (|has| |#3| (|AbelianGroup|)) (|has| |#3| (|AbelianGroup|))))
  (($ $) 6
   (OR
    (|and| (OR (|has| |#3| (|AbelianGroup|)) (|has| |#3| (|AbelianGroup|)))
     (|has| |#3| (|CommutativeRing|)))
    (|has| |#3| (|AbelianGroup|)) (|has| |#3| (|AbelianGroup|)))))
 (+ (($ $ $) 6))
 (* (($ (|PositiveInteger|) $) 6) (($ |#3| $) 6) (($ $ |#3|) 6)
    (($ (|Integer|) $) 6
     (OR
      (|and| (OR (|has| |#3| (|AbelianGroup|)) (|has| |#3| (|AbelianGroup|)))
       (|has| |#3| (|CommutativeRing|)))
      (|has| |#3| (|AbelianGroup|)) (|has| |#3| (|AbelianGroup|))))
    (($ (|NonNegativeInteger|) $) 6
     (OR
      (|and| (OR (|has| |#3| (|AbelianMonoid|)) (|has| |#3| (|AbelianMonoid|)))
       (|has| |#3| (|CommutativeRing|)))
      (|has| |#3| (|AbelianMonoid|)) (|has| |#3| (|AbelianMonoid|)))))
 (|#| (((|NonNegativeInteger|) $) 6 (|has| $ (|finiteAggregate|)))))
RMATCAT
(((|BiModule| |#3| |#3|) . T) ((|HomogeneousAggregate| |#3|) . T)
 ((|finiteAggregate|) . T) ((|Finite|) |has| |#3| (|Finite|))
 ((|Module| |#3|) |has| |#3| (|CommutativeRing|)))
(((|AbelianGroup|) |has| |t#1| (|AbelianGroup|))
 ((|AbelianMonoid|) OR (|has| |t#1| (|AbelianMonoid|))
  (AND (|has| |#3| (|CommutativeRing|)) (|has| |t#1| (|AbelianGroup|))))
 ((|AbelianSemiGroup|) . T) ((|Aggregate|) . T) ((|BasicType|) . T)
 ((|BiModule| |t#1| |t#1|) |has| |#3| (|CommutativeRing|))
 ((|BiModule| |#3| |#3|) . T)
 ((|CancellationAbelianMonoid|) |has| |t#1| (|AbelianGroup|))
 ((|CoercibleTo| (|OutputForm|)) . T) ((|Comparable|) |has| |#3| (|Finite|))
 ((|ConvertibleTo| (|InputForm|)) |has| |#3| (|Finite|))
 ((|Evalable| |t#1|) AND (|has| |t#1| (|Evalable| |t#1|))
  (|has| |t#1| (|SetCategory|)))
 ((|Finite|) |has| |#3| (|Finite|)) ((|HomogeneousAggregate| |#3|) . T)
 ((|InnerEvalable| |t#1| |t#1|) AND (|has| |t#1| (|Evalable| |t#1|))
  (|has| |t#1| (|SetCategory|)))
 ((|LeftModule| |t#1|) . T) ((|Module| |#3|) |has| |#3| (|CommutativeRing|))
 ((|RightModule| |t#2|) . T) ((|SetCategory|) . T) ((|Type|) . T)
 ((|finiteAggregate|) . T))
((|constructor|
  (NIL
   "\\spadtype{RectangularMatrixCategory} is a category of matrices of fixed dimensions. The dimensions of the matrix will be parameters of the domain. Domains in this category will be \\spad{R}-modules and will be non-mutable."))
 (|nullSpace|
  (((|List| |#5|) $)
   "\\spad{nullSpace(m)}+ returns a basis for the null space of the matrix \\spad{m}."))
 (|nullity|
  (((|NonNegativeInteger|) $)
   "\\spad{nullity(m)} returns the nullity of the matrix \\spad{m}. This is the dimension of the null space of the matrix \\spad{m}."))
 (|rank|
  (((|NonNegativeInteger|) $)
   "\\spad{rank(m)} returns the rank of the matrix \\spad{m}."))
 (|columnSpace|
  (((|List| |#5|) $)
   "\\spad{columnSpace(m)} returns a sublist of columns of the matrix \\spad{m} forming a basis of its column space."))
 (|rowEchelon|
  (($ $)
   "\\spad{rowEchelon(m)} returns the row echelon form of the matrix \\spad{m}."))
 (/
  (($ $ |#3|)
   "\\spad{m/r} divides the elements of \\spad{m} by \\spad{r}. Error: if \\spad{r = 0}."))
 (|exquo|
  (((|Union| $ "failed") $ |#3|)
   "\\spad{exquo(m,{} r)} computes the exact quotient of the elements of \\spad{m} by \\spad{r},{} returning \\spad{\"failed\"} if this is not possible."))
 (|map|
  (($ (|Mapping| |#3| |#3| |#3|) $ $)
   "\\spad{map(f,{} a,{} b)} returns \\spad{c},{} where \\spad{c} is such that \\spad{c(i,{} j) = f(a(i,{} j),{} b(i,{} j))} for all \\spad{i},{} \\spad{j}.")
  (($ (|Mapping| |#3| |#3|) $)
   "\\spad{map(f,{} a)} returns \\spad{b},{} where \\spad{b(i,{} j) = a(i,{} j)} for all \\spad{i},{} \\spad{j}."))
 (|column|
  ((|#5| $ (|Integer|))
   "\\spad{column(m,{} j)} returns the \\spad{j}th column of the matrix \\spad{m}. Error: if the index outside the proper range."))
 (|row|
  ((|#4| $ (|Integer|))
   "\\spad{row(m,{} i)} returns the \\spad{i}th row of the matrix \\spad{m}. Error: if the index is outside the proper range."))
 (|qelt|
  ((|#3| $ (|Integer|) (|Integer|))
   "\\spad{qelt(m,{} i,{} j)} returns the element in the \\spad{i}th row and \\spad{j}th column of the matrix \\spad{m}. Note: there is NO error check to determine if indices are in the proper ranges."))
 (|elt|
  ((|#3| $ (|Integer|) (|Integer|) |#3|)
   "\\spad{elt(m,{} i,{} j,{} r)} returns the element in the \\spad{i}th row and \\spad{j}th column of the matrix \\spad{m},{} if \\spad{m} has an \\spad{i}th row and a \\spad{j}th column,{} and returns \\spad{r} otherwise.")
  ((|#3| $ (|Integer|) (|Integer|))
   "\\spad{elt(m,{} i,{} j)} returns the element in the \\spad{i}th row and \\spad{j}th column of the matrix \\spad{m}. Error: if indices are outside the proper ranges."))
 (|listOfLists|
  (((|List| (|List| |#3|)) $)
   "\\spad{listOfLists(m)} returns the rows of the matrix \\spad{m} as a list of lists."))
 (|ncols|
  (((|NonNegativeInteger|) $)
   "\\spad{ncols(m)} returns the number of columns in the matrix \\spad{m}."))
 (|nrows|
  (((|NonNegativeInteger|) $)
   "\\spad{nrows(m)} returns the number of rows in the matrix \\spad{m}."))
 (|maxColIndex|
  (((|Integer|) $)
   "\\spad{maxColIndex(m)} returns the index of the 'last' column of the matrix \\spad{m}."))
 (|minColIndex|
  (((|Integer|) $)
   "\\spad{minColIndex(m)} returns the index of the 'first' column of the matrix \\spad{m}."))
 (|maxRowIndex|
  (((|Integer|) $)
   "\\spad{maxRowIndex(m)} returns the index of the 'last' row of the matrix \\spad{m}."))
 (|minRowIndex|
  (((|Integer|) $)
   "\\spad{minRowIndex(m)} returns the index of the 'first' row of the matrix \\spad{m}."))
 (|antisymmetric?|
  (((|Boolean|) $)
   "\\spad{antisymmetric?(m)} returns \\spad{true} if the matrix \\spad{m} is square and antisymmetric (\\spadignore{i.e.} \\spad{m[i,{} j] = -m[j,{} i]} for all \\spad{i} and \\spad{j}) and \\spad{false} otherwise.")
  (((|Boolean|) $)
   "\\spad{antisymmetric?(m)} returns \\spad{true} if the matrix \\spad{m} is square and antisymmetric (\\spadignore{i.e.} \\spad{m[i,{} j] = -m[j,{} i]} for all \\spad{i} and \\spad{j}) and \\spad{false} otherwise."))
 (|symmetric?|
  (((|Boolean|) $)
   "\\spad{symmetric?(m)} returns \\spad{true} if the matrix \\spad{m} is square and symmetric (\\spadignore{i.e.} \\spad{m[i,{} j] = m[j,{} i]} for all \\spad{i} and \\spad{j}) and \\spad{false} otherwise."))
 (|diagonal?|
  (((|Boolean|) $)
   "\\spad{diagonal?(m)} returns \\spad{true} if the matrix \\spad{m} is square and diagonal (\\spadignore{i.e.} all entries of \\spad{m} not on the diagonal are zero) and \\spad{false} otherwise."))
 (|square?|
  (((|Boolean|) $)
   "\\spad{square?(m)} returns \\spad{true} if \\spad{m} is a square matrix (\\spadignore{i.e.} if \\spad{m} has the same number of rows as columns) and \\spad{false} otherwise."))
 (|matrix|
  (($ (|List| (|List| |#3|)))
   "\\spad{matrix(l)} converts the list of lists \\spad{l} to a matrix,{} where the list of lists is viewed as a list of the rows of the matrix.")))
(("documentation" 0 17509) ("ancestors" 0 16543) ("parents" 0 16364)
 ("abbreviation" 0 16356) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 10923) ("modemaps" 0 2610) ("sourceFile" 0 2571)
 ("constructorCategory" 0 355) ("constructorModemap" 0 83)
 ("constructorKind" 0 72) ("constructorForm" 0 20))