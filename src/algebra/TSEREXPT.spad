)abbrev package TSEREXPT TaylorSeriesExpansionTaylor
TaylorSeriesExpansionTaylor(Coef : Algebra(Fraction(Integer)),
    UTS    : UnivariateTaylorSeriesCategory Coef) : Exports == Implementation
  where
    NNI ==> NonNegativeInteger
    UTSODE ==> UnivariateTaylorSeriesODESolver(Coef, UTS)
    ST ==> Stream
    STTAY ==> StreamTaylorSeriesOperations(Coef)
    Exports ==> TaylorSeriesExpansion(Coef, NNI,
                                      SingletonAsOrderedSet, UTS, UTS)
    Implementation ==> add

        stream_taylor(f : ST Coef, x : ST Coef, xn : ST Coef,
                      d : (ST(Coef) -> ST(Coef)),
                     n : Integer) : ST(ST(Coef)) == delay
            qn : Fraction(Integer) := 1/n
            ninv : Coef := qn*1$Coef
            fn := f *$STTAY xn
            concat(fn, stream_taylor(d(ninv *$STTAY f), x, x *$STTAY xn, d, n + 1))

        taylor_via_deriv(f : UTS, lx : List UTS,
                         ld : List (Coef -> Coef)) : UTS ==
            #lx ~= #ld =>
                error "taylor_via_deriv: number of variables must equal number of derivatives"
            #lx = 0 => f
            x1 := first lx
            order(x1, 1) < 1 =>
                error "taylor_via_deriv: variable has constant term"
            f := taylor_via_deriv(f, rest lx, rest ld)
            fs := coefficients(f)
            xs := coefficients(x1)
            empty?(xs) => f
            xs := rest(xs)
            one := coefficients(1::UTS)
            ds := stream_taylor(fs, xs, one,
                                (s : ST Coef) : ST Coef +-> map(first ld, s),
                                1)
            series(addiag(ds)$STTAY)

        taylor_via_lode(la : List UTS, z : UTS, lc : List Coef) : UTS ==
            order(z, 1) < 1 =>
                error "taylor_via_lode: variable has constant term"
            #lc ~= #la =>
                error "taylor_via_lode: number of coefficient and initial values must be equal"
            (ode((ls : List UTS) : UTS +->
                   reduce(_+, [s*a for s in ls for a in la]),
                lc)$UTSODE)(z)

        applyTaylor(g, f) == g(f)

        apply_taylor(g, f) == elt(g, f)


