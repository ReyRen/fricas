9286                (|ListMonoidOps| S E |un|)
|domain|
(((|ListMonoidOps| |#1| |#2| |#3|)
  (|Join| (|SetCategory|) (|RetractableTo| |#1|)
          (CATEGORY |domain|
           (SIGNATURE |outputForm|
            ((|OutputForm|) $
             (|Mapping| (|OutputForm|) (|OutputForm|) (|OutputForm|))
             (|Mapping| (|OutputForm|) (|OutputForm|) (|OutputForm|))
             (|Integer|)))
           (SIGNATURE |listOfMonoms|
            ((|List| (|Record| (|:| |gen| |#1|) (|:| |exp| |#2|))) $))
           (SIGNATURE |makeTerm| ($ |#1| |#2|))
           (SIGNATURE |makeMulti|
            ($ (|List| (|Record| (|:| |gen| |#1|) (|:| |exp| |#2|)))))
           (SIGNATURE |nthExpon| (|#2| $ (|Integer|)))
           (SIGNATURE |nthFactor| (|#1| $ (|Integer|)))
           (SIGNATURE |reverse| ($ $)) (SIGNATURE |reverse!| ($ $))
           (SIGNATURE |size| ((|NonNegativeInteger|) $))
           (SIGNATURE |makeUnit| ($)) (SIGNATURE |rightMult| ($ $ |#1|))
           (SIGNATURE |leftMult| ($ |#1| $))
           (SIGNATURE |mapExpon| ($ (|Mapping| |#2| |#2|) $))
           (SIGNATURE |mapGen| ($ (|Mapping| |#1| |#1|) $))))
  (|SetCategory|) (|AbelianMonoid|) |#2|)
 (T |ListMonoidOps|))
(|Join| (|SetCategory|) (|RetractableTo| |#1|)
        (CATEGORY |domain|
         (SIGNATURE |outputForm|
          ((|OutputForm|) $
           (|Mapping| (|OutputForm|) (|OutputForm|) (|OutputForm|))
           (|Mapping| (|OutputForm|) (|OutputForm|) (|OutputForm|))
           (|Integer|)))
         (SIGNATURE |listOfMonoms|
          ((|List| (|Record| (|:| |gen| |#1|) (|:| |exp| |#2|))) $))
         (SIGNATURE |makeTerm| ($ |#1| |#2|))
         (SIGNATURE |makeMulti|
          ($ (|List| (|Record| (|:| |gen| |#1|) (|:| |exp| |#2|)))))
         (SIGNATURE |nthExpon| (|#2| $ (|Integer|)))
         (SIGNATURE |nthFactor| (|#1| $ (|Integer|)))
         (SIGNATURE |reverse| ($ $)) (SIGNATURE |reverse!| ($ $))
         (SIGNATURE |size| ((|NonNegativeInteger|) $))
         (SIGNATURE |makeUnit| ($)) (SIGNATURE |rightMult| ($ $ |#1|))
         (SIGNATURE |leftMult| ($ |#1| $))
         (SIGNATURE |mapExpon| ($ (|Mapping| |#2| |#2|) $))
         (SIGNATURE |mapGen| ($ (|Mapping| |#1| |#1|) $))))
"/git/fricas/src/algebra/LMOPS.spad"
((|outputForm| (*1 *2 *1 *3 *3 *4)
  (AND (|isDomain| *3 (|Mapping| (|OutputForm|) (|OutputForm|) (|OutputForm|)))
       (|isDomain| *4 (|Integer|)) (|isDomain| *2 (|OutputForm|))
       (|isDomain| *1 (|ListMonoidOps| *5 *6 *7))
       (|ofCategory| *5 (|SetCategory|)) (|ofCategory| *6 (|AbelianMonoid|))
       (|ofType| *7 *6)))
 (|listOfMonoms| (*1 *2 *1)
  (AND (|isDomain| *2 (|List| (|Record| (|:| |gen| *3) (|:| |exp| *4))))
       (|isDomain| *1 (|ListMonoidOps| *3 *4 *5))
       (|ofCategory| *3 (|SetCategory|)) (|ofCategory| *4 (|AbelianMonoid|))
       (|ofType| *5 *4)))
 (|makeTerm| (*1 *1 *2 *3)
  (AND (|isDomain| *1 (|ListMonoidOps| *2 *3 *4))
       (|ofCategory| *2 (|SetCategory|)) (|ofCategory| *3 (|AbelianMonoid|))
       (|ofType| *4 *3)))
 (|makeMulti| (*1 *1 *2)
  (AND (|isDomain| *2 (|List| (|Record| (|:| |gen| *3) (|:| |exp| *4))))
       (|ofCategory| *3 (|SetCategory|)) (|ofCategory| *4 (|AbelianMonoid|))
       (|ofType| *5 *4) (|isDomain| *1 (|ListMonoidOps| *3 *4 *5))))
 (|nthExpon| (*1 *2 *1 *3)
  (AND (|isDomain| *3 (|Integer|)) (|ofCategory| *2 (|AbelianMonoid|))
       (|isDomain| *1 (|ListMonoidOps| *4 *2 *5))
       (|ofCategory| *4 (|SetCategory|)) (|ofType| *5 *2)))
 (|nthFactor| (*1 *2 *1 *3)
  (AND (|isDomain| *3 (|Integer|)) (|ofCategory| *2 (|SetCategory|))
       (|isDomain| *1 (|ListMonoidOps| *2 *4 *5))
       (|ofCategory| *4 (|AbelianMonoid|)) (|ofType| *5 *4)))
 (|reverse| (*1 *1 *1)
  (AND (|isDomain| *1 (|ListMonoidOps| *2 *3 *4))
       (|ofCategory| *2 (|SetCategory|)) (|ofCategory| *3 (|AbelianMonoid|))
       (|ofType| *4 *3)))
 (|reverse!| (*1 *1 *1)
  (AND (|isDomain| *1 (|ListMonoidOps| *2 *3 *4))
       (|ofCategory| *2 (|SetCategory|)) (|ofCategory| *3 (|AbelianMonoid|))
       (|ofType| *4 *3)))
 (|size| (*1 *2 *1)
  (AND (|isDomain| *2 (|NonNegativeInteger|))
       (|isDomain| *1 (|ListMonoidOps| *3 *4 *5))
       (|ofCategory| *3 (|SetCategory|)) (|ofCategory| *4 (|AbelianMonoid|))
       (|ofType| *5 *4)))
 (|makeUnit| (*1 *1)
  (AND (|isDomain| *1 (|ListMonoidOps| *2 *3 *4))
       (|ofCategory| *2 (|SetCategory|)) (|ofCategory| *3 (|AbelianMonoid|))
       (|ofType| *4 *3)))
 (|rightMult| (*1 *1 *1 *2)
  (AND (|isDomain| *1 (|ListMonoidOps| *2 *3 *4))
       (|ofCategory| *2 (|SetCategory|)) (|ofCategory| *3 (|AbelianMonoid|))
       (|ofType| *4 *3)))
 (|leftMult| (*1 *1 *2 *1)
  (AND (|isDomain| *1 (|ListMonoidOps| *2 *3 *4))
       (|ofCategory| *2 (|SetCategory|)) (|ofCategory| *3 (|AbelianMonoid|))
       (|ofType| *4 *3)))
 (|mapExpon| (*1 *1 *2 *1)
  (AND (|isDomain| *2 (|Mapping| *4 *4)) (|ofCategory| *4 (|AbelianMonoid|))
       (|ofType| *5 *4) (|isDomain| *1 (|ListMonoidOps| *3 *4 *5))
       (|ofCategory| *3 (|SetCategory|))))
 (|mapGen| (*1 *1 *2 *1)
  (AND (|isDomain| *2 (|Mapping| *3 *3)) (|ofCategory| *3 (|SetCategory|))
       (|isDomain| *1 (|ListMonoidOps| *3 *4 *5))
       (|ofCategory| *4 (|AbelianMonoid|)) (|ofType| *5 *4))))
((~= (((|Boolean|) $ $) NIL)) (|size| (((|NonNegativeInteger|) $) 15))
 (|rightMult| (($ $ |#1|) 56)) (|reverse!| (($ $) 32)) (|reverse| (($ $) 31))
 (|retractIfCan| (((|Union| |#1| "failed") $) 48)) (|retract| ((|#1| $) NIL))
 (|outputForm|
  (((|OutputForm|) $ (|Mapping| (|OutputForm|) (|OutputForm|) (|OutputForm|))
    (|Mapping| (|OutputForm|) (|OutputForm|) (|OutputForm|)) (|Integer|))
   46))
 (|nthFactor| ((|#1| $ (|Integer|)) 30)) (|nthExpon| ((|#2| $ (|Integer|)) 29))
 (|mapGen| (($ (|Mapping| |#1| |#1|) $) 34))
 (|mapExpon| (($ (|Mapping| |#2| |#2|) $) 38)) (|makeUnit| (($) 10))
 (|makeTerm| (($ |#1| |#2|) 22))
 (|makeMulti| (($ (|List| (|Record| (|:| |gen| |#1|) (|:| |exp| |#2|)))) 23))
 (|listOfMonoms|
  (((|List| (|Record| (|:| |gen| |#1|) (|:| |exp| |#2|))) $) 13))
 (|leftMult| (($ |#1| $) 57)) (|latex| (((|String|) $) NIL))
 (|hashUpdate!| (((|HashState|) (|HashState|) $) NIL))
 (|hash| (((|SingleInteger|) $) NIL))
 (|coerce| (((|OutputForm|) $) 19) (($ |#1|) 16)) (= (((|Boolean|) $ $) 25)))
LMOPS
(((|SetCategory|) . T) ((|RetractableTo| |#1|) . T))
(((|BasicType|) . T) ((|CoercibleTo| (|OutputForm|)) . T)
 ((|RetractableTo| |#1|) . T) ((|SetCategory|) . T))
((|constructor|
  (NIL
   "This internal package represents monoid (abelian or not,{} with or without inverses) as lists and provides some common operations to the various flavors of monoids."))
 (|mapGen|
  (($ (|Mapping| |#1| |#1|) $)
   "\\spad{mapGen(f,{} a1\\^e1 ... an\\^en)} returns \\spad{f(a1)\\^e1 ... f(an)\\^en}."))
 (|mapExpon|
  (($ (|Mapping| |#2| |#2|) $)
   "\\spad{mapExpon(f,{} a1\\^e1 ... an\\^en)} returns \\spad{a1\\^f(e1) ... an\\^f(en)}."))
 (|leftMult|
  (($ |#1| $)
   "\\spad{leftMult(s,{} a)} returns \\spad{s * a} where \\spad{*} is the monoid operation,{} which is assumed non-commutative."))
 (|rightMult|
  (($ $ |#1|)
   "\\spad{rightMult(a,{} s)} returns \\spad{a * s} where \\spad{*} is the monoid operation,{} which is assumed non-commutative."))
 (|makeUnit|
  (($) "\\spad{makeUnit()} returns the unit element of the monomial."))
 (|size|
  (((|NonNegativeInteger|) $)
   "\\spad{size(l)} returns the number of monomials forming \\spad{l}."))
 (|reverse!|
  (($ $)
   "\\spad{reverse!(l)} reverses the list of monomials forming \\spad{l},{} destroying the element \\spad{l}."))
 (|reverse|
  (($ $)
   "\\spad{reverse(l)} reverses the list of monomials forming \\spad{l}. This has some effect if the monoid is non-abelian,{} \\spadignore{i.e.} \\spad{reverse(a1\\^e1 ... an\\^en) = an\\^en ... a1\\^e1} which is different."))
 (|nthFactor|
  ((|#1| $ (|Integer|))
   "\\spad{nthFactor(l,{} n)} returns the factor of the n^th monomial of \\spad{l}."))
 (|nthExpon|
  ((|#2| $ (|Integer|))
   "\\spad{nthExpon(l,{} n)} returns the exponent of the n^th monomial of \\spad{l}."))
 (|makeMulti|
  (($ (|List| (|Record| (|:| |gen| |#1|) (|:| |exp| |#2|))))
   "\\spad{makeMulti(l)} returns the element whose list of monomials is \\spad{l}."))
 (|makeTerm|
  (($ |#1| |#2|)
   "\\spad{makeTerm(s,{} e)} returns the monomial \\spad{s} exponentiated by \\spad{e} (\\spadignore{e.g.} s^e or \\spad{e} * \\spad{s})."))
 (|listOfMonoms|
  (((|List| (|Record| (|:| |gen| |#1|) (|:| |exp| |#2|))) $)
   "\\spad{listOfMonoms(l)} returns the list of the monomials forming \\spad{l}."))
 (|outputForm|
  (((|OutputForm|) $ (|Mapping| (|OutputForm|) (|OutputForm|) (|OutputForm|))
    (|Mapping| (|OutputForm|) (|OutputForm|) (|OutputForm|)) (|Integer|))
   "\\spad{outputForm(l,{} fop,{} fexp,{} unit)} converts the monoid element represented by \\spad{l} to an \\spadtype{OutputForm}. Argument unit is the output form for the \\spadignore{unit} of the monoid (\\spadignore{e.g.} 0 or 1),{} \\spad{fop(a,{} b)} is the output form for the monoid operation applied to \\spad{a} and \\spad{b} (\\spadignore{e.g.} \\spad{a + b},{} \\spad{a * b},{} \\spad{ab}),{} and \\spad{fexp(a,{} n)} is the output form for the exponentiation operation applied to \\spad{a} and \\spad{n} (\\spadignore{e.g.} \\spad{n a},{} \\spad{n * a},{} \\spad{a ^ n},{} \\spad{a\\^n}).")))
(("documentation" 0 6405) ("ancestors" 0 6294) ("parents" 0 6241)
 ("abbreviation" 0 6235) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 5213) ("modemaps" 0 2250) ("sourceFile" 0 2213)
 ("constructorCategory" 0 1204) ("constructorModemap" 0 56)
 ("constructorKind" 0 47) ("constructorForm" 0 20))