12958               (|DifferentialPolynomialCategory&| A R S V E)
|domain|
(((|DifferentialPolynomialCategory&| |#1| |#2| |#3| |#4| |#5|)
  (CATEGORY |domain| (SIGNATURE |eval| (|#1| |#1| (|List| |#3|) (|List| |#2|)))
   (SIGNATURE |eval| (|#1| |#1| |#3| |#2|))
   (SIGNATURE |eval| (|#1| |#1| (|List| |#3|) (|List| |#1|)))
   (SIGNATURE |eval| (|#1| |#1| |#3| |#1|))
   (SIGNATURE |eval| (|#1| |#1| (|List| |#1|) (|List| |#1|)))
   (SIGNATURE |eval| (|#1| |#1| |#1| |#1|))
   (SIGNATURE |eval| (|#1| |#1| (|Equation| |#1|)))
   (SIGNATURE |eval| (|#1| |#1| (|List| (|Equation| |#1|))))
   (SIGNATURE |makeVariable| ((|Mapping| |#1| (|NonNegativeInteger|)) |#1|))
   (SIGNATURE |separant| (|#1| |#1|)) (SIGNATURE |initial| (|#1| |#1|))
   (SIGNATURE |leader| (|#4| |#1|)) (SIGNATURE |isobaric?| ((|Boolean|) |#1|))
   (SIGNATURE |weight| ((|NonNegativeInteger|) |#1| |#3|))
   (SIGNATURE |weights| ((|List| (|NonNegativeInteger|)) |#1| |#3|))
   (SIGNATURE |weight| ((|NonNegativeInteger|) |#1|))
   (SIGNATURE |weights| ((|List| (|NonNegativeInteger|)) |#1|))
   (SIGNATURE |degree| ((|NonNegativeInteger|) |#1| |#3|))
   (SIGNATURE |order| ((|NonNegativeInteger|) |#1|))
   (SIGNATURE |order| ((|NonNegativeInteger|) |#1| |#3|))
   (SIGNATURE |differentialVariables| ((|List| |#3|) |#1|))
   (SIGNATURE |makeVariable| ((|Mapping| |#1| (|NonNegativeInteger|)) |#3|))
   (SIGNATURE |retractIfCan| ((|Union| |#3| #1="failed") |#1|))
   (SIGNATURE |coerce| (|#1| |#3|)) (SIGNATURE |coerce| (|#1| (|Integer|)))
   (SIGNATURE |differentiate| (|#1| |#1| (|Mapping| |#2| |#2|)))
   (SIGNATURE |differentiate|
    (|#1| |#1| (|Mapping| |#2| |#2|) (|NonNegativeInteger|)))
   (SIGNATURE |differentiate|
    (|#1| |#1| (|List| (|Symbol|)) (|List| (|NonNegativeInteger|))))
   (SIGNATURE |differentiate| (|#1| |#1| (|Symbol|) (|NonNegativeInteger|)))
   (SIGNATURE |differentiate| (|#1| |#1| (|List| (|Symbol|))))
   (SIGNATURE |differentiate| (|#1| |#1| (|Symbol|)))
   (SIGNATURE |differentiate| (|#1| |#1| (|NonNegativeInteger|)))
   (SIGNATURE |differentiate| (|#1| |#1|))
   (SIGNATURE |retractIfCan| ((|Union| |#4| #1#) |#1|))
   (SIGNATURE |coerce| (|#1| |#4|))
   (SIGNATURE |differentiate| (|#1| |#1| |#4|))
   (SIGNATURE |differentiate| (|#1| |#1| (|List| |#4|)))
   (SIGNATURE |differentiate| (|#1| |#1| |#4| (|NonNegativeInteger|)))
   (SIGNATURE |differentiate|
    (|#1| |#1| (|List| |#4|) (|List| (|NonNegativeInteger|))))
   (SIGNATURE |coerce| (|#1| |#1|))
   (SIGNATURE |eval| (|#1| |#1| (|List| |#4|) (|List| |#1|)))
   (SIGNATURE |eval| (|#1| |#1| |#4| |#1|))
   (SIGNATURE |eval| (|#1| |#1| (|List| |#4|) (|List| |#2|)))
   (SIGNATURE |eval| (|#1| |#1| |#4| |#2|))
   (SIGNATURE |degree| ((|List| (|NonNegativeInteger|)) |#1| (|List| |#4|)))
   (SIGNATURE |degree| ((|NonNegativeInteger|) |#1| |#4|))
   (SIGNATURE |retractIfCan| ((|Union| |#2| #1#) |#1|))
   (SIGNATURE |coerce| (|#1| |#2|))
   (SIGNATURE |coerce| (|#1| (|Fraction| (|Integer|))))
   (SIGNATURE |retractIfCan| ((|Union| (|Fraction| (|Integer|)) #1#) |#1|))
   (SIGNATURE |retractIfCan| ((|Union| (|Integer|) #1#) |#1|))
   (SIGNATURE |degree| (|#5| |#1|)) (SIGNATURE |coerce| ((|OutputForm|) |#1|)))
  (|DifferentialPolynomialCategory| |#2| |#3| |#4| |#5|) (|Ring|)
  (|OrderedSet|) (|DifferentialVariableCategory| |#3|)
  (|OrderedAbelianMonoidSup|))
 (T |DifferentialPolynomialCategory&|))
(CATEGORY |domain| (SIGNATURE |eval| (|#1| |#1| (|List| |#3|) (|List| |#2|)))
 (SIGNATURE |eval| (|#1| |#1| |#3| |#2|))
 (SIGNATURE |eval| (|#1| |#1| (|List| |#3|) (|List| |#1|)))
 (SIGNATURE |eval| (|#1| |#1| |#3| |#1|))
 (SIGNATURE |eval| (|#1| |#1| (|List| |#1|) (|List| |#1|)))
 (SIGNATURE |eval| (|#1| |#1| |#1| |#1|))
 (SIGNATURE |eval| (|#1| |#1| (|Equation| |#1|)))
 (SIGNATURE |eval| (|#1| |#1| (|List| (|Equation| |#1|))))
 (SIGNATURE |makeVariable| ((|Mapping| |#1| (|NonNegativeInteger|)) |#1|))
 (SIGNATURE |separant| (|#1| |#1|)) (SIGNATURE |initial| (|#1| |#1|))
 (SIGNATURE |leader| (|#4| |#1|)) (SIGNATURE |isobaric?| ((|Boolean|) |#1|))
 (SIGNATURE |weight| ((|NonNegativeInteger|) |#1| |#3|))
 (SIGNATURE |weights| ((|List| (|NonNegativeInteger|)) |#1| |#3|))
 (SIGNATURE |weight| ((|NonNegativeInteger|) |#1|))
 (SIGNATURE |weights| ((|List| (|NonNegativeInteger|)) |#1|))
 (SIGNATURE |degree| ((|NonNegativeInteger|) |#1| |#3|))
 (SIGNATURE |order| ((|NonNegativeInteger|) |#1|))
 (SIGNATURE |order| ((|NonNegativeInteger|) |#1| |#3|))
 (SIGNATURE |differentialVariables| ((|List| |#3|) |#1|))
 (SIGNATURE |makeVariable| ((|Mapping| |#1| (|NonNegativeInteger|)) |#3|))
 (SIGNATURE |retractIfCan| ((|Union| |#3| #1="failed") |#1|))
 (SIGNATURE |coerce| (|#1| |#3|)) (SIGNATURE |coerce| (|#1| (|Integer|)))
 (SIGNATURE |differentiate| (|#1| |#1| (|Mapping| |#2| |#2|)))
 (SIGNATURE |differentiate|
  (|#1| |#1| (|Mapping| |#2| |#2|) (|NonNegativeInteger|)))
 (SIGNATURE |differentiate|
  (|#1| |#1| (|List| (|Symbol|)) (|List| (|NonNegativeInteger|))))
 (SIGNATURE |differentiate| (|#1| |#1| (|Symbol|) (|NonNegativeInteger|)))
 (SIGNATURE |differentiate| (|#1| |#1| (|List| (|Symbol|))))
 (SIGNATURE |differentiate| (|#1| |#1| (|Symbol|)))
 (SIGNATURE |differentiate| (|#1| |#1| (|NonNegativeInteger|)))
 (SIGNATURE |differentiate| (|#1| |#1|))
 (SIGNATURE |retractIfCan| ((|Union| |#4| #1#) |#1|))
 (SIGNATURE |coerce| (|#1| |#4|)) (SIGNATURE |differentiate| (|#1| |#1| |#4|))
 (SIGNATURE |differentiate| (|#1| |#1| (|List| |#4|)))
 (SIGNATURE |differentiate| (|#1| |#1| |#4| (|NonNegativeInteger|)))
 (SIGNATURE |differentiate|
  (|#1| |#1| (|List| |#4|) (|List| (|NonNegativeInteger|))))
 (SIGNATURE |coerce| (|#1| |#1|))
 (SIGNATURE |eval| (|#1| |#1| (|List| |#4|) (|List| |#1|)))
 (SIGNATURE |eval| (|#1| |#1| |#4| |#1|))
 (SIGNATURE |eval| (|#1| |#1| (|List| |#4|) (|List| |#2|)))
 (SIGNATURE |eval| (|#1| |#1| |#4| |#2|))
 (SIGNATURE |degree| ((|List| (|NonNegativeInteger|)) |#1| (|List| |#4|)))
 (SIGNATURE |degree| ((|NonNegativeInteger|) |#1| |#4|))
 (SIGNATURE |retractIfCan| ((|Union| |#2| #1#) |#1|))
 (SIGNATURE |coerce| (|#1| |#2|))
 (SIGNATURE |coerce| (|#1| (|Fraction| (|Integer|))))
 (SIGNATURE |retractIfCan| ((|Union| (|Fraction| (|Integer|)) #1#) |#1|))
 (SIGNATURE |retractIfCan| ((|Union| (|Integer|) #1#) |#1|))
 (SIGNATURE |degree| (|#5| |#1|)) (SIGNATURE |coerce| ((|OutputForm|) |#1|)))
"/git/fricas/src/algebra/DPOLCAT.spad"
((|weights| (((|List| (|NonNegativeInteger|)) $) 47)
  (((|List| (|NonNegativeInteger|)) $ |#3|) 50))
 (|weight| (((|NonNegativeInteger|) $) 49)
  (((|NonNegativeInteger|) $ |#3|) 52))
 (|separant| (($ $) 64))
 (|retractIfCan| (((|Union| (|Integer|) #1="failed") $) NIL)
  (((|Union| (|Fraction| (|Integer|)) #1#) $) NIL) (((|Union| |#2| #1#) $) NIL)
  (((|Union| |#4| #1#) $) NIL) (((|Union| |#3| #1#) $) 71))
 (|order| (((|NonNegativeInteger|) $ |#3|) 39) (((|NonNegativeInteger|) $) 36))
 (|makeVariable| (((|Mapping| $ (|NonNegativeInteger|)) |#3|) 15)
  (((|Mapping| $ (|NonNegativeInteger|)) $) 76))
 (|leader| ((|#4| $) 57)) (|isobaric?| (((|Boolean|) $) 55))
 (|initial| (($ $) 63))
 (|eval| (($ $ |#4| |#2|) NIL) (($ $ (|List| |#4|) (|List| |#2|)) NIL)
         (($ $ |#4| $) NIL) (($ $ (|List| |#4|) (|List| $)) NIL)
         (($ $ (|List| (|Equation| $))) 95) (($ $ (|Equation| $)) NIL)
         (($ $ $ $) NIL) (($ $ (|List| $) (|List| $)) NIL) (($ $ |#3| $) NIL)
         (($ $ (|List| |#3|) (|List| $)) 88) (($ $ |#3| |#2|) NIL)
         (($ $ (|List| |#3|) (|List| |#2|)) 83))
 (|differentiate| (($ $ (|List| |#4|) (|List| (|NonNegativeInteger|))) NIL)
  (($ $ |#4| (|NonNegativeInteger|)) NIL) (($ $ (|List| |#4|)) NIL)
  (($ $ |#4|) NIL) (($ $) NIL) (($ $ (|NonNegativeInteger|)) NIL)
  (($ $ (|Symbol|)) NIL) (($ $ (|List| (|Symbol|))) NIL)
  (($ $ (|Symbol|) (|NonNegativeInteger|)) NIL)
  (($ $ (|List| (|Symbol|)) (|List| (|NonNegativeInteger|))) NIL)
  (($ $ (|Mapping| |#2| |#2|) (|NonNegativeInteger|)) NIL)
  (($ $ (|Mapping| |#2| |#2|)) 32))
 (|differentialVariables| (((|List| |#3|) $) 74))
 (|degree| ((|#5| $) NIL) (((|NonNegativeInteger|) $ |#4|) NIL)
  (((|List| (|NonNegativeInteger|)) $ (|List| |#4|)) NIL)
  (((|NonNegativeInteger|) $ |#3|) 44))
 (|coerce| (((|OutputForm|) $) NIL) (($ (|Fraction| (|Integer|))) NIL)
           (($ |#2|) NIL) (($ $) NIL) (($ |#4|) NIL) (($ (|Integer|)) NIL)
           (($ |#3|) 66)))
((|HasCategory| |#2| '(|DifferentialRing|)))
DPOLCAT-
((|constructor|
  (NIL
   "\\spadtype{DifferentialPolynomialCategory} is a category constructor specifying basic functions in an ordinary differential polynomial ring with a given ordered set of differential indeterminates. In addition,{} it implements defaults for the basic functions. The functions \\spadfun{order} and \\spadfun{weight} are extended from the set of derivatives of differential indeterminates to the set of differential polynomials. Other operations provided on differential polynomials are \\spadfun{leader},{} \\spadfun{initial},{} \\spadfun{separant},{} \\spadfun{differentialVariables},{} and \\spadfun{isobaric?}. Furthermore,{} if the ground ring is a differential ring,{} then evaluation (substitution of differential indeterminates by elements of the ground ring or by differential polynomials) is provided by \\spadfun{eval}. A convenient way of referencing derivatives is provided by the functions \\spadfun{makeVariable}. \\blankline To construct a domain using this constructor,{} one needs to provide a ground ring \\spad{R},{} an ordered set \\spad{S} of differential indeterminates,{} a ranking \\spad{V} on the set of derivatives of the differential indeterminates,{} and a set \\spad{E} of exponents in bijection with the set of differential monomials in the given differential indeterminates. \\blankline"))
 (|separant|
  (($ $)
   "\\spad{separant(p)} returns the partial derivative of the differential polynomial \\spad{p} with respect to its leader."))
 (|initial|
  (($ $)
   "\\spad{initial(p)} returns the leading coefficient when the differential polynomial \\spad{p} is written as a univariate polynomial in its leader."))
 (|leader|
  ((|#4| $)
   "\\spad{leader(p)} returns the derivative of the highest rank appearing in the differential polynomial \\spad{p} Note: an error occurs if \\spad{p} is in the ground ring."))
 (|isobaric?|
  (((|Boolean|) $)
   "\\spad{isobaric?(p)} returns \\spad{true} if every differential monomial appearing in the differential polynomial \\spad{p} has same weight,{} and returns \\spad{false} otherwise."))
 (|weight|
  (((|NonNegativeInteger|) $ |#3|)
   "\\spad{weight(p,{} s)} returns the maximum weight of all differential monomials appearing in the differential polynomial \\spad{p} when \\spad{p} is viewed as a differential polynomial in the differential indeterminate \\spad{s} alone.")
  (((|NonNegativeInteger|) $)
   "\\spad{weight(p)} returns the maximum weight of all differential monomials appearing in the differential polynomial \\spad{p}."))
 (|weights|
  (((|List| (|NonNegativeInteger|)) $ |#3|)
   "\\spad{weights(p,{} s)} returns a list of weights of differential monomials appearing in the differential polynomial \\spad{p} when \\spad{p} is viewed as a differential polynomial in the differential indeterminate \\spad{s} alone.")
  (((|List| (|NonNegativeInteger|)) $)
   "\\spad{weights(p)} returns a list of weights of differential monomials appearing in differential polynomial \\spad{p}."))
 (|degree|
  (((|NonNegativeInteger|) $ |#3|)
   "\\spad{degree(p,{} s)} returns the maximum degree of the differential polynomial \\spad{p} viewed as a differential polynomial in the differential indeterminate \\spad{s} alone."))
 (|order|
  (((|NonNegativeInteger|) $)
   "\\spad{order(p)} returns the order of the differential polynomial \\spad{p},{} which is the maximum number of differentiations of a differential indeterminate,{} among all those appearing in \\spad{p}.")
  (((|NonNegativeInteger|) $ |#3|)
   "\\spad{order(p,{} s)} returns the order of the differential polynomial \\spad{p} in differential indeterminate \\spad{s}."))
 (|differentialVariables|
  (((|List| |#3|) $)
   "\\spad{differentialVariables(p)} returns a list of differential indeterminates occurring in a differential polynomial \\spad{p}."))
 (|makeVariable|
  (((|Mapping| $ (|NonNegativeInteger|)) $)
   "\\spad{makeVariable(p)} views \\spad{p} as an element of a differential ring,{} in such a way that the \\spad{n}-th derivative of \\spad{p} may be simply referenced as \\spad{z}.\\spad{n} where \\spad{z} \\spad{:=} makeVariable(\\spad{p}). Note: In the interpreter,{} \\spad{z} is given as an internal map,{} which may be ignored.")
  (((|Mapping| $ (|NonNegativeInteger|)) |#3|)
   "\\spad{makeVariable(s)} views \\spad{s} as a differential indeterminate,{} in such a way that the \\spad{n}-th derivative of \\spad{s} may be simply referenced as \\spad{z}.\\spad{n} where \\spad{z} \\spad{:=} makeVariable(\\spad{s}). Note: In the interpreter,{} \\spad{z} is given as an internal map,{} which may be ignored.")))
(("documentation" 0 8353) ("ancestors" 0 NIL) ("parents" 0 NIL)
 ("abbreviation" 0 8344) ("predicates" 0 8299) ("superDomain" 0 NIL)
 ("operationAlist" 0 6346) ("modemaps" 0 NIL) ("sourceFile" 0 6307)
 ("constructorCategory" 0 3371) ("constructorModemap" 0 75)
 ("constructorKind" 0 66) ("constructorForm" 0 20))