)abbrev domain PRIMARR PrimitiveArray
++ This provides a fast array type with no bound checking on elt's.
++ Minimum index is 0 in this type, cannot be changed
PrimitiveArray(S : Type) : OneDimensionalArrayAggregate S == add
   Qmax ==> QVMAXINDEX$Lisp
   Qsize ==> QVSIZE$Lisp
   Qelt ==> QAREF1$Lisp
   Qsetelt ==> QSETAREF1$Lisp
   Qnew ==> MAKE_-ARRAY$Lisp
   Qnew1 ==> MAKEARR1$Lisp

   #x                          == Qsize x
   minIndex x                  == 0
   empty()                     == Qnew(0$Lisp)
   new(n, x)                   == Qnew1(n, x)
   qelt(x, i)                  == Qelt(x, i)
   elt(x : %, i : Integer)         == Qelt(x, i)
   qsetelt!(x, i, s)          == Qsetelt(x, i, s)
   setelt!(x : %, i : Integer, s : S) == Qsetelt(x, i, s)
   fill!(x, s)       == (for i in 0..Qmax x repeat Qsetelt(x, i, s); x)

   -- logically unnecessary, but we want to take advantage from
   -- fast indexing.
   if S has SetCategory then
       hashUpdate!(s : HashState, x : %) : HashState ==
           for i in 0..Qmax x repeat
               s := hashUpdate!(s, Qelt(x, i))$S
           s


