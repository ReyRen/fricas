29656               (|RegularTriangularSetCategory| R E V P)
|category|
(((|RegularTriangularSetCategory| |#1| |#2| |#3| |#4|) (|Category|)
  (|GcdDomain|) (|OrderedAbelianMonoidSup|) (|OrderedSet|)
  (|RecursivePolynomialCategory| |t#1| |t#2| |t#3|))
 (T |RegularTriangularSetCategory|))
(|Join| (|TriangularSetCategory| |t#1| |t#2| |t#3| |t#4|)
        (CATEGORY |domain| (SIGNATURE |purelyAlgebraic?| ((|Boolean|) |t#4| $))
         (SIGNATURE |purelyTranscendental?| ((|Boolean|) |t#4| $))
         (SIGNATURE |algebraicCoefficients?| ((|Boolean|) |t#4| $))
         (SIGNATURE |purelyAlgebraic?| ((|Boolean|) $))
         (SIGNATURE |purelyAlgebraicLeadingMonomial?| ((|Boolean|) |t#4| $))
         (SIGNATURE |invertibleElseSplit?|
          ((|Union| (|Boolean|) (|List| $)) |t#4| $))
         (SIGNATURE |invertible?|
          ((|List| (|Record| (|:| |val| (|Boolean|)) (|:| |tower| $))) |t#4|
           $))
         (SIGNATURE |invertible?| ((|Boolean|) |t#4| $))
         (SIGNATURE |invertibleSet| ((|List| $) |t#4| $))
         (SIGNATURE |lastSubResultantElseSplit|
          ((|Union| |t#4| (|List| $)) |t#4| |t#4| $))
         (SIGNATURE |lastSubResultant|
          ((|List| (|Record| (|:| |val| |t#4|) (|:| |tower| $))) |t#4| |t#4|
           $))
         (SIGNATURE |squareFreePart|
          ((|List| (|Record| (|:| |val| |t#4|) (|:| |tower| $))) |t#4| $))
         (SIGNATURE |intersect| ((|List| $) |t#4| $))
         (SIGNATURE |intersect| ((|List| $) (|List| |t#4|) $))
         (SIGNATURE |intersect| ((|List| $) (|List| |t#4|) (|List| $)))
         (SIGNATURE |intersect| ((|List| $) |t#4| (|List| $)))
         (SIGNATURE |augment| ((|List| $) |t#4| $))
         (SIGNATURE |augment| ((|List| $) |t#4| (|List| $)))
         (SIGNATURE |augment| ((|List| $) (|List| |t#4|) $))
         (SIGNATURE |augment| ((|List| $) (|List| |t#4|) (|List| $)))
         (SIGNATURE |internalAugment| ($ |t#4| $))
         (SIGNATURE |internalAugment| ($ (|List| |t#4|) $))
         (SIGNATURE |extend| ((|List| $) |t#4| $))
         (SIGNATURE |extend| ((|List| $) |t#4| (|List| $)))
         (SIGNATURE |extend| ((|List| $) (|List| |t#4|) $))
         (SIGNATURE |extend| ((|List| $) (|List| |t#4|) (|List| $)))
         (SIGNATURE |zeroSetSplit| ((|List| $) (|List| |t#4|) (|Boolean|)))))
"/git/fricas/src/algebra/RSETCAT.spad"
((|purelyAlgebraic?| (*1 *2 *3 *1)
  (AND (|ofCategory| *1 (|RegularTriangularSetCategory| *4 *5 *6 *3))
       (|ofCategory| *4 (|GcdDomain|))
       (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *6 (|OrderedSet|))
       (|ofCategory| *3 (|RecursivePolynomialCategory| *4 *5 *6))
       (|isDomain| *2 (|Boolean|))))
 (|purelyTranscendental?| (*1 *2 *3 *1)
  (AND (|ofCategory| *1 (|RegularTriangularSetCategory| *4 *5 *6 *3))
       (|ofCategory| *4 (|GcdDomain|))
       (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *6 (|OrderedSet|))
       (|ofCategory| *3 (|RecursivePolynomialCategory| *4 *5 *6))
       (|isDomain| *2 (|Boolean|))))
 (|algebraicCoefficients?| (*1 *2 *3 *1)
  (AND (|ofCategory| *1 (|RegularTriangularSetCategory| *4 *5 *6 *3))
       (|ofCategory| *4 (|GcdDomain|))
       (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *6 (|OrderedSet|))
       (|ofCategory| *3 (|RecursivePolynomialCategory| *4 *5 *6))
       (|isDomain| *2 (|Boolean|))))
 (|purelyAlgebraic?| (*1 *2 *1)
  (AND (|ofCategory| *1 (|RegularTriangularSetCategory| *3 *4 *5 *6))
       (|ofCategory| *3 (|GcdDomain|))
       (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *5 (|OrderedSet|))
       (|ofCategory| *6 (|RecursivePolynomialCategory| *3 *4 *5))
       (|isDomain| *2 (|Boolean|))))
 (|purelyAlgebraicLeadingMonomial?| (*1 *2 *3 *1)
  (AND (|ofCategory| *1 (|RegularTriangularSetCategory| *4 *5 *6 *3))
       (|ofCategory| *4 (|GcdDomain|))
       (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *6 (|OrderedSet|))
       (|ofCategory| *3 (|RecursivePolynomialCategory| *4 *5 *6))
       (|isDomain| *2 (|Boolean|))))
 (|invertibleElseSplit?| (*1 *2 *3 *1)
  (AND (|ofCategory| *4 (|GcdDomain|))
       (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *6 (|OrderedSet|))
       (|ofCategory| *3 (|RecursivePolynomialCategory| *4 *5 *6))
       (|isDomain| *2 (|Union| (|Boolean|) (|List| *1)))
       (|ofCategory| *1 (|RegularTriangularSetCategory| *4 *5 *6 *3))))
 (|invertible?| (*1 *2 *3 *1)
  (AND (|ofCategory| *4 (|GcdDomain|))
       (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *6 (|OrderedSet|))
       (|ofCategory| *3 (|RecursivePolynomialCategory| *4 *5 *6))
       (|isDomain| *2
                   (|List|
                    (|Record| (|:| |val| (|Boolean|)) (|:| |tower| *1))))
       (|ofCategory| *1 (|RegularTriangularSetCategory| *4 *5 *6 *3))))
 (|invertible?| (*1 *2 *3 *1)
  (AND (|ofCategory| *1 (|RegularTriangularSetCategory| *4 *5 *6 *3))
       (|ofCategory| *4 (|GcdDomain|))
       (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *6 (|OrderedSet|))
       (|ofCategory| *3 (|RecursivePolynomialCategory| *4 *5 *6))
       (|isDomain| *2 (|Boolean|))))
 (|invertibleSet| (*1 *2 *3 *1)
  (AND (|ofCategory| *4 (|GcdDomain|))
       (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *6 (|OrderedSet|))
       (|ofCategory| *3 (|RecursivePolynomialCategory| *4 *5 *6))
       (|isDomain| *2 (|List| *1))
       (|ofCategory| *1 (|RegularTriangularSetCategory| *4 *5 *6 *3))))
 (|lastSubResultantElseSplit| (*1 *2 *3 *3 *1)
  (AND (|ofCategory| *4 (|GcdDomain|))
       (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *6 (|OrderedSet|))
       (|ofCategory| *3 (|RecursivePolynomialCategory| *4 *5 *6))
       (|isDomain| *2 (|Union| *3 (|List| *1)))
       (|ofCategory| *1 (|RegularTriangularSetCategory| *4 *5 *6 *3))))
 (|lastSubResultant| (*1 *2 *3 *3 *1)
  (AND (|ofCategory| *4 (|GcdDomain|))
       (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *6 (|OrderedSet|))
       (|ofCategory| *3 (|RecursivePolynomialCategory| *4 *5 *6))
       (|isDomain| *2 (|List| (|Record| (|:| |val| *3) (|:| |tower| *1))))
       (|ofCategory| *1 (|RegularTriangularSetCategory| *4 *5 *6 *3))))
 (|squareFreePart| (*1 *2 *3 *1)
  (AND (|ofCategory| *4 (|GcdDomain|))
       (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *6 (|OrderedSet|))
       (|ofCategory| *3 (|RecursivePolynomialCategory| *4 *5 *6))
       (|isDomain| *2 (|List| (|Record| (|:| |val| *3) (|:| |tower| *1))))
       (|ofCategory| *1 (|RegularTriangularSetCategory| *4 *5 *6 *3))))
 (|intersect| (*1 *2 *3 *1)
  (AND (|ofCategory| *4 (|GcdDomain|))
       (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *6 (|OrderedSet|))
       (|ofCategory| *3 (|RecursivePolynomialCategory| *4 *5 *6))
       (|isDomain| *2 (|List| *1))
       (|ofCategory| *1 (|RegularTriangularSetCategory| *4 *5 *6 *3))))
 (|intersect| (*1 *2 *3 *1)
  (AND (|isDomain| *3 (|List| *7))
       (|ofCategory| *7 (|RecursivePolynomialCategory| *4 *5 *6))
       (|ofCategory| *4 (|GcdDomain|))
       (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *6 (|OrderedSet|)) (|isDomain| *2 (|List| *1))
       (|ofCategory| *1 (|RegularTriangularSetCategory| *4 *5 *6 *7))))
 (|intersect| (*1 *2 *3 *2)
  (AND (|isDomain| *2 (|List| *1)) (|isDomain| *3 (|List| *7))
       (|ofCategory| *1 (|RegularTriangularSetCategory| *4 *5 *6 *7))
       (|ofCategory| *4 (|GcdDomain|))
       (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *6 (|OrderedSet|))
       (|ofCategory| *7 (|RecursivePolynomialCategory| *4 *5 *6))))
 (|intersect| (*1 *2 *3 *2)
  (AND (|isDomain| *2 (|List| *1))
       (|ofCategory| *1 (|RegularTriangularSetCategory| *4 *5 *6 *3))
       (|ofCategory| *4 (|GcdDomain|))
       (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *6 (|OrderedSet|))
       (|ofCategory| *3 (|RecursivePolynomialCategory| *4 *5 *6))))
 (|augment| (*1 *2 *3 *1)
  (AND (|ofCategory| *4 (|GcdDomain|))
       (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *6 (|OrderedSet|))
       (|ofCategory| *3 (|RecursivePolynomialCategory| *4 *5 *6))
       (|isDomain| *2 (|List| *1))
       (|ofCategory| *1 (|RegularTriangularSetCategory| *4 *5 *6 *3))))
 (|augment| (*1 *2 *3 *2)
  (AND (|isDomain| *2 (|List| *1))
       (|ofCategory| *1 (|RegularTriangularSetCategory| *4 *5 *6 *3))
       (|ofCategory| *4 (|GcdDomain|))
       (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *6 (|OrderedSet|))
       (|ofCategory| *3 (|RecursivePolynomialCategory| *4 *5 *6))))
 (|augment| (*1 *2 *3 *1)
  (AND (|isDomain| *3 (|List| *7))
       (|ofCategory| *7 (|RecursivePolynomialCategory| *4 *5 *6))
       (|ofCategory| *4 (|GcdDomain|))
       (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *6 (|OrderedSet|)) (|isDomain| *2 (|List| *1))
       (|ofCategory| *1 (|RegularTriangularSetCategory| *4 *5 *6 *7))))
 (|augment| (*1 *2 *3 *2)
  (AND (|isDomain| *2 (|List| *1)) (|isDomain| *3 (|List| *7))
       (|ofCategory| *1 (|RegularTriangularSetCategory| *4 *5 *6 *7))
       (|ofCategory| *4 (|GcdDomain|))
       (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *6 (|OrderedSet|))
       (|ofCategory| *7 (|RecursivePolynomialCategory| *4 *5 *6))))
 (|internalAugment| (*1 *1 *2 *1)
  (AND (|ofCategory| *1 (|RegularTriangularSetCategory| *3 *4 *5 *2))
       (|ofCategory| *3 (|GcdDomain|))
       (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *5 (|OrderedSet|))
       (|ofCategory| *2 (|RecursivePolynomialCategory| *3 *4 *5))))
 (|internalAugment| (*1 *1 *2 *1)
  (AND (|isDomain| *2 (|List| *6))
       (|ofCategory| *1 (|RegularTriangularSetCategory| *3 *4 *5 *6))
       (|ofCategory| *3 (|GcdDomain|))
       (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *5 (|OrderedSet|))
       (|ofCategory| *6 (|RecursivePolynomialCategory| *3 *4 *5))))
 (|extend| (*1 *2 *3 *1)
  (AND (|ofCategory| *4 (|GcdDomain|))
       (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *6 (|OrderedSet|))
       (|ofCategory| *3 (|RecursivePolynomialCategory| *4 *5 *6))
       (|isDomain| *2 (|List| *1))
       (|ofCategory| *1 (|RegularTriangularSetCategory| *4 *5 *6 *3))))
 (|extend| (*1 *2 *3 *2)
  (AND (|isDomain| *2 (|List| *1))
       (|ofCategory| *1 (|RegularTriangularSetCategory| *4 *5 *6 *3))
       (|ofCategory| *4 (|GcdDomain|))
       (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *6 (|OrderedSet|))
       (|ofCategory| *3 (|RecursivePolynomialCategory| *4 *5 *6))))
 (|extend| (*1 *2 *3 *1)
  (AND (|isDomain| *3 (|List| *7))
       (|ofCategory| *7 (|RecursivePolynomialCategory| *4 *5 *6))
       (|ofCategory| *4 (|GcdDomain|))
       (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *6 (|OrderedSet|)) (|isDomain| *2 (|List| *1))
       (|ofCategory| *1 (|RegularTriangularSetCategory| *4 *5 *6 *7))))
 (|extend| (*1 *2 *3 *2)
  (AND (|isDomain| *2 (|List| *1)) (|isDomain| *3 (|List| *7))
       (|ofCategory| *1 (|RegularTriangularSetCategory| *4 *5 *6 *7))
       (|ofCategory| *4 (|GcdDomain|))
       (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *6 (|OrderedSet|))
       (|ofCategory| *7 (|RecursivePolynomialCategory| *4 *5 *6))))
 (|zeroSetSplit| (*1 *2 *3 *4)
  (AND (|isDomain| *3 (|List| *8)) (|isDomain| *4 (|Boolean|))
       (|ofCategory| *8 (|RecursivePolynomialCategory| *5 *6 *7))
       (|ofCategory| *5 (|GcdDomain|))
       (|ofCategory| *6 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *7 (|OrderedSet|)) (|isDomain| *2 (|List| *1))
       (|ofCategory| *1 (|RegularTriangularSetCategory| *5 *6 *7 *8)))))
((~= (((|Boolean|) $ $) 6))
 (|zeroSetSplitIntoTriangularSystems|
  (((|List| (|Record| (|:| |close| $) (|:| |open| (|List| |#4|))))
    (|List| |#4|))
   6))
 (|zeroSetSplit| (((|List| $) (|List| |#4|)) 6)
  (((|List| $) (|List| |#4|) (|Boolean|)) 6))
 (|variables| (((|List| |#3|) $) 6)) (|trivialIdeal?| (((|Boolean|) $) 6))
 (|triangular?| (((|Boolean|) $) 6 (|has| |#1| (|IntegralDomain|))))
 (|stronglyReduced?| (((|Boolean|) |#4| $) 6) (((|Boolean|) $) 6))
 (|stronglyReduce| ((|#4| |#4| $) 6))
 (|squareFreePart|
  (((|List| (|Record| (|:| |val| |#4|) (|:| |tower| $))) |#4| $) 6))
 (|sort|
  (((|Record| (|:| |under| $) (|:| |floor| $) (|:| |upper| $)) $ |#3|) 6))
 (|size?| (((|Boolean|) $ (|NonNegativeInteger|)) 6))
 (|select| (($ (|Mapping| (|Boolean|) |#4|) $) 6 (|has| $ (|finiteAggregate|)))
  (((|Union| |#4| #1="failed") $ |#3|) 6))
 (|sample| (($) 6 T CONST))
 (|roughUnitIdeal?| (((|Boolean|) $) 6 (|has| |#1| (|IntegralDomain|))))
 (|roughSubIdeal?| (((|Boolean|) $ $) 6 (|has| |#1| (|IntegralDomain|))))
 (|roughEqualIdeals?| (((|Boolean|) $ $) 6 (|has| |#1| (|IntegralDomain|))))
 (|roughBase?| (((|Boolean|) $) 6 (|has| |#1| (|IntegralDomain|))))
 (|rewriteSetWithReduction|
  (((|List| |#4|) (|List| |#4|) $ (|Mapping| |#4| |#4| |#4|)
    (|Mapping| (|Boolean|) |#4| |#4|))
   6))
 (|rewriteIdealWithRemainder|
  (((|List| |#4|) (|List| |#4|) $) 6 (|has| |#1| (|IntegralDomain|))))
 (|rewriteIdealWithHeadRemainder|
  (((|List| |#4|) (|List| |#4|) $) 6 (|has| |#1| (|IntegralDomain|))))
 (|retractIfCan| (((|Union| $ "failed") (|List| |#4|)) 6))
 (|retract| (($ (|List| |#4|)) 6)) (|rest| (((|Union| $ #1#) $) 6))
 (|removeZero| ((|#4| |#4| $) 6))
 (|removeDuplicates|
  (($ $) 6 (AND (|has| |#4| (|BasicType|)) (|has| $ (|finiteAggregate|)))))
 (|remove|
  (($ |#4| $) 6 (AND (|has| |#4| (|BasicType|)) (|has| $ (|finiteAggregate|))))
  (($ (|Mapping| (|Boolean|) |#4|) $) 6 (|has| $ (|finiteAggregate|))))
 (|remainder|
  (((|Record| (|:| |rnum| |#1|) (|:| |polnum| |#4|) (|:| |den| |#1|)) |#4| $) 6
   (|has| |#1| (|IntegralDomain|))))
 (|reduced?| (((|Boolean|) |#4| $ (|Mapping| (|Boolean|) |#4| |#4|)) 6))
 (|reduceByQuasiMonic| ((|#4| |#4| $) 6))
 (|reduce|
  ((|#4| (|Mapping| |#4| |#4| |#4|) $ |#4| |#4|) 6
   (AND (|has| |#4| (|BasicType|)) (|has| $ (|finiteAggregate|))))
  ((|#4| (|Mapping| |#4| |#4| |#4|) $ |#4|) 6 (|has| $ (|finiteAggregate|)))
  ((|#4| (|Mapping| |#4| |#4| |#4|) $) 6 (|has| $ (|finiteAggregate|)))
  ((|#4| |#4| $ (|Mapping| |#4| |#4| |#4|) (|Mapping| (|Boolean|) |#4| |#4|))
   6))
 (|quasiComponent|
  (((|Record| (|:| |close| (|List| |#4|)) (|:| |open| (|List| |#4|))) $) 6))
 (|purelyTranscendental?| (((|Boolean|) |#4| $) 6))
 (|purelyAlgebraicLeadingMonomial?| (((|Boolean|) |#4| $) 6))
 (|purelyAlgebraic?| (((|Boolean|) |#4| $) 6) (((|Boolean|) $) 6))
 (|parts| (((|List| |#4|) $) 6 (|has| $ (|finiteAggregate|))))
 (|normalized?| (((|Boolean|) |#4| $) 6) (((|Boolean|) $) 6))
 (|mvar| ((|#3| $) 6)) (|more?| (((|Boolean|) $ (|NonNegativeInteger|)) 6))
 (|min|
  ((|#4| $) 6 (AND (|has| |#4| (|OrderedSet|)) (|has| $ (|finiteAggregate|)))))
 (|members| (((|List| |#4|) $) 6 (|has| $ (|finiteAggregate|))))
 (|member?|
  (((|Boolean|) |#4| $) 6
   (AND (|has| |#4| (|BasicType|)) (|has| $ (|finiteAggregate|)))))
 (|max|
  ((|#4| $) 6 (AND (|has| |#4| (|OrderedSet|)) (|has| $ (|finiteAggregate|))))
  ((|#4| (|Mapping| (|Boolean|) |#4| |#4|) $) 6 (|has| $ (|finiteAggregate|))))
 (|map!| (($ (|Mapping| |#4| |#4|) $) 6 (|has| $ (|shallowlyMutable|))))
 (|map| (($ (|Mapping| |#4| |#4|) $) 6))
 (|mainVariables| (((|List| |#3|) $) 6))
 (|mainVariable?| (((|Boolean|) |#3| $) 6))
 (|less?| (((|Boolean|) $ (|NonNegativeInteger|)) 6))
 (|latex| (((|String|) $) 6))
 (|lastSubResultantElseSplit| (((|Union| |#4| (|List| $)) |#4| |#4| $) 6))
 (|lastSubResultant|
  (((|List| (|Record| (|:| |val| |#4|) (|:| |tower| $))) |#4| |#4| $) 6))
 (|last| (((|Union| |#4| #1#) $) 6)) (|invertibleSet| (((|List| $) |#4| $) 6))
 (|invertibleElseSplit?| (((|Union| (|Boolean|) (|List| $)) |#4| $) 6))
 (|invertible?|
  (((|List| (|Record| (|:| |val| (|Boolean|)) (|:| |tower| $))) |#4| $) 6)
  (((|Boolean|) |#4| $) 6))
 (|intersect| (((|List| $) |#4| $) 6) (((|List| $) (|List| |#4|) $) 6)
  (((|List| $) (|List| |#4|) (|List| $)) 6) (((|List| $) |#4| (|List| $)) 6))
 (|internalAugment| (($ |#4| $) 6) (($ (|List| |#4|) $) 6))
 (|initials| (((|List| |#4|) $) 6))
 (|initiallyReduced?| (((|Boolean|) |#4| $) 6) (((|Boolean|) $) 6))
 (|initiallyReduce| ((|#4| |#4| $) 6)) (|infRittWu?| (((|Boolean|) $ $) 6))
 (|iexactQuo| ((|#1| |#1| |#1|) 6 (|has| |#1| (|IntegralDomain|))))
 (|headRemainder|
  (((|Record| (|:| |num| |#4|) (|:| |den| |#1|)) |#4| $) 6
   (|has| |#1| (|IntegralDomain|))))
 (|headReduced?| (((|Boolean|) |#4| $) 6) (((|Boolean|) $) 6))
 (|headReduce| ((|#4| |#4| $) 6))
 (|hashUpdate!| (((|HashState|) (|HashState|) $) 6))
 (|hash| (((|SingleInteger|) $) 6)) (|first| (((|Union| |#4| #1#) $) 6))
 (|find| (((|Union| |#4| "failed") (|Mapping| (|Boolean|) |#4|) $) 6))
 (|extendIfCan| (((|Union| $ #1#) $ |#4|) 6))
 (|extend| (($ $ |#4|) 6) (((|List| $) |#4| $) 6)
  (((|List| $) |#4| (|List| $)) 6) (((|List| $) (|List| |#4|) $) 6)
  (((|List| $) (|List| |#4|) (|List| $)) 6))
 (|every?|
  (((|Boolean|) (|Mapping| (|Boolean|) |#4|) $) 6
   (|has| $ (|finiteAggregate|))))
 (|eval|
  (($ $ (|List| |#4|) (|List| |#4|)) 6
   (AND (|has| |#4| (|Evalable| |#4|)) (|has| |#4| (|SetCategory|))))
  (($ $ |#4| |#4|) 6
   (AND (|has| |#4| (|Evalable| |#4|)) (|has| |#4| (|SetCategory|))))
  (($ $ (|Equation| |#4|)) 6
   (AND (|has| |#4| (|Evalable| |#4|)) (|has| |#4| (|SetCategory|))))
  (($ $ (|List| (|Equation| |#4|))) 6
   (AND (|has| |#4| (|Evalable| |#4|)) (|has| |#4| (|SetCategory|)))))
 (|eq?| (((|Boolean|) $ $) 6)) (|empty?| (((|Boolean|) $) 6)) (|empty| (($) 6))
 (|degree| (((|NonNegativeInteger|) $) 6))
 (|count|
  (((|NonNegativeInteger|) |#4| $) 6
   (AND (|has| |#4| (|BasicType|)) (|has| $ (|finiteAggregate|))))
  (((|NonNegativeInteger|) (|Mapping| (|Boolean|) |#4|) $) 6
   (|has| $ (|finiteAggregate|))))
 (|copy| (($ $) 6))
 (|convert| (((|InputForm|) $) 6 (|has| |#4| (|ConvertibleTo| (|InputForm|)))))
 (|construct| (($ (|List| |#4|)) 6)) (|collectUpper| (($ $ |#3|) 6))
 (|collectUnder| (($ $ |#3|) 6)) (|collectQuasiMonic| (($ $) 6))
 (|collect| (($ $ |#3|) 6))
 (|coerce| (((|OutputForm|) $) 6) (((|List| |#4|) $) 6))
 (|coHeight| (((|NonNegativeInteger|) $) 6 (|has| |#3| (|Finite|))))
 (|basicSet|
  (((|Union| (|Record| (|:| |bas| $) (|:| |top| (|List| |#4|))) #1#)
    (|List| |#4|) (|Mapping| (|Boolean|) |#4| |#4|))
   6)
  (((|Union| (|Record| (|:| |bas| $) (|:| |top| (|List| |#4|))) #1#)
    (|List| |#4|) (|Mapping| (|Boolean|) |#4|)
    (|Mapping| (|Boolean|) |#4| |#4|))
   6))
 (|autoReduced?|
  (((|Boolean|) $ (|Mapping| (|Boolean|) |#4| (|List| |#4|))) 6))
 (|augment| (((|List| $) |#4| $) 6) (((|List| $) |#4| (|List| $)) 6)
  (((|List| $) (|List| |#4|) $) 6) (((|List| $) (|List| |#4|) (|List| $)) 6))
 (|any?|
  (((|Boolean|) (|Mapping| (|Boolean|) |#4|) $) 6
   (|has| $ (|finiteAggregate|))))
 (|algebraicVariables| (((|List| |#3|) $) 6))
 (|algebraicCoefficients?| (((|Boolean|) |#4| $) 6))
 (|algebraic?| (((|Boolean|) |#3| $) 6)) (= (((|Boolean|) $ $) 6))
 (|#| (((|NonNegativeInteger|) $) 6 (|has| $ (|finiteAggregate|)))))
RSETCAT
(((|TriangularSetCategory| |#1| |#2| |#3| |#4|) . T))
(((|Aggregate|) . T) ((|BasicType|) . T) ((|CoercibleTo| (|List| |t#4|)) . T)
 ((|CoercibleTo| (|OutputForm|)) . T) ((|Collection| |t#4|) . T)
 ((|ConvertibleTo| (|InputForm|)) |has| |t#1| (|ConvertibleTo| (|InputForm|)))
 ((|Evalable| |t#1|) AND (|has| |t#1| (|Evalable| |t#1|))
  (|has| |t#1| (|SetCategory|)))
 ((|HomogeneousAggregate| |t#1|) . T)
 ((|InnerEvalable| |t#1| |t#1|) AND (|has| |t#1| (|Evalable| |t#1|))
  (|has| |t#1| (|SetCategory|)))
 ((|PolynomialSetCategory| |t#1| |t#2| |t#3| |t#4|) . T)
 ((|RetractableFrom| (|List| |t#4|)) . T) ((|SetCategory|) . T)
 ((|TriangularSetCategory| |#1| |#2| |#3| |#4|) . T) ((|Type|) . T)
 ((|finiteAggregate|) . T) ((|shallowlyMutable|) . T))
((|constructor|
  (NIL
   "The category of regular triangular sets,{} introduced under the name regular chains in [1] (and other papers). In [3] it is proved that regular triangular sets and towers of simple extensions of a field are equivalent notions. In the following definitions,{} all polynomials and ideals are taken from the polynomial ring \\spad{k[x1,{} ...,{} xn]} where \\spad{k} is the fraction field of \\spad{R}. The triangular set \\spad{[t1,{} ...,{} tm]} is regular iff for every \\spad{i} the initial of \\spad{ti+1} is invertible in the tower of simple extensions associated with \\spad{[t1,{} ...,{} \\spad{ti}]}. A family \\spad{[T1,{} ...,{} Ts]} of regular triangular sets is a split of Kalkbrener of a given ideal \\spad{I} iff the radical of \\spad{I} is equal to the intersection of the radical ideals generated by the saturated ideals of the \\spad{[T1,{} ...,{} \\spad{Ti}]}. A family \\spad{[T1,{} ...,{} Ts]} of regular triangular sets is a split of Kalkbrener of a given triangular set \\spad{T} iff it is a split of Kalkbrener of the saturated ideal of \\spad{T}. Let \\spad{K} be an algebraic closure of \\spad{k}. Assume that \\spad{V} is finite with cardinality \\spad{n} and let \\spad{A} be the affine space \\spad{K^n}. For a regular triangular set \\spad{T} let denote by \\spad{W(T)} the set of regular zeros of \\spad{T}. A family \\spad{[T1,{} ...,{} Ts]} of regular triangular sets is a split of Lazard of a given subset \\spad{S} of \\spad{A} iff the union of the \\spad{W(\\spad{Ti})} contains \\spad{S} and is contained in the closure of \\spad{S} (\\spad{w}.\\spad{r}.\\spad{t}. Zariski topology). A family \\spad{[T1,{} ...,{} Ts]} of regular triangular sets is a split of Lazard of a given triangular set \\spad{T} if it is a split of Lazard of \\spad{W(T)}. Note that if \\spad{[T1,{} ...,{} Ts]} is a split of Lazard of \\spad{T} then it is also a split of Kalkbrener of \\spad{T}. The converse is \\spad{false}. This category provides operations related to both kinds of splits,{} the former being related to ideals decomposition whereas the latter deals with varieties decomposition. See the example illustrating the \\spadtype{RegularTriangularSet} constructor for more explanations about decompositions by means of regular triangular sets. \\newline"))
 (|zeroSetSplit|
  (((|List| $) (|List| |#4|) (|Boolean|))
   "\\spad{zeroSetSplit(lp,{} clos?)} returns \\spad{lts} a split of Kalkbrener of the radical ideal associated with \\spad{lp}. If \\spad{clos?} is \\spad{false},{} it is also a decomposition of the variety associated with \\spad{lp} into the regular zero set of the \\spad{ts} in \\spad{lts} (or,{} in other words,{} a split of Lazard of this variety). See the example illustrating the \\spadtype{RegularTriangularSet} constructor for more explanations about decompositions by means of regular triangular sets."))
 (|extend|
  (((|List| $) (|List| |#4|) (|List| $))
   "\\spad{extend(lp,{} lts)} returns the same as \\spad{concat([extend(lp,{} ts) for ts in lts])|}")
  (((|List| $) (|List| |#4|) $)
   "\\spad{extend(lp,{} ts)} returns \\spad{ts} if \\spad{empty? lp} \\spad{extend(p,{} ts)} if \\spad{lp = [p]} else \\spad{extend(first lp,{} extend(rest lp,{} ts))}")
  (((|List| $) |#4| (|List| $))
   "\\spad{extend(p,{} lts)} returns the same as \\spad{concat([extend(p,{} ts) for ts in lts])|}")
  (((|List| $) |#4| $)
   "\\spad{extend(p,{} ts)} assumes that \\spad{p} is a non-constant polynomial whose main variable is greater than any variable of \\spad{ts}. Then it returns a split of Kalkbrener of \\spad{ts+p}. This may not be \\spad{ts+p} itself,{} if for instance \\spad{ts+p} is not a regular triangular set."))
 (|internalAugment|
  (($ (|List| |#4|) $)
   "\\spad{internalAugment(lp,{} ts)} returns \\spad{ts} if \\spad{lp} is empty otherwise returns \\spad{internalAugment(rest lp,{} internalAugment(first lp,{} ts))}")
  (($ |#4| $)
   "\\spad{internalAugment(p,{} ts)} assumes that \\spad{augment(p,{} ts)} returns a singleton and returns it."))
 (|augment|
  (((|List| $) (|List| |#4|) (|List| $))
   "\\spad{augment(lp,{} lts)} returns the same as \\spad{concat([augment(lp,{} ts) for ts in lts])}")
  (((|List| $) (|List| |#4|) $)
   "\\spad{augment(lp,{} ts)} returns \\spad{ts} if \\spad{empty? lp},{} \\spad{augment(p,{} ts)} if \\spad{lp = [p]},{} otherwise \\spad{augment(first lp,{} augment(rest lp,{} ts))}")
  (((|List| $) |#4| (|List| $))
   "\\spad{augment(p,{} lts)} returns the same as \\spad{concat([augment(p,{} ts) for ts in lts])}")
  (((|List| $) |#4| $)
   "\\spad{augment(p,{} ts)} assumes that \\spad{p} is a non-constant polynomial whose main variable is greater than any variable of \\spad{ts}. This operation assumes also that if \\spad{p} is added to \\spad{ts} the resulting set,{} say \\spad{ts+p},{} is a regular triangular set. Then it returns a split of Kalkbrener of \\spad{ts+p}. This may not be \\spad{ts+p} itself,{} if for instance \\spad{ts+p} is required to be square-free."))
 (|intersect|
  (((|List| $) |#4| (|List| $))
   "\\spad{intersect(p,{} lts)} returns the same as \\spad{intersect([p],{} lts)}")
  (((|List| $) (|List| |#4|) (|List| $))
   "\\spad{intersect(lp,{} lts)} returns the same as \\spad{concat([intersect(lp,{} ts) for ts in lts])|}")
  (((|List| $) (|List| |#4|) $)
   "\\spad{intersect(lp,{} ts)} returns \\spad{lts} a split of Lazard of the intersection of the affine variety associated with \\spad{lp} and the regular zero set of \\spad{ts}.")
  (((|List| $) |#4| $)
   "\\spad{intersect(p,{} ts)} returns the same as \\spad{intersect([p],{} ts)}"))
 (|squareFreePart|
  (((|List| (|Record| (|:| |val| |#4|) (|:| |tower| $))) |#4| $)
   "\\spad{squareFreePart(p,{} ts)} returns \\spad{lpwt} such that \\spad{lpwt.i.val} is a square-free polynomial \\spad{w}.\\spad{r}.\\spad{t}. \\spad{lpwt.i.tower},{} this polynomial being associated with \\spad{p} modulo \\spad{lpwt.i.tower},{} for every \\spad{i}. Moreover,{} the list of the \\spad{lpwt.i.tower} is a split of Kalkbrener of \\spad{ts}. WARNING: This assumes that \\spad{p} is a non-constant polynomial such that if \\spad{p} is added to \\spad{ts},{} then the resulting set is a regular triangular set."))
 (|lastSubResultant|
  (((|List| (|Record| (|:| |val| |#4|) (|:| |tower| $))) |#4| |#4| $)
   "\\spad{lastSubResultant(p1,{} p2,{} ts)} returns \\spad{lpwt} such that \\spad{lpwt.i.val} is a quasi-monic \\spad{gcd} of \\spad{p1} and \\spad{p2} \\spad{w}.\\spad{r}.\\spad{t}. \\spad{lpwt.i.tower},{} for every \\spad{i},{} and such that the list of the \\spad{lpwt.i.tower} is a split of Kalkbrener of \\spad{ts}. Moreover,{} if \\spad{p1} and \\spad{p2} do not have a non-trivial \\spad{gcd} \\spad{w}.\\spad{r}.\\spad{t}. \\spad{lpwt.i.tower} then \\spad{lpwt.i.val} is the resultant of these polynomials \\spad{w}.\\spad{r}.\\spad{t}. \\spad{lpwt.i.tower}. This assumes that \\spad{p1} and \\spad{p2} have the same maim variable and that this variable is greater that any variable occurring in \\spad{ts}."))
 (|lastSubResultantElseSplit|
  (((|Union| |#4| (|List| $)) |#4| |#4| $)
   "\\spad{lastSubResultantElseSplit(p1,{} p2,{} ts)} returns either \\spad{g} a quasi-monic \\spad{gcd} of \\spad{p1} and \\spad{p2} \\spad{w}.\\spad{r}.\\spad{t}. the \\spad{ts} or a split of Kalkbrener of \\spad{ts}. This assumes that \\spad{p1} and \\spad{p2} have the same maim variable and that this variable is greater that any variable occurring in \\spad{ts}."))
 (|invertibleSet|
  (((|List| $) |#4| $)
   "\\spad{invertibleSet(p,{} ts)} returns a split of Kalkbrener of the quotient ideal of the ideal \\spad{I} by \\spad{p} where \\spad{I} is the radical of saturated of \\spad{ts}."))
 (|invertible?|
  (((|Boolean|) |#4| $)
   "\\spad{invertible?(p,{} ts)} returns \\spad{true} iff \\spad{p} is invertible in the tower associated with \\spad{ts}.")
  (((|List| (|Record| (|:| |val| (|Boolean|)) (|:| |tower| $))) |#4| $)
   "\\spad{invertible?(p,{} ts)} returns \\spad{lbwt} where \\spad{lbwt.i} is the result of \\spad{invertibleElseSplit?(p,{} lbwt.i.tower)} and the list of the \\spad{(lqrwt.i).tower} is a split of Kalkbrener of \\spad{ts}."))
 (|invertibleElseSplit?|
  (((|Union| (|Boolean|) (|List| $)) |#4| $)
   "\\spad{invertibleElseSplit?(p,{} ts)} returns \\spad{true} (resp. \\spad{false}) if \\spad{p} is invertible in the tower associated with \\spad{ts} or returns a split of Kalkbrener of \\spad{ts}."))
 (|purelyAlgebraicLeadingMonomial?|
  (((|Boolean|) |#4| $)
   "\\spad{purelyAlgebraicLeadingMonomial?(p,{} ts)} returns \\spad{true} iff the main variable of any non-constant iterarted initial of \\spad{p} is algebraic \\spad{w}.\\spad{r}.\\spad{t}. \\spad{ts}."))
 (|algebraicCoefficients?|
  (((|Boolean|) |#4| $)
   "\\spad{algebraicCoefficients?(p,{} ts)} returns \\spad{true} iff every variable of \\spad{p} which is not the main one of \\spad{p} is algebraic \\spad{w}.\\spad{r}.\\spad{t}. \\spad{ts}."))
 (|purelyTranscendental?|
  (((|Boolean|) |#4| $)
   "\\spad{purelyTranscendental?(p,{} ts)} returns \\spad{true} iff every variable of \\spad{p} is not algebraic \\spad{w}.\\spad{r}.\\spad{t}. \\spad{ts}"))
 (|purelyAlgebraic?|
  (((|Boolean|) $)
   "\\spad{purelyAlgebraic?(ts)} returns \\spad{true} iff for every algebraic variable \\spad{v} of \\spad{ts} we have \\spad{algebraicCoefficients?(t_v,{} ts_v_-)} where \\spad{ts_v} is \\spadopFrom{select}{TriangularSetCategory}(\\spad{ts},{} \\spad{v}) and \\spad{ts_v_-} is \\spadopFrom{collectUnder}{TriangularSetCategory}(\\spad{ts},{} \\spad{v}).")
  (((|Boolean|) |#4| $)
   "\\spad{purelyAlgebraic?(p,{} ts)} returns \\spad{true} iff every variable of \\spad{p} is algebraic \\spad{w}.\\spad{r}.\\spad{t}. \\spad{ts}.")))
(("documentation" 0 19930) ("ancestors" 0 19233) ("parents" 0 19179)
 ("abbreviation" 0 19171) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 11832) ("modemaps" 0 2342) ("sourceFile" 0 2303)
 ("constructorCategory" 0 289) ("constructorModemap" 0 72)
 ("constructorKind" 0 61) ("constructorForm" 0 20))