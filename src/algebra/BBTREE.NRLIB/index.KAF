10329               (|BalancedBinaryTree| S)
|domain|
(((|BalancedBinaryTree| |#1|)
  (|Join| (|BinaryTreeCategory| |#1|)
          (CATEGORY |domain|
           (SIGNATURE |balancedBinaryTree| ($ (|NonNegativeInteger|) |#1|))
           (SIGNATURE |setleaves!| ($ $ (|List| |#1|)))
           (SIGNATURE |mapUp!| (|#1| $ (|Mapping| |#1| |#1| |#1|)))
           (SIGNATURE |mapUp!| ($ $ $ (|Mapping| |#1| |#1| |#1| |#1| |#1|)))
           (SIGNATURE |mapDown!| ($ $ |#1| (|Mapping| |#1| |#1| |#1|)))
           (SIGNATURE |mapDown!|
            ($ $ |#1| (|Mapping| (|List| |#1|) |#1| |#1| |#1|)))))
  (|SetCategory|))
 (T |BalancedBinaryTree|))
(|Join| (|BinaryTreeCategory| |#1|)
        (CATEGORY |domain|
         (SIGNATURE |balancedBinaryTree| ($ (|NonNegativeInteger|) |#1|))
         (SIGNATURE |setleaves!| ($ $ (|List| |#1|)))
         (SIGNATURE |mapUp!| (|#1| $ (|Mapping| |#1| |#1| |#1|)))
         (SIGNATURE |mapUp!| ($ $ $ (|Mapping| |#1| |#1| |#1| |#1| |#1|)))
         (SIGNATURE |mapDown!| ($ $ |#1| (|Mapping| |#1| |#1| |#1|)))
         (SIGNATURE |mapDown!|
          ($ $ |#1| (|Mapping| (|List| |#1|) |#1| |#1| |#1|)))))
"/git/fricas/src/algebra/BBTREE.spad"
((|balancedBinaryTree| (*1 *1 *2 *3)
  (AND (|isDomain| *2 (|NonNegativeInteger|))
       (|isDomain| *1 (|BalancedBinaryTree| *3))
       (|ofCategory| *3 (|SetCategory|))))
 (|setleaves!| (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|List| *3)) (|ofCategory| *3 (|SetCategory|))
       (|isDomain| *1 (|BalancedBinaryTree| *3))))
 (|mapUp!| (*1 *2 *1 *3)
  (AND (|isDomain| *3 (|Mapping| *2 *2 *2))
       (|isDomain| *1 (|BalancedBinaryTree| *2))
       (|ofCategory| *2 (|SetCategory|))))
 (|mapUp!| (*1 *1 *1 *1 *2)
  (AND (|isDomain| *2 (|Mapping| *3 *3 *3 *3 *3))
       (|ofCategory| *3 (|SetCategory|))
       (|isDomain| *1 (|BalancedBinaryTree| *3))))
 (|mapDown!| (*1 *1 *1 *2 *3)
  (AND (|isDomain| *3 (|Mapping| *2 *2 *2)) (|ofCategory| *2 (|SetCategory|))
       (|isDomain| *1 (|BalancedBinaryTree| *2))))
 (|mapDown!| (*1 *1 *1 *2 *3)
  (AND (|isDomain| *3 (|Mapping| (|List| *2) *2 *2 *2))
       (|ofCategory| *2 (|SetCategory|))
       (|isDomain| *1 (|BalancedBinaryTree| *2)))))
((~=
  (((|Boolean|) $ $) NIL
   (OR (AND (|has| $ (|finiteAggregate|)) (|has| |#1| (|BasicType|)))
       (|has| |#1| (|SetCategory|)))))
 (|value| ((|#1| $) NIL))
 (|size?| (((|Boolean|) $ (|NonNegativeInteger|)) NIL))
 (|setvalue!| ((|#1| $ |#1|) 10 (|has| $ (|shallowlyMutable|))))
 (|setright!| (($ $ $) NIL (|has| $ (|shallowlyMutable|))))
 (|setleft!| (($ $ $) NIL (|has| $ (|shallowlyMutable|))))
 (|setleaves!| (($ $ (|List| |#1|)) 13))
 (|setelt!| ((|#1| $ #1="value" |#1|) NIL (|has| $ (|shallowlyMutable|)))
  (($ $ #2="left" $) NIL (|has| $ (|shallowlyMutable|)))
  (($ $ #3="right" $) NIL (|has| $ (|shallowlyMutable|))))
 (|setchildren!| (($ $ (|List| $)) NIL (|has| $ (|shallowlyMutable|))))
 (|sample| (($) NIL T CONST)) (|right| (($ $) 14))
 (|parts| (((|List| |#1|) $) NIL (|has| $ (|finiteAggregate|))))
 (|nodes| (((|List| $) $) NIL))
 (|node?| (((|Boolean|) $ $) NIL (|has| |#1| (|BasicType|))))
 (|node| (($ $ |#1| $) 16))
 (|more?| (((|Boolean|) $ (|NonNegativeInteger|)) NIL))
 (|min|
  ((|#1| $) NIL
   (AND (|has| $ (|finiteAggregate|)) (|has| |#1| (|OrderedSet|)))))
 (|members| (((|List| |#1|) $) NIL (|has| $ (|finiteAggregate|))))
 (|member?|
  (((|Boolean|) |#1| $) NIL
   (AND (|has| $ (|finiteAggregate|)) (|has| |#1| (|BasicType|)))))
 (|max|
  ((|#1| (|Mapping| (|Boolean|) |#1| |#1|) $) NIL
   (|has| $ (|finiteAggregate|)))
  ((|#1| $) NIL
   (AND (|has| $ (|finiteAggregate|)) (|has| |#1| (|OrderedSet|)))))
 (|mapUp!| ((|#1| $ (|Mapping| |#1| |#1| |#1|)) 25)
  (($ $ $ (|Mapping| |#1| |#1| |#1| |#1| |#1|)) 30))
 (|mapDown!| (($ $ |#1| (|Mapping| |#1| |#1| |#1|)) 31)
  (($ $ |#1| (|Mapping| (|List| |#1|) |#1| |#1| |#1|)) 35))
 (|map!| (($ (|Mapping| |#1| |#1|) $) NIL (|has| $ (|shallowlyMutable|))))
 (|map| (($ (|Mapping| |#1| |#1|) $) NIL))
 (|less?| (((|Boolean|) $ (|NonNegativeInteger|)) NIL)) (|left| (($ $) 11))
 (|leaves| (((|List| |#1|) $) NIL)) (|leaf?| (((|Boolean|) $) 19))
 (|latex| (((|String|) $) NIL (|has| |#1| (|SetCategory|))))
 (|hashUpdate!|
  (((|HashState|) (|HashState|) $) NIL (|has| |#1| (|SetCategory|))))
 (|hash| (((|SingleInteger|) $) NIL (|has| |#1| (|SetCategory|))))
 (|every?|
  (((|Boolean|) (|Mapping| (|Boolean|) |#1|) $) NIL
   (|has| $ (|finiteAggregate|))))
 (|eval|
  (($ $ (|List| (|Equation| |#1|))) NIL
   (AND (|has| |#1| (|Evalable| |#1|)) (|has| |#1| (|SetCategory|))))
  (($ $ (|Equation| |#1|)) NIL
   (AND (|has| |#1| (|Evalable| |#1|)) (|has| |#1| (|SetCategory|))))
  (($ $ |#1| |#1|) NIL
   (AND (|has| |#1| (|Evalable| |#1|)) (|has| |#1| (|SetCategory|))))
  (($ $ (|List| |#1|) (|List| |#1|)) NIL
   (AND (|has| |#1| (|Evalable| |#1|)) (|has| |#1| (|SetCategory|)))))
 (|eq?| (((|Boolean|) $ $) NIL)) (|empty?| (((|Boolean|) $) 9))
 (|empty| (($) 15)) (|elt| ((|#1| $ #1#) NIL) (($ $ #2#) NIL) (($ $ #3#) NIL))
 (|distance| (((|Integer|) $ $) NIL)) (|cyclic?| (((|Boolean|) $) NIL))
 (|count|
  (((|NonNegativeInteger|) (|Mapping| (|Boolean|) |#1|) $) NIL
   (|has| $ (|finiteAggregate|)))
  (((|NonNegativeInteger|) |#1| $) NIL
   (AND (|has| $ (|finiteAggregate|)) (|has| |#1| (|BasicType|)))))
 (|copy| (($ $) NIL))
 (|coerce|
  (((|OutputForm|) $) NIL (|has| |#1| (|CoercibleTo| (|OutputForm|)))))
 (|children| (((|List| $) $) NIL))
 (|child?| (((|Boolean|) $ $) NIL (|has| |#1| (|BasicType|))))
 (|balancedBinaryTree| (($ (|NonNegativeInteger|) |#1|) 18))
 (|any?|
  (((|Boolean|) (|Mapping| (|Boolean|) |#1|) $) NIL
   (|has| $ (|finiteAggregate|))))
 (=
  (((|Boolean|) $ $) NIL
   (OR (AND (|has| $ (|finiteAggregate|)) (|has| |#1| (|BasicType|)))
       (|has| |#1| (|SetCategory|)))))
 (|#| (((|NonNegativeInteger|) $) NIL (|has| $ (|finiteAggregate|)))))
((|HasCategory| |#1| '(|SetCategory|))
 (AND (|HasCategory| |#1| (LIST '|Evalable| (|devaluate| |#1|)))
      (|HasCategory| |#1| '(|SetCategory|)))
 (|HasCategory| |#1| '(|OrderedSet|)) (|HasCategory| |#1| '(|BasicType|))
 (OR (|HasCategory| |#1| '(|BasicType|)) (|HasCategory| |#1| '(|SetCategory|)))
 (|HasCategory| |#1| (LIST '|CoercibleTo| '(|OutputForm|)))
 (OR (|HasCategory| |#1| (LIST '|CoercibleTo| '(|OutputForm|)))
     (AND (|HasCategory| |#1| (LIST '|Evalable| (|devaluate| |#1|)))
          (|HasCategory| |#1| '(|SetCategory|))))
 (|HasCategory| $ '(|finiteAggregate|))
 (AND (|HasCategory| |#1| '(|OrderedSet|))
      (|HasCategory| $ '(|finiteAggregate|)))
 (AND (|HasCategory| |#1| '(|BasicType|))
      (|HasCategory| $ '(|finiteAggregate|)))
 (OR
  (AND (|HasCategory| |#1| '(|BasicType|))
       (|HasCategory| $ '(|finiteAggregate|)))
  (|HasCategory| |#1| '(|SetCategory|)))
 (|HasCategory| $ '(|shallowlyMutable|)))
BBTREE
(((|BinaryTreeCategory| |#1|) . T))
(((|Aggregate|) . T)
 ((|BasicType|) OR (|has| |t#1| (|SetCategory|))
  (AND (|has| $ (|finiteAggregate|)) (|has| |t#1| (|BasicType|))))
 ((|BinaryRecursiveAggregate| |t#1|) . T) ((|BinaryTreeCategory| |#1|) . T)
 ((|CoercibleTo| (|OutputForm|)) |has| |t#1| (|CoercibleTo| (|OutputForm|)))
 ((|Evalable| |t#1|) AND (|has| |t#1| (|Evalable| |t#1|))
  (|has| |t#1| (|SetCategory|)))
 ((|HomogeneousAggregate| |t#1|) . T)
 ((|InnerEvalable| |t#1| |t#1|) AND (|has| |t#1| (|Evalable| |t#1|))
  (|has| |t#1| (|SetCategory|)))
 ((|RecursiveAggregate| |t#1|) . T)
 ((|SetCategory|) |has| |t#1| (|SetCategory|)) ((|Type|) . T)
 ((|finiteAggregate|) . T) ((|shallowlyMutable|) . T))
((|constructor|
  (NIL
   "\\spadtype{BalancedBinaryTree(S)} is the domain of balanced binary trees (bbtree). A balanced binary tree of \\spad{2^k} leaves,{} for some \\spad{k > 0},{} is symmetric,{} that is,{} the left and right subtree of each interior node have identical shape. In general,{} the left and right subtree of a given node can differ by at most one leaf node."))
 (|mapDown!|
  (($ $ |#1| (|Mapping| (|List| |#1|) |#1| |#1| |#1|))
   "\\spad{mapDown!(t,{}p,{}f)} returns \\spad{t} after traversing \\spad{t} in \"preorder\" (node then left then right) fashion replacing the successive interior nodes as follows. Let \\spad{l} and \\spad{r} denote the left and right subtrees of \\spad{t}. The root value \\spad{x} of \\spad{t} is replaced by \\spad{p}. Then \\spad{f}(value \\spad{l},{} value \\spad{r},{} \\spad{p}),{} where \\spad{l} and \\spad{r} denote the left and right subtrees of \\spad{t},{} is evaluated producing two values \\spad{pl} and \\spad{pr}. Then \\spad{mapDown!(l,{} pl,{} f)} and \\spad{mapDown!(l,{} pr,{} f)} are evaluated.")
  (($ $ |#1| (|Mapping| |#1| |#1| |#1|))
   "\\spad{mapDown!(t,{}p,{}f)} returns \\spad{t} after traversing \\spad{t} in \"preorder\" (node then left then right) fashion replacing the successive interior nodes as follows. The root value \\spad{x} is replaced by \\spad{q} \\spad{:=} \\spad{f}(\\spad{p},{} \\spad{x}). The mapDown!(\\spad{l},{} \\spad{q},{} \\spad{f}) and mapDown!(\\spad{r},{} \\spad{q},{} \\spad{f}) are evaluated for the left and right subtrees \\spad{l} and \\spad{r} of \\spad{t}."))
 (|mapUp!|
  (($ $ $ (|Mapping| |#1| |#1| |#1| |#1| |#1|))
   "\\spad{mapUp!(t,{}t1,{}f)} traverses \\spad{t} in an \"endorder\" (left then right then node) fashion returning \\spad{t} with the value at each successive interior node of \\spad{t} replaced by \\spad{f}(\\spad{l},{} \\spad{r},{} \\spad{l1},{} \\spad{r1}) where \\spad{l} and \\spad{r} are the values at the immediate left and right nodes. Values \\spad{l1} and \\spad{r1} are values at the corresponding nodes of a balanced binary tree \\spad{t1},{} of identical shape at \\spad{t}.")
  ((|#1| $ (|Mapping| |#1| |#1| |#1|))
   "\\spad{mapUp!(t,{}f)} traverses balanced binary tree \\spad{t} in an \"endorder\" (left then right then node) fashion returning \\spad{t} with the value at each successive interior node of \\spad{t} replaced by \\spad{f}(\\spad{l},{} \\spad{r}) where \\spad{l} and \\spad{r} are the values at the immediate left and right nodes."))
 (|setleaves!|
  (($ $ (|List| |#1|))
   "\\spad{setleaves!(t,{} ls)} sets the leaves of \\spad{t} in left-to-right order to the elements of \\spad{ls}."))
 (|balancedBinaryTree|
  (($ (|NonNegativeInteger|) |#1|)
   "\\spad{balancedBinaryTree(n,{} s)} creates a balanced binary tree with \\spad{n} nodes each with value \\spad{s}.")))
(("documentation" 0 7497) ("ancestors" 0 6823) ("parents" 0 6787)
 ("abbreviation" 0 6780) ("predicates" 0 5839) ("superDomain" 0 NIL)
 ("operationAlist" 0 2175) ("modemaps" 0 1182) ("sourceFile" 0 1144)
 ("constructorCategory" 0 646) ("constructorModemap" 0 54)
 ("constructorKind" 0 45) ("constructorForm" 0 20))