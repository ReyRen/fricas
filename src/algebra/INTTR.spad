)abbrev package INTTR TranscendentalIntegration
++ Risch algorithm, transcendental case
++ Author: Manuel Bronstein
++ Date Created: 1987
++ Description:
++   This package provides functions for the transcendental
++   case of the Risch algorithm.
-- Internally used by the integrator
TranscendentalIntegration(F, UP) : Exports == Implementation where
  F  : Field
  UP : UnivariatePolynomialCategory F

  N   ==> NonNegativeInteger
  Z   ==> Integer
  Q   ==> Fraction Z
  GP  ==> LaurentPolynomial(F, UP)
  UP2 ==> SparseUnivariatePolynomial UP
  RF  ==> Fraction UP
  UPR ==> SparseUnivariatePolynomial RF
  IR  ==> IntegrationResult RF
  IR0 ==> IntegrationResult F
  LOG ==> Record(scalar : Q, coeff : UPR, logand : UPR)
  LLG ==> List Record(coeff : RF, logand : RF)
  NE  ==> Record(integrand : RF, intvar : RF)
  NL  ==> Record(mainpart : RF, limitedlogs : LLG)
  UPF ==> Record(answer : UP, a0 : F)
  RFF ==> Record(answer : RF, a0 : F)
  IRF ==> Record(answer : IR, a0 : F)
  IRIR ==> Record(answer : IR, a0 : IR0)
  NLF ==> Record(answer : NL, a0 : F)
  GPF ==> Record(answer : GP, a0 : F)
  UPUP==> Record(elem : UP, notelem : UP)
  GPGP==> Record(elem : GP, notelem : GP)
  RFRF==> Record(elem : RF, notelem : RF)
  FF  ==> Record(ratpart : F,  coeff : F)
  FFR ==> Record(ratpart : RF, coeff : RF)
  UF  ==> Union(FF,  "failed")
  UF2 ==> Union(List F, "failed")
  REC ==> Record(ir : IR, specpart : RF, polypart : UP)
  DREC ==> Record(answer : RF, logpart : RF, ir : IR)
  PSOL==> Record(ans : F, right : F, sol? : Boolean)
  PSOL2 ==> Record(ans : F, right : F, primpart : F, sol? : Boolean)

  Exports ==> with
    primintegrate  : (RF, UP -> UP, RF -> DREC, F -> UF)          -> IRF
      ++ primintegrate(f, ', foo) returns \spad{[g, a]} such that
      ++ \spad{f = g' + a}, and \spad{a = 0} or \spad{a} has no integral in UP.
      ++ Argument foo is an extended integration function on F.
    expintegrate   : (RF, UP -> UP, RF -> DREC, (Z, F) -> PSOL2) -> IRF
      ++ expintegrate(f, ', foo) returns \spad{[g, a]} such that
      ++ \spad{f = g' + a}, and \spad{a = 0} or \spad{a} has no integral in F;
      ++ Argument foo is a Risch differential equation solver on F;
    lambintegrate : (RF, F, F -> F, UP -> UP, F -> UF, F -> IR0) -> IRIR
      ++ lambintegrate(f, dx, D1, D2, extint, int) integrates f in
      ++ extension by LambertW function.  dx is derivative
      ++ of the argument of LambertW, D1 is dervative on F,
      ++ D2 is derivative on UP, extint is extended integration
      ++ function on F, int is integration function on F.
    monomialIntegrate : (RF, UP -> UP) -> REC
      ++ monomialIntegrate(f, ') returns \spad{[ir, s, p]} such that
      ++ \spad{f = ir' + s + p} and all the squarefree factors of the
      ++ denominator of s are special w.r.t the derivation '.
    monomialIntPoly   : (UP, UP -> UP) -> Record(answer : UP, polypart : UP)
      ++ monomialIntPoly(p, ') returns [q, r] such that
      ++ \spad{p = q' + r} and \spad{degree(r) < degree(t')}.
      ++ Error if \spad{degree(t') < 2}.

  Implementation ==> add
    import from SubResultantPackage(UP, UP2)
    import from MonomialExtensionTools(F, UP)
    import from TranscendentalHermiteIntegration(F, UP)
    import from CommuteUnivariatePolynomialCategory(F, UP, UP2)

    primintegratepoly  : (UP, F -> UF, F) -> Union(UPF, UPUP)
    expintegratepoly2   : (GP, (Z, F) -> PSOL2) -> Union(GPF, GPGP)
    expextintfrac      : (RF, UP -> UP, RF) -> Union(FFR, "failed")
    logprmderiv        : (RF, UP -> UP)    -> RF
    UP2UP2             : UP -> UP2
    UP2UPR             : UP -> UPR
    UP22UPR            : UP2 -> UPR
    notelementary      : REC -> IR
    kappa              : (UP, UP -> UP) -> UP

    dummy : RF := 0

    logprmderiv(f, derivation) == differentiate(f, derivation) / f

    UP2UP2 p ==
      map(x1+->x1::UP, p)$UnivariatePolynomialCategoryFunctions2(F, UP, UP, UP2)

    UP2UPR p ==
      map(x1+->x1::UP::RF, p)$UnivariatePolynomialCategoryFunctions2(F, UP, RF, UPR)

    UP22UPR p == map(x1+->x1::RF, p)$SparseUnivariatePolynomialFunctions2(UP, RF)

-- given p in k[z] and a derivation on k[t] returns the coefficient lifting
-- in k[z] of the restriction of D to k.
    kappa(p, derivation) ==
      ans : UP := 0
      while p ~= 0 repeat
        ans := ans + derivation(leadingCoefficient(p)::UP)*monomial(1, degree p)
        p := reductum p
      ans

    denint_dummy(f : RF) : DREC == [0, f, 0]

-- works in any monomial extension
    monomialIntegrate1(f : RF, denint : RF -> DREC, derivation : UP -> UP
                      ) : REC ==
      zero? f => [0, 0, 0]
      r := HermiteIntegrate(f, derivation)
      zero?(numer(r.logpart)) => [r.answer::IR, r.specpart, r.polypart]
      dr := denint(r.logpart)
      ans1 := r.answer + dr.answer
      inum := numer(dr.logpart)
      iden  := denom(dr.logpart)
      x := monomial(1, 1)$UP
      resultvec := subresultantVector(UP2UP2 inum -
                                 (x::UP2) * UP2UP2 derivation iden, UP2UP2 iden)
      respoly := primitivePart leadingCoefficient resultvec 0
      rec := splitSquarefree(respoly, x1+->kappa(x1, derivation))
      logs : List(LOG) := [
              [1, UP2UPR(term.factor),
               UP22UPR swap primitivePart(resultvec(term.exponent), term.factor)]
                     for term in factorList(rec.special)]
      dlog :=
           ((derivation x) = 1) => dr.logpart
           differentiate(mkAnswer(0, logs, empty()),
                         (x1 : RF) : RF+->differentiate(x1, derivation))
      (u := retractIfCan(p := dr.logpart - dlog)@Union(UP, "failed")) case UP =>
        [mkAnswer(ans1, logs, empty) + dr.ir, r.specpart, r.polypart + u::UP]
      [mkAnswer(ans1, logs, [[p, dummy]]) + dr.ir, r.specpart, r.polypart]

    monomialIntegrate(f, derivation) ==
        monomialIntegrate1(f, denint_dummy, derivation)

-- returns [q, r] such that p = q' + r and degree(r) < degree(dt)
-- must have degree(derivation t) >= 2
    monomialIntPoly(p, derivation) ==
      (d := degree(dt := derivation monomial(1, 1))::Z) < 2 =>
        error "monomIntPoly: monomial must have degree 2 or more"
      l := leadingCoefficient dt
      ans : UP := 0
      while (n := 1 + degree(p)::Z - d) > 0 repeat
        ans := ans + (term := monomial(leadingCoefficient(p) / (n * l), n::N))
        p   := p - derivation term      -- degree(p) must drop here
      [ans, p]


    expintegratepoly2(p, FRDE) ==
      coef0 : F := 0
      notelm := answr := 0$GP
      while p ~= 0 repeat
        ans1 := FRDE(n := degree p, a := leadingCoefficient p)
        answr := answr + monomial(ans1.ans, n) + monomial(ans1.primpart, 0)
        if ~ans1.sol? then         -- Risch d.e. has no complete solution
               missing := a - ans1.right
               if zero? n then coef0 := missing
                          else notelm := notelm + monomial(missing, n)
        p   := reductum p
      zero? notelm => [answr, coef0]
      [answr, notelm + monomial(coef0, 0)]

    notelementary rec ==
      rec.ir + integral(rec.polypart::RF + rec.specpart, monomial(1, 1)$UP :: RF)

-- returns
--   (g in IR, a in F)  st f = g'+ a, and a=0 or a has no integral in UP
    primintegrate(f, derivation, denint, extendedint) ==
      rec := monomialIntegrate1(f, denint, derivation)
      not elem?(i1 := rec.ir) => [notelementary rec, 0]
      (u2 := primintegratepoly(rec.polypart, extendedint,
                        retract derivation monomial(1, 1))) case UPUP =>
             [i1 + u2.elem::RF::IR
                 + integral(u2.notelem::RF, monomial(1, 1)$UP :: RF), 0]
      [i1 + u2.answer::RF::IR, u2.a0]

-- returns
--   (g in IR, a in F)  st f = g' + a, and a = 0 or a has no integral in F
    expintegrate(f, derivation, denint, FRDE) ==
      rec := monomialIntegrate1(f, denint, derivation)
      not elem?(i1 := rec.ir) => [notelementary rec, 0]
-- rec.specpart is either 0 or of the form p(t)/t^n
      special := rec.polypart::GP +
                   (numer(rec.specpart)::GP exquo denom(rec.specpart)::GP)::GP
      (u2 := expintegratepoly2(special, FRDE)) case GPGP =>
        [i1 + convert(u2.elem)@RF::IR + integral(convert(u2.notelem)@RF,
                                                 monomial(1, 1)$UP :: RF), 0]
      [i1 + convert(u2.answer)@RF::IR, u2.a0]

    lamintegratepoly : (GP, F, Integer, F -> F, F -> UF, F -> IR0) -> IRIR

    mkir(ans : GP, lcoeff: F, p : GP) : IR ==
        logs : List(LOG) :=
            lcoeff = 0 => empty()
            [[1, UP2UPR(monomial(1,1) - lcoeff::UP),
                     monomial(monomial(1,1)$UP::RF, 1)$UPR]$LOG]$List(LOG)
        mkAnswer(convert(ans)@RF, logs, empty()$List(NE))
                    + integral(convert(p)@RF, monomial(1,1)$UP :: RF)

    lambintegrate(f, dx, fderiv, pderiv, extint, lfint) ==
        rec := monomialIntegrate(f, pderiv)
        not elem?(i1 := rec.ir) => [notelementary rec, 0]
        sd := denom(rec.specpart)
        n := -degree(sd)
        reductum(sd) ~= 0 =>
            print(sd::OutputForm)
            error "lambintegrate: unexpected Darboux polynomial"
        sp := rec.polypart::GP +
                   (numer(rec.specpart)::GP exquo sd::GP)::GP
        ri2 := lamintegratepoly(sp, dx, n, fderiv, extint, lfint)
        [i1 + ri2.answer, ri2.a0]

    -- FIXME: very incomplete
    lamintegratepoly(p : GP, dx :F, n : Integer, fderiv : F -> F,
                     extint : F -> UF, lfint : F -> IR0) : IRIR ==
        answr := 0$GP
        lcoeff : F := 0
        i0 : IR0 := 0
        while p ~= 0 repeat
            d := degree p
            -- XXX FIXME early abort
            d < n - 2 => return [mkir(answr, lcoeff, p), i0]
            p0 := leadingCoefficient p
            b1 : F
            db1 : F
            clg0 : F
            if d ~= 1 then
                ans1 := extint (p0)
                ans1 case "failed" =>
                    return [mkir(answr, lcoeff, p), i0]
                b1 := ans1.ratpart
                db1 := fderiv(b1)
                clg0 :=
                    d ~= 0 => ans1.coeff/d::F
                    lcoeff := ans1.coeff
                    0
            else
                i0 := lfint(p0)
                not(elem?(i0)) => return [mkir(answr, lcoeff, reductum p), i0]
                b1 := 0
                db1 := p0
                clg0 := 0
            answr := answr + monomial(b1, d - 1) + monomial(clg0, d)
            p := reductum p - monomial(db1 + (d-1)*dx*b1, (d - 1))
            p ~= 0 and degree(p) >= d =>
                print(p::OutputForm)
                error "impossible"
        -- XXX FIXME handle part in F
        [mkir(answr, lcoeff, 0), i0]

-- returns either
--   (q in UP, a in F)  st p = q'+ a, and a=0 or a has no integral in UP
-- or (q in UP, r in UP) st p = q'+ r, and r has no integral elem/UP
    primintegratepoly(p, extendedint, t') ==
      zero? p => [0, 0$F]
      ans : UP := 0
      while (d := degree p) > 0 repeat
        (ans1 := extendedint leadingCoefficient p) case "failed" =>
          return([ans, p])
        p   := reductum p - monomial(d * t' * ans1.ratpart, (d - 1)::N)
        ans := ans + monomial(ans1.ratpart, d)
                              + monomial(ans1.coeff / (d + 1)::F, d + 1)
      (ans1 := extendedint(rp := retract(p)@F)) case "failed" => [ans,rp]
      [monomial(ans1.coeff, 1) + ans1.ratpart::UP + ans, 0$F]

