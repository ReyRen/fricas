9650                (|CombinatorialFunction| R F)
|package|
(((|CombinatorialFunction| |#1| |#2|)
  (CATEGORY |package| (SIGNATURE |belong?| ((|Boolean|) (|BasicOperator|)))
   (SIGNATURE |operator| ((|BasicOperator|) (|BasicOperator|)))
   (SIGNATURE ^ (|#2| |#2| |#2|)) (SIGNATURE |binomial| (|#2| |#2| |#2|))
   (SIGNATURE |permutation| (|#2| |#2| |#2|))
   (SIGNATURE |factorial| (|#2| |#2|)) (SIGNATURE |factorials| (|#2| |#2|))
   (SIGNATURE |factorials| (|#2| |#2| (|Symbol|)))
   (SIGNATURE |summation| (|#2| |#2| (|Symbol|)))
   (SIGNATURE |summation| (|#2| |#2| (|SegmentBinding| |#2|)))
   (SIGNATURE |product| (|#2| |#2| (|Symbol|)))
   (SIGNATURE |product| (|#2| |#2| (|SegmentBinding| |#2|)))
   (SIGNATURE |iifact| (|#2| |#2|)) (SIGNATURE |iibinom| (|#2| (|List| |#2|)))
   (SIGNATURE |iiperm| (|#2| (|List| |#2|)))
   (SIGNATURE |iipow| (|#2| (|List| |#2|)))
   (SIGNATURE |iidsum| (|#2| (|List| |#2|)))
   (SIGNATURE |iidprod| (|#2| (|List| |#2|)))
   (SIGNATURE |ipow| (|#2| (|List| |#2|))))
  (|Join| (|Comparable|) (|IntegralDomain|)) (|FunctionSpace| |#1|))
 (T |CombinatorialFunction|))
(CATEGORY |package| (SIGNATURE |belong?| ((|Boolean|) (|BasicOperator|)))
 (SIGNATURE |operator| ((|BasicOperator|) (|BasicOperator|)))
 (SIGNATURE ^ (|#2| |#2| |#2|)) (SIGNATURE |binomial| (|#2| |#2| |#2|))
 (SIGNATURE |permutation| (|#2| |#2| |#2|)) (SIGNATURE |factorial| (|#2| |#2|))
 (SIGNATURE |factorials| (|#2| |#2|))
 (SIGNATURE |factorials| (|#2| |#2| (|Symbol|)))
 (SIGNATURE |summation| (|#2| |#2| (|Symbol|)))
 (SIGNATURE |summation| (|#2| |#2| (|SegmentBinding| |#2|)))
 (SIGNATURE |product| (|#2| |#2| (|Symbol|)))
 (SIGNATURE |product| (|#2| |#2| (|SegmentBinding| |#2|)))
 (SIGNATURE |iifact| (|#2| |#2|)) (SIGNATURE |iibinom| (|#2| (|List| |#2|)))
 (SIGNATURE |iiperm| (|#2| (|List| |#2|)))
 (SIGNATURE |iipow| (|#2| (|List| |#2|)))
 (SIGNATURE |iidsum| (|#2| (|List| |#2|)))
 (SIGNATURE |iidprod| (|#2| (|List| |#2|)))
 (SIGNATURE |ipow| (|#2| (|List| |#2|))))
"/git/fricas/src/algebra/COMBF.spad"
((|ipow| (*1 *2 *3)
  (AND (|isDomain| *3 (|List| *2)) (|ofCategory| *2 (|FunctionSpace| *4))
       (|isDomain| *1 (|CombinatorialFunction| *4 *2))
       (|ofCategory| *4 (|Join| (|Comparable|) (|IntegralDomain|)))))
 (|iidprod| (*1 *2 *3)
  (AND (|isDomain| *3 (|List| *2)) (|ofCategory| *2 (|FunctionSpace| *4))
       (|isDomain| *1 (|CombinatorialFunction| *4 *2))
       (|ofCategory| *4 (|Join| (|Comparable|) (|IntegralDomain|)))))
 (|iidsum| (*1 *2 *3)
  (AND (|isDomain| *3 (|List| *2)) (|ofCategory| *2 (|FunctionSpace| *4))
       (|isDomain| *1 (|CombinatorialFunction| *4 *2))
       (|ofCategory| *4 (|Join| (|Comparable|) (|IntegralDomain|)))))
 (|iipow| (*1 *2 *3)
  (AND (|isDomain| *3 (|List| *2)) (|ofCategory| *2 (|FunctionSpace| *4))
       (|isDomain| *1 (|CombinatorialFunction| *4 *2))
       (|ofCategory| *4 (|Join| (|Comparable|) (|IntegralDomain|)))))
 (|iiperm| (*1 *2 *3)
  (AND (|isDomain| *3 (|List| *2)) (|ofCategory| *2 (|FunctionSpace| *4))
       (|isDomain| *1 (|CombinatorialFunction| *4 *2))
       (|ofCategory| *4 (|Join| (|Comparable|) (|IntegralDomain|)))))
 (|iibinom| (*1 *2 *3)
  (AND (|isDomain| *3 (|List| *2)) (|ofCategory| *2 (|FunctionSpace| *4))
       (|isDomain| *1 (|CombinatorialFunction| *4 *2))
       (|ofCategory| *4 (|Join| (|Comparable|) (|IntegralDomain|)))))
 (|iifact| (*1 *2 *2)
  (AND (|ofCategory| *3 (|Join| (|Comparable|) (|IntegralDomain|)))
       (|isDomain| *1 (|CombinatorialFunction| *3 *2))
       (|ofCategory| *2 (|FunctionSpace| *3))))
 (|product| (*1 *2 *2 *3)
  (AND (|isDomain| *3 (|SegmentBinding| *2))
       (|ofCategory| *2 (|FunctionSpace| *4))
       (|ofCategory| *4 (|Join| (|Comparable|) (|IntegralDomain|)))
       (|isDomain| *1 (|CombinatorialFunction| *4 *2))))
 (|product| (*1 *2 *2 *3)
  (AND (|isDomain| *3 (|Symbol|))
       (|ofCategory| *4 (|Join| (|Comparable|) (|IntegralDomain|)))
       (|isDomain| *1 (|CombinatorialFunction| *4 *2))
       (|ofCategory| *2 (|FunctionSpace| *4))))
 (|summation| (*1 *2 *2 *3)
  (AND (|isDomain| *3 (|SegmentBinding| *2))
       (|ofCategory| *2 (|FunctionSpace| *4))
       (|ofCategory| *4 (|Join| (|Comparable|) (|IntegralDomain|)))
       (|isDomain| *1 (|CombinatorialFunction| *4 *2))))
 (|summation| (*1 *2 *2 *3)
  (AND (|isDomain| *3 (|Symbol|))
       (|ofCategory| *4 (|Join| (|Comparable|) (|IntegralDomain|)))
       (|isDomain| *1 (|CombinatorialFunction| *4 *2))
       (|ofCategory| *2 (|FunctionSpace| *4))))
 (|factorials| (*1 *2 *2 *3)
  (AND (|isDomain| *3 (|Symbol|))
       (|ofCategory| *4 (|Join| (|Comparable|) (|IntegralDomain|)))
       (|isDomain| *1 (|CombinatorialFunction| *4 *2))
       (|ofCategory| *2 (|FunctionSpace| *4))))
 (|factorials| (*1 *2 *2)
  (AND (|ofCategory| *3 (|Join| (|Comparable|) (|IntegralDomain|)))
       (|isDomain| *1 (|CombinatorialFunction| *3 *2))
       (|ofCategory| *2 (|FunctionSpace| *3))))
 (|factorial| (*1 *2 *2)
  (AND (|ofCategory| *3 (|Join| (|Comparable|) (|IntegralDomain|)))
       (|isDomain| *1 (|CombinatorialFunction| *3 *2))
       (|ofCategory| *2 (|FunctionSpace| *3))))
 (|permutation| (*1 *2 *2 *2)
  (AND (|ofCategory| *3 (|Join| (|Comparable|) (|IntegralDomain|)))
       (|isDomain| *1 (|CombinatorialFunction| *3 *2))
       (|ofCategory| *2 (|FunctionSpace| *3))))
 (|binomial| (*1 *2 *2 *2)
  (AND (|ofCategory| *3 (|Join| (|Comparable|) (|IntegralDomain|)))
       (|isDomain| *1 (|CombinatorialFunction| *3 *2))
       (|ofCategory| *2 (|FunctionSpace| *3))))
 (^ (*1 *2 *2 *2)
  (AND (|ofCategory| *3 (|Join| (|Comparable|) (|IntegralDomain|)))
       (|isDomain| *1 (|CombinatorialFunction| *3 *2))
       (|ofCategory| *2 (|FunctionSpace| *3))))
 (|operator| (*1 *2 *2)
  (AND (|isDomain| *2 (|BasicOperator|))
       (|ofCategory| *3 (|Join| (|Comparable|) (|IntegralDomain|)))
       (|isDomain| *1 (|CombinatorialFunction| *3 *4))
       (|ofCategory| *4 (|FunctionSpace| *3))))
 (|belong?| (*1 *2 *3)
  (AND (|isDomain| *3 (|BasicOperator|))
       (|ofCategory| *4 (|Join| (|Comparable|) (|IntegralDomain|)))
       (|isDomain| *2 (|Boolean|))
       (|isDomain| *1 (|CombinatorialFunction| *4 *5))
       (|ofCategory| *5 (|FunctionSpace| *4)))))
((|summation| ((|#2| |#2| (|SegmentBinding| |#2|)) 84)
  ((|#2| |#2| (|Symbol|)) 59))
 (|product| ((|#2| |#2| (|SegmentBinding| |#2|)) 83)
  ((|#2| |#2| (|Symbol|)) 58))
 (|permutation| ((|#2| |#2| |#2|) 28))
 (|operator| (((|BasicOperator|) (|BasicOperator|)) 94))
 (|ipow| ((|#2| (|List| |#2|)) 112)) (|iipow| ((|#2| (|List| |#2|)) 130))
 (|iiperm| ((|#2| (|List| |#2|)) 120)) (|iifact| ((|#2| |#2|) 118))
 (|iidsum| ((|#2| (|List| |#2|)) 104)) (|iidprod| ((|#2| (|List| |#2|)) 105))
 (|iibinom| ((|#2| (|List| |#2|)) 128))
 (|factorials| ((|#2| |#2| (|Symbol|)) 45) ((|#2| |#2|) 44))
 (|factorial| ((|#2| |#2|) 24)) (|binomial| ((|#2| |#2| |#2|) 27))
 (|belong?| (((|Boolean|) (|BasicOperator|)) 35)) (^ ((|#2| |#2| |#2|) 33)))
COMBF
((|constructor|
  (NIL "Provides combinatorial functions over an integral domain."))
 (|ipow|
  ((|#2| (|List| |#2|)) "\\spad{ipow(l)} should be local but conditional."))
 (|iidprod|
  ((|#2| (|List| |#2|)) "\\spad{iidprod(l)} should be local but conditional."))
 (|iidsum|
  ((|#2| (|List| |#2|)) "\\spad{iidsum(l)} should be local but conditional."))
 (|iipow|
  ((|#2| (|List| |#2|)) "\\spad{iipow(l)} should be local but conditional."))
 (|iiperm|
  ((|#2| (|List| |#2|)) "\\spad{iiperm(l)} should be local but conditional."))
 (|iibinom|
  ((|#2| (|List| |#2|)) "\\spad{iibinom(l)} should be local but conditional."))
 (|iifact| ((|#2| |#2|) "\\spad{iifact(x)} should be local but conditional."))
 (|product|
  ((|#2| |#2| (|SegmentBinding| |#2|))
   "\\spad{product(f(n),{} n = a..b)} returns \\spad{f}(a) * ... * \\spad{f}(\\spad{b}) as a formal product.")
  ((|#2| |#2| (|Symbol|))
   "\\spad{product(f(n),{} n)} returns the formal product \\spad{P}(\\spad{n}) which verifies \\spad{P}(\\spad{n+1})\\spad{/P}(\\spad{n}) = \\spad{f}(\\spad{n})."))
 (|summation|
  ((|#2| |#2| (|SegmentBinding| |#2|))
   "\\spad{summation(f(n),{} n = a..b)} returns \\spad{f}(a) + ... + \\spad{f}(\\spad{b}) as a formal sum.")
  ((|#2| |#2| (|Symbol|))
   "\\spad{summation(f(n),{} n)} returns the formal sum \\spad{S}(\\spad{n}) which verifies \\spad{S}(\\spad{n+1}) - \\spad{S}(\\spad{n}) = \\spad{f}(\\spad{n})."))
 (|factorials|
  ((|#2| |#2| (|Symbol|))
   "\\spad{factorials(f,{} x)} rewrites the permutations and binomials in \\spad{f} involving \\spad{x} in terms of factorials.")
  ((|#2| |#2|)
   "\\spad{factorials(f)} rewrites the permutations and binomials in \\spad{f} in terms of factorials."))
 (|factorial|
  ((|#2| |#2|)
   "\\spad{factorial(n)} returns the factorial of \\spad{n},{} \\spadignore{i.e.} \\spad{n!}."))
 (|permutation|
  ((|#2| |#2| |#2|)
   "\\spad{permutation(n,{} r)} returns the number of permutations of \\spad{n} objects taken \\spad{r} at a time,{} \\spadignore{i.e.} \\spad{n!/}(\\spad{n}-\\spad{r})!."))
 (|binomial|
  ((|#2| |#2| |#2|)
   "\\spad{binomial(n,{} r)} returns the number of subsets of \\spad{r} objects taken among \\spad{n} objects,{} \\spadignore{i.e.} \\spad{n!/}(\\spad{r!} * (\\spad{n}-\\spad{r})!)."))
 (^ ((|#2| |#2| |#2|) "\\spad{a ^ b} returns the formal exponential a^b."))
 (|operator|
  (((|BasicOperator|) (|BasicOperator|))
   "\\spad{operator(op)} returns a copy of \\spad{op} with the domain-dependent properties appropriate for \\spad{F}; error if \\spad{op} is not a combinatorial operator."))
 (|belong?|
  (((|Boolean|) (|BasicOperator|))
   "\\spad{belong?(op)} returns \\spad{true} if \\spad{op} is a combinatorial operator.")))
(("documentation" 0 6953) ("ancestors" 0 NIL) ("parents" 0 NIL)
 ("abbreviation" 0 6947) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 6216) ("modemaps" 0 2026) ("sourceFile" 0 1989)
 ("constructorCategory" 0 1109) ("constructorModemap" 0 60)
 ("constructorKind" 0 50) ("constructorForm" 0 20))