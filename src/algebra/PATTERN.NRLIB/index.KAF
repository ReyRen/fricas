19406               (|Pattern| R)
|domain|
(((|Pattern| |#1|)
  (|Join| (|SetCategory|) (|RetractableTo| |#1|) (|RetractableTo| (|Symbol|))
          (CATEGORY |domain| (SIGNATURE 0 ($) |constant|)
           (SIGNATURE 1 ($) |constant|)
           (SIGNATURE |isPlus| ((|Union| (|List| $) "failed") $))
           (SIGNATURE |isTimes| ((|Union| (|List| $) "failed") $))
           (SIGNATURE |isOp|
            ((|Union| (|List| $) "failed") $ (|BasicOperator|)))
           (SIGNATURE |isOp|
            ((|Union|
              (|Record| (|:| |op| (|BasicOperator|)) (|:| |arg| (|List| $)))
              "failed")
             $))
           (SIGNATURE |isExpt|
            ((|Union|
              (|Record| (|:| |val| $) (|:| |exponent| (|NonNegativeInteger|)))
              "failed")
             $))
           (SIGNATURE |isQuotient|
            ((|Union| (|Record| (|:| |num| $) (|:| |den| $)) "failed") $))
           (SIGNATURE |isList| ((|Union| (|List| $) "failed") $))
           (SIGNATURE |isPower|
            ((|Union| (|Record| (|:| |val| $) (|:| |exponent| $)) "failed") $))
           (SIGNATURE |elt| ($ (|BasicOperator|) (|List| $)))
           (SIGNATURE + ($ $ $)) (SIGNATURE * ($ $ $))
           (SIGNATURE ^ ($ $ (|NonNegativeInteger|))) (SIGNATURE ^ ($ $ $))
           (SIGNATURE / ($ $ $)) (SIGNATURE |depth| ((|NonNegativeInteger|) $))
           (SIGNATURE |convert| ($ (|List| $))) (SIGNATURE |copy| ($ $))
           (SIGNATURE |inR?| ((|Boolean|) $))
           (SIGNATURE |quoted?| ((|Boolean|) $))
           (SIGNATURE |symbol?| ((|Boolean|) $))
           (SIGNATURE |constant?| ((|Boolean|) $))
           (SIGNATURE |generic?| ((|Boolean|) $))
           (SIGNATURE |multiple?| ((|Boolean|) $))
           (SIGNATURE |optional?| ((|Boolean|) $))
           (SIGNATURE |hasPredicate?| ((|Boolean|) $))
           (SIGNATURE |predicates| ((|List| (|Any|)) $))
           (SIGNATURE |setPredicates| ($ $ (|List| (|Any|))))
           (SIGNATURE |withPredicates| ($ $ (|List| (|Any|))))
           (SIGNATURE |patternVariable|
            ($ (|Symbol|) (|Boolean|) (|Boolean|) (|Boolean|)))
           (SIGNATURE |setTopPredicate| ($ $ (|List| (|Symbol|)) (|Any|)))
           (SIGNATURE |topPredicate|
            ((|Record| (|:| |var| (|List| (|Symbol|))) (|:| |pred| (|Any|)))
             $))
           (SIGNATURE |hasTopPredicate?| ((|Boolean|) $))
           (SIGNATURE |resetBadValues| ($ $))
           (SIGNATURE |addBadValue| ($ $ (|Any|)))
           (SIGNATURE |getBadValues| ((|List| (|Any|)) $))
           (SIGNATURE |variables| ((|List| $) $))
           (SIGNATURE |optpair| ((|Union| (|List| $) "failed") (|List| $)))))
  (|SetCategory|))
 (T |Pattern|))
(|Join| (|SetCategory|) (|RetractableTo| |#1|) (|RetractableTo| (|Symbol|))
        (CATEGORY |domain| (SIGNATURE (|Zero|) ($) |constant|)
         (SIGNATURE (|One|) ($) |constant|)
         (SIGNATURE |isPlus| ((|Union| (|List| $) "failed") $))
         (SIGNATURE |isTimes| ((|Union| (|List| $) "failed") $))
         (SIGNATURE |isOp| ((|Union| (|List| $) "failed") $ (|BasicOperator|)))
         (SIGNATURE |isOp|
          ((|Union|
            (|Record| (|:| |op| (|BasicOperator|)) (|:| |arg| (|List| $)))
            "failed")
           $))
         (SIGNATURE |isExpt|
          ((|Union|
            (|Record| (|:| |val| $) (|:| |exponent| (|NonNegativeInteger|)))
            "failed")
           $))
         (SIGNATURE |isQuotient|
          ((|Union| (|Record| (|:| |num| $) (|:| |den| $)) "failed") $))
         (SIGNATURE |isList| ((|Union| (|List| $) "failed") $))
         (SIGNATURE |isPower|
          ((|Union| (|Record| (|:| |val| $) (|:| |exponent| $)) "failed") $))
         (SIGNATURE |elt| ($ (|BasicOperator|) (|List| $)))
         (SIGNATURE + ($ $ $)) (SIGNATURE * ($ $ $))
         (SIGNATURE ^ ($ $ (|NonNegativeInteger|))) (SIGNATURE ^ ($ $ $))
         (SIGNATURE / ($ $ $)) (SIGNATURE |depth| ((|NonNegativeInteger|) $))
         (SIGNATURE |convert| ($ (|List| $))) (SIGNATURE |copy| ($ $))
         (SIGNATURE |inR?| ((|Boolean|) $))
         (SIGNATURE |quoted?| ((|Boolean|) $))
         (SIGNATURE |symbol?| ((|Boolean|) $))
         (SIGNATURE |constant?| ((|Boolean|) $))
         (SIGNATURE |generic?| ((|Boolean|) $))
         (SIGNATURE |multiple?| ((|Boolean|) $))
         (SIGNATURE |optional?| ((|Boolean|) $))
         (SIGNATURE |hasPredicate?| ((|Boolean|) $))
         (SIGNATURE |predicates| ((|List| (|Any|)) $))
         (SIGNATURE |setPredicates| ($ $ (|List| (|Any|))))
         (SIGNATURE |withPredicates| ($ $ (|List| (|Any|))))
         (SIGNATURE |patternVariable|
          ($ (|Symbol|) (|Boolean|) (|Boolean|) (|Boolean|)))
         (SIGNATURE |setTopPredicate| ($ $ (|List| (|Symbol|)) (|Any|)))
         (SIGNATURE |topPredicate|
          ((|Record| (|:| |var| (|List| (|Symbol|))) (|:| |pred| (|Any|))) $))
         (SIGNATURE |hasTopPredicate?| ((|Boolean|) $))
         (SIGNATURE |resetBadValues| ($ $))
         (SIGNATURE |addBadValue| ($ $ (|Any|)))
         (SIGNATURE |getBadValues| ((|List| (|Any|)) $))
         (SIGNATURE |variables| ((|List| $) $))
         (SIGNATURE |optpair| ((|Union| (|List| $) "failed") (|List| $)))))
"/git/fricas/src/algebra/PATTERN.spad"
((|Zero| (*1 *1)
         (AND (|isDomain| *1 (|Pattern| *2))
              (|ofCategory| *2 (|SetCategory|))))
 (|One| (*1 *1)
        (AND (|isDomain| *1 (|Pattern| *2)) (|ofCategory| *2 (|SetCategory|))))
 (|isPlus| (*1 *2 *1)
  (|partial| AND (|isDomain| *2 (|List| (|Pattern| *3)))
   (|isDomain| *1 (|Pattern| *3)) (|ofCategory| *3 (|SetCategory|))))
 (|isTimes| (*1 *2 *1)
  (|partial| AND (|isDomain| *2 (|List| (|Pattern| *3)))
   (|isDomain| *1 (|Pattern| *3)) (|ofCategory| *3 (|SetCategory|))))
 (|isOp| (*1 *2 *1 *3)
  (|partial| AND (|isDomain| *3 (|BasicOperator|))
   (|isDomain| *2 (|List| (|Pattern| *4))) (|isDomain| *1 (|Pattern| *4))
   (|ofCategory| *4 (|SetCategory|))))
 (|isOp| (*1 *2 *1)
  (|partial| AND
   (|isDomain| *2
               (|Record| (|:| |op| (|BasicOperator|))
                         (|:| |arg| (|List| (|Pattern| *3)))))
   (|isDomain| *1 (|Pattern| *3)) (|ofCategory| *3 (|SetCategory|))))
 (|isExpt| (*1 *2 *1)
  (|partial| AND
   (|isDomain| *2
               (|Record| (|:| |val| (|Pattern| *3))
                         (|:| |exponent| (|NonNegativeInteger|))))
   (|isDomain| *1 (|Pattern| *3)) (|ofCategory| *3 (|SetCategory|))))
 (|isQuotient| (*1 *2 *1)
               (|partial| AND
                (|isDomain| *2
                            (|Record| (|:| |num| (|Pattern| *3))
                                      (|:| |den| (|Pattern| *3))))
                (|isDomain| *1 (|Pattern| *3))
                (|ofCategory| *3 (|SetCategory|))))
 (|isList| (*1 *2 *1)
  (|partial| AND (|isDomain| *2 (|List| (|Pattern| *3)))
   (|isDomain| *1 (|Pattern| *3)) (|ofCategory| *3 (|SetCategory|))))
 (|isPower| (*1 *2 *1)
  (|partial| AND
   (|isDomain| *2
               (|Record| (|:| |val| (|Pattern| *3))
                         (|:| |exponent| (|Pattern| *3))))
   (|isDomain| *1 (|Pattern| *3)) (|ofCategory| *3 (|SetCategory|))))
 (|elt| (*1 *1 *2 *3)
  (AND (|isDomain| *2 (|BasicOperator|))
       (|isDomain| *3 (|List| (|Pattern| *4))) (|isDomain| *1 (|Pattern| *4))
       (|ofCategory| *4 (|SetCategory|))))
 (+ (*1 *1 *1 *1)
    (AND (|isDomain| *1 (|Pattern| *2)) (|ofCategory| *2 (|SetCategory|))))
 (* (*1 *1 *1 *1)
    (AND (|isDomain| *1 (|Pattern| *2)) (|ofCategory| *2 (|SetCategory|))))
 (^ (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|NonNegativeInteger|)) (|isDomain| *1 (|Pattern| *3))
       (|ofCategory| *3 (|SetCategory|))))
 (^ (*1 *1 *1 *1)
  (AND (|isDomain| *1 (|Pattern| *2)) (|ofCategory| *2 (|SetCategory|))))
 (/ (*1 *1 *1 *1)
    (AND (|isDomain| *1 (|Pattern| *2)) (|ofCategory| *2 (|SetCategory|))))
 (|depth| (*1 *2 *1)
  (AND (|isDomain| *2 (|NonNegativeInteger|)) (|isDomain| *1 (|Pattern| *3))
       (|ofCategory| *3 (|SetCategory|))))
 (|convert| (*1 *1 *2)
            (AND (|isDomain| *2 (|List| (|Pattern| *3)))
                 (|isDomain| *1 (|Pattern| *3))
                 (|ofCategory| *3 (|SetCategory|))))
 (|copy| (*1 *1 *1)
  (AND (|isDomain| *1 (|Pattern| *2)) (|ofCategory| *2 (|SetCategory|))))
 (|inR?| (*1 *2 *1)
  (AND (|isDomain| *2 (|Boolean|)) (|isDomain| *1 (|Pattern| *3))
       (|ofCategory| *3 (|SetCategory|))))
 (|quoted?| (*1 *2 *1)
  (AND (|isDomain| *2 (|Boolean|)) (|isDomain| *1 (|Pattern| *3))
       (|ofCategory| *3 (|SetCategory|))))
 (|symbol?| (*1 *2 *1)
  (AND (|isDomain| *2 (|Boolean|)) (|isDomain| *1 (|Pattern| *3))
       (|ofCategory| *3 (|SetCategory|))))
 (|constant?| (*1 *2 *1)
  (AND (|isDomain| *2 (|Boolean|)) (|isDomain| *1 (|Pattern| *3))
       (|ofCategory| *3 (|SetCategory|))))
 (|generic?| (*1 *2 *1)
  (AND (|isDomain| *2 (|Boolean|)) (|isDomain| *1 (|Pattern| *3))
       (|ofCategory| *3 (|SetCategory|))))
 (|multiple?| (*1 *2 *1)
  (AND (|isDomain| *2 (|Boolean|)) (|isDomain| *1 (|Pattern| *3))
       (|ofCategory| *3 (|SetCategory|))))
 (|optional?| (*1 *2 *1)
  (AND (|isDomain| *2 (|Boolean|)) (|isDomain| *1 (|Pattern| *3))
       (|ofCategory| *3 (|SetCategory|))))
 (|hasPredicate?| (*1 *2 *1)
  (AND (|isDomain| *2 (|Boolean|)) (|isDomain| *1 (|Pattern| *3))
       (|ofCategory| *3 (|SetCategory|))))
 (|predicates| (*1 *2 *1)
  (AND (|isDomain| *2 (|List| (|Any|))) (|isDomain| *1 (|Pattern| *3))
       (|ofCategory| *3 (|SetCategory|))))
 (|setPredicates| (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|List| (|Any|))) (|isDomain| *1 (|Pattern| *3))
       (|ofCategory| *3 (|SetCategory|))))
 (|withPredicates| (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|List| (|Any|))) (|isDomain| *1 (|Pattern| *3))
       (|ofCategory| *3 (|SetCategory|))))
 (|patternVariable| (*1 *1 *2 *3 *3 *3)
  (AND (|isDomain| *2 (|Symbol|)) (|isDomain| *3 (|Boolean|))
       (|isDomain| *1 (|Pattern| *4)) (|ofCategory| *4 (|SetCategory|))))
 (|setTopPredicate| (*1 *1 *1 *2 *3)
  (AND (|isDomain| *2 (|List| (|Symbol|))) (|isDomain| *3 (|Any|))
       (|isDomain| *1 (|Pattern| *4)) (|ofCategory| *4 (|SetCategory|))))
 (|topPredicate| (*1 *2 *1)
  (AND
   (|isDomain| *2
               (|Record| (|:| |var| (|List| (|Symbol|))) (|:| |pred| (|Any|))))
   (|isDomain| *1 (|Pattern| *3)) (|ofCategory| *3 (|SetCategory|))))
 (|hasTopPredicate?| (*1 *2 *1)
  (AND (|isDomain| *2 (|Boolean|)) (|isDomain| *1 (|Pattern| *3))
       (|ofCategory| *3 (|SetCategory|))))
 (|resetBadValues| (*1 *1 *1)
  (AND (|isDomain| *1 (|Pattern| *2)) (|ofCategory| *2 (|SetCategory|))))
 (|addBadValue| (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|Any|)) (|isDomain| *1 (|Pattern| *3))
       (|ofCategory| *3 (|SetCategory|))))
 (|getBadValues| (*1 *2 *1)
  (AND (|isDomain| *2 (|List| (|Any|))) (|isDomain| *1 (|Pattern| *3))
       (|ofCategory| *3 (|SetCategory|))))
 (|variables| (*1 *2 *1)
  (AND (|isDomain| *2 (|List| (|Pattern| *3))) (|isDomain| *1 (|Pattern| *3))
       (|ofCategory| *3 (|SetCategory|))))
 (|optpair| (*1 *2 *2)
  (|partial| AND (|isDomain| *2 (|List| (|Pattern| *3)))
   (|isDomain| *1 (|Pattern| *3)) (|ofCategory| *3 (|SetCategory|)))))
((~= (((|Boolean|) $ $) NIL)) (|withPredicates| (($ $ (|List| (|Any|))) 63))
 (|variables| (((|List| $) $) 118))
 (|topPredicate|
  (((|Record| (|:| |var| (|List| (|Symbol|))) (|:| |pred| (|Any|))) $) 22))
 (|symbol?| (((|Boolean|) $) 29))
 (|setTopPredicate| (($ $ (|List| (|Symbol|)) (|Any|)) 24))
 (|setPredicates| (($ $ (|List| (|Any|))) 62))
 (|retractIfCan| (((|Union| |#1| #1="failed") $) 60)
  (((|Union| (|Symbol|) #1#) $) 140))
 (|retract| ((|#1| $) 56) (((|Symbol|) $) NIL)) (|resetBadValues| (($ $) 106))
 (|quoted?| (((|Boolean|) $) 45)) (|predicates| (((|List| (|Any|)) $) 43))
 (|patternVariable| (($ (|Symbol|) (|Boolean|) (|Boolean|) (|Boolean|)) 64))
 (|optpair| (((|Union| (|List| $) "failed") (|List| $)) 71))
 (|optional?| (((|Boolean|) $) 48)) (|multiple?| (((|Boolean|) $) 47))
 (|latex| (((|String|) $) NIL))
 (|isTimes| (((|Union| (|List| $) "failed") $) 34))
 (|isQuotient|
  (((|Union| (|Record| (|:| |num| $) (|:| |den| $)) "failed") $) 41))
 (|isPower|
  (((|Union| (|Record| (|:| |val| $) (|:| |exponent| $)) "failed") $) 82))
 (|isPlus| (((|Union| (|List| $) "failed") $) 31))
 (|isOp| (((|Union| (|List| $) "failed") $ (|BasicOperator|)) 105)
  (((|Union| (|Record| (|:| |op| (|BasicOperator|)) (|:| |arg| (|List| $)))
             "failed")
    $)
   92))
 (|isList| (((|Union| (|List| $) "failed") $) 35))
 (|isExpt|
  (((|Union| (|Record| (|:| |val| $) (|:| |exponent| (|NonNegativeInteger|)))
             "failed")
    $)
   38))
 (|inR?| (((|Boolean|) $) 28))
 (|hashUpdate!| (((|HashState|) (|HashState|) $) NIL))
 (|hash| (((|SingleInteger|) $) NIL)) (|hasTopPredicate?| (((|Boolean|) $) 20))
 (|hasPredicate?| (((|Boolean|) $) 44))
 (|getBadValues| (((|List| (|Any|)) $) 109)) (|generic?| (((|Boolean|) $) 46))
 (|elt| (($ (|BasicOperator|) (|List| $)) 89))
 (|depth| (((|NonNegativeInteger|) $) 27)) (|copy| (($ $) 61))
 (|convert| (($ (|List| $)) 58)) (|constant?| (((|Boolean|) $) 25))
 (|coerce| (((|OutputForm|) $) 51) (($ |#1|) 18) (($ (|Symbol|)) 65))
 (|addBadValue| (($ $ (|Any|)) 108))
 (^ (($ $ (|NonNegativeInteger|)) 97) (($ $ $) 52)) (|Zero| (($) 88 T CONST))
 (|One| (($) 72 T CONST)) (= (((|Boolean|) $ $) 78)) (/ (($ $ $) 98))
 (+ (($ $ $) 102)) (* (($ $ $) 103)))
PATTERN
(((|SetCategory|) . T) ((|RetractableTo| |#1|) . T)
 ((|RetractableTo| (|Symbol|)) . T))
(((|BasicType|) . T) ((|CoercibleTo| (|OutputForm|)) . T)
 ((|RetractableTo| (|Symbol|)) . T) ((|RetractableTo| |#1|) . T)
 ((|SetCategory|) . T))
((|constructor| (NIL "Patterns for use by the pattern matcher."))
 (|optpair|
  (((|Union| (|List| $) "failed") (|List| $))
   "\\spad{optpair(l)} returns \\spad{l} has the form \\spad{[a,{} b]} and a is optional,{} and \"failed\" otherwise."))
 (|variables|
  (((|List| $) $)
   "\\spad{variables(p)} returns the list of matching variables appearing in \\spad{p}."))
 (|getBadValues|
  (((|List| (|Any|)) $)
   "\\spad{getBadValues(p)} returns the list of \"bad values\" for \\spad{p}. Note: \\spad{p} is not allowed to match any of its \"bad values\"."))
 (|addBadValue|
  (($ $ (|Any|))
   "\\spad{addBadValue(p,{} v)} adds \\spad{v} to the list of \"bad values\" for \\spad{p}. Note: \\spad{p} is not allowed to match any of its \"bad values\"."))
 (|resetBadValues|
  (($ $)
   "\\spad{resetBadValues(p)} initializes the list of \"bad values\" for \\spad{p} to \\spad{[]}. Note: \\spad{p} is not allowed to match any of its \"bad values\"."))
 (|hasTopPredicate?|
  (((|Boolean|) $)
   "\\spad{hasTopPredicate?(p)} tests if \\spad{p} has a top-level predicate."))
 (|topPredicate|
  (((|Record| (|:| |var| (|List| (|Symbol|))) (|:| |pred| (|Any|))) $)
   "\\spad{topPredicate(x)} returns \\spad{[[a1,{} ...,{} an],{} f]} where the top-level predicate of \\spad{x} is \\spad{f(a1,{} ...,{} an)}. Note: \\spad{n} is 0 if \\spad{x} has no top-level predicate."))
 (|setTopPredicate|
  (($ $ (|List| (|Symbol|)) (|Any|))
   "\\spad{setTopPredicate(x,{} [a1,{} ...,{} an],{} f)} returns \\spad{x} with the top-level predicate set to \\spad{f(a1,{} ...,{} an)}."))
 (|patternVariable|
  (($ (|Symbol|) (|Boolean|) (|Boolean|) (|Boolean|))
   "\\spad{patternVariable(x,{} c?,{} o?,{} m?)} creates a pattern variable \\spad{x},{} which is constant if \\spad{c? = true},{} optional if \\spad{o? = true},{} and multiple if \\spad{m? = true}."))
 (|withPredicates|
  (($ $ (|List| (|Any|)))
   "\\spad{withPredicates(p,{} [p1,{} ...,{} pn])} makes a copy of \\spad{p} and attaches the predicate \\spad{p1} and ... and \\spad{pn} to the copy,{} which is returned."))
 (|setPredicates|
  (($ $ (|List| (|Any|)))
   "\\spad{setPredicates(p,{} [p1,{} ...,{} pn])} attaches the predicate \\spad{p1} and ... and \\spad{pn} to \\spad{p}."))
 (|predicates|
  (((|List| (|Any|)) $)
   "\\spad{predicates(p)} returns \\spad{[p1,{} ...,{} pn]} such that the predicate attached to \\spad{p} is \\spad{p1} and ... and \\spad{pn}."))
 (|hasPredicate?|
  (((|Boolean|) $)
   "\\spad{hasPredicate?(p)} tests if \\spad{p} has predicates attached to it."))
 (|optional?|
  (((|Boolean|) $)
   "\\spad{optional?(p)} tests if \\spad{p} is a single matching variable which can match an identity."))
 (|multiple?|
  (((|Boolean|) $)
   "\\spad{multiple?(p)} tests if \\spad{p} is a single matching variable allowing list matching or multiple term matching in a sum or product."))
 (|generic?|
  (((|Boolean|) $)
   "\\spad{generic?(p)} tests if \\spad{p} is a single matching variable."))
 (|constant?|
  (((|Boolean|) $)
   "\\spad{constant?(p)} tests if \\spad{p} contains no matching variables."))
 (|symbol?|
  (((|Boolean|) $) "\\spad{symbol?(p)} tests if \\spad{p} is a symbol."))
 (|quoted?|
  (((|Boolean|) $)
   "\\spad{quoted?(p)} tests if \\spad{p} is of the form \\spad{'s} for a symbol \\spad{s}."))
 (|inR?|
  (((|Boolean|) $)
   "\\spad{inR?(p)} tests if \\spad{p} is an atom (\\spadignore{i.e.} an element of \\spad{R})."))
 (|copy| (($ $) "\\spad{copy(p)} returns a recursive copy of \\spad{p}."))
 (|convert|
  (($ (|List| $))
   "\\spad{convert([a1,{} ...,{} an])} returns the pattern \\spad{[a1,{} ...,{} an]}."))
 (|depth|
  (((|NonNegativeInteger|) $)
   "\\spad{depth(p)} returns the nesting level of \\spad{p}."))
 (/ (($ $ $) "\\spad{a / b} returns the pattern \\spad{a / b}."))
 (^ (($ $ $) "\\spad{a ^ b} returns the pattern \\spad{a ^ b}.")
  (($ $ (|NonNegativeInteger|))
   "\\spad{a ^ n} returns the pattern \\spad{a ^ n}."))
 (* (($ $ $) "\\spad{a * b} returns the pattern \\spad{a * b}."))
 (+ (($ $ $) "\\spad{a + b} returns the pattern \\spad{a + b}."))
 (|elt|
  (($ (|BasicOperator|) (|List| $))
   "\\spad{elt(op,{} [a1,{} ...,{} an])} returns \\spad{op(a1,{} ...,{} an)}."))
 (|isPower|
  (((|Union| (|Record| (|:| |val| $) (|:| |exponent| $)) "failed") $)
   "\\spad{isPower(p)} returns \\spad{[a,{} b]} if \\spad{p = a ^ b},{} and \"failed\" otherwise."))
 (|isList|
  (((|Union| (|List| $) "failed") $)
   "\\spad{isList(p)} returns \\spad{[a1,{} ...,{} an]} if \\spad{p = [a1,{} ...,{} an]},{} \"failed\" otherwise."))
 (|isQuotient|
  (((|Union| (|Record| (|:| |num| $) (|:| |den| $)) "failed") $)
   "\\spad{isQuotient(p)} returns \\spad{[a,{} b]} if \\spad{p = a / b},{} and \"failed\" otherwise."))
 (|isExpt|
  (((|Union| (|Record| (|:| |val| $) (|:| |exponent| (|NonNegativeInteger|)))
             "failed")
    $)
   "\\spad{isExpt(p)} returns \\spad{[q,{} n]} if \\spad{n > 0} and \\spad{p = q ^ n},{} and \"failed\" otherwise."))
 (|isOp|
  (((|Union| (|Record| (|:| |op| (|BasicOperator|)) (|:| |arg| (|List| $)))
             "failed")
    $)
   "\\spad{isOp(p)} returns \\spad{[op,{} [a1,{} ...,{} an]]} if \\spad{p = op(a1,{} ...,{} an)},{} and \"failed\" otherwise.")
  (((|Union| (|List| $) "failed") $ (|BasicOperator|))
   "\\spad{isOp(p,{} op)} returns \\spad{[a1,{} ...,{} an]} if \\spad{p = op(a1,{} ...,{} an)},{} and \"failed\" otherwise."))
 (|isTimes|
  (((|Union| (|List| $) "failed") $)
   "\\spad{isTimes(p)} returns \\spad{[a1,{} ...,{} an]} if \\spad{n > 1} and \\spad{p = a1 * ... * an},{} and \"failed\" otherwise."))
 (|isPlus|
  (((|Union| (|List| $) "failed") $)
   "\\spad{isPlus(p)} returns \\spad{[a1,{} ...,{} an]} if \\spad{n > 1} \\indented{1}{and \\spad{p = a1 + ... + an},{}} and \"failed\" otherwise."))
 ((|One|) (($) "1")) ((|Zero|) (($) "0")))
(("documentation" 0 13600) ("ancestors" 0 13453) ("parents" 0 13364)
 ("abbreviation" 0 13356) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 11133) ("modemaps" 0 5258) ("sourceFile" 0 5219)
 ("constructorCategory" 0 2712) ("constructorModemap" 0 43)
 ("constructorKind" 0 34) ("constructorForm" 0 20))