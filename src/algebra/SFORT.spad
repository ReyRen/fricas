)abbrev domain SFORT SimpleFortranProgram

++ Author: Mike Dewar
++ Date Created: November 1992
++ Basic Operations:
++ Related Constructors: FortranType, FortranCode, Switch
++ Also See:
++ AMS Classifications:
++ Keywords:
++ References:
++ Description:
++ \spadtype{SimpleFortranProgram} provides a simple model of some
++ FORTRAN subprograms, making it possible to coerce objects of various
++ domains into a FORTRAN subprogram called \spad{f}.
++ These can then be translated into legal FORTRAN code.
SimpleFortranProgram(R, FS) : Exports == Implementation where
  R  : OrderedSet
  FS : FunctionSpace(R)

  FST ==> FortranScalarType

  Exports ==> FortranProgramCategory with
    fortran : (Symbol, FST, FS) -> %
    ++fortran(fname, ftype, body) builds an object of type
    ++\spadtype{FortranProgramCategory}. The three arguments specify
    ++the name, the type and the body of the program.

  Implementation ==> add

    Rep := Record(name : Symbol, type : FST, body : FS )

    import from FortranCodeTools

    fortran(fname, ftype, res) ==
      construct(fname, ftype, res)$Rep

    nameOf(u : %) : Symbol == u . name

    typeOf(u:%):Union(FST,"void") == u . type

    bodyOf(u : %) : FS == u . body

    argumentsOf(u : %) : List Symbol == variables(bodyOf u)$FS

    coerce(u : %) : OutputForm ==
      coerce(nameOf u)$Symbol

    outputAsFortran(u : %) : Void ==
      ftype := u.type
      ftype_s : String := checkType(ftype::String)
      fname := nameOf(u)
      args := argumentsOf(u)
      nargs := [arg::OutputForm for arg in args]$List(OutputForm)
      val  := bodyOf(u)::OutputForm
      fortFormatHead(fname, [ftype], args)
      fort_format_types(ftype_s, nargs)
      dispfortexp1$Lisp ["="::OutputForm, fname::OutputForm,
                         val]@List(OutputForm)
      dispfortexp1$Lisp "RETURN"::OutputForm
      dispfortexp1$Lisp "END"::OutputForm
      void()$Void

