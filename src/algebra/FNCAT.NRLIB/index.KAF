4165                (MAKEPROP '|FileNameCategory| 'NILADIC T)
(|FileNameCategory|)
|category|
(((|FileNameCategory|) (|Category|)) (T |FileNameCategory|))
(|Join| (|SetCategory|)
        (CATEGORY |domain| (SIGNATURE |coerce| ($ (|String|)))
         (SIGNATURE |coerce| ((|String|) $))
         (SIGNATURE |filename| ($ (|String|) (|String|) (|String|)))
         (SIGNATURE |directory| ((|String|) $))
         (SIGNATURE |name| ((|String|) $))
         (SIGNATURE |extension| ((|String|) $))
         (SIGNATURE |exists?| ((|Boolean|) $))
         (SIGNATURE |readable?| ((|Boolean|) $))
         (SIGNATURE |writable?| ((|Boolean|) $))
         (SIGNATURE |new| ($ (|String|) (|String|) (|String|)))))
"/git/fricas/src/algebra/FNCAT.spad"
((|coerce| (*1 *1 *2)
           (AND (|isDomain| *2 (|String|))
                (|ofCategory| *1 (|FileNameCategory|))))
 (|coerce| (*1 *2 *1)
           (AND (|ofCategory| *1 (|FileNameCategory|))
                (|isDomain| *2 (|String|))))
 (|filename| (*1 *1 *2 *2 *2)
  (AND (|isDomain| *2 (|String|)) (|ofCategory| *1 (|FileNameCategory|))))
 (|directory| (*1 *2 *1)
  (AND (|ofCategory| *1 (|FileNameCategory|)) (|isDomain| *2 (|String|))))
 (|name| (*1 *2 *1)
  (AND (|ofCategory| *1 (|FileNameCategory|)) (|isDomain| *2 (|String|))))
 (|extension| (*1 *2 *1)
  (AND (|ofCategory| *1 (|FileNameCategory|)) (|isDomain| *2 (|String|))))
 (|exists?| (*1 *2 *1)
  (AND (|ofCategory| *1 (|FileNameCategory|)) (|isDomain| *2 (|Boolean|))))
 (|readable?| (*1 *2 *1)
  (AND (|ofCategory| *1 (|FileNameCategory|)) (|isDomain| *2 (|Boolean|))))
 (|writable?| (*1 *2 *1)
  (AND (|ofCategory| *1 (|FileNameCategory|)) (|isDomain| *2 (|Boolean|))))
 (|new| (*1 *1 *2 *2 *2)
  (AND (|isDomain| *2 (|String|)) (|ofCategory| *1 (|FileNameCategory|)))))
((~= (((|Boolean|) $ $) 6)) (|writable?| (((|Boolean|) $) 6))
 (|readable?| (((|Boolean|) $) 6))
 (|new| (($ (|String|) (|String|) (|String|)) 6)) (|name| (((|String|) $) 6))
 (|latex| (((|String|) $) 6))
 (|hashUpdate!| (((|HashState|) (|HashState|) $) 6))
 (|hash| (((|SingleInteger|) $) 6))
 (|filename| (($ (|String|) (|String|) (|String|)) 6))
 (|extension| (((|String|) $) 6)) (|exists?| (((|Boolean|) $) 6))
 (|directory| (((|String|) $) 6))
 (|coerce| (((|OutputForm|) $) 6) (($ (|String|)) 6) (((|String|) $) 6))
 (= (((|Boolean|) $ $) 6)))
FNCAT
(((|SetCategory|) . T))
(((|BasicType|) . T) ((|CoercibleTo| (|OutputForm|)) . T) ((|SetCategory|) . T))
((|constructor|
  (NIL "This category provides an interface to names in the file system."))
 (|new|
  (($ (|String|) (|String|) (|String|))
   "\\spad{new(d,{} pref,{} e)} constructs the name of a new writable file with \\spad{d} as its directory,{} \\spad{pref} as a prefix of its name and \\spad{e} as its extension. When \\spad{d} or \\spad{t} is the empty string,{} a default is used. An error occurs if a new file cannot be written in the given directory."))
 (|writable?|
  (((|Boolean|) $)
   "\\spad{writable?(f)} tests if the named file be opened for writing. The named file need not already exist."))
 (|readable?|
  (((|Boolean|) $)
   "\\spad{readable?(f)} tests if the named file exist and can it be opened for reading."))
 (|exists?|
  (((|Boolean|) $)
   "\\spad{exists?(f)} tests if the file exists in the file system."))
 (|extension|
  (((|String|) $)
   "\\spad{extension(f)} returns the type part of the file name."))
 (|name|
  (((|String|) $) "\\spad{name(f)} returns the name part of the file name."))
 (|directory|
  (((|String|) $)
   "\\spad{directory(f)} returns the directory part of the file name."))
 (|filename|
  (($ (|String|) (|String|) (|String|))
   "\\spad{filename(d,{} n,{} e)} creates a file name with \\spad{d} as its directory,{} \\spad{n} as its name and \\spad{e} as its extension. This is a portable way to create file names. When \\spad{d} or \\spad{t} is the empty string,{} a default is used."))
 (|coerce|
  (((|String|) $)
   "\\spad{coerce(fn)} produces a string for a file name according to operating system-dependent conventions.")
  (($ (|String|))
   "\\spad{coerce(s)} converts a string to a file name according to operating system-dependent conventions.")))
(("documentation" 0 2450) ("ancestors" 0 2369) ("parents" 0 2345)
 ("abbreviation" 0 2339) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 1789) ("modemaps" 0 743) ("sourceFile" 0 706)
 ("constructorCategory" 0 155) ("constructorModemap" 0 94)
 ("constructorKind" 0 83) ("constructorForm" 0 62) ("NILADIC" 0 20))