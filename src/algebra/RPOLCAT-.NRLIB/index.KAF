31135               (|RecursivePolynomialCategory&| S R E V)
|domain|
(((|RecursivePolynomialCategory&| |#1| |#2| |#3| |#4|)
  (CATEGORY |domain| (SIGNATURE |coerce| ((|Polynomial| |#2|) |#1|))
   (SIGNATURE |convert| ((|Polynomial| |#2|) |#1|))
   (SIGNATURE |convert| ((|String|) |#1|))
   (SIGNATURE |mainSquareFreePart| (|#1| |#1|))
   (SIGNATURE |mainPrimitivePart| (|#1| |#1|))
   (SIGNATURE |mainContent| (|#1| |#1|))
   (SIGNATURE |primitivePart!| (|#1| |#1|)) (SIGNATURE |gcd| (|#2| |#2| |#1|))
   (SIGNATURE |iexactQuo| (|#2| |#2| |#2|))
   (SIGNATURE |exactQuotient!| (|#1| |#1| |#1|))
   (SIGNATURE |exactQuotient| (|#1| |#1| |#1|))
   (SIGNATURE |exactQuotient!| (|#1| |#1| |#2|))
   (SIGNATURE |exactQuotient| (|#1| |#1| |#2|))
   (SIGNATURE |primPartElseUnitCanonical!| (|#1| |#1|))
   (SIGNATURE |primPartElseUnitCanonical| (|#1| |#1|))
   (SIGNATURE |convert| (|#1| (|Polynomial| |#2|)))
   (SIGNATURE |retract| (|#1| (|Polynomial| |#2|)))
   (SIGNATURE |retractIfCan| ((|Union| |#1| "failed") (|Polynomial| |#2|)))
   (SIGNATURE |convert| (|#1| (|Polynomial| (|Integer|))))
   (SIGNATURE |retract| (|#1| (|Polynomial| (|Integer|))))
   (SIGNATURE |retractIfCan|
    ((|Union| |#1| "failed") (|Polynomial| (|Integer|))))
   (SIGNATURE |convert| (|#1| (|Polynomial| (|Fraction| (|Integer|)))))
   (SIGNATURE |retract| (|#1| (|Polynomial| (|Fraction| (|Integer|)))))
   (SIGNATURE |retractIfCan|
    ((|Union| |#1| "failed") (|Polynomial| (|Fraction| (|Integer|)))))
   (SIGNATURE |initiallyReduce| (|#1| |#1| |#1|))
   (SIGNATURE |headReduce| (|#1| |#1| |#1|))
   (SIGNATURE |lazyResidueClass|
    ((|Record| (|:| |polnum| |#1|) (|:| |polden| |#1|)
               (|:| |power| (|NonNegativeInteger|)))
     |#1| |#1|))
   (SIGNATURE |monicModulo| (|#1| |#1| |#1|))
   (SIGNATURE |pseudoDivide|
    ((|Record| (|:| |quotient| |#1|) (|:| |remainder| |#1|)) |#1| |#1|))
   (SIGNATURE |lazyPseudoDivide|
    ((|Record| (|:| |coef| |#1|) (|:| |gap| (|NonNegativeInteger|))
               (|:| |quotient| |#1|) (|:| |remainder| |#1|))
     |#1| |#1| |#4|))
   (SIGNATURE |lazyPseudoDivide|
    ((|Record| (|:| |coef| |#1|) (|:| |gap| (|NonNegativeInteger|))
               (|:| |quotient| |#1|) (|:| |remainder| |#1|))
     |#1| |#1|))
   (SIGNATURE |lazyPremWithDefault|
    ((|Record| (|:| |coef| |#1|) (|:| |gap| (|NonNegativeInteger|))
               (|:| |remainder| |#1|))
     |#1| |#1| |#4|))
   (SIGNATURE |lazyPremWithDefault|
    ((|Record| (|:| |coef| |#1|) (|:| |gap| (|NonNegativeInteger|))
               (|:| |remainder| |#1|))
     |#1| |#1|))
   (SIGNATURE |lazyPquo| (|#1| |#1| |#1| |#4|))
   (SIGNATURE |lazyPrem| (|#1| |#1| |#1| |#4|))
   (SIGNATURE |lazyPquo| (|#1| |#1| |#1|))
   (SIGNATURE |lazyPrem| (|#1| |#1| |#1|))
   (SIGNATURE |pquo| (|#1| |#1| |#1| |#4|))
   (SIGNATURE |prem| (|#1| |#1| |#1| |#4|)) (SIGNATURE |pquo| (|#1| |#1| |#1|))
   (SIGNATURE |prem| (|#1| |#1| |#1|))
   (SIGNATURE |normalized?| ((|Boolean|) |#1| (|List| |#1|)))
   (SIGNATURE |normalized?| ((|Boolean|) |#1| |#1|))
   (SIGNATURE |initiallyReduced?| ((|Boolean|) |#1| (|List| |#1|)))
   (SIGNATURE |initiallyReduced?| ((|Boolean|) |#1| |#1|))
   (SIGNATURE |headReduced?| ((|Boolean|) |#1| (|List| |#1|)))
   (SIGNATURE |headReduced?| ((|Boolean|) |#1| |#1|))
   (SIGNATURE |reduced?| ((|Boolean|) |#1| (|List| |#1|)))
   (SIGNATURE |reduced?| ((|Boolean|) |#1| |#1|))
   (SIGNATURE |supRittWu?| ((|Boolean|) |#1| |#1|))
   (SIGNATURE |infRittWu?| ((|Boolean|) |#1| |#1|))
   (SIGNATURE |RittWuCompare| ((|Union| (|Boolean|) "failed") |#1| |#1|))
   (SIGNATURE |mainMonomials| ((|List| |#1|) |#1|))
   (SIGNATURE |mainCoefficients| ((|List| |#1|) |#1|))
   (SIGNATURE |leastMonomial| (|#1| |#1|))
   (SIGNATURE |mainMonomial| (|#1| |#1|))
   (SIGNATURE |quasiMonic?| ((|Boolean|) |#1|))
   (SIGNATURE |monic?| ((|Boolean|) |#1|))
   (SIGNATURE |reductum| (|#1| |#1| |#4|))
   (SIGNATURE |leadingCoefficient| (|#1| |#1| |#4|))
   (SIGNATURE |deepestInitial| (|#1| |#1|))
   (SIGNATURE |iteratedInitials| ((|List| |#1|) |#1|))
   (SIGNATURE |deepestTail| (|#1| |#1|)) (SIGNATURE |tail| (|#1| |#1|))
   (SIGNATURE |head| (|#1| |#1|)) (SIGNATURE |init| (|#1| |#1|))
   (SIGNATURE |mdeg| ((|NonNegativeInteger|) |#1|))
   (SIGNATURE |mvar| (|#4| |#1|)) (SIGNATURE |retract| (|#4| |#1|))
   (SIGNATURE |retractIfCan| ((|Union| |#4| #1="failed") |#1|))
   (SIGNATURE |coerce| (|#1| |#4|)) (SIGNATURE |coerce| (|#1| (|Integer|)))
   (SIGNATURE |convert| ((|InputForm|) |#1|))
   (SIGNATURE |convert| ((|Pattern| (|Integer|)) |#1|))
   (SIGNATURE |convert| ((|Pattern| (|Float|)) |#1|))
   (SIGNATURE |coerce| (|#1| |#1|)) (SIGNATURE |gcd| (|#1| |#1| |#1|))
   (SIGNATURE |gcd| (|#1| (|List| |#1|))) (SIGNATURE |retract| (|#2| |#1|))
   (SIGNATURE |retractIfCan| ((|Union| |#2| #1#) |#1|))
   (SIGNATURE |coerce| (|#1| |#2|))
   (SIGNATURE |coerce| (|#1| (|Fraction| (|Integer|))))
   (SIGNATURE |retractIfCan| ((|Union| (|Fraction| (|Integer|)) #1#) |#1|))
   (SIGNATURE |retract| ((|Fraction| (|Integer|)) |#1|))
   (SIGNATURE |retractIfCan| ((|Union| (|Integer|) #1#) |#1|))
   (SIGNATURE |retract| ((|Integer|) |#1|)) (SIGNATURE |reductum| (|#1| |#1|))
   (SIGNATURE |leadingCoefficient| (|#2| |#1|))
   (SIGNATURE |coerce| ((|OutputForm|) |#1|)))
  (|RecursivePolynomialCategory| |#2| |#3| |#4|) (|Ring|)
  (|OrderedAbelianMonoidSup|) (|OrderedSet|))
 (T |RecursivePolynomialCategory&|))
(CATEGORY |domain| (SIGNATURE |coerce| ((|Polynomial| |#2|) |#1|))
 (SIGNATURE |convert| ((|Polynomial| |#2|) |#1|))
 (SIGNATURE |convert| ((|String|) |#1|))
 (SIGNATURE |mainSquareFreePart| (|#1| |#1|))
 (SIGNATURE |mainPrimitivePart| (|#1| |#1|))
 (SIGNATURE |mainContent| (|#1| |#1|)) (SIGNATURE |primitivePart!| (|#1| |#1|))
 (SIGNATURE |gcd| (|#2| |#2| |#1|)) (SIGNATURE |iexactQuo| (|#2| |#2| |#2|))
 (SIGNATURE |exactQuotient!| (|#1| |#1| |#1|))
 (SIGNATURE |exactQuotient| (|#1| |#1| |#1|))
 (SIGNATURE |exactQuotient!| (|#1| |#1| |#2|))
 (SIGNATURE |exactQuotient| (|#1| |#1| |#2|))
 (SIGNATURE |primPartElseUnitCanonical!| (|#1| |#1|))
 (SIGNATURE |primPartElseUnitCanonical| (|#1| |#1|))
 (SIGNATURE |convert| (|#1| (|Polynomial| |#2|)))
 (SIGNATURE |retract| (|#1| (|Polynomial| |#2|)))
 (SIGNATURE |retractIfCan| ((|Union| |#1| "failed") (|Polynomial| |#2|)))
 (SIGNATURE |convert| (|#1| (|Polynomial| (|Integer|))))
 (SIGNATURE |retract| (|#1| (|Polynomial| (|Integer|))))
 (SIGNATURE |retractIfCan|
  ((|Union| |#1| "failed") (|Polynomial| (|Integer|))))
 (SIGNATURE |convert| (|#1| (|Polynomial| (|Fraction| (|Integer|)))))
 (SIGNATURE |retract| (|#1| (|Polynomial| (|Fraction| (|Integer|)))))
 (SIGNATURE |retractIfCan|
  ((|Union| |#1| "failed") (|Polynomial| (|Fraction| (|Integer|)))))
 (SIGNATURE |initiallyReduce| (|#1| |#1| |#1|))
 (SIGNATURE |headReduce| (|#1| |#1| |#1|))
 (SIGNATURE |lazyResidueClass|
  ((|Record| (|:| |polnum| |#1|) (|:| |polden| |#1|)
             (|:| |power| (|NonNegativeInteger|)))
   |#1| |#1|))
 (SIGNATURE |monicModulo| (|#1| |#1| |#1|))
 (SIGNATURE |pseudoDivide|
  ((|Record| (|:| |quotient| |#1|) (|:| |remainder| |#1|)) |#1| |#1|))
 (SIGNATURE |lazyPseudoDivide|
  ((|Record| (|:| |coef| |#1|) (|:| |gap| (|NonNegativeInteger|))
             (|:| |quotient| |#1|) (|:| |remainder| |#1|))
   |#1| |#1| |#4|))
 (SIGNATURE |lazyPseudoDivide|
  ((|Record| (|:| |coef| |#1|) (|:| |gap| (|NonNegativeInteger|))
             (|:| |quotient| |#1|) (|:| |remainder| |#1|))
   |#1| |#1|))
 (SIGNATURE |lazyPremWithDefault|
  ((|Record| (|:| |coef| |#1|) (|:| |gap| (|NonNegativeInteger|))
             (|:| |remainder| |#1|))
   |#1| |#1| |#4|))
 (SIGNATURE |lazyPremWithDefault|
  ((|Record| (|:| |coef| |#1|) (|:| |gap| (|NonNegativeInteger|))
             (|:| |remainder| |#1|))
   |#1| |#1|))
 (SIGNATURE |lazyPquo| (|#1| |#1| |#1| |#4|))
 (SIGNATURE |lazyPrem| (|#1| |#1| |#1| |#4|))
 (SIGNATURE |lazyPquo| (|#1| |#1| |#1|))
 (SIGNATURE |lazyPrem| (|#1| |#1| |#1|))
 (SIGNATURE |pquo| (|#1| |#1| |#1| |#4|))
 (SIGNATURE |prem| (|#1| |#1| |#1| |#4|)) (SIGNATURE |pquo| (|#1| |#1| |#1|))
 (SIGNATURE |prem| (|#1| |#1| |#1|))
 (SIGNATURE |normalized?| ((|Boolean|) |#1| (|List| |#1|)))
 (SIGNATURE |normalized?| ((|Boolean|) |#1| |#1|))
 (SIGNATURE |initiallyReduced?| ((|Boolean|) |#1| (|List| |#1|)))
 (SIGNATURE |initiallyReduced?| ((|Boolean|) |#1| |#1|))
 (SIGNATURE |headReduced?| ((|Boolean|) |#1| (|List| |#1|)))
 (SIGNATURE |headReduced?| ((|Boolean|) |#1| |#1|))
 (SIGNATURE |reduced?| ((|Boolean|) |#1| (|List| |#1|)))
 (SIGNATURE |reduced?| ((|Boolean|) |#1| |#1|))
 (SIGNATURE |supRittWu?| ((|Boolean|) |#1| |#1|))
 (SIGNATURE |infRittWu?| ((|Boolean|) |#1| |#1|))
 (SIGNATURE |RittWuCompare| ((|Union| (|Boolean|) "failed") |#1| |#1|))
 (SIGNATURE |mainMonomials| ((|List| |#1|) |#1|))
 (SIGNATURE |mainCoefficients| ((|List| |#1|) |#1|))
 (SIGNATURE |leastMonomial| (|#1| |#1|)) (SIGNATURE |mainMonomial| (|#1| |#1|))
 (SIGNATURE |quasiMonic?| ((|Boolean|) |#1|))
 (SIGNATURE |monic?| ((|Boolean|) |#1|))
 (SIGNATURE |reductum| (|#1| |#1| |#4|))
 (SIGNATURE |leadingCoefficient| (|#1| |#1| |#4|))
 (SIGNATURE |deepestInitial| (|#1| |#1|))
 (SIGNATURE |iteratedInitials| ((|List| |#1|) |#1|))
 (SIGNATURE |deepestTail| (|#1| |#1|)) (SIGNATURE |tail| (|#1| |#1|))
 (SIGNATURE |head| (|#1| |#1|)) (SIGNATURE |init| (|#1| |#1|))
 (SIGNATURE |mdeg| ((|NonNegativeInteger|) |#1|))
 (SIGNATURE |mvar| (|#4| |#1|)) (SIGNATURE |retract| (|#4| |#1|))
 (SIGNATURE |retractIfCan| ((|Union| |#4| #1="failed") |#1|))
 (SIGNATURE |coerce| (|#1| |#4|)) (SIGNATURE |coerce| (|#1| (|Integer|)))
 (SIGNATURE |convert| ((|InputForm|) |#1|))
 (SIGNATURE |convert| ((|Pattern| (|Integer|)) |#1|))
 (SIGNATURE |convert| ((|Pattern| (|Float|)) |#1|))
 (SIGNATURE |coerce| (|#1| |#1|)) (SIGNATURE |gcd| (|#1| |#1| |#1|))
 (SIGNATURE |gcd| (|#1| (|List| |#1|))) (SIGNATURE |retract| (|#2| |#1|))
 (SIGNATURE |retractIfCan| ((|Union| |#2| #1#) |#1|))
 (SIGNATURE |coerce| (|#1| |#2|))
 (SIGNATURE |coerce| (|#1| (|Fraction| (|Integer|))))
 (SIGNATURE |retractIfCan| ((|Union| (|Fraction| (|Integer|)) #1#) |#1|))
 (SIGNATURE |retract| ((|Fraction| (|Integer|)) |#1|))
 (SIGNATURE |retractIfCan| ((|Union| (|Integer|) #1#) |#1|))
 (SIGNATURE |retract| ((|Integer|) |#1|)) (SIGNATURE |reductum| (|#1| |#1|))
 (SIGNATURE |leadingCoefficient| (|#2| |#1|))
 (SIGNATURE |coerce| ((|OutputForm|) |#1|)))
"/git/fricas/src/algebra/RPOLCAT.spad"
((|iexactQuo| (*1 *2 *2 *2)
  (AND (|ofCategory| *2 (|Ring|)) (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *5 (|OrderedSet|))
       (|isDomain| *1 (|RecursivePolynomialCategory&| *3 *2 *4 *5))
       (|ofCategory| *3 (|RecursivePolynomialCategory| *2 *4 *5)))))
((|tail| (($ $) 45)) (|supRittWu?| (((|Boolean|) $ $) 77))
 (|retractIfCan| (((|Union| (|Integer|) #1="failed") $) NIL)
  (((|Union| (|Fraction| (|Integer|)) #1#) $) NIL) (((|Union| |#2| #1#) $) NIL)
  (((|Union| |#4| #1#) $) NIL)
  (((|Union| $ "failed") (|Polynomial| (|Fraction| (|Integer|)))) 227)
  (((|Union| $ "failed") (|Polynomial| (|Integer|))) 226)
  (((|Union| $ "failed") (|Polynomial| |#2|)) 229))
 (|retract| (((|Integer|) $) NIL) (((|Fraction| (|Integer|)) $) NIL)
            ((|#2| $) NIL) ((|#4| $) NIL)
            (($ (|Polynomial| (|Fraction| (|Integer|)))) 215)
            (($ (|Polynomial| (|Integer|))) 234) (($ (|Polynomial| |#2|)) 231))
 (|reductum| (($ $) NIL) (($ $ |#4|) 43))
 (|reduced?| (((|Boolean|) $ $) 115) (((|Boolean|) $ (|List| $)) 116))
 (|quasiMonic?| (((|Boolean|) $) 56))
 (|pseudoDivide| (((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $) 110))
 (|primitivePart!| (($ $) 143)) (|primPartElseUnitCanonical!| (($ $) 139))
 (|primPartElseUnitCanonical| (($ $) 138))
 (|prem| (($ $ $) 82) (($ $ $ |#4|) 87))
 (|pquo| (($ $ $) 85) (($ $ $ |#4|) 89))
 (|normalized?| (((|Boolean|) $ $) 124) (((|Boolean|) $ (|List| $)) 125))
 (|mvar| ((|#4| $) 33)) (|monicModulo| (($ $ $) 113))
 (|monic?| (((|Boolean|) $) 55)) (|mdeg| (((|NonNegativeInteger|) $) 35))
 (|mainSquareFreePart| (($ $) 157)) (|mainPrimitivePart| (($ $) 154))
 (|mainMonomials| (((|List| $) $) 68)) (|mainMonomial| (($ $) 57))
 (|mainContent| (($ $) 150)) (|mainCoefficients| (((|List| $) $) 65))
 (|leastMonomial| (($ $) 59))
 (|leadingCoefficient| ((|#2| $) NIL) (($ $ |#4|) 38))
 (|lazyResidueClass|
  (((|Record| (|:| |polnum| $) (|:| |polden| $)
              (|:| |power| (|NonNegativeInteger|)))
    $ $)
   114))
 (|lazyPseudoDivide|
  (((|Record| (|:| |coef| $) (|:| |gap| (|NonNegativeInteger|))
              (|:| |quotient| $) (|:| |remainder| $))
    $ $)
   111)
  (((|Record| (|:| |coef| $) (|:| |gap| (|NonNegativeInteger|))
              (|:| |quotient| $) (|:| |remainder| $))
    $ $ |#4|)
   112))
 (|lazyPremWithDefault|
  (((|Record| (|:| |coef| $) (|:| |gap| (|NonNegativeInteger|))
              (|:| |remainder| $))
    $ $)
   107)
  (((|Record| (|:| |coef| $) (|:| |gap| (|NonNegativeInteger|))
              (|:| |remainder| $))
    $ $ |#4|)
   108))
 (|lazyPrem| (($ $ $) 92) (($ $ $ |#4|) 97))
 (|lazyPquo| (($ $ $) 93) (($ $ $ |#4|) 98))
 (|iteratedInitials| (((|List| $) $) 51))
 (|initiallyReduced?| (((|Boolean|) $ $) 121) (((|Boolean|) $ (|List| $)) 122))
 (|initiallyReduce| (($ $ $) 106)) (|init| (($ $) 37))
 (|infRittWu?| (((|Boolean|) $ $) 75)) (|iexactQuo| ((|#2| |#2| |#2|) 127))
 (|headReduced?| (((|Boolean|) $ $) 117) (((|Boolean|) $ (|List| $)) 119))
 (|headReduce| (($ $ $) 103)) (|head| (($ $) 40))
 (|gcd| (($ (|List| $)) NIL) (($ $ $) NIL) ((|#2| |#2| $) 147))
 (|exactQuotient!| (($ $ |#2|) NIL) (($ $ $) 136))
 (|exactQuotient| (($ $ |#2|) 131) (($ $ $) 134)) (|deepestTail| (($ $) 48))
 (|deepestInitial| (($ $) 52))
 (|convert| (((|Pattern| (|Float|)) $) NIL) (((|Pattern| (|Integer|)) $) NIL)
            (((|InputForm|) $) NIL)
            (($ (|Polynomial| (|Fraction| (|Integer|)))) 217)
            (($ (|Polynomial| (|Integer|))) 236) (($ (|Polynomial| |#2|)) 228)
            (((|String|) $) 253) (((|Polynomial| |#2|) $) 167))
 (|coerce| (((|OutputForm|) $) 30) (($ (|Fraction| (|Integer|))) NIL)
           (($ |#2|) NIL) (($ $) NIL) (($ (|Integer|)) NIL) (($ |#4|) NIL)
           (((|Polynomial| |#2|) $) 168))
 (|RittWuCompare| (((|Union| (|Boolean|) "failed") $ $) 74)))
((|HasCategory| |#2| '(|GcdDomain|)) (|HasCategory| |#2| '(|IntegralDomain|))
 (|HasCategory| |#2| (LIST '|RetractableTo| '(|Integer|)))
 (|HasCategory| |#2| (LIST '|Algebra| '(|Integer|)))
 (|HasCategory| |#2| (LIST '|Algebra| (LIST '|Fraction| '(|Integer|))))
 (|HasCategory| |#4| (LIST '|ConvertibleTo| '(|Symbol|))))
RPOLCAT-
((|constructor|
  (NIL
   "A category for general multi-variate polynomials with coefficients in a ring,{} variables in an ordered set,{} and exponents from an ordered abelian monoid,{} with a \\spadfun{sup} operation. When not constant,{} such a polynomial is viewed as a univariate polynomial in its main variable \\spad{w}. \\spad{r}. \\spad{t}. to the total ordering on the elements in the ordered set,{} so that some operations usually defined for univariate polynomials make sense here."))
 (|mainSquareFreePart|
  (($ $)
   "\\spad{mainSquareFreePart(p)} returns the square free part of \\spad{p} viewed as a univariate polynomial in its main variable and with coefficients in the polynomial ring generated by its other variables over \\spad{R}."))
 (|mainPrimitivePart|
  (($ $)
   "\\spad{mainPrimitivePart(p)} returns the primitive part of \\spad{p} viewed as a univariate polynomial in its main variable and with coefficients in the polynomial ring generated by its other variables over \\spad{R}."))
 (|mainContent|
  (($ $)
   "\\spad{mainContent(p)} returns the content of \\spad{p} viewed as a univariate polynomial in its main variable and with coefficients in the polynomial ring generated by its other variables over \\spad{R}."))
 (|primitivePart!|
  (($ $)
   "\\spad{primitivePart!(p)} replaces \\spad{p} by its primitive part."))
 (|gcd|
  ((|#2| |#2| $)
   "\\spad{gcd(r,{} p)} returns the \\spad{gcd} of \\spad{r} and the content of \\spad{p}."))
 (|iexactQuo|
  ((|#2| |#2| |#2|)
   "\\spad{iexactQuo(x,{} y)} should be local but conditional"))
 (|next_subResultant2|
  (($ $ $ $ $)
   "\\spad{next_subResultant2(p,{} q,{} z,{} s)} is the multivariate version of the operation \\spadopFrom{\\spad{next_sousResultant2}}{PseudoRemainderSequence} from the \\spadtype{PseudoRemainderSequence} constructor."))
 (|LazardQuotient2|
  (($ $ $ $ (|NonNegativeInteger|))
   "\\spad{LazardQuotient2(p,{} a,{} b,{} n)} returns \\spad{(a^(n-1) * p) exquo b^(n-1)} assuming that this quotient does not fail."))
 (|LazardQuotient|
  (($ $ $ (|NonNegativeInteger|))
   "\\spad{LazardQuotient(a,{} b,{} n)} returns \\spad{a^n exquo b^(n-1)} assuming that this quotient does not fail."))
 (|lastSubResultant|
  (($ $ $)
   "\\spad{lastSubResultant(a,{} b)} returns the last non-zero subresultant of \\spad{a} and \\spad{b} where \\spad{a} and \\spad{b} are assumed to have the same main variable \\spad{v} and are viewed as univariate polynomials in \\spad{v}."))
 (|subResultantChain|
  (((|List| $) $ $)
   "\\spad{subResultantChain(a,{} b)},{} where \\spad{a} and \\spad{b} are not constant polynomials with the same main variable,{} returns the subresultant chain of \\spad{a} and \\spad{b}."))
 (|resultant|
  (($ $ $)
   "\\spad{resultant(a,{} b)} computes the resultant of \\spad{a} and \\spad{b} where \\spad{a} and \\spad{b} are assumed to have the same main variable \\spad{v} and are viewed as univariate polynomials in \\spad{v}."))
 (|halfExtendedSubResultantGcd2|
  (((|Record| (|:| |gcd| $) (|:| |coef2| $)) $ $)
   "\\spad{halfExtendedSubResultantGcd2(a,{} b)} returns \\spad{[g,{} cb]} if \\spad{extendedSubResultantGcd(a,{} b)} returns \\spad{[g,{} ca,{} cb]} otherwise produces an error."))
 (|halfExtendedSubResultantGcd1|
  (((|Record| (|:| |gcd| $) (|:| |coef1| $)) $ $)
   "\\spad{halfExtendedSubResultantGcd1(a,{} b)} returns \\spad{[g,{} ca]} if \\spad{extendedSubResultantGcd(a,{} b)} returns \\spad{[g,{} ca,{} cb]} otherwise produces an error."))
 (|extendedSubResultantGcd|
  (((|Record| (|:| |gcd| $) (|:| |coef1| $) (|:| |coef2| $)) $ $)
   "\\spad{extendedSubResultantGcd(a,{} b)} returns \\spad{[ca,{} cb,{} r]} such that \\spad{r} is \\spad{subResultantGcd(a,{} b)} and we have \\spad{ca * a + cb * cb = r} ."))
 (|subResultantGcd|
  (($ $ $)
   "\\spad{subResultantGcd(a,{} b)} computes a \\spad{gcd} of \\spad{a} and \\spad{b} where \\spad{a} and \\spad{b} are assumed to have the same main variable \\spad{v} and are viewed as univariate polynomials in \\spad{v} with coefficients in the fraction field of the polynomial ring generated by their other variables over \\spad{R}."))
 (|exactQuotient!|
  (($ $ $)
   "\\spad{exactQuotient!(a,{} b)} replaces \\spad{a} by \\spad{exactQuotient(a,{} b)}")
  (($ $ |#2|)
   "\\spad{exactQuotient!(p,{} r)} replaces \\spad{p} by \\spad{exactQuotient(p,{} r)}."))
 (|exactQuotient|
  (($ $ $)
   "\\spad{exactQuotient(a,{} b)} computes the exact quotient of \\spad{a} by \\spad{b},{} which is assumed to be a divisor of \\spad{a}. No error is returned if this exact quotient fails!")
  (($ $ |#2|)
   "\\spad{exactQuotient(p,{} r)} computes the exact quotient of \\spad{p} by \\spad{r},{} which is assumed to be a divisor of \\spad{p}. No error is returned if this exact quotient fails!"))
 (|primPartElseUnitCanonical!|
  (($ $)
   "\\spad{primPartElseUnitCanonical!(p)} replaces \\spad{p} by \\spad{primPartElseUnitCanonical(p)}."))
 (|primPartElseUnitCanonical|
  (($ $)
   "\\spad{primPartElseUnitCanonical(p)} returns \\spad{primitivePart(p)} if \\spad{R} is a \\spad{gcd}-domain,{} otherwise \\spad{unitCanonical(p)}."))
 (|convert|
  (($ (|Polynomial| |#2|))
   "\\spad{convert(p)} returns the same as \\spad{retract(p)}.")
  (($ (|Polynomial| (|Integer|)))
   "\\spad{convert(p)} returns the same as \\spad{retract(p)}.")
  (($ (|Polynomial| (|Fraction| (|Integer|))))
   "\\spad{convert(p)} returns the same as \\spad{retract(p)}."))
 (|retract|
  (($ (|Polynomial| |#2|))
   "\\spad{retract(p)} returns \\spad{p} as an element of the current domain,{} if \\spad{retractIfCan(p)} does not return \"failed\",{} otherwise an error is produced.")
  (($ (|Polynomial| (|Integer|)))
   "\\spad{retract(p)} returns \\spad{p} as an element of the current domain,{} if \\spad{retractIfCan(p)} does not return \"failed\",{} otherwise an error is produced.")
  (($ (|Polynomial| (|Fraction| (|Integer|))))
   "\\spad{retract(p)} returns \\spad{p} as an element of the current domain,{} if \\spad{retractIfCan(p)} does not return \"failed\",{} otherwise an error is produced."))
 (|retractIfCan|
  (((|Union| $ "failed") (|Polynomial| |#2|))
   "\\spad{retractIfCan(p)} returns \\spad{p} as an element of the current domain,{} if all its variables belong to \\spad{V}.")
  (((|Union| $ "failed") (|Polynomial| (|Integer|)))
   "\\spad{retractIfCan(p)} returns \\spad{p} as an element of the current domain,{} if all its variables belong to \\spad{V}.")
  (((|Union| $ "failed") (|Polynomial| (|Fraction| (|Integer|))))
   "\\spad{retractIfCan(p)} returns \\spad{p} as an element of the current domain,{} if all its variables belong to \\spad{V}."))
 (|initiallyReduce|
  (($ $ $)
   "\\spad{initiallyReduce(a,{} b)} returns a polynomial \\spad{r} such that \\spad{initiallyReduced?(r,{} b)} holds and there exists an integer \\spad{e} such that \\spad{init(b)^e a - r} is zero modulo \\spad{b}."))
 (|headReduce|
  (($ $ $)
   "\\spad{headReduce(a,{} b)} returns a polynomial \\spad{r} such that \\spad{headReduced?(r,{} b)} holds and there exists an integer \\spad{e} such that \\spad{init(b)^e a - r} is zero modulo \\spad{b}."))
 (|lazyResidueClass|
  (((|Record| (|:| |polnum| $) (|:| |polden| $)
              (|:| |power| (|NonNegativeInteger|)))
    $ $)
   "\\spad{lazyResidueClass(a,{} b)} returns \\spad{[p,{} q,{} n]} where \\spad{p / q^n} represents the residue class of \\spad{a} modulo \\spad{b} and \\spad{p} is reduced \\spad{w}.\\spad{r}.\\spad{t}. \\spad{b} and \\spad{q} is \\spad{init(b)}."))
 (|monicModulo|
  (($ $ $)
   "\\spad{monicModulo(a,{} b)} computes \\spad{a mod b},{} if \\spad{b} is monic as univariate polynomial in its main variable."))
 (|pseudoDivide|
  (((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $)
   "\\spad{pseudoDivide(a,{} b)} computes \\spad{[pquo(a,{} b),{} prem(a,{} b)]},{} both polynomials viewed as univariate polynomials in the main variable of \\spad{b},{} if \\spad{b} is not a constant polynomial."))
 (|lazyPseudoDivide|
  (((|Record| (|:| |coef| $) (|:| |gap| (|NonNegativeInteger|))
              (|:| |quotient| $) (|:| |remainder| $))
    $ $ |#4|)
   "\\spad{lazyPseudoDivide(a,{} b,{} v)} returns \\spad{[c,{} g,{} q,{} r]} such that \\spad{r = lazyPrem(a,{} b,{} v)},{} \\spad{(c^g)*r = prem(a,{} b,{} v)} and \\spad{q} is the pseudo-quotient computed in this lazy pseudo-division.")
  (((|Record| (|:| |coef| $) (|:| |gap| (|NonNegativeInteger|))
              (|:| |quotient| $) (|:| |remainder| $))
    $ $)
   "\\spad{lazyPseudoDivide(a,{} b)} returns \\spad{[c,{} g,{} q,{} r]} such that \\spad{[c,{} g,{} r] = lazyPremWithDefault(a,{} b)} and \\spad{q} is the pseudo-quotient computed in this lazy pseudo-division."))
 (|lazyPremWithDefault|
  (((|Record| (|:| |coef| $) (|:| |gap| (|NonNegativeInteger|))
              (|:| |remainder| $))
    $ $ |#4|)
   "\\spad{lazyPremWithDefault(a,{} b,{} v)} returns \\spad{[c,{} g,{} r]} such that \\spad{r = lazyPrem(a,{} b,{} v)} and \\spad{(c^g)*r = prem(a,{} b,{} v)}.")
  (((|Record| (|:| |coef| $) (|:| |gap| (|NonNegativeInteger|))
              (|:| |remainder| $))
    $ $)
   "\\spad{lazyPremWithDefault(a,{} b)} returns \\spad{[c,{} g,{} r]} such that \\spad{r = lazyPrem(a,{} b)} and \\spad{(c^g)*r = prem(a,{} b)}."))
 (|lazyPquo|
  (($ $ $ |#4|)
   "\\spad{lazyPquo(a,{} b,{} v)} returns the polynomial \\spad{q} such that \\spad{lazyPseudoDivide(a,{} b,{} v)} returns \\spad{[c,{} g,{} q,{} r]}.")
  (($ $ $)
   "\\spad{lazyPquo(a,{} b)} returns the polynomial \\spad{q} such that \\spad{lazyPseudoDivide(a,{} b)} returns \\spad{[c,{} g,{} q,{} r]}."))
 (|lazyPrem|
  (($ $ $ |#4|)
   "\\spad{lazyPrem(a,{} b,{} v)} returns the polynomial \\spad{r} reduced \\spad{w}.\\spad{r}.\\spad{t}. \\spad{b} viewed as univariate polynomials in the variable \\spad{v} such that \\spad{b} divides \\spad{init(b)^e a - r} where \\spad{e} is the number of steps of this pseudo-division.")
  (($ $ $)
   "\\spad{lazyPrem(a,{} b)} returns the polynomial \\spad{r} reduced \\spad{w}.\\spad{r}.\\spad{t}. \\spad{b} and such that \\spad{b} divides \\spad{init(b)^e a - r} where \\spad{e} is the number of steps of this pseudo-division."))
 (|pquo|
  (($ $ $ |#4|)
   "\\spad{pquo(a,{} b,{} v)} computes the pseudo-quotient of \\spad{a} by \\spad{b},{} both viewed as univariate polynomials in \\spad{v}.")
  (($ $ $)
   "\\spad{pquo(a,{} b)} computes the pseudo-quotient of \\spad{a} by \\spad{b},{} both viewed as univariate polynomials in the main variable of \\spad{b}."))
 (|prem|
  (($ $ $ |#4|)
   "\\spad{prem(a,{} b,{} v)} computes the pseudo-remainder of \\spad{a} by \\spad{b},{} both viewed as univariate polynomials in \\spad{v}.")
  (($ $ $)
   "\\spad{prem(a,{} b)} computes the pseudo-remainder of \\spad{a} by \\spad{b},{} both viewed as univariate polynomials in the main variable of \\spad{b}."))
 (|normalized?|
  (((|Boolean|) $ (|List| $))
   "\\spad{normalized?(q,{} lp)} returns \\spad{true} iff \\spad{normalized?(q,{} p)} holds for every \\spad{p} in \\spad{lp}.")
  (((|Boolean|) $ $)
   "\\spad{normalized?(a,{} b)} returns \\spad{true} iff \\spad{a} and its iterated initials have degree zero \\spad{w}.\\spad{r}.\\spad{t}. the main variable of \\spad{b}"))
 (|initiallyReduced?|
  (((|Boolean|) $ (|List| $))
   "\\spad{initiallyReduced?(q,{} lp)} returns \\spad{true} iff \\spad{initiallyReduced?(q,{} p)} holds for every \\spad{p} in \\spad{lp}.")
  (((|Boolean|) $ $)
   "\\spad{initiallyReduced?(a,{} b)} returns \\spad{false} iff there exists an iterated initial of \\spad{a} which is not reduced \\spad{w}.\\spad{r}.\\spad{t} \\spad{b}."))
 (|headReduced?|
  (((|Boolean|) $ (|List| $))
   "\\spad{headReduced?(q,{} lp)} returns \\spad{true} iff \\spad{headReduced?(q,{} p)} holds for every \\spad{p} in \\spad{lp}.")
  (((|Boolean|) $ $)
   "\\spad{headReduced?(a,{} b)} returns \\spad{true} iff \\spad{degree(head(a),{} mvar(b)) < mdeg(b)}."))
 (|reduced?|
  (((|Boolean|) $ (|List| $))
   "\\spad{reduced?(q,{} lp)} returns \\spad{true} iff \\spad{reduced?(q,{} p)} holds for every \\spad{p} in \\spad{lp}.")
  (((|Boolean|) $ $)
   "\\spad{reduced?(a,{} b)} returns \\spad{true} iff \\spad{degree(a,{} mvar(b)) < mdeg(b)}."))
 (|supRittWu?|
  (((|Boolean|) $ $)
   "\\spad{supRittWu?(a,{} b)} returns \\spad{true} if \\spad{a} is greater than \\spad{b} \\spad{w}.\\spad{r}.\\spad{t}. the Ritt and Wu Wen Tsun ordering using the refinement of Lazard."))
 (|infRittWu?|
  (((|Boolean|) $ $)
   "\\spad{infRittWu?(a,{} b)} returns \\spad{true} if \\spad{a} is less than \\spad{b} \\spad{w}.\\spad{r}.\\spad{t}. the Ritt and Wu Wen Tsun ordering using the refinement of Lazard."))
 (|RittWuCompare|
  (((|Union| (|Boolean|) "failed") $ $)
   "\\spad{RittWuCompare(a,{}b)} returns \\spad{\"failed\"} if \\spad{a} and \\spad{b} have same rank \\spad{w}.\\spad{r}.\\spad{t}. Ritt and Wu Wen Tsun ordering using the refinement of Lazard,{} otherwise returns \\spad{infRittWu?(a,{} b)}."))
 (|mainMonomials|
  (((|List| $) $)
   "\\spad{mainMonomials(p)} returns an error if \\spad{p} is \\spad{O},{} otherwise,{} if \\spad{p} belongs to \\spad{R} returns [1],{} otherwise returns the list of the monomials of \\spad{p},{} where \\spad{p} is viewed as a univariate polynomial in its main variable."))
 (|mainCoefficients|
  (((|List| $) $)
   "\\spad{mainCoefficients(p)} returns an error if \\spad{p} is \\spad{O},{} otherwise,{} if \\spad{p} belongs to \\spad{R} returns [\\spad{p}],{} otherwise returns the list of the coefficients of \\spad{p},{} where \\spad{p} is viewed as a univariate polynomial in its main variable."))
 (|leastMonomial|
  (($ $)
   "\\spad{leastMonomial(p)} returns an error if \\spad{p} is \\spad{O},{} otherwise,{} if \\spad{p} belongs to \\spad{R} returns \\spad{1},{} otherwise,{} the monomial of \\spad{p} with lowest degree,{} where \\spad{p} is viewed as a univariate polynomial in its main variable."))
 (|mainMonomial|
  (($ $)
   "\\spad{mainMonomial(p)} returns an error if \\spad{p} is \\spad{O},{} otherwise,{} if \\spad{p} belongs to \\spad{R} returns \\spad{1},{} otherwise,{} \\spad{mvar(p)} raised to the power \\spad{mdeg(p)}."))
 (|quasiMonic?|
  (((|Boolean|) $)
   "\\spad{quasiMonic?(p)} returns \\spad{false} if \\spad{p} belongs to \\spad{R},{} otherwise returns \\spad{true} iff the initial of \\spad{p} lies in the base ring \\spad{R}."))
 (|monic?|
  (((|Boolean|) $)
   "\\spad{monic?(p)} returns \\spad{false} if \\spad{p} belongs to \\spad{R},{} otherwise returns \\spad{true} iff \\spad{p} is monic as a univariate polynomial in its main variable."))
 (|reductum|
  (($ $ |#4|)
   "\\spad{reductum(p,{} v)} returns the reductum of \\spad{p},{} where \\spad{p} is viewed as a univariate polynomial in \\spad{v}."))
 (|leadingCoefficient|
  (($ $ |#4|)
   "\\spad{leadingCoefficient(p,{} v)} returns the leading coefficient of \\spad{p},{} where \\spad{p} is viewed as A univariate polynomial in \\spad{v}."))
 (|deepestInitial|
  (($ $)
   "\\spad{deepestInitial(p)} returns an error if \\spad{p} belongs to \\spad{R},{} otherwise returns the last term of \\spad{iteratedInitials(p)}."))
 (|iteratedInitials|
  (((|List| $) $)
   "\\spad{iteratedInitials(p)} returns \\spad{[]} if \\spad{p} belongs to \\spad{R},{} otherwise returns the list of the iterated initials of \\spad{p}."))
 (|deepestTail|
  (($ $)
   "\\spad{deepestTail(p)} returns \\spad{0} if \\spad{p} belongs to \\spad{R},{} otherwise returns tail(\\spad{p}),{} if \\spad{tail(p)} belongs to \\spad{R} or \\spad{mvar(tail(p)) < mvar(p)},{} otherwise returns \\spad{deepestTail(tail(p))}."))
 (|tail|
  (($ $)
   "\\spad{tail(p)} returns its reductum,{} where \\spad{p} is viewed as a univariate polynomial in its main variable."))
 (|head|
  (($ $)
   "\\spad{head(p)} returns \\spad{p} if \\spad{p} belongs to \\spad{R},{} otherwise returns its leading term (monomial in the FriCAS sense),{} where \\spad{p} is viewed as a univariate polynomial in its main variable."))
 (|init|
  (($ $)
   "\\spad{init(p)} returns an error if \\spad{p} belongs to \\spad{R},{} otherwise returns its leading coefficient,{} where \\spad{p} is viewed as a univariate polynomial in its main variable."))
 (|mdeg|
  (((|NonNegativeInteger|) $)
   "\\spad{mdeg(p)} returns an error if \\spad{p} is \\spad{0},{} otherwise,{} if \\spad{p} belongs to \\spad{R} returns \\spad{0},{} otherwise,{} returns the degree of \\spad{p} in its main variable."))
 (|mvar|
  ((|#4| $)
   "\\spad{mvar(p)} returns an error if \\spad{p} belongs to \\spad{R},{} otherwise returns its main variable \\spad{w}. \\spad{r}. \\spad{t}. to the total ordering on the elements in \\spad{V}.")))
(("documentation" 0 14535) ("ancestors" 0 NIL) ("parents" 0 NIL)
 ("abbreviation" 0 14526) ("predicates" 0 14205) ("superDomain" 0 NIL)
 ("operationAlist" 0 10658) ("modemaps" 0 10373) ("sourceFile" 0 10334)
 ("constructorCategory" 0 5399) ("constructorModemap" 0 70)
 ("constructorKind" 0 61) ("constructorForm" 0 20))