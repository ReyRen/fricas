)abbrev domain BINFILE BinaryFile
++ Author: Barry M. Trager
++ Date Created: 1993
++ Basic Operations: writeByte! readByte! readByteIfCan!
++ Related Constructors:
++ Also See:
++ AMS Classifications:
++ Keywords:
++ References:
++ Description:
++   This domain provides an implementation of binary files. Data is
++   accessed one byte at a time as a small integer.

BinaryFile : Cat == Def where

    Cat == FileCategory(FileName, SingleInteger) with
        readIfCan! : % -> Union(SingleInteger, "failed")
            ++ readIfCan!(f) returns a value from the file f, if possible.
            ++ If f is not open for reading, or if f is at the end of file
            ++ then \spad{"failed"} is the result.

--      "#": % -> SingleInteger
--          ++ #(f) returns the length of the file f in bytes.

        position : % -> SingleInteger
            ++ position(f) returns the current byte-position in the file f.

        position! : (%, SingleInteger) -> SingleInteger
            ++ position!(f, i) sets the current byte-position to i.

    Def == File(SingleInteger) add
        FileState ==> SExpression

        Rep := Record(fileName :   FileName,    _
                      fileState :  FileState,   _
                      fileIOmode : String)

--      direc : Symbol := INTERN("DIRECTION","KEYWORD")$Lisp
--      input : Symbol := INTERN("INPUT","KEYWORD")$Lisp
--      output : Symbol := INTERN("OUTPUT","KEYWORD")$Lisp
--      eltype : Symbol := INTERN("ELEMENT-TYPE","KEYWORD")$Lisp
--      bytesize : SExpression := LIST(QUOTE(UNSIGNED$Lisp)$Lisp, 8)$Lisp


        defstream(fn : FileName, mode : String) : FileState ==
            mode = "input"  =>
              not readable? fn => error ["File is not readable", fn]
              BINARY_OPEN_INPUT(fn::String)$Lisp
--            OPEN(fn::String, direc, input, eltype, bytesize)$Lisp
            mode = "output" =>
              not writable? fn => error ["File is not writable", fn]
              BINARY_OPEN_OUTPUT(fn::String)$Lisp
--            OPEN(fn::String, direc, output, eltype, bytesize)$Lisp
            error ["IO mode must be input or output", mode]

        open(fname, mode) ==
            fstream := defstream(fname, mode)
            [fname, fstream, mode]

        reopen!(f, mode) ==
            fname := f.fileName
            f.fileState := defstream(fname, mode)
            f.fileIOmode := mode
            f

        close! f ==
            f.fileIOmode = "output" =>
                 BINARY_CLOSE_OUTPUT()$Lisp
                 f
            f.fileIOmode = "input" =>
                  BINARY_CLOSE_INPUT()$Lisp
                  f
            error "file must be in read or write state"

        read! f ==
            f.fileIOmode ~= "input"  => error "File not in read state"
            BINARY_SELECT_INPUT(f.fileState)$Lisp
            BINARY_READBYTE()$Lisp
--          READ_-BYTE(f.fileState)$Lisp
        readIfCan! f ==
            f.fileIOmode ~= "input"  => error "File not in read state"
            BINARY_SELECT_INPUT(f.fileState)$Lisp
            n : SingleInteger := BINARY_READBYTE()$Lisp
            n = -1 => "failed"
            n::Union(SingleInteger,"failed")
--          READ_-BYTE(f.fileState, NIL$Lisp,
--                   "failed"::Union(SingleInteger,"failed"))$Lisp
        write!(f, x) ==
            f.fileIOmode ~= "output" => error "File not in write state"
            x < 0 or x>255 => error "integer cannot be represented as a byte"
            BINARY_PRINBYTE(x)$Lisp
--          WRITE_-BYTE(x, f.fileState)$Lisp
            x

--      # f == FILE_-LENGTH(f.fileState)$Lisp
        position f ==
           f.fileIOmode ~= "input"  => error "file must be in read state"
           FILE_-POSITION(f.fileState)$Lisp
        position!(f, i) ==
           f.fileIOmode ~= "input"  => error "file must be in read state"
           (FILE_-POSITION(f.fileState, i)$Lisp ; i)

