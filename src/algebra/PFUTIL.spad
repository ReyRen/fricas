)abbrev package PFUTIL PartialFractionUtilities
PartialFractionUtilities(F, UP) : Exports == Implementation where
  F : Field
  UP : UnivariatePolynomialCategory F
  Exports ==> with

      decompose : (UP, List(UP)) -> List(UP)
        ++ decompose(n, [p1, ..., pn]) returns numerators of partial
        ++ fraction decomposition of n divided by product of pi-s
        ++ Note: decomposition is assumed to have no whole part.

  Implementation ==> add

    FUP ==> Factored(UP)
    PFUP ==> PartialFraction(UP)

    decompose(nn : UP, dens : List(UP)) : List(UP) ==
        fdens := [nilFactor(nden, 1)$FUP for nden in dens]
        nd := reduce(_*, fdens, 1)
        pfr := partialFraction(nn, nd)$PFUP
        wholePart(pfr) ~= 0 =>
            error "decompose: wholePart(pfr) ~= 0"
        res : List(UP) := []
        for fden in fdens repeat
            for c in fractionalTerms(pfr) repeat
                if c.den = fden then
                    res := cons(c.num, res)
                    break
        reverse!(res)



