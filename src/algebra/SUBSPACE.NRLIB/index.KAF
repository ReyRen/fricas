20090               (|SubSpace| |n| R)
|domain|
(((|SubSpace| |#1| |#2|)
  (|Join| (|SetCategory|)
          (CATEGORY |domain| (SIGNATURE |leaf?| ((|Boolean|) $))
           (SIGNATURE |root?| ((|Boolean|) $))
           (SIGNATURE |internal?| ((|Boolean|) $)) (SIGNATURE |new| ($))
           (SIGNATURE |subspace| ($)) (SIGNATURE |birth| ($ $))
           (SIGNATURE |child| ($ $ (|NonNegativeInteger|)))
           (SIGNATURE |children| ((|List| $) $))
           (SIGNATURE |numberOfChildren| ((|NonNegativeInteger|) $))
           (SIGNATURE |shallowCopy| ($ $)) (SIGNATURE |deepCopy| ($ $))
           (SIGNATURE |merge| ($ $ $)) (SIGNATURE |merge| ($ (|List| $)))
           (SIGNATURE |separate| ((|List| $) $))
           (SIGNATURE |addPoint|
            ($ $ (|List| (|NonNegativeInteger|)) (|Point| |#2|)))
           (SIGNATURE |addPoint2| ($ $ (|Point| |#2|)))
           (SIGNATURE |addPointLast|
            ($ $ $ (|Point| |#2|) (|NonNegativeInteger|)))
           (SIGNATURE |modifyPoint|
            ($ $ (|List| (|NonNegativeInteger|)) (|Point| |#2|)))
           (SIGNATURE |addPoint|
            ($ $ (|List| (|NonNegativeInteger|)) (|NonNegativeInteger|)))
           (SIGNATURE |modifyPoint|
            ($ $ (|List| (|NonNegativeInteger|)) (|NonNegativeInteger|)))
           (SIGNATURE |addPoint| ((|NonNegativeInteger|) $ (|Point| |#2|)))
           (SIGNATURE |modifyPoint|
            ($ $ (|NonNegativeInteger|) (|Point| |#2|)))
           (SIGNATURE |closeComponent|
            ($ $ (|List| (|NonNegativeInteger|)) (|Boolean|)))
           (SIGNATURE |defineProperty|
            ($ $ (|List| (|NonNegativeInteger|))
             (|SubSpaceComponentProperty|)))
           (SIGNATURE |traverse| ($ $ (|List| (|NonNegativeInteger|))))
           (SIGNATURE |extractPoint| ((|Point| |#2|) $))
           (SIGNATURE |extractIndex| ((|NonNegativeInteger|) $))
           (SIGNATURE |extractClosed| ((|Boolean|) $))
           (SIGNATURE |extractProperty| ((|SubSpaceComponentProperty|) $))
           (SIGNATURE |level| ((|NonNegativeInteger|) $))
           (SIGNATURE |parent| ($ $))
           (SIGNATURE |pointData| ((|List| (|Point| |#2|)) $))))
  (|PositiveInteger|) (|Ring|))
 (T |SubSpace|))
(|Join| (|SetCategory|)
        (CATEGORY |domain| (SIGNATURE |leaf?| ((|Boolean|) $))
         (SIGNATURE |root?| ((|Boolean|) $))
         (SIGNATURE |internal?| ((|Boolean|) $)) (SIGNATURE |new| ($))
         (SIGNATURE |subspace| ($)) (SIGNATURE |birth| ($ $))
         (SIGNATURE |child| ($ $ (|NonNegativeInteger|)))
         (SIGNATURE |children| ((|List| $) $))
         (SIGNATURE |numberOfChildren| ((|NonNegativeInteger|) $))
         (SIGNATURE |shallowCopy| ($ $)) (SIGNATURE |deepCopy| ($ $))
         (SIGNATURE |merge| ($ $ $)) (SIGNATURE |merge| ($ (|List| $)))
         (SIGNATURE |separate| ((|List| $) $))
         (SIGNATURE |addPoint|
          ($ $ (|List| (|NonNegativeInteger|)) (|Point| |#2|)))
         (SIGNATURE |addPoint2| ($ $ (|Point| |#2|)))
         (SIGNATURE |addPointLast|
          ($ $ $ (|Point| |#2|) (|NonNegativeInteger|)))
         (SIGNATURE |modifyPoint|
          ($ $ (|List| (|NonNegativeInteger|)) (|Point| |#2|)))
         (SIGNATURE |addPoint|
          ($ $ (|List| (|NonNegativeInteger|)) (|NonNegativeInteger|)))
         (SIGNATURE |modifyPoint|
          ($ $ (|List| (|NonNegativeInteger|)) (|NonNegativeInteger|)))
         (SIGNATURE |addPoint| ((|NonNegativeInteger|) $ (|Point| |#2|)))
         (SIGNATURE |modifyPoint| ($ $ (|NonNegativeInteger|) (|Point| |#2|)))
         (SIGNATURE |closeComponent|
          ($ $ (|List| (|NonNegativeInteger|)) (|Boolean|)))
         (SIGNATURE |defineProperty|
          ($ $ (|List| (|NonNegativeInteger|)) (|SubSpaceComponentProperty|)))
         (SIGNATURE |traverse| ($ $ (|List| (|NonNegativeInteger|))))
         (SIGNATURE |extractPoint| ((|Point| |#2|) $))
         (SIGNATURE |extractIndex| ((|NonNegativeInteger|) $))
         (SIGNATURE |extractClosed| ((|Boolean|) $))
         (SIGNATURE |extractProperty| ((|SubSpaceComponentProperty|) $))
         (SIGNATURE |level| ((|NonNegativeInteger|) $))
         (SIGNATURE |parent| ($ $))
         (SIGNATURE |pointData| ((|List| (|Point| |#2|)) $))))
"/git/fricas/src/algebra/SUBSPACE.spad"
((|leaf?| (*1 *2 *1)
  (AND (|isDomain| *2 (|Boolean|)) (|isDomain| *1 (|SubSpace| *3 *4))
       (|ofType| *3 (|PositiveInteger|)) (|ofCategory| *4 (|Ring|))))
 (|root?| (*1 *2 *1)
  (AND (|isDomain| *2 (|Boolean|)) (|isDomain| *1 (|SubSpace| *3 *4))
       (|ofType| *3 (|PositiveInteger|)) (|ofCategory| *4 (|Ring|))))
 (|internal?| (*1 *2 *1)
  (AND (|isDomain| *2 (|Boolean|)) (|isDomain| *1 (|SubSpace| *3 *4))
       (|ofType| *3 (|PositiveInteger|)) (|ofCategory| *4 (|Ring|))))
 (|new| (*1 *1)
  (AND (|isDomain| *1 (|SubSpace| *2 *3)) (|ofType| *2 (|PositiveInteger|))
       (|ofCategory| *3 (|Ring|))))
 (|subspace| (*1 *1)
  (AND (|isDomain| *1 (|SubSpace| *2 *3)) (|ofType| *2 (|PositiveInteger|))
       (|ofCategory| *3 (|Ring|))))
 (|birth| (*1 *1 *1)
  (AND (|isDomain| *1 (|SubSpace| *2 *3)) (|ofType| *2 (|PositiveInteger|))
       (|ofCategory| *3 (|Ring|))))
 (|child| (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|NonNegativeInteger|))
       (|isDomain| *1 (|SubSpace| *3 *4)) (|ofType| *3 (|PositiveInteger|))
       (|ofCategory| *4 (|Ring|))))
 (|children| (*1 *2 *1)
  (AND (|isDomain| *2 (|List| (|SubSpace| *3 *4)))
       (|isDomain| *1 (|SubSpace| *3 *4)) (|ofType| *3 (|PositiveInteger|))
       (|ofCategory| *4 (|Ring|))))
 (|numberOfChildren| (*1 *2 *1)
  (AND (|isDomain| *2 (|NonNegativeInteger|))
       (|isDomain| *1 (|SubSpace| *3 *4)) (|ofType| *3 (|PositiveInteger|))
       (|ofCategory| *4 (|Ring|))))
 (|shallowCopy| (*1 *1 *1)
  (AND (|isDomain| *1 (|SubSpace| *2 *3)) (|ofType| *2 (|PositiveInteger|))
       (|ofCategory| *3 (|Ring|))))
 (|deepCopy| (*1 *1 *1)
  (AND (|isDomain| *1 (|SubSpace| *2 *3)) (|ofType| *2 (|PositiveInteger|))
       (|ofCategory| *3 (|Ring|))))
 (|merge| (*1 *1 *1 *1)
  (AND (|isDomain| *1 (|SubSpace| *2 *3)) (|ofType| *2 (|PositiveInteger|))
       (|ofCategory| *3 (|Ring|))))
 (|merge| (*1 *1 *2)
  (AND (|isDomain| *2 (|List| (|SubSpace| *3 *4)))
       (|isDomain| *1 (|SubSpace| *3 *4)) (|ofType| *3 (|PositiveInteger|))
       (|ofCategory| *4 (|Ring|))))
 (|separate| (*1 *2 *1)
  (AND (|isDomain| *2 (|List| (|SubSpace| *3 *4)))
       (|isDomain| *1 (|SubSpace| *3 *4)) (|ofType| *3 (|PositiveInteger|))
       (|ofCategory| *4 (|Ring|))))
 (|addPoint| (*1 *1 *1 *2 *3)
  (AND (|isDomain| *2 (|List| (|NonNegativeInteger|)))
       (|isDomain| *3 (|Point| *5)) (|ofCategory| *5 (|Ring|))
       (|isDomain| *1 (|SubSpace| *4 *5)) (|ofType| *4 (|PositiveInteger|))))
 (|addPoint2| (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|Point| *4)) (|ofCategory| *4 (|Ring|))
       (|isDomain| *1 (|SubSpace| *3 *4)) (|ofType| *3 (|PositiveInteger|))))
 (|addPointLast| (*1 *1 *1 *1 *2 *3)
  (AND (|isDomain| *2 (|Point| *5)) (|isDomain| *3 (|NonNegativeInteger|))
       (|ofCategory| *5 (|Ring|)) (|isDomain| *1 (|SubSpace| *4 *5))
       (|ofType| *4 (|PositiveInteger|))))
 (|modifyPoint| (*1 *1 *1 *2 *3)
  (AND (|isDomain| *2 (|List| (|NonNegativeInteger|)))
       (|isDomain| *3 (|Point| *5)) (|ofCategory| *5 (|Ring|))
       (|isDomain| *1 (|SubSpace| *4 *5)) (|ofType| *4 (|PositiveInteger|))))
 (|addPoint| (*1 *1 *1 *2 *3)
  (AND (|isDomain| *2 (|List| (|NonNegativeInteger|)))
       (|isDomain| *3 (|NonNegativeInteger|))
       (|isDomain| *1 (|SubSpace| *4 *5)) (|ofType| *4 (|PositiveInteger|))
       (|ofCategory| *5 (|Ring|))))
 (|modifyPoint| (*1 *1 *1 *2 *3)
  (AND (|isDomain| *2 (|List| (|NonNegativeInteger|)))
       (|isDomain| *3 (|NonNegativeInteger|))
       (|isDomain| *1 (|SubSpace| *4 *5)) (|ofType| *4 (|PositiveInteger|))
       (|ofCategory| *5 (|Ring|))))
 (|addPoint| (*1 *2 *1 *3)
  (AND (|isDomain| *3 (|Point| *5)) (|ofCategory| *5 (|Ring|))
       (|isDomain| *2 (|NonNegativeInteger|))
       (|isDomain| *1 (|SubSpace| *4 *5)) (|ofType| *4 (|PositiveInteger|))))
 (|modifyPoint| (*1 *1 *1 *2 *3)
  (AND (|isDomain| *2 (|NonNegativeInteger|)) (|isDomain| *3 (|Point| *5))
       (|ofCategory| *5 (|Ring|)) (|isDomain| *1 (|SubSpace| *4 *5))
       (|ofType| *4 (|PositiveInteger|))))
 (|closeComponent| (*1 *1 *1 *2 *3)
  (AND (|isDomain| *2 (|List| (|NonNegativeInteger|)))
       (|isDomain| *3 (|Boolean|)) (|isDomain| *1 (|SubSpace| *4 *5))
       (|ofType| *4 (|PositiveInteger|)) (|ofCategory| *5 (|Ring|))))
 (|defineProperty| (*1 *1 *1 *2 *3)
  (AND (|isDomain| *2 (|List| (|NonNegativeInteger|)))
       (|isDomain| *3 (|SubSpaceComponentProperty|))
       (|isDomain| *1 (|SubSpace| *4 *5)) (|ofType| *4 (|PositiveInteger|))
       (|ofCategory| *5 (|Ring|))))
 (|traverse| (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|List| (|NonNegativeInteger|)))
       (|isDomain| *1 (|SubSpace| *3 *4)) (|ofType| *3 (|PositiveInteger|))
       (|ofCategory| *4 (|Ring|))))
 (|extractPoint| (*1 *2 *1)
  (AND (|isDomain| *2 (|Point| *4)) (|isDomain| *1 (|SubSpace| *3 *4))
       (|ofType| *3 (|PositiveInteger|)) (|ofCategory| *4 (|Ring|))))
 (|extractIndex| (*1 *2 *1)
  (AND (|isDomain| *2 (|NonNegativeInteger|))
       (|isDomain| *1 (|SubSpace| *3 *4)) (|ofType| *3 (|PositiveInteger|))
       (|ofCategory| *4 (|Ring|))))
 (|extractClosed| (*1 *2 *1)
  (AND (|isDomain| *2 (|Boolean|)) (|isDomain| *1 (|SubSpace| *3 *4))
       (|ofType| *3 (|PositiveInteger|)) (|ofCategory| *4 (|Ring|))))
 (|extractProperty| (*1 *2 *1)
  (AND (|isDomain| *2 (|SubSpaceComponentProperty|))
       (|isDomain| *1 (|SubSpace| *3 *4)) (|ofType| *3 (|PositiveInteger|))
       (|ofCategory| *4 (|Ring|))))
 (|level| (*1 *2 *1)
          (AND (|isDomain| *2 (|NonNegativeInteger|))
               (|isDomain| *1 (|SubSpace| *3 *4))
               (|ofType| *3 (|PositiveInteger|)) (|ofCategory| *4 (|Ring|))))
 (|parent| (*1 *1 *1)
  (AND (|isDomain| *1 (|SubSpace| *2 *3)) (|ofType| *2 (|PositiveInteger|))
       (|ofCategory| *3 (|Ring|))))
 (|pointData| (*1 *2 *1)
  (AND (|isDomain| *2 (|List| (|Point| *4))) (|isDomain| *1 (|SubSpace| *3 *4))
       (|ofType| *3 (|PositiveInteger|)) (|ofCategory| *4 (|Ring|)))))
((~= (((|Boolean|) $ $) NIL))
 (|traverse| (($ $ (|List| (|NonNegativeInteger|))) 62)) (|subspace| (($) 24))
 (|shallowCopy| (($ $) 37)) (|separate| (((|List| $) $) 46))
 (|root?| (((|Boolean|) $) 16)) (|pointData| (((|List| (|Point| |#2|)) $) 69))
 (|parent| (($ $) 63)) (|numberOfChildren| (((|NonNegativeInteger|) $) 32))
 (|new| (($) 23))
 (|modifyPoint| (($ $ (|List| (|NonNegativeInteger|)) (|Point| |#2|)) 55)
  (($ $ (|List| (|NonNegativeInteger|)) (|NonNegativeInteger|)) 56)
  (($ $ (|NonNegativeInteger|) (|Point| |#2|)) 58))
 (|merge| (($ $ $) 43) (($ (|List| $)) 45))
 (|level| (((|NonNegativeInteger|) $) 70)) (|leaf?| (((|Boolean|) $) 15))
 (|latex| (((|String|) $) NIL)) (|internal?| (((|Boolean|) $) 17))
 (|hashUpdate!| (((|HashState|) (|HashState|) $) NIL))
 (|hash| (((|SingleInteger|) $) NIL))
 (|extractProperty| (((|SubSpaceComponentProperty|) $) 68))
 (|extractPoint| (((|Point| |#2|) $) 64))
 (|extractIndex| (((|NonNegativeInteger|) $) 65))
 (|extractClosed| (((|Boolean|) $) 67))
 (|defineProperty|
  (($ $ (|List| (|NonNegativeInteger|)) (|SubSpaceComponentProperty|)) 61))
 (|deepCopy| (($ $) 38)) (|coerce| (((|OutputForm|) $) 84))
 (|closeComponent| (($ $ (|List| (|NonNegativeInteger|)) (|Boolean|)) 60))
 (|children| (((|List| $) $) 11)) (|child| (($ $ (|NonNegativeInteger|)) 31))
 (|birth| (($ $) 27))
 (|addPointLast| (($ $ $ (|Point| |#2|) (|NonNegativeInteger|)) 51))
 (|addPoint2| (($ $ (|Point| |#2|)) 50))
 (|addPoint| (($ $ (|List| (|NonNegativeInteger|)) (|Point| |#2|)) 49)
  (($ $ (|List| (|NonNegativeInteger|)) (|NonNegativeInteger|)) 53)
  (((|NonNegativeInteger|) $ (|Point| |#2|)) 54))
 (= (((|Boolean|) $ $) 75)))
SUBSPACE
(((|SetCategory|) . T))
(((|BasicType|) . T) ((|CoercibleTo| (|OutputForm|)) . T) ((|SetCategory|) . T))
((|constructor| (NIL "This domain \\undocumented"))
 (|pointData|
  (((|List| (|Point| |#2|)) $)
   "\\spad{pointData(s)} returns the list of points from the point data field of the 3 dimensional subspace \\spad{s}."))
 (|parent|
  (($ $)
   "\\spad{parent(s)} returns the subspace which is the parent of the indicated 3 dimensional subspace \\spad{s}. If \\spad{s} is the top level subspace an error message is returned."))
 (|level|
  (((|NonNegativeInteger|) $)
   "\\spad{level(s)} returns a non negative integer which is the current level field of the indicated 3 dimensional subspace \\spad{s}."))
 (|extractProperty|
  (((|SubSpaceComponentProperty|) $)
   "\\spad{extractProperty(s)} returns the property of domain \\spadtype{SubSpaceComponentProperty} of the indicated 3 dimensional subspace \\spad{s}."))
 (|extractClosed|
  (((|Boolean|) $)
   "\\spad{extractClosed(s)} returns the \\spadtype{Boolean} value of the closed property for the indicated 3 dimensional subspace \\spad{s}. If the property is closed,{} \\spad{True} is returned,{} otherwise \\spad{False} is returned."))
 (|extractIndex|
  (((|NonNegativeInteger|) $)
   "\\spad{extractIndex(s)} returns a non negative integer which is the current index of the 3 dimensional subspace \\spad{s}."))
 (|extractPoint|
  (((|Point| |#2|) $)
   "\\spad{extractPoint(s)} returns the point which is given by the current index location into the point data field of the 3 dimensional subspace \\spad{s}."))
 (|traverse|
  (($ $ (|List| (|NonNegativeInteger|)))
   "\\spad{traverse(s,{} \\spad{li})} follows the branch list of the 3 dimensional subspace,{} \\spad{s},{} along the path dictated by the list of non negative integers,{} \\spad{li},{} which points to the component which has been traversed to. The subspace,{} \\spad{s},{} is returned,{} where \\spad{s} is now the subspace pointed to by \\spad{li}."))
 (|defineProperty|
  (($ $ (|List| (|NonNegativeInteger|)) (|SubSpaceComponentProperty|))
   "\\spad{defineProperty(s,{} \\spad{li},{} p)} defines the component property in the 3 dimensional subspace,{} \\spad{s},{} to be that of \\spad{p},{} where \\spad{p} is of the domain \\spadtype{SubSpaceComponentProperty}. The list of non negative integers,{} \\spad{li},{} dictates the path to follow,{} or,{} to look at it another way,{} points to the component whose property is being defined. The subspace,{} \\spad{s},{} is returned with the component property definition."))
 (|closeComponent|
  (($ $ (|List| (|NonNegativeInteger|)) (|Boolean|))
   "\\spad{closeComponent(s,{} \\spad{li},{} b)} sets the property of the component in the 3 dimensional subspace,{} \\spad{s},{} to be closed if \\spad{b} is \\spad{true},{} or open if \\spad{b} is \\spad{false}. The list of non negative integers,{} \\spad{li},{} dictates the path to follow,{} or,{} to look at it another way,{} points to the component whose closed property is to be set. The subspace,{} \\spad{s},{} is returned with the component property modification."))
 (|modifyPoint|
  (($ $ (|NonNegativeInteger|) (|Point| |#2|))
   "\\spad{modifyPoint(s,{} ind,{} p)} modifies the point referenced by the index location,{} \\spad{ind},{} by replacing it with the point,{} \\spad{p} in the 3 dimensional subspace,{} \\spad{s}. An error message occurs if \\spad{s} is empty,{} otherwise the subspace \\spad{s} is returned with the point modification.")
  (($ $ (|List| (|NonNegativeInteger|)) (|NonNegativeInteger|))
   "\\spad{modifyPoint(s,{} \\spad{li},{} i)} replaces an existing point in the 3 dimensional subspace,{} \\spad{s},{} with the 4 dimensional point indicated by the index location,{} \\spad{i}. The list of non negative integers,{} \\spad{li},{} dictates the path to follow,{} or,{} to look at it another way,{} points to the component in which the existing point is to be modified. An error message occurs if \\spad{s} is empty,{} otherwise the subspace \\spad{s} is returned with the point modification.")
  (($ $ (|List| (|NonNegativeInteger|)) (|Point| |#2|))
   "\\spad{modifyPoint(s,{} \\spad{li},{} p)} replaces an existing point in the 3 dimensional subspace,{} \\spad{s},{} with the 4 dimensional point,{} \\spad{p}. The list of non negative integers,{} \\spad{li},{} dictates the path to follow,{} or,{} to look at it another way,{} points to the component in which the existing point is to be modified. An error message occurs if \\spad{s} is empty,{} otherwise the subspace \\spad{s} is returned with the point modification."))
 (|addPointLast|
  (($ $ $ (|Point| |#2|) (|NonNegativeInteger|))
   "\\spad{addPointLast(s,{} s2,{} \\spad{li},{} p)} adds the 4 dimensional point,{} \\spad{p},{} to the 3 dimensional subspace,{} \\spad{s}. \\spad{s2} point to the end of the subspace \\spad{s}. \\spad{n} is the path in the \\spad{s2} component. The subspace \\spad{s} is returned with the additional point."))
 (|addPoint2|
  (($ $ (|Point| |#2|))
   "\\spad{addPoint2(s,{} p)} adds the 4 dimensional point,{} \\spad{p},{} to the 3 dimensional subspace,{} \\spad{s}. The subspace \\spad{s} is returned with the additional point."))
 (|addPoint|
  (((|NonNegativeInteger|) $ (|Point| |#2|))
   "\\spad{addPoint(s,{} p)} adds the point,{} \\spad{p},{} to the 3 dimensional subspace,{} \\spad{s},{} and returns the new total number of points in \\spad{s}.")
  (($ $ (|List| (|NonNegativeInteger|)) (|NonNegativeInteger|))
   "\\spad{addPoint(s,{} \\spad{li},{} i)} adds the 4 dimensional point indicated by the index location,{} \\spad{i},{} to the 3 dimensional subspace,{} \\spad{s}. The list of non negative integers,{} \\spad{li},{} dictates the path to follow,{} or,{} to look at it another way,{} points to the component in which the point is to be added. It\\spad{'s} length should range from 0 to \\spad{n - 1} where \\spad{n} is the dimension of the subspace. If the length is \\spad{n - 1},{} then a specific lowest level component is being referenced. If it is less than \\spad{n - 1},{} then some higher level component (0 indicates top level component) is being referenced and a component of that level with the desired point is created. The subspace \\spad{s} is returned with the additional point.")
  (($ $ (|List| (|NonNegativeInteger|)) (|Point| |#2|))
   "\\spad{addPoint(s,{} \\spad{li},{} p)} adds the 4 dimensional point,{} \\spad{p},{} to the 3 dimensional subspace,{} \\spad{s}. The list of non negative integers,{} \\spad{li},{} dictates the path to follow,{} or,{} to look at it another way,{} points to the component in which the point is to be added. It\\spad{'s} length should range from 0 to \\spad{n - 1} where \\spad{n} is the dimension of the subspace. If the length is \\spad{n - 1},{} then a specific lowest level component is being referenced. If it is less than \\spad{n - 1},{} then some higher level component (0 indicates top level component) is being referenced and a component of that level with the desired point is created. The subspace \\spad{s} is returned with the additional point."))
 (|separate|
  (((|List| $) $)
   "\\spad{separate(s)} makes each of the components of the \\spadtype{SubSpace},{} \\spad{s},{} into a list of separate and distinct subspaces and returns the list."))
 (|merge|
  (($ (|List| $))
   "\\spad{merge(ls)} a list of subspaces,{} \\spad{ls},{} into one subspace.")
  (($ $ $)
   "\\spad{merge(s1,{} s2)} the subspaces \\spad{s1} and \\spad{s2} into a single subspace."))
 (|deepCopy| (($ $) "\\spad{deepCopy(x)} \\undocumented"))
 (|shallowCopy| (($ $) "\\spad{shallowCopy(x)} \\undocumented"))
 (|numberOfChildren|
  (((|NonNegativeInteger|) $) "\\spad{numberOfChildren(x)} \\undocumented"))
 (|children| (((|List| $) $) "\\spad{children(x)} \\undocumented"))
 (|child|
  (($ $ (|NonNegativeInteger|)) "\\spad{child(x,{} n)} \\undocumented"))
 (|birth| (($ $) "\\spad{birth(x)} \\undocumented"))
 (|subspace| (($) "\\spad{subspace()} \\undocumented"))
 (|new| (($) "\\spad{new()} \\undocumented"))
 (|internal?| (((|Boolean|) $) "\\spad{internal?(x)} \\undocumented"))
 (|root?| (((|Boolean|) $) "\\spad{root?(x)} \\undocumented"))
 (|leaf?| (((|Boolean|) $) "\\spad{leaf?(x)} \\undocumented")))
(("documentation" 0 11965) ("ancestors" 0 11884) ("parents" 0 11860)
 ("abbreviation" 0 11851) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 10186) ("modemaps" 0 4279) ("sourceFile" 0 4239)
 ("constructorCategory" 0 2229) ("constructorModemap" 0 48)
 ("constructorKind" 0 39) ("constructorForm" 0 20))