6054                (|DifferentialVariableCategory| S)
|category|
(((|DifferentialVariableCategory| |#1|) (|Category|) (|OrderedSet|))
 (T |DifferentialVariableCategory|))
(|Join| (|OrderedSet|) (|RetractableTo| |t#1|)
        (CATEGORY |domain|
         (SIGNATURE |makeVariable| ($ |t#1| (|NonNegativeInteger|)))
         (SIGNATURE |order| ((|NonNegativeInteger|) $))
         (SIGNATURE |variable| (|t#1| $))
         (SIGNATURE |weight| ((|NonNegativeInteger|) $))
         (SIGNATURE |differentiate| ($ $))
         (SIGNATURE |differentiate| ($ $ (|NonNegativeInteger|)))
         (SIGNATURE |coerce| ($ |t#1|))))
"/git/fricas/src/algebra/DVARCAT.spad"
((|coerce| (*1 *1 *2)
           (AND (|ofCategory| *1 (|DifferentialVariableCategory| *2))
                (|ofCategory| *2 (|OrderedSet|))))
 (|makeVariable| (*1 *1 *2 *3)
  (AND (|isDomain| *3 (|NonNegativeInteger|))
       (|ofCategory| *1 (|DifferentialVariableCategory| *2))
       (|ofCategory| *2 (|OrderedSet|))))
 (|order| (*1 *2 *1)
  (AND (|ofCategory| *1 (|DifferentialVariableCategory| *3))
       (|ofCategory| *3 (|OrderedSet|))
       (|isDomain| *2 (|NonNegativeInteger|))))
 (|variable| (*1 *2 *1)
  (AND (|ofCategory| *1 (|DifferentialVariableCategory| *2))
       (|ofCategory| *2 (|OrderedSet|))))
 (|weight| (*1 *2 *1)
  (AND (|ofCategory| *1 (|DifferentialVariableCategory| *3))
       (|ofCategory| *3 (|OrderedSet|))
       (|isDomain| *2 (|NonNegativeInteger|))))
 (|differentiate| (*1 *1 *1)
  (AND (|ofCategory| *1 (|DifferentialVariableCategory| *2))
       (|ofCategory| *2 (|OrderedSet|))))
 (|differentiate| (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|NonNegativeInteger|))
       (|ofCategory| *1 (|DifferentialVariableCategory| *3))
       (|ofCategory| *3 (|OrderedSet|)))))
((~= (((|Boolean|) $ $) 6)) (|weight| (((|NonNegativeInteger|) $) 6))
 (|variable| ((|#1| $) 6)) (|smaller?| (((|Boolean|) $ $) 6))
 (|retractIfCan| (((|Union| |#1| "failed") $) 6)) (|retract| ((|#1| $) 6))
 (|order| (((|NonNegativeInteger|) $) 6)) (|min| (($ $ $) 6))
 (|max| (($ $ $) 6)) (|makeVariable| (($ |#1| (|NonNegativeInteger|)) 6))
 (|latex| (((|String|) $) 6))
 (|hashUpdate!| (((|HashState|) (|HashState|) $) 6))
 (|hash| (((|SingleInteger|) $) 6))
 (|differentiate| (($ $) 6) (($ $ (|NonNegativeInteger|)) 6))
 (|coerce| (((|OutputForm|) $) 6) (($ |#1|) 6)) (>= (((|Boolean|) $ $) 6))
 (> (((|Boolean|) $ $) 6)) (= (((|Boolean|) $ $) 6)) (<= (((|Boolean|) $ $) 6))
 (< (((|Boolean|) $ $) 6)))
DVARCAT
(((|OrderedSet|) . T) ((|RetractableTo| |#1|) . T))
(((|BasicType|) . T) ((|CoercibleTo| (|OutputForm|)) . T) ((|Comparable|) . T)
 ((|OrderedSet|) . T) ((|PartialOrder|) . T) ((|RetractableTo| |#1|) . T)
 ((|SetCategory|) . T))
((|constructor|
  (NIL
   "\\spadtype{DifferentialVariableCategory} constructs the set of derivatives of a given set of (ordinary) differential indeterminates. If \\spad{x},{} ...,{} \\spad{y} is an ordered set of differential indeterminates,{} and the prime notation is used for differentiation,{} then the set of derivatives (including zero-th order) of the differential indeterminates is \\spad{x},{} \\spad{x'},{} \\spad{x''},{} ...,{} \\spad{y},{} \\spad{y'},{} \\spad{y''},{} ... (Note: in the interpreter,{} the \\spad{n}-th derivative of \\spad{y} is displayed as \\spad{y} with a subscript \\spad{n}.) This set is viewed as a set of algebraic indeterminates,{} totally ordered in a way compatible with differentiation and the given order on the differential indeterminates. Such a total order is called a ranking of the differential indeterminates. \\blankline A domain in this category is needed to construct a differential polynomial domain. Differential polynomials are ordered by a ranking on the derivatives,{} and by an order (extending the ranking) on on the set of differential monomials. One may thus associate a domain in this category with a ranking of the differential indeterminates,{} just as one associates a domain in the category \\spadtype{OrderedAbelianMonoidSup} with an ordering of the set of monomials in a set of algebraic indeterminates. The ranking is specified through the binary relation \\spadfun{<}. For example,{} one may define one derivative to be less than another by lexicographically comparing first the \\spadfun{order},{} then the given order of the differential indeterminates appearing in the derivatives. This is the default implementation. \\blankline The notion of weight generalizes that of degree. A polynomial domain may be made into a graded ring if a weight function is given on the set of indeterminates,{} Very often,{} a grading is the first step in ordering the set of monomials. For differential polynomial domains,{} this constructor provides a function \\spadfun{weight},{} which allows the assignment of a non-negative number to each derivative of a differential indeterminate. For example,{} one may define the weight of a derivative to be simply its \\spadfun{order} (this is the default assignment). This weight function can then be extended to the set of all differential polynomials,{} providing a graded ring structure."))
 (|coerce|
  (($ |#1|)
   "\\spad{coerce(s)} returns \\spad{s},{} viewed as the zero-th order derivative of \\spad{s}."))
 (|differentiate|
  (($ $ (|NonNegativeInteger|))
   "\\spad{differentiate(v,{} n)} returns the \\spad{n}-th derivative of \\spad{v}.")
  (($ $) "\\spad{differentiate(v)} returns the derivative of \\spad{v}."))
 (|weight|
  (((|NonNegativeInteger|) $)
   "\\spad{weight(v)} returns the weight of the derivative \\spad{v}."))
 (|variable|
  ((|#1| $)
   "\\spad{variable(v)} returns \\spad{s} if \\spad{v} is any derivative of the differential indeterminate \\spad{s}."))
 (|order|
  (((|NonNegativeInteger|) $)
   "\\spad{order(v)} returns \\spad{n} if \\spad{v} is the \\spad{n}-th derivative of any differential indeterminate."))
 (|makeVariable|
  (($ |#1| (|NonNegativeInteger|))
   "\\spad{makeVariable(s,{} n)} returns the \\spad{n}-th derivative of a differential indeterminate \\spad{s} as an algebraic indeterminate.")))
(("documentation" 0 2709) ("ancestors" 0 2532) ("parents" 0 2480)
 ("abbreviation" 0 2472) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 1765) ("modemaps" 0 660) ("sourceFile" 0 621)
 ("constructorCategory" 0 172) ("constructorModemap" 0 66)
 ("constructorKind" 0 55) ("constructorForm" 0 20))