10233               (MAKEPROP '|FiniteFieldCategory| 'NILADIC T)
(|FiniteFieldCategory|)
|category|
(((|FiniteFieldCategory|) (|Category|)) (T |FiniteFieldCategory|))
(|Join| (|FieldOfPrimeCharacteristic|) (|Finite|) (|StepThrough|)
        (|DifferentialRing|) (|PolynomialFactorizationExplicit|)
        (CATEGORY |domain| (SIGNATURE |charthRoot| ($ $))
         (SIGNATURE |factorsOfCyclicGroupSize|
          ((|List|
            (|Record| (|:| |factor| (|Integer|))
                      (|:| |exponent| (|NonNegativeInteger|))))))
         (SIGNATURE |tableForDiscreteLogarithm|
          ((|Table| (|PositiveInteger|) (|NonNegativeInteger|)) (|Integer|)))
         (SIGNATURE |createPrimitiveElement| ($))
         (SIGNATURE |primitiveElement| ($))
         (SIGNATURE |primitive?| ((|Boolean|) $))
         (SIGNATURE |discreteLog| ((|NonNegativeInteger|) $))
         (SIGNATURE |order| ((|PositiveInteger|) $))
         (SIGNATURE |representationType|
          ((|Union| "prime" "polynomial" "normal" "cyclic")))))
"/git/fricas/src/algebra/FFIELDC.spad"
((|charthRoot| (*1 *1 *1) (|ofCategory| *1 (|FiniteFieldCategory|)))
 (|factorsOfCyclicGroupSize| (*1 *2)
  (AND (|ofCategory| *1 (|FiniteFieldCategory|))
       (|isDomain| *2
                   (|List|
                    (|Record| (|:| |factor| (|Integer|))
                              (|:| |exponent| (|NonNegativeInteger|)))))))
 (|tableForDiscreteLogarithm| (*1 *2 *3)
  (AND (|ofCategory| *1 (|FiniteFieldCategory|)) (|isDomain| *3 (|Integer|))
       (|isDomain| *2 (|Table| (|PositiveInteger|) (|NonNegativeInteger|)))))
 (|createPrimitiveElement| (*1 *1) (|ofCategory| *1 (|FiniteFieldCategory|)))
 (|primitiveElement| (*1 *1) (|ofCategory| *1 (|FiniteFieldCategory|)))
 (|primitive?| (*1 *2 *1)
  (AND (|ofCategory| *1 (|FiniteFieldCategory|)) (|isDomain| *2 (|Boolean|))))
 (|discreteLog| (*1 *2 *1)
  (AND (|ofCategory| *1 (|FiniteFieldCategory|))
       (|isDomain| *2 (|NonNegativeInteger|))))
 (|order| (*1 *2 *1)
  (AND (|ofCategory| *1 (|FiniteFieldCategory|))
       (|isDomain| *2 (|PositiveInteger|))))
 (|representationType| (*1 *2)
  (AND (|ofCategory| *1 (|FiniteFieldCategory|))
       (|isDomain| *2 (|Union| "prime" "polynomial" "normal" "cyclic")))))
((~= (((|Boolean|) $ $) 6)) (|zero?| (((|Boolean|) $) 6))
 (|unitNormal|
  (((|Record| (|:| |unit| $) (|:| |canonical| $) (|:| |associate| $)) $) 6))
 (|unitCanonical| (($ $) 6)) (|unit?| (((|Boolean|) $) 6))
 (|tableForDiscreteLogarithm|
  (((|Table| (|PositiveInteger|) (|NonNegativeInteger|)) (|Integer|)) 6))
 (|subtractIfCan| (((|Union| $ "failed") $ $) 6))
 (|squareFreePolynomial|
  (((|Factored| (|SparseUnivariatePolynomial| $))
    (|SparseUnivariatePolynomial| $))
   6))
 (|squareFreePart| (($ $) 6)) (|squareFree| (((|Factored| $) $) 6))
 (|solveLinearPolynomialEquation|
  (((|Union| (|List| (|SparseUnivariatePolynomial| $)) #1="failed")
    (|List| (|SparseUnivariatePolynomial| $)) (|SparseUnivariatePolynomial| $))
   6))
 (|smaller?| (((|Boolean|) $ $) 6)) (|sizeLess?| (((|Boolean|) $ $) 6))
 (|size| (((|NonNegativeInteger|)) 6)) (|sample| (($) 6 T CONST))
 (|rightRecip| (((|Union| $ #2="failed") $) 6))
 (|rightPower| (($ $ (|PositiveInteger|)) 6) (($ $ (|NonNegativeInteger|)) 6))
 (|representationType| (((|Union| "prime" "polynomial" "normal" "cyclic")) 6))
 (|rem| (($ $ $) 6)) (|recip| (((|Union| $ #2#) $) 6)) (|random| (($) 6))
 (|quo| (($ $ $) 6))
 (|principalIdeal|
  (((|Record| (|:| |coef| (|List| $)) (|:| |generator| $)) (|List| $)) 6))
 (|primitiveElement| (($) 6)) (|primitive?| (((|Boolean|) $) 6))
 (|primeFrobenius| (($ $) 6) (($ $ (|NonNegativeInteger|)) 6))
 (|prime?| (((|Boolean|) $) 6))
 (|order| (((|OnePointCompletion| (|PositiveInteger|)) $) 6)
  (((|PositiveInteger|) $) 6))
 (|opposite?| (((|Boolean|) $ $) 6)) (|one?| (((|Boolean|) $) 6))
 (|nextItem| (((|Union| $ "failed") $) 6))
 (|multiEuclidean| (((|Union| (|List| $) #3="failed") (|List| $) $) 6))
 (|lookup| (((|PositiveInteger|) $) 6)) (|leftRecip| (((|Union| $ #2#) $) 6))
 (|leftPower| (($ $ (|PositiveInteger|)) 6) (($ $ (|NonNegativeInteger|)) 6))
 (|lcmCoef|
  (((|Record| (|:| |llcm_res| $) (|:| |coeff1| $) (|:| |coeff2| $)) $ $) 6))
 (|lcm| (($ $ $) 6) (($ (|List| $)) 6)) (|latex| (((|String|) $) 6))
 (|inv| (($ $) 6)) (|init| (($) 6 T CONST))
 (|index| (($ (|PositiveInteger|)) 6))
 (|hashUpdate!| (((|HashState|) (|HashState|) $) 6))
 (|hash| (((|SingleInteger|) $) 6))
 (|gcdPolynomial|
  (((|SparseUnivariatePolynomial| $) (|SparseUnivariatePolynomial| $)
    (|SparseUnivariatePolynomial| $))
   6))
 (|gcd| (($ $ $) 6) (($ (|List| $)) 6))
 (|factorsOfCyclicGroupSize|
  (((|List|
     (|Record| (|:| |factor| (|Integer|))
               (|:| |exponent| (|NonNegativeInteger|)))))
   6))
 (|factorSquareFreePolynomial|
  (((|Factored| (|SparseUnivariatePolynomial| $))
    (|SparseUnivariatePolynomial| $))
   6))
 (|factorPolynomial|
  (((|Factored| (|SparseUnivariatePolynomial| $))
    (|SparseUnivariatePolynomial| $))
   6))
 (|factor| (((|Factored| $) $) 6))
 (|extendedEuclidean|
  (((|Record| (|:| |coef1| $) (|:| |coef2| $) (|:| |generator| $)) $ $) 6)
  (((|Union| (|Record| (|:| |coef1| $) (|:| |coef2| $)) #3#) $ $ $) 6))
 (|exquo| (((|Union| $ "failed") $ $) 6))
 (|expressIdealMember| (((|Union| (|List| $) "failed") (|List| $) $) 6))
 (|euclideanSize| (((|NonNegativeInteger|) $) 6))
 (|enumerate| (((|List| $)) 6))
 (|divide| (((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $) 6))
 (|discreteLog| (((|Union| (|NonNegativeInteger|) "failed") $ $) 6)
  (((|NonNegativeInteger|) $) 6))
 (|differentiate| (($ $ (|NonNegativeInteger|)) 6) (($ $) 6))
 (|createPrimitiveElement| (($) 6)) (|convert| (((|InputForm|) $) 6))
 (|conditionP|
  (((|Union| (|Vector| $) #1#) (|Matrix| $)) 6
   (|has| $ (|CharacteristicNonZero|))))
 (|commutator| (($ $ $) 6))
 (|coerce| (((|OutputForm|) $) 6) (($ (|Integer|)) 6) (($ $) 6)
           (($ (|Fraction| (|Integer|))) 6))
 (|charthRoot| (((|Union| $ "failed") $) 6) (($ $) 6))
 (|characteristic| (((|NonNegativeInteger|)) 6)) (|associator| (($ $ $ $) 6))
 (|associates?| (((|Boolean|) $ $) 6)) (|antiCommutator| (($ $ $) 6))
 (|annihilate?| (((|Boolean|) $ $) 6))
 (^ (($ $ (|PositiveInteger|)) 6) (($ $ (|NonNegativeInteger|)) 6)
  (($ $ (|Integer|)) 6))
 (|Zero| (($) 6 T CONST)) (|One| (($) 6 T CONST))
 (D (($ $ (|NonNegativeInteger|)) 6) (($ $) 6)) (= (((|Boolean|) $ $) 6))
 (/ (($ $ $) 6)) (- (($ $ $) 6) (($ $) 6)) (+ (($ $ $) 6))
 (* (($ (|PositiveInteger|) $) 6) (($ $ $) 6) (($ (|Integer|) $) 6)
    (($ (|NonNegativeInteger|) $) 6) (($ $ (|Fraction| (|Integer|))) 6)
    (($ (|Fraction| (|Integer|)) $) 6)))
FFIELDC
(((|FieldOfPrimeCharacteristic|) . T) ((|Finite|) . T) ((|StepThrough|) . T)
 ((|DifferentialRing|) . T) ((|PolynomialFactorizationExplicit|) . T))
(((|AbelianGroup|) . T) ((|AbelianMonoid|) . T) ((|AbelianSemiGroup|) . T)
 ((|Algebra| (|Fraction| (|Integer|))) . T) ((|Algebra| $) . T)
 ((|BasicType|) . T) ((|BiModule| |t#1| |t#1|) . T) ((|BiModule| $ $) . T)
 ((|CancellationAbelianMonoid|) . T) ((|CharacteristicNonZero|) . T)
 ((|CoercibleTo| (|OutputForm|)) . T) ((|CommutativeRing|) . T)
 ((|CommutativeStar|) . T) ((|Comparable|) . T)
 ((|ConvertibleTo| (|InputForm|)) . T) ((|DifferentialRing|) . T)
 ((|DivisionRing|) . T) ((|EntireRing|) . T) ((|EuclideanDomain|) . T)
 ((|Field|) . T) ((|FieldOfPrimeCharacteristic|) . T) ((|Finite|) . T)
 ((|GcdDomain|) . T) ((|IntegralDomain|) . T) ((|LeftModule| |t#1|) . T)
 ((|LeftOreRing|) . T) ((|Magma|) . T) ((|MagmaWithUnit|) . T)
 ((|Module| |t#1|) . T) ((|Monoid|) . T) ((|NonAssociativeRing|) . T)
 ((|NonAssociativeRng|) . T) ((|NonAssociativeSemiRing|) . T)
 ((|NonAssociativeSemiRng|) . T) ((|PolynomialFactorizationExplicit|) . T)
 ((|PrincipalIdealDomain|) . T) ((|RightModule| |t#2|) . T) ((|Ring|) . T)
 ((|Rng|) . T) ((|SemiGroup|) . T) ((|SemiRing|) . T) ((|SemiRng|) . T)
 ((|SetCategory|) . T) ((|StepThrough|) . T) ((|TwoSidedRecip|) . T)
 ((|UniqueFactorizationDomain|) . T) ((|canonicalUnitNormal|) . T)
 ((|canonicalsClosed|) . T) ((|noZeroDivisors|) . T) ((|unitsKnown|) . T))
((|constructor| (NIL "FiniteFieldCategory is the category of finite fields"))
 (|representationType|
  (((|Union| "prime" "polynomial" "normal" "cyclic"))
   "\\spad{representationType()} returns the type of the representation,{} one of: \\spad{prime},{} \\spad{polynomial},{} \\spad{normal},{} or \\spad{cyclic}."))
 (|order|
  (((|PositiveInteger|) $)
   "\\spad{order(b)} computes the order of an element \\spad{b} in the multiplicative group of the field. Error: if \\spad{b} equals 0."))
 (|discreteLog|
  (((|NonNegativeInteger|) $)
   "\\spad{discreteLog(a)} computes the discrete logarithm of \\spad{a} with respect to \\spad{primitiveElement()} of the field."))
 (|primitive?|
  (((|Boolean|) $)
   "\\spad{primitive?(b)} tests whether the element \\spad{b} is a generator of the (cyclic) multiplicative group of the field,{} \\spadignore{i.e.} is a primitive element. Implementation Note: see \\spad{ch}.IX.1.3,{} th.2 in \\spad{D}. Lipson."))
 (|primitiveElement|
  (($)
   "\\spad{primitiveElement()} returns a primitive element stored in a global variable in the domain. At first call,{} the primitive element is computed by calling \\spadfun{createPrimitiveElement}."))
 (|createPrimitiveElement|
  (($)
   "\\spad{createPrimitiveElement()} computes a generator of the (cyclic) multiplicative group of the field."))
 (|tableForDiscreteLogarithm|
  (((|Table| (|PositiveInteger|) (|NonNegativeInteger|)) (|Integer|))
   "\\spad{tableForDiscreteLogarithm(a,{} n)} returns a table of the discrete logarithms of \\spad{a^0} up to \\spad{a^(n-1)} which,{} called with key \\spad{lookup(a^i)} returns \\spad{i} for \\spad{i} in \\spad{0..n-1}. Error: if not called for prime divisors of order of \\indented{7}{multiplicative group.}"))
 (|factorsOfCyclicGroupSize|
  (((|List|
     (|Record| (|:| |factor| (|Integer|))
               (|:| |exponent| (|NonNegativeInteger|)))))
   "\\spad{factorsOfCyclicGroupSize()} returns the factorization of size()\\spad{-1}"))
 (|charthRoot|
  (($ $)
   "\\spad{charthRoot(a)} takes the characteristic'th root of {\\em a}. Note: such a root is alway defined in finite fields.")))
(("documentation" 0 8107) ("ancestors" 0 6803) ("parents" 0 6655)
 ("abbreviation" 0 6647) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 2247) ("modemaps" 0 1066) ("sourceFile" 0 1027)
 ("constructorCategory" 0 167) ("constructorModemap" 0 100)
 ("constructorKind" 0 89) ("constructorForm" 0 65) ("NILADIC" 0 20))