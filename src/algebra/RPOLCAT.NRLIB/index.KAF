73632               (|RecursivePolynomialCategory| R E V)
|category|
(((|RecursivePolynomialCategory| |#1| |#2| |#3|) (|Category|) (|Ring|)
  (|OrderedAbelianMonoidSup|) (|OrderedSet|))
 (T |RecursivePolynomialCategory|))
(|Join| (|PolynomialCategory| |t#1| |t#2| |t#3|)
        (CATEGORY |domain| (SIGNATURE |mvar| (|t#3| $))
         (SIGNATURE |mdeg| ((|NonNegativeInteger|) $)) (SIGNATURE |init| ($ $))
         (SIGNATURE |head| ($ $)) (SIGNATURE |tail| ($ $))
         (SIGNATURE |deepestTail| ($ $))
         (SIGNATURE |iteratedInitials| ((|List| $) $))
         (SIGNATURE |deepestInitial| ($ $))
         (SIGNATURE |leadingCoefficient| ($ $ |t#3|))
         (SIGNATURE |reductum| ($ $ |t#3|))
         (SIGNATURE |monic?| ((|Boolean|) $))
         (SIGNATURE |quasiMonic?| ((|Boolean|) $))
         (SIGNATURE |mainMonomial| ($ $)) (SIGNATURE |leastMonomial| ($ $))
         (SIGNATURE |mainCoefficients| ((|List| $) $))
         (SIGNATURE |mainMonomials| ((|List| $) $))
         (SIGNATURE |RittWuCompare| ((|Union| (|Boolean|) "failed") $ $))
         (SIGNATURE |infRittWu?| ((|Boolean|) $ $))
         (SIGNATURE |supRittWu?| ((|Boolean|) $ $))
         (SIGNATURE |reduced?| ((|Boolean|) $ $))
         (SIGNATURE |reduced?| ((|Boolean|) $ (|List| $)))
         (SIGNATURE |headReduced?| ((|Boolean|) $ $))
         (SIGNATURE |headReduced?| ((|Boolean|) $ (|List| $)))
         (SIGNATURE |initiallyReduced?| ((|Boolean|) $ $))
         (SIGNATURE |initiallyReduced?| ((|Boolean|) $ (|List| $)))
         (SIGNATURE |normalized?| ((|Boolean|) $ $))
         (SIGNATURE |normalized?| ((|Boolean|) $ (|List| $)))
         (SIGNATURE |prem| ($ $ $)) (SIGNATURE |pquo| ($ $ $))
         (SIGNATURE |prem| ($ $ $ |t#3|)) (SIGNATURE |pquo| ($ $ $ |t#3|))
         (SIGNATURE |lazyPrem| ($ $ $)) (SIGNATURE |lazyPquo| ($ $ $))
         (SIGNATURE |lazyPrem| ($ $ $ |t#3|))
         (SIGNATURE |lazyPquo| ($ $ $ |t#3|))
         (SIGNATURE |lazyPremWithDefault|
          ((|Record| (|:| |coef| $) (|:| |gap| (|NonNegativeInteger|))
                     (|:| |remainder| $))
           $ $))
         (SIGNATURE |lazyPremWithDefault|
          ((|Record| (|:| |coef| $) (|:| |gap| (|NonNegativeInteger|))
                     (|:| |remainder| $))
           $ $ |t#3|))
         (SIGNATURE |lazyPseudoDivide|
          ((|Record| (|:| |coef| $) (|:| |gap| (|NonNegativeInteger|))
                     (|:| |quotient| $) (|:| |remainder| $))
           $ $))
         (SIGNATURE |lazyPseudoDivide|
          ((|Record| (|:| |coef| $) (|:| |gap| (|NonNegativeInteger|))
                     (|:| |quotient| $) (|:| |remainder| $))
           $ $ |t#3|))
         (SIGNATURE |pseudoDivide|
          ((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $))
         (SIGNATURE |monicModulo| ($ $ $))
         (SIGNATURE |lazyResidueClass|
          ((|Record| (|:| |polnum| $) (|:| |polden| $)
                     (|:| |power| (|NonNegativeInteger|)))
           $ $))
         (SIGNATURE |headReduce| ($ $ $)) (SIGNATURE |initiallyReduce| ($ $ $))
         (IF (|has| |t#3| (|ConvertibleTo| (|Symbol|)))
             (PROGN
              (ATTRIBUTE (|CoercibleTo| (|Polynomial| |t#1|)))
              (ATTRIBUTE (|ConvertibleTo| (|Polynomial| |t#1|)))
              (IF (|has| |t#1| (|Algebra| (|Fraction| (|Integer|))))
                  (PROGN
                   (SIGNATURE |retractIfCan|
                    ((|Union| $ "failed")
                     (|Polynomial| (|Fraction| (|Integer|)))))
                   (SIGNATURE |retract|
                    ($ (|Polynomial| (|Fraction| (|Integer|)))))
                   (SIGNATURE |convert|
                    ($ (|Polynomial| (|Fraction| (|Integer|))))))
                  |noBranch|)
              (IF (|has| |t#1| (|Algebra| (|Integer|)))
                  (PROGN
                   (SIGNATURE |retractIfCan|
                    ((|Union| $ "failed") (|Polynomial| (|Integer|))))
                   (SIGNATURE |retract| ($ (|Polynomial| (|Integer|))))
                   (SIGNATURE |convert| ($ (|Polynomial| (|Integer|)))))
                  |noBranch|)
              (SIGNATURE |retractIfCan|
               ((|Union| $ "failed") (|Polynomial| |t#1|)))
              (SIGNATURE |retract| ($ (|Polynomial| |t#1|)))
              (SIGNATURE |convert| ($ (|Polynomial| |t#1|)))
              (IF (|has| |t#1| (|RetractableTo| (|Integer|)))
                  (ATTRIBUTE (|ConvertibleTo| (|String|)))
                  |noBranch|))
             |noBranch|)
         (IF (|has| |t#1| (|IntegralDomain|))
             (PROGN
              (SIGNATURE |primPartElseUnitCanonical| ($ $))
              (SIGNATURE |primPartElseUnitCanonical!| ($ $))
              (SIGNATURE |exactQuotient| ($ $ |t#1|))
              (SIGNATURE |exactQuotient!| ($ $ |t#1|))
              (SIGNATURE |exactQuotient| ($ $ $))
              (SIGNATURE |exactQuotient!| ($ $ $))
              (SIGNATURE |subResultantGcd| ($ $ $))
              (SIGNATURE |extendedSubResultantGcd|
               ((|Record| (|:| |gcd| $) (|:| |coef1| $) (|:| |coef2| $)) $ $))
              (SIGNATURE |halfExtendedSubResultantGcd1|
               ((|Record| (|:| |gcd| $) (|:| |coef1| $)) $ $))
              (SIGNATURE |halfExtendedSubResultantGcd2|
               ((|Record| (|:| |gcd| $) (|:| |coef2| $)) $ $))
              (SIGNATURE |resultant| ($ $ $))
              (SIGNATURE |subResultantChain| ((|List| $) $ $))
              (SIGNATURE |lastSubResultant| ($ $ $))
              (SIGNATURE |LazardQuotient| ($ $ $ (|NonNegativeInteger|)))
              (SIGNATURE |LazardQuotient2| ($ $ $ $ (|NonNegativeInteger|)))
              (SIGNATURE |next_subResultant2| ($ $ $ $ $))
              (SIGNATURE |iexactQuo| (|t#1| |t#1| |t#1|)))
             |noBranch|)
         (IF (|has| |t#1| (|GcdDomain|))
             (PROGN
              (SIGNATURE |gcd| (|t#1| |t#1| $))
              (SIGNATURE |primitivePart!| ($ $))
              (SIGNATURE |mainContent| ($ $))
              (SIGNATURE |mainPrimitivePart| ($ $))
              (SIGNATURE |mainSquareFreePart| ($ $)))
             |noBranch|)))
"/git/fricas/src/algebra/RPOLCAT.spad"
((|mvar| (*1 *2 *1)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *3 *4 *2))
       (|ofCategory| *3 (|Ring|)) (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *2 (|OrderedSet|))))
 (|mdeg| (*1 *2 *1)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *3 *4 *5))
       (|ofCategory| *3 (|Ring|)) (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *5 (|OrderedSet|))
       (|isDomain| *2 (|NonNegativeInteger|))))
 (|init| (*1 *1 *1)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *2 *3 *4))
       (|ofCategory| *2 (|Ring|)) (|ofCategory| *3 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *4 (|OrderedSet|))))
 (|head| (*1 *1 *1)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *2 *3 *4))
       (|ofCategory| *2 (|Ring|)) (|ofCategory| *3 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *4 (|OrderedSet|))))
 (|tail| (*1 *1 *1)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *2 *3 *4))
       (|ofCategory| *2 (|Ring|)) (|ofCategory| *3 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *4 (|OrderedSet|))))
 (|deepestTail| (*1 *1 *1)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *2 *3 *4))
       (|ofCategory| *2 (|Ring|)) (|ofCategory| *3 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *4 (|OrderedSet|))))
 (|iteratedInitials| (*1 *2 *1)
  (AND (|ofCategory| *3 (|Ring|)) (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *5 (|OrderedSet|)) (|isDomain| *2 (|List| *1))
       (|ofCategory| *1 (|RecursivePolynomialCategory| *3 *4 *5))))
 (|deepestInitial| (*1 *1 *1)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *2 *3 *4))
       (|ofCategory| *2 (|Ring|)) (|ofCategory| *3 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *4 (|OrderedSet|))))
 (|leadingCoefficient| (*1 *1 *1 *2)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *3 *4 *2))
       (|ofCategory| *3 (|Ring|)) (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *2 (|OrderedSet|))))
 (|reductum| (*1 *1 *1 *2)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *3 *4 *2))
       (|ofCategory| *3 (|Ring|)) (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *2 (|OrderedSet|))))
 (|monic?| (*1 *2 *1)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *3 *4 *5))
       (|ofCategory| *3 (|Ring|)) (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *5 (|OrderedSet|)) (|isDomain| *2 (|Boolean|))))
 (|quasiMonic?| (*1 *2 *1)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *3 *4 *5))
       (|ofCategory| *3 (|Ring|)) (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *5 (|OrderedSet|)) (|isDomain| *2 (|Boolean|))))
 (|mainMonomial| (*1 *1 *1)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *2 *3 *4))
       (|ofCategory| *2 (|Ring|)) (|ofCategory| *3 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *4 (|OrderedSet|))))
 (|leastMonomial| (*1 *1 *1)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *2 *3 *4))
       (|ofCategory| *2 (|Ring|)) (|ofCategory| *3 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *4 (|OrderedSet|))))
 (|mainCoefficients| (*1 *2 *1)
  (AND (|ofCategory| *3 (|Ring|)) (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *5 (|OrderedSet|)) (|isDomain| *2 (|List| *1))
       (|ofCategory| *1 (|RecursivePolynomialCategory| *3 *4 *5))))
 (|mainMonomials| (*1 *2 *1)
  (AND (|ofCategory| *3 (|Ring|)) (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *5 (|OrderedSet|)) (|isDomain| *2 (|List| *1))
       (|ofCategory| *1 (|RecursivePolynomialCategory| *3 *4 *5))))
 (|RittWuCompare| (*1 *2 *1 *1)
  (|partial| AND (|ofCategory| *1 (|RecursivePolynomialCategory| *3 *4 *5))
   (|ofCategory| *3 (|Ring|)) (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
   (|ofCategory| *5 (|OrderedSet|)) (|isDomain| *2 (|Boolean|))))
 (|infRittWu?| (*1 *2 *1 *1)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *3 *4 *5))
       (|ofCategory| *3 (|Ring|)) (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *5 (|OrderedSet|)) (|isDomain| *2 (|Boolean|))))
 (|supRittWu?| (*1 *2 *1 *1)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *3 *4 *5))
       (|ofCategory| *3 (|Ring|)) (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *5 (|OrderedSet|)) (|isDomain| *2 (|Boolean|))))
 (|reduced?| (*1 *2 *1 *1)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *3 *4 *5))
       (|ofCategory| *3 (|Ring|)) (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *5 (|OrderedSet|)) (|isDomain| *2 (|Boolean|))))
 (|reduced?| (*1 *2 *1 *3)
  (AND (|isDomain| *3 (|List| *1))
       (|ofCategory| *1 (|RecursivePolynomialCategory| *4 *5 *6))
       (|ofCategory| *4 (|Ring|)) (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *6 (|OrderedSet|)) (|isDomain| *2 (|Boolean|))))
 (|headReduced?| (*1 *2 *1 *1)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *3 *4 *5))
       (|ofCategory| *3 (|Ring|)) (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *5 (|OrderedSet|)) (|isDomain| *2 (|Boolean|))))
 (|headReduced?| (*1 *2 *1 *3)
  (AND (|isDomain| *3 (|List| *1))
       (|ofCategory| *1 (|RecursivePolynomialCategory| *4 *5 *6))
       (|ofCategory| *4 (|Ring|)) (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *6 (|OrderedSet|)) (|isDomain| *2 (|Boolean|))))
 (|initiallyReduced?| (*1 *2 *1 *1)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *3 *4 *5))
       (|ofCategory| *3 (|Ring|)) (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *5 (|OrderedSet|)) (|isDomain| *2 (|Boolean|))))
 (|initiallyReduced?| (*1 *2 *1 *3)
  (AND (|isDomain| *3 (|List| *1))
       (|ofCategory| *1 (|RecursivePolynomialCategory| *4 *5 *6))
       (|ofCategory| *4 (|Ring|)) (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *6 (|OrderedSet|)) (|isDomain| *2 (|Boolean|))))
 (|normalized?| (*1 *2 *1 *1)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *3 *4 *5))
       (|ofCategory| *3 (|Ring|)) (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *5 (|OrderedSet|)) (|isDomain| *2 (|Boolean|))))
 (|normalized?| (*1 *2 *1 *3)
  (AND (|isDomain| *3 (|List| *1))
       (|ofCategory| *1 (|RecursivePolynomialCategory| *4 *5 *6))
       (|ofCategory| *4 (|Ring|)) (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *6 (|OrderedSet|)) (|isDomain| *2 (|Boolean|))))
 (|prem| (*1 *1 *1 *1)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *2 *3 *4))
       (|ofCategory| *2 (|Ring|)) (|ofCategory| *3 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *4 (|OrderedSet|))))
 (|pquo| (*1 *1 *1 *1)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *2 *3 *4))
       (|ofCategory| *2 (|Ring|)) (|ofCategory| *3 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *4 (|OrderedSet|))))
 (|prem| (*1 *1 *1 *1 *2)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *3 *4 *2))
       (|ofCategory| *3 (|Ring|)) (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *2 (|OrderedSet|))))
 (|pquo| (*1 *1 *1 *1 *2)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *3 *4 *2))
       (|ofCategory| *3 (|Ring|)) (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *2 (|OrderedSet|))))
 (|lazyPrem| (*1 *1 *1 *1)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *2 *3 *4))
       (|ofCategory| *2 (|Ring|)) (|ofCategory| *3 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *4 (|OrderedSet|))))
 (|lazyPquo| (*1 *1 *1 *1)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *2 *3 *4))
       (|ofCategory| *2 (|Ring|)) (|ofCategory| *3 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *4 (|OrderedSet|))))
 (|lazyPrem| (*1 *1 *1 *1 *2)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *3 *4 *2))
       (|ofCategory| *3 (|Ring|)) (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *2 (|OrderedSet|))))
 (|lazyPquo| (*1 *1 *1 *1 *2)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *3 *4 *2))
       (|ofCategory| *3 (|Ring|)) (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *2 (|OrderedSet|))))
 (|lazyPremWithDefault| (*1 *2 *1 *1)
  (AND (|ofCategory| *3 (|Ring|)) (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *5 (|OrderedSet|))
       (|isDomain| *2
                   (|Record| (|:| |coef| *1) (|:| |gap| (|NonNegativeInteger|))
                             (|:| |remainder| *1)))
       (|ofCategory| *1 (|RecursivePolynomialCategory| *3 *4 *5))))
 (|lazyPremWithDefault| (*1 *2 *1 *1 *3)
  (AND (|ofCategory| *4 (|Ring|)) (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *3 (|OrderedSet|))
       (|isDomain| *2
                   (|Record| (|:| |coef| *1) (|:| |gap| (|NonNegativeInteger|))
                             (|:| |remainder| *1)))
       (|ofCategory| *1 (|RecursivePolynomialCategory| *4 *5 *3))))
 (|lazyPseudoDivide| (*1 *2 *1 *1)
  (AND (|ofCategory| *3 (|Ring|)) (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *5 (|OrderedSet|))
       (|isDomain| *2
                   (|Record| (|:| |coef| *1) (|:| |gap| (|NonNegativeInteger|))
                             (|:| |quotient| *1) (|:| |remainder| *1)))
       (|ofCategory| *1 (|RecursivePolynomialCategory| *3 *4 *5))))
 (|lazyPseudoDivide| (*1 *2 *1 *1 *3)
  (AND (|ofCategory| *4 (|Ring|)) (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *3 (|OrderedSet|))
       (|isDomain| *2
                   (|Record| (|:| |coef| *1) (|:| |gap| (|NonNegativeInteger|))
                             (|:| |quotient| *1) (|:| |remainder| *1)))
       (|ofCategory| *1 (|RecursivePolynomialCategory| *4 *5 *3))))
 (|pseudoDivide| (*1 *2 *1 *1)
  (AND (|ofCategory| *3 (|Ring|)) (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *5 (|OrderedSet|))
       (|isDomain| *2 (|Record| (|:| |quotient| *1) (|:| |remainder| *1)))
       (|ofCategory| *1 (|RecursivePolynomialCategory| *3 *4 *5))))
 (|monicModulo| (*1 *1 *1 *1)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *2 *3 *4))
       (|ofCategory| *2 (|Ring|)) (|ofCategory| *3 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *4 (|OrderedSet|))))
 (|lazyResidueClass| (*1 *2 *1 *1)
  (AND (|ofCategory| *3 (|Ring|)) (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *5 (|OrderedSet|))
       (|isDomain| *2
                   (|Record| (|:| |polnum| *1) (|:| |polden| *1)
                             (|:| |power| (|NonNegativeInteger|))))
       (|ofCategory| *1 (|RecursivePolynomialCategory| *3 *4 *5))))
 (|headReduce| (*1 *1 *1 *1)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *2 *3 *4))
       (|ofCategory| *2 (|Ring|)) (|ofCategory| *3 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *4 (|OrderedSet|))))
 (|initiallyReduce| (*1 *1 *1 *1)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *2 *3 *4))
       (|ofCategory| *2 (|Ring|)) (|ofCategory| *3 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *4 (|OrderedSet|))))
 (|retractIfCan| (*1 *1 *2)
  (|partial| AND (|isDomain| *2 (|Polynomial| (|Fraction| (|Integer|))))
   (|ofCategory| *1 (|RecursivePolynomialCategory| *3 *4 *5))
   (|ofCategory| *3 (|Algebra| (|Fraction| (|Integer|))))
   (|ofCategory| *5 (|ConvertibleTo| (|Symbol|))) (|ofCategory| *3 (|Ring|))
   (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
   (|ofCategory| *5 (|OrderedSet|))))
 (|retract| (*1 *1 *2)
            (AND (|isDomain| *2 (|Polynomial| (|Fraction| (|Integer|))))
                 (|ofCategory| *1 (|RecursivePolynomialCategory| *3 *4 *5))
                 (|ofCategory| *3 (|Algebra| (|Fraction| (|Integer|))))
                 (|ofCategory| *5 (|ConvertibleTo| (|Symbol|)))
                 (|ofCategory| *3 (|Ring|))
                 (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
                 (|ofCategory| *5 (|OrderedSet|))))
 (|convert| (*1 *1 *2)
            (AND (|isDomain| *2 (|Polynomial| (|Fraction| (|Integer|))))
                 (|ofCategory| *1 (|RecursivePolynomialCategory| *3 *4 *5))
                 (|ofCategory| *3 (|Algebra| (|Fraction| (|Integer|))))
                 (|ofCategory| *5 (|ConvertibleTo| (|Symbol|)))
                 (|ofCategory| *3 (|Ring|))
                 (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
                 (|ofCategory| *5 (|OrderedSet|))))
 (|retractIfCan| (*1 *1 *2)
  (|partial| AND (|isDomain| *2 (|Polynomial| (|Integer|)))
   (|ofCategory| *1 (|RecursivePolynomialCategory| *3 *4 *5))
   (|ofCategory| *3 (|Algebra| (|Integer|)))
   (|ofCategory| *5 (|ConvertibleTo| (|Symbol|))) (|ofCategory| *3 (|Ring|))
   (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
   (|ofCategory| *5 (|OrderedSet|))))
 (|retract| (*1 *1 *2)
            (AND (|isDomain| *2 (|Polynomial| (|Integer|)))
                 (|ofCategory| *1 (|RecursivePolynomialCategory| *3 *4 *5))
                 (|ofCategory| *3 (|Algebra| (|Integer|)))
                 (|ofCategory| *5 (|ConvertibleTo| (|Symbol|)))
                 (|ofCategory| *3 (|Ring|))
                 (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
                 (|ofCategory| *5 (|OrderedSet|))))
 (|convert| (*1 *1 *2)
            (AND (|isDomain| *2 (|Polynomial| (|Integer|)))
                 (|ofCategory| *1 (|RecursivePolynomialCategory| *3 *4 *5))
                 (|ofCategory| *3 (|Algebra| (|Integer|)))
                 (|ofCategory| *5 (|ConvertibleTo| (|Symbol|)))
                 (|ofCategory| *3 (|Ring|))
                 (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
                 (|ofCategory| *5 (|OrderedSet|))))
 (|retractIfCan| (*1 *1 *2)
  (|partial| AND (|isDomain| *2 (|Polynomial| *3)) (|ofCategory| *3 (|Ring|))
   (|ofCategory| *1 (|RecursivePolynomialCategory| *3 *4 *5))
   (|ofCategory| *5 (|ConvertibleTo| (|Symbol|)))
   (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
   (|ofCategory| *5 (|OrderedSet|))))
 (|retract| (*1 *1 *2)
            (AND (|isDomain| *2 (|Polynomial| *3)) (|ofCategory| *3 (|Ring|))
                 (|ofCategory| *1 (|RecursivePolynomialCategory| *3 *4 *5))
                 (|ofCategory| *5 (|ConvertibleTo| (|Symbol|)))
                 (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
                 (|ofCategory| *5 (|OrderedSet|))))
 (|convert| (*1 *1 *2)
            (AND (|isDomain| *2 (|Polynomial| *3)) (|ofCategory| *3 (|Ring|))
                 (|ofCategory| *1 (|RecursivePolynomialCategory| *3 *4 *5))
                 (|ofCategory| *5 (|ConvertibleTo| (|Symbol|)))
                 (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
                 (|ofCategory| *5 (|OrderedSet|))))
 (|primPartElseUnitCanonical| (*1 *1 *1)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *2 *3 *4))
       (|ofCategory| *2 (|Ring|)) (|ofCategory| *3 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *4 (|OrderedSet|)) (|ofCategory| *2 (|IntegralDomain|))))
 (|primPartElseUnitCanonical!| (*1 *1 *1)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *2 *3 *4))
       (|ofCategory| *2 (|Ring|)) (|ofCategory| *3 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *4 (|OrderedSet|)) (|ofCategory| *2 (|IntegralDomain|))))
 (|exactQuotient| (*1 *1 *1 *2)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *2 *3 *4))
       (|ofCategory| *2 (|Ring|)) (|ofCategory| *3 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *4 (|OrderedSet|)) (|ofCategory| *2 (|IntegralDomain|))))
 (|exactQuotient!| (*1 *1 *1 *2)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *2 *3 *4))
       (|ofCategory| *2 (|Ring|)) (|ofCategory| *3 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *4 (|OrderedSet|)) (|ofCategory| *2 (|IntegralDomain|))))
 (|exactQuotient| (*1 *1 *1 *1)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *2 *3 *4))
       (|ofCategory| *2 (|Ring|)) (|ofCategory| *3 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *4 (|OrderedSet|)) (|ofCategory| *2 (|IntegralDomain|))))
 (|exactQuotient!| (*1 *1 *1 *1)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *2 *3 *4))
       (|ofCategory| *2 (|Ring|)) (|ofCategory| *3 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *4 (|OrderedSet|)) (|ofCategory| *2 (|IntegralDomain|))))
 (|subResultantGcd| (*1 *1 *1 *1)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *2 *3 *4))
       (|ofCategory| *2 (|Ring|)) (|ofCategory| *3 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *4 (|OrderedSet|)) (|ofCategory| *2 (|IntegralDomain|))))
 (|extendedSubResultantGcd| (*1 *2 *1 *1)
  (AND (|ofCategory| *3 (|IntegralDomain|)) (|ofCategory| *3 (|Ring|))
       (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *5 (|OrderedSet|))
       (|isDomain| *2
                   (|Record| (|:| |gcd| *1) (|:| |coef1| *1) (|:| |coef2| *1)))
       (|ofCategory| *1 (|RecursivePolynomialCategory| *3 *4 *5))))
 (|halfExtendedSubResultantGcd1| (*1 *2 *1 *1)
  (AND (|ofCategory| *3 (|IntegralDomain|)) (|ofCategory| *3 (|Ring|))
       (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *5 (|OrderedSet|))
       (|isDomain| *2 (|Record| (|:| |gcd| *1) (|:| |coef1| *1)))
       (|ofCategory| *1 (|RecursivePolynomialCategory| *3 *4 *5))))
 (|halfExtendedSubResultantGcd2| (*1 *2 *1 *1)
  (AND (|ofCategory| *3 (|IntegralDomain|)) (|ofCategory| *3 (|Ring|))
       (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *5 (|OrderedSet|))
       (|isDomain| *2 (|Record| (|:| |gcd| *1) (|:| |coef2| *1)))
       (|ofCategory| *1 (|RecursivePolynomialCategory| *3 *4 *5))))
 (|resultant| (*1 *1 *1 *1)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *2 *3 *4))
       (|ofCategory| *2 (|Ring|)) (|ofCategory| *3 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *4 (|OrderedSet|)) (|ofCategory| *2 (|IntegralDomain|))))
 (|subResultantChain| (*1 *2 *1 *1)
  (AND (|ofCategory| *3 (|IntegralDomain|)) (|ofCategory| *3 (|Ring|))
       (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *5 (|OrderedSet|)) (|isDomain| *2 (|List| *1))
       (|ofCategory| *1 (|RecursivePolynomialCategory| *3 *4 *5))))
 (|lastSubResultant| (*1 *1 *1 *1)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *2 *3 *4))
       (|ofCategory| *2 (|Ring|)) (|ofCategory| *3 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *4 (|OrderedSet|)) (|ofCategory| *2 (|IntegralDomain|))))
 (|LazardQuotient| (*1 *1 *1 *1 *2)
  (AND (|isDomain| *2 (|NonNegativeInteger|))
       (|ofCategory| *1 (|RecursivePolynomialCategory| *3 *4 *5))
       (|ofCategory| *3 (|Ring|)) (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *5 (|OrderedSet|)) (|ofCategory| *3 (|IntegralDomain|))))
 (|LazardQuotient2| (*1 *1 *1 *1 *1 *2)
  (AND (|isDomain| *2 (|NonNegativeInteger|))
       (|ofCategory| *1 (|RecursivePolynomialCategory| *3 *4 *5))
       (|ofCategory| *3 (|Ring|)) (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *5 (|OrderedSet|)) (|ofCategory| *3 (|IntegralDomain|))))
 (|next_subResultant2| (*1 *1 *1 *1 *1 *1)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *2 *3 *4))
       (|ofCategory| *2 (|Ring|)) (|ofCategory| *3 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *4 (|OrderedSet|)) (|ofCategory| *2 (|IntegralDomain|))))
 (|iexactQuo| (*1 *2 *2 *2)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *2 *3 *4))
       (|ofCategory| *2 (|Ring|)) (|ofCategory| *3 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *4 (|OrderedSet|)) (|ofCategory| *2 (|IntegralDomain|))))
 (|gcd| (*1 *2 *2 *1)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *2 *3 *4))
       (|ofCategory| *2 (|Ring|)) (|ofCategory| *3 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *4 (|OrderedSet|)) (|ofCategory| *2 (|GcdDomain|))))
 (|primitivePart!| (*1 *1 *1)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *2 *3 *4))
       (|ofCategory| *2 (|Ring|)) (|ofCategory| *3 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *4 (|OrderedSet|)) (|ofCategory| *2 (|GcdDomain|))))
 (|mainContent| (*1 *1 *1)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *2 *3 *4))
       (|ofCategory| *2 (|Ring|)) (|ofCategory| *3 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *4 (|OrderedSet|)) (|ofCategory| *2 (|GcdDomain|))))
 (|mainPrimitivePart| (*1 *1 *1)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *2 *3 *4))
       (|ofCategory| *2 (|Ring|)) (|ofCategory| *3 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *4 (|OrderedSet|)) (|ofCategory| *2 (|GcdDomain|))))
 (|mainSquareFreePart| (*1 *1 *1)
  (AND (|ofCategory| *1 (|RecursivePolynomialCategory| *2 *3 *4))
       (|ofCategory| *2 (|Ring|)) (|ofCategory| *3 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *4 (|OrderedSet|)) (|ofCategory| *2 (|GcdDomain|)))))
((~= (((|Boolean|) $ $) 6))
 (|zero?|
  (((|Boolean|) $) 6
   (OR
    (AND (|has| |#1| (|CommutativeRing|))
         (|has| $ (|VariablesCommuteWithCoefficients|)))
    (AND (|has| |#1| (|IntegralDomain|))
         (|has| $ (|VariablesCommuteWithCoefficients|)))
    (|has| |#1| (|AbelianMonoid|)) (|has| $ (|AbelianMonoid|)))))
 (|variables| (((|List| |#3|) $) 6))
 (|univariate| (((|SparseUnivariatePolynomial| $) $ |#3|) 6)
  (((|SparseUnivariatePolynomial| |#1|) $) 6))
 (|unitNormal|
  (((|Record| (|:| |unit| $) (|:| |canonical| $) (|:| |associate| $)) $) 6
   (OR (|has| |#1| (|EntireRing|))
       (AND (|has| |#1| (|IntegralDomain|))
            (|has| $ (|VariablesCommuteWithCoefficients|))))))
 (|unitCanonical|
  (($ $) 6
   (OR (|has| |#1| (|EntireRing|))
       (AND (|has| |#1| (|IntegralDomain|))
            (|has| $ (|VariablesCommuteWithCoefficients|))))))
 (|unit?|
  (((|Boolean|) $) 6
   (OR (|has| |#1| (|EntireRing|))
       (AND (|has| |#1| (|IntegralDomain|))
            (|has| $ (|VariablesCommuteWithCoefficients|))))))
 (|totalDegreeSorted| (((|NonNegativeInteger|) $ (|List| |#3|)) 6))
 (|totalDegree| (((|NonNegativeInteger|) $) 6)
  (((|NonNegativeInteger|) $ (|List| |#3|)) 6))
 (|tail| (($ $) 6)) (|supRittWu?| (((|Boolean|) $ $) 6))
 (|subtractIfCan|
  (((|Union| $ "failed") $ $) 6
   (OR (|has| |#1| (|CancellationAbelianMonoid|))
       (|and| (OR (|has| $ (|AbelianGroup|)) (|has| $ (|AbelianGroup|)))
        (|has| |#1| (|SemiRing|)))
       (AND (|has| |#1| (|CommutativeRing|))
            (|has| $ (|VariablesCommuteWithCoefficients|)))
       (AND (|has| |#1| (|IntegralDomain|))
            (|has| $ (|VariablesCommuteWithCoefficients|)))
       (|has| $ (|AbelianGroup|)))))
 (|subResultantGcd| (($ $ $) 6 (|has| |#1| (|IntegralDomain|))))
 (|subResultantChain| (((|List| $) $ $) 6 (|has| |#1| (|IntegralDomain|))))
 (|squareFreePolynomial|
  (((|Factored| (|SparseUnivariatePolynomial| $))
    (|SparseUnivariatePolynomial| $))
   6 (|has| |#1| (|PolynomialFactorizationExplicit|))))
 (|squareFreePart| (($ $) 6 (|has| |#1| (|GcdDomain|))))
 (|squareFree| (((|Factored| $) $) 6 (|has| |#1| (|GcdDomain|))))
 (|solveLinearPolynomialEquation|
  (((|Union| (|List| (|SparseUnivariatePolynomial| $)) #1="failed")
    (|List| (|SparseUnivariatePolynomial| $)) (|SparseUnivariatePolynomial| $))
   6 (|has| |#1| (|PolynomialFactorizationExplicit|))))
 (|smaller?| (((|Boolean|) $ $) 6 (|has| |#1| (|Comparable|))))
 (|sample|
  (($) 6
   (OR
    (AND (|has| |#1| (|CommutativeRing|))
         (|has| $ (|VariablesCommuteWithCoefficients|)))
    (AND (|has| |#1| (|IntegralDomain|))
         (|has| $ (|VariablesCommuteWithCoefficients|)))
    (|has| |#1| (|AbelianMonoid|)) (|has| $ (|AbelianMonoid|)))
   CONST))
 (|rightRecip|
  (((|Union| $ #2="failed") $) 6
   (OR (|has| |#1| (|SemiRing|))
       (AND (|has| |#1| (|CommutativeRing|))
            (|has| $ (|VariablesCommuteWithCoefficients|)))
       (AND (|has| |#1| (|IntegralDomain|))
            (|has| $ (|VariablesCommuteWithCoefficients|))))))
 (|rightPower| (($ $ (|PositiveInteger|)) 6)
  (($ $ (|NonNegativeInteger|)) 6
   (OR (|has| |#1| (|SemiRing|))
       (AND (|has| |#1| (|CommutativeRing|))
            (|has| $ (|VariablesCommuteWithCoefficients|)))
       (AND (|has| |#1| (|IntegralDomain|))
            (|has| $ (|VariablesCommuteWithCoefficients|))))))
 (|retractIfCan|
  (((|Union| (|Integer|) #3="failed") $) 6
   (|has| |#1| (|RetractableTo| (|Integer|))))
  (((|Union| (|Fraction| (|Integer|)) #3#) $) 6
   (|has| |#1| (|RetractableTo| (|Fraction| (|Integer|)))))
  (((|Union| |#1| #3#) $) 6)
  (((|Union| |#3| #3#) $) 6 (|has| |#1| (|SemiRing|)))
  (((|Union| $ "failed") (|Polynomial| (|Fraction| (|Integer|)))) 6
   (AND (|has| |#1| (|Algebra| (|Fraction| (|Integer|))))
        (|has| |#3| (|ConvertibleTo| (|Symbol|)))))
  (((|Union| $ "failed") (|Polynomial| (|Integer|))) 6
   (AND (|has| |#1| (|Algebra| (|Integer|)))
        (|has| |#3| (|ConvertibleTo| (|Symbol|)))))
  (((|Union| $ "failed") (|Polynomial| |#1|)) 6
   (|has| |#3| (|ConvertibleTo| (|Symbol|)))))
 (|retract| (((|Integer|) $) 6 (|has| |#1| (|RetractableTo| (|Integer|))))
            (((|Fraction| (|Integer|)) $) 6
             (|has| |#1| (|RetractableTo| (|Fraction| (|Integer|)))))
            ((|#1| $) 6) ((|#3| $) 6 (|has| |#1| (|SemiRing|)))
            (($ (|Polynomial| (|Fraction| (|Integer|)))) 6
             (AND (|has| |#1| (|Algebra| (|Fraction| (|Integer|))))
                  (|has| |#3| (|ConvertibleTo| (|Symbol|)))))
            (($ (|Polynomial| (|Integer|))) 6
             (AND (|has| |#1| (|Algebra| (|Integer|)))
                  (|has| |#3| (|ConvertibleTo| (|Symbol|)))))
            (($ (|Polynomial| |#1|)) 6
             (|has| |#3| (|ConvertibleTo| (|Symbol|)))))
 (|resultant| (($ $ $ |#3|) 6 (|has| |#1| (|CommutativeRing|)))
  (($ $ $) 6 (|has| |#1| (|IntegralDomain|))))
 (|reductum| (($ $) 6) (($ $ |#3|) 6))
 (|reducedSystem|
  (((|Matrix| (|Integer|)) (|Matrix| $)) 6
   (|and| (|has| |#1| (|LinearlyExplicitOver| (|Integer|)))
    (|has| |#1| (|Ring|))))
  (((|Record| (|:| |mat| (|Matrix| (|Integer|)))
              (|:| |vec| (|Vector| (|Integer|))))
    (|Matrix| $) (|Vector| $))
   6
   (|and| (|has| |#1| (|LinearlyExplicitOver| (|Integer|)))
    (|has| |#1| (|Ring|))))
  (((|Record| (|:| |mat| (|Matrix| |#1|)) (|:| |vec| (|Vector| |#1|)))
    (|Matrix| $) (|Vector| $))
   6 (|has| |#1| (|Ring|)))
  (((|Matrix| |#1|) (|Matrix| $)) 6 (|has| |#1| (|Ring|))))
 (|reduced?| (((|Boolean|) $ $) 6) (((|Boolean|) $ (|List| $)) 6))
 (|recip|
  (((|Union| $ #2#) $) 6
   (OR (|has| |#1| (|SemiRing|))
       (AND (|has| |#1| (|CommutativeRing|))
            (|has| $ (|VariablesCommuteWithCoefficients|)))
       (AND (|has| |#1| (|IntegralDomain|))
            (|has| $ (|VariablesCommuteWithCoefficients|))))))
 (|quasiMonic?| (((|Boolean|) $) 6))
 (|pseudoDivide| (((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $) 6))
 (|primitivePart!| (($ $) 6 (|has| |#1| (|GcdDomain|))))
 (|primitivePart| (($ $) 6 (|has| |#1| (|GcdDomain|)))
  (($ $ |#3|) 6 (|has| |#1| (|GcdDomain|))))
 (|primitiveMonomials| (((|List| $) $) 6 (|has| |#1| (|SemiRing|))))
 (|prime?|
  (((|Boolean|) $) 6 (|has| |#1| (|PolynomialFactorizationExplicit|))))
 (|primPartElseUnitCanonical!| (($ $) 6 (|has| |#1| (|IntegralDomain|))))
 (|primPartElseUnitCanonical| (($ $) 6 (|has| |#1| (|IntegralDomain|))))
 (|prem| (($ $ $) 6) (($ $ $ |#3|) 6)) (|pquo| (($ $ $) 6) (($ $ $ |#3|) 6))
 (|pomopo!| (($ $ |#1| |#2| $) 6))
 (|patternMatch|
  (((|PatternMatchResult| (|Float|) $) $ (|Pattern| (|Float|))
    (|PatternMatchResult| (|Float|) $))
   6
   (AND (|has| |#3| (|PatternMatchable| (|Float|)))
        (|has| |#1| (|PatternMatchable| (|Float|))) (|has| |#1| (|Ring|))))
  (((|PatternMatchResult| (|Integer|) $) $ (|Pattern| (|Integer|))
    (|PatternMatchResult| (|Integer|) $))
   6
   (AND (|has| |#3| (|PatternMatchable| (|Integer|)))
        (|has| |#1| (|PatternMatchable| (|Integer|))) (|has| |#1| (|Ring|)))))
 (|opposite?|
  (((|Boolean|) $ $) 6
   (OR
    (AND (|has| |#1| (|CommutativeRing|))
         (|has| $ (|VariablesCommuteWithCoefficients|)))
    (AND (|has| |#1| (|IntegralDomain|))
         (|has| $ (|VariablesCommuteWithCoefficients|)))
    (|has| |#1| (|AbelianMonoid|)) (|has| $ (|AbelianMonoid|)))))
 (|one?|
  (((|Boolean|) $) 6
   (OR (|has| |#1| (|SemiRing|))
       (AND (|has| |#1| (|CommutativeRing|))
            (|has| $ (|VariablesCommuteWithCoefficients|)))
       (AND (|has| |#1| (|IntegralDomain|))
            (|has| $ (|VariablesCommuteWithCoefficients|))))))
 (|numberOfMonomials| (((|NonNegativeInteger|) $) 6))
 (|normalized?| (((|Boolean|) $ $) 6) (((|Boolean|) $ (|List| $)) 6))
 (|next_subResultant2| (($ $ $ $ $) 6 (|has| |#1| (|IntegralDomain|))))
 (|mvar| ((|#3| $) 6))
 (|multivariate| (($ (|SparseUnivariatePolynomial| |#1|) |#3|) 6)
  (($ (|SparseUnivariatePolynomial| $) |#3|) 6))
 (|monomials| (((|List| $) $) 6)) (|monomial?| (((|Boolean|) $) 6))
 (|monomial| (($ |#1| |#2|) 6) (($ $ |#3| (|NonNegativeInteger|)) 6)
  (($ $ (|List| |#3|) (|List| (|NonNegativeInteger|))) 6))
 (|monicModulo| (($ $ $) 6))
 (|monicDivide|
  (((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $ |#3|) 6
   (|has| |#1| (|Ring|))))
 (|monic?| (((|Boolean|) $) 6))
 (|minimumDegree| ((|#2| $) 6) (((|NonNegativeInteger|) $ |#3|) 6)
  (((|List| (|NonNegativeInteger|)) $ (|List| |#3|)) 6))
 (|mdeg| (((|NonNegativeInteger|) $) 6))
 (|mapExponents| (($ (|Mapping| |#2| |#2|) $) 6))
 (|map| (($ (|Mapping| |#1| |#1|) $) 6))
 (|mainVariable| (((|Union| |#3| "failed") $) 6))
 (|mainSquareFreePart| (($ $) 6 (|has| |#1| (|GcdDomain|))))
 (|mainPrimitivePart| (($ $) 6 (|has| |#1| (|GcdDomain|))))
 (|mainMonomials| (((|List| $) $) 6)) (|mainMonomial| (($ $) 6))
 (|mainContent| (($ $) 6 (|has| |#1| (|GcdDomain|))))
 (|mainCoefficients| (((|List| $) $) 6))
 (|leftRecip|
  (((|Union| $ #2#) $) 6
   (OR (|has| |#1| (|SemiRing|))
       (AND (|has| |#1| (|CommutativeRing|))
            (|has| $ (|VariablesCommuteWithCoefficients|)))
       (AND (|has| |#1| (|IntegralDomain|))
            (|has| $ (|VariablesCommuteWithCoefficients|))))))
 (|leftPower| (($ $ (|PositiveInteger|)) 6)
  (($ $ (|NonNegativeInteger|)) 6
   (OR (|has| |#1| (|SemiRing|))
       (AND (|has| |#1| (|CommutativeRing|))
            (|has| $ (|VariablesCommuteWithCoefficients|)))
       (AND (|has| |#1| (|IntegralDomain|))
            (|has| $ (|VariablesCommuteWithCoefficients|))))))
 (|leastMonomial| (($ $) 6)) (|leadingMonomial| (($ $) 6))
 (|leadingCoefficient| ((|#1| $) 6) (($ $ |#3|) 6))
 (|lcmCoef|
  (((|Record| (|:| |llcm_res| $) (|:| |coeff1| $) (|:| |coeff2| $)) $ $) 6
   (|has| |#1| (|GcdDomain|))))
 (|lcm| (($ (|List| $)) 6 (|has| |#1| (|GcdDomain|)))
  (($ $ $) 6 (|has| |#1| (|GcdDomain|))))
 (|lazyResidueClass|
  (((|Record| (|:| |polnum| $) (|:| |polden| $)
              (|:| |power| (|NonNegativeInteger|)))
    $ $)
   6))
 (|lazyPseudoDivide|
  (((|Record| (|:| |coef| $) (|:| |gap| (|NonNegativeInteger|))
              (|:| |quotient| $) (|:| |remainder| $))
    $ $)
   6)
  (((|Record| (|:| |coef| $) (|:| |gap| (|NonNegativeInteger|))
              (|:| |quotient| $) (|:| |remainder| $))
    $ $ |#3|)
   6))
 (|lazyPremWithDefault|
  (((|Record| (|:| |coef| $) (|:| |gap| (|NonNegativeInteger|))
              (|:| |remainder| $))
    $ $)
   6)
  (((|Record| (|:| |coef| $) (|:| |gap| (|NonNegativeInteger|))
              (|:| |remainder| $))
    $ $ |#3|)
   6))
 (|lazyPrem| (($ $ $) 6) (($ $ $ |#3|) 6))
 (|lazyPquo| (($ $ $) 6) (($ $ $ |#3|) 6)) (|latex| (((|String|) $) 6))
 (|lastSubResultant| (($ $ $) 6 (|has| |#1| (|IntegralDomain|))))
 (|iteratedInitials| (((|List| $) $) 6))
 (|isTimes| (((|Union| (|List| $) #4="failed") $) 6 (|has| |#1| (|SemiRing|))))
 (|isPlus| (((|Union| (|List| $) #4#) $) 6))
 (|isExpt|
  (((|Union|
     (|Record| (|:| |var| |#3|) (|:| |exponent| (|NonNegativeInteger|))) #4#)
    $)
   6 (|has| |#1| (|SemiRing|))))
 (|initiallyReduced?| (((|Boolean|) $ $) 6) (((|Boolean|) $ (|List| $)) 6))
 (|initiallyReduce| (($ $ $) 6)) (|init| (($ $) 6))
 (|infRittWu?| (((|Boolean|) $ $) 6))
 (|iexactQuo| ((|#1| |#1| |#1|) 6 (|has| |#1| (|IntegralDomain|))))
 (|headReduced?| (((|Boolean|) $ $) 6) (((|Boolean|) $ (|List| $)) 6))
 (|headReduce| (($ $ $) 6)) (|head| (($ $) 6))
 (|hashUpdate!| (((|HashState|) (|HashState|) $) 6))
 (|hash| (((|SingleInteger|) $) 6))
 (|halfExtendedSubResultantGcd2|
  (((|Record| (|:| |gcd| $) (|:| |coef2| $)) $ $) 6
   (|has| |#1| (|IntegralDomain|))))
 (|halfExtendedSubResultantGcd1|
  (((|Record| (|:| |gcd| $) (|:| |coef1| $)) $ $) 6
   (|has| |#1| (|IntegralDomain|))))
 (|ground?| (((|Boolean|) $) 6)) (|ground| ((|#1| $) 6))
 (|gcdPolynomial|
  (((|SparseUnivariatePolynomial| $) (|SparseUnivariatePolynomial| $)
    (|SparseUnivariatePolynomial| $))
   6 (|has| |#1| (|GcdDomain|))))
 (|gcd| (($ (|List| $)) 6 (|has| |#1| (|GcdDomain|)))
  (($ $ $) 6 (|has| |#1| (|GcdDomain|)))
  ((|#1| |#1| $) 6 (|has| |#1| (|GcdDomain|))))
 (|fmecg| (($ $ |#2| |#1| $) 6 (|has| |#1| (|Ring|))))
 (|factorSquareFreePolynomial|
  (((|Factored| (|SparseUnivariatePolynomial| $))
    (|SparseUnivariatePolynomial| $))
   6 (|has| |#1| (|PolynomialFactorizationExplicit|))))
 (|factorPolynomial|
  (((|Factored| (|SparseUnivariatePolynomial| $))
    (|SparseUnivariatePolynomial| $))
   6 (|has| |#1| (|PolynomialFactorizationExplicit|))))
 (|factor|
  (((|Factored| $) $) 6 (|has| |#1| (|PolynomialFactorizationExplicit|))))
 (|extendedSubResultantGcd|
  (((|Record| (|:| |gcd| $) (|:| |coef1| $) (|:| |coef2| $)) $ $) 6
   (|has| |#1| (|IntegralDomain|))))
 (|exquo| (((|Union| $ "failed") $ |#1|) 6 (|has| |#1| (|EntireRing|)))
  (((|Union| $ "failed") $ $) 6
   (OR (|has| |#1| (|EntireRing|))
       (AND (|has| |#1| (|IntegralDomain|))
            (|has| $ (|VariablesCommuteWithCoefficients|))))))
 (|exactQuotient!| (($ $ |#1|) 6 (|has| |#1| (|IntegralDomain|)))
  (($ $ $) 6 (|has| |#1| (|IntegralDomain|))))
 (|exactQuotient| (($ $ |#1|) 6 (|has| |#1| (|IntegralDomain|)))
  (($ $ $) 6 (|has| |#1| (|IntegralDomain|))))
 (|eval| (($ $ |#3| |#1|) 6) (($ $ (|List| |#3|) (|List| |#1|)) 6)
         (($ $ |#3| $) 6) (($ $ (|List| |#3|) (|List| $)) 6)
         (($ $ (|List| (|Equation| $))) 6 (|has| |#1| (|SemiRing|)))
         (($ $ (|Equation| $)) 6 (|has| |#1| (|SemiRing|)))
         (($ $ $ $) 6 (|has| |#1| (|SemiRing|)))
         (($ $ (|List| $) (|List| $)) 6 (|has| |#1| (|SemiRing|))))
 (|discriminant| (($ $ |#3|) 6 (|has| |#1| (|CommutativeRing|))))
 (|differentiate|
  (($ $ (|List| |#3|) (|List| (|NonNegativeInteger|))) 6 (|has| |#1| (|Ring|)))
  (($ $ |#3| (|NonNegativeInteger|)) 6 (|has| |#1| (|Ring|)))
  (($ $ (|List| |#3|)) 6 (|has| |#1| (|Ring|)))
  (($ $ |#3|) 6 (|has| |#1| (|Ring|))))
 (|degree| ((|#2| $) 6) (((|NonNegativeInteger|) $ |#3|) 6)
  (((|List| (|NonNegativeInteger|)) $ (|List| |#3|)) 6))
 (|deepestTail| (($ $) 6)) (|deepestInitial| (($ $) 6))
 (|convert|
  (((|Pattern| (|Float|)) $) 6
   (AND (|has| |#3| (|ConvertibleTo| (|Pattern| (|Float|))))
        (|has| |#1| (|ConvertibleTo| (|Pattern| (|Float|))))
        (|has| |#1| (|Ring|))))
  (((|Pattern| (|Integer|)) $) 6
   (AND (|has| |#3| (|ConvertibleTo| (|Pattern| (|Integer|))))
        (|has| |#1| (|ConvertibleTo| (|Pattern| (|Integer|))))
        (|has| |#1| (|Ring|))))
  (((|InputForm|) $) 6
   (AND (|has| |#3| (|ConvertibleTo| (|InputForm|)))
        (|has| |#1| (|ConvertibleTo| (|InputForm|)))))
  (($ (|Polynomial| (|Fraction| (|Integer|)))) 6
   (AND (|has| |#1| (|Algebra| (|Fraction| (|Integer|))))
        (|has| |#3| (|ConvertibleTo| (|Symbol|)))))
  (($ (|Polynomial| (|Integer|))) 6
   (AND (|has| |#1| (|Algebra| (|Integer|)))
        (|has| |#3| (|ConvertibleTo| (|Symbol|)))))
  (($ (|Polynomial| |#1|)) 6 (|has| |#3| (|ConvertibleTo| (|Symbol|))))
  (((|String|) $) 6
   (AND (|has| |#1| (|RetractableTo| (|Integer|)))
        (|has| |#3| (|ConvertibleTo| (|Symbol|)))))
  (((|Polynomial| |#1|) $) 6 (|has| |#3| (|ConvertibleTo| (|Symbol|)))))
 (|content| ((|#1| $) 6 (|has| |#1| (|GcdDomain|)))
  (($ $ |#3|) 6 (|has| |#1| (|GcdDomain|))))
 (|conditionP|
  (((|Union| (|Vector| $) #1#) (|Matrix| $)) 6
   (|and| (|has| $ (|CharacteristicNonZero|))
    (|has| |#1| (|PolynomialFactorizationExplicit|)))))
 (|commutator|
  (($ $ $) 6
   (OR (|has| |#1| (|Ring|))
       (AND (|has| |#1| (|CommutativeRing|))
            (|has| $ (|VariablesCommuteWithCoefficients|)))
       (AND (|has| |#1| (|IntegralDomain|))
            (|has| $ (|VariablesCommuteWithCoefficients|))))))
 (|coerce| (((|OutputForm|) $) 6)
           (($ (|Fraction| (|Integer|))) 6
            (OR (|has| |#1| (|RetractableTo| (|Fraction| (|Integer|))))
                (|has| |#1| (|Algebra| (|Fraction| (|Integer|))))))
           (($ |#1|) 6)
           (($ $) 6
            (OR (|has| |#1| (|GcdDomain|))
                (AND (|has| |#1| (|CommutativeRing|))
                     (|has| $ (|VariablesCommuteWithCoefficients|)))
                (AND (|has| |#1| (|IntegralDomain|))
                     (|has| $ (|VariablesCommuteWithCoefficients|)))))
           (($ (|Integer|)) 6
            (OR (|has| |#1| (|RetractableTo| (|Integer|)))
                (|has| |#1| (|Ring|))
                (AND (|has| |#1| (|CommutativeRing|))
                     (|has| $ (|VariablesCommuteWithCoefficients|)))
                (AND (|has| |#1| (|IntegralDomain|))
                     (|has| $ (|VariablesCommuteWithCoefficients|)))))
           (($ |#3|) 6 (|has| |#1| (|SemiRing|)))
           (((|Polynomial| |#1|) $) 6
            (|has| |#3| (|ConvertibleTo| (|Symbol|)))))
 (|coefficients| (((|List| |#1|) $) 6))
 (|coefficient| ((|#1| $ |#2|) 6) (($ $ |#3| (|NonNegativeInteger|)) 6)
  (($ $ (|List| |#3|) (|List| (|NonNegativeInteger|))) 6))
 (|charthRoot|
  (((|Union| $ #1#) $) 6
   (OR
    (|and| (|has| $ (|CharacteristicNonZero|))
     (|has| |#1| (|PolynomialFactorizationExplicit|)))
    (|has| |#1| (|CharacteristicNonZero|)))))
 (|characteristic|
  (((|NonNegativeInteger|)) 6
   (OR (|has| |#1| (|Ring|))
       (AND (|has| |#1| (|CommutativeRing|))
            (|has| $ (|VariablesCommuteWithCoefficients|)))
       (AND (|has| |#1| (|IntegralDomain|))
            (|has| $ (|VariablesCommuteWithCoefficients|))))))
 (|binomThmExpt|
  (($ $ $ (|NonNegativeInteger|)) 6 (|has| $ (|CommutativeRing|))))
 (|associator|
  (($ $ $ $) 6
   (OR (|has| |#1| (|Ring|))
       (AND (|has| |#1| (|CommutativeRing|))
            (|has| $ (|VariablesCommuteWithCoefficients|)))
       (AND (|has| |#1| (|IntegralDomain|))
            (|has| $ (|VariablesCommuteWithCoefficients|))))))
 (|associates?|
  (((|Boolean|) $ $) 6
   (OR (|has| |#1| (|EntireRing|))
       (AND (|has| |#1| (|IntegralDomain|))
            (|has| $ (|VariablesCommuteWithCoefficients|))))))
 (|antiCommutator| (($ $ $) 6))
 (|annihilate?|
  (((|Boolean|) $ $) 6
   (OR (|has| |#1| (|Ring|))
       (AND (|has| |#1| (|CommutativeRing|))
            (|has| $ (|VariablesCommuteWithCoefficients|)))
       (AND (|has| |#1| (|IntegralDomain|))
            (|has| $ (|VariablesCommuteWithCoefficients|))))))
 (^ (($ $ (|PositiveInteger|)) 6)
  (($ $ (|NonNegativeInteger|)) 6
   (OR (|has| |#1| (|SemiRing|))
       (AND (|has| |#1| (|CommutativeRing|))
            (|has| $ (|VariablesCommuteWithCoefficients|)))
       (AND (|has| |#1| (|IntegralDomain|))
            (|has| $ (|VariablesCommuteWithCoefficients|))))))
 (|Zero|
  (($) 6
   (OR
    (AND (|has| |#1| (|CommutativeRing|))
         (|has| $ (|VariablesCommuteWithCoefficients|)))
    (AND (|has| |#1| (|IntegralDomain|))
         (|has| $ (|VariablesCommuteWithCoefficients|)))
    (|has| |#1| (|AbelianMonoid|)) (|has| $ (|AbelianMonoid|)))
   CONST))
 (|RittWuCompare| (((|Union| (|Boolean|) "failed") $ $) 6))
 (|One|
  (($) 6
   (OR (|has| |#1| (|SemiRing|))
       (AND (|has| |#1| (|CommutativeRing|))
            (|has| $ (|VariablesCommuteWithCoefficients|)))
       (AND (|has| |#1| (|IntegralDomain|))
            (|has| $ (|VariablesCommuteWithCoefficients|))))
   CONST))
 (|LazardQuotient2|
  (($ $ $ $ (|NonNegativeInteger|)) 6 (|has| |#1| (|IntegralDomain|))))
 (|LazardQuotient|
  (($ $ $ (|NonNegativeInteger|)) 6 (|has| |#1| (|IntegralDomain|))))
 (D
  (($ $ (|List| |#3|) (|List| (|NonNegativeInteger|))) 6 (|has| |#1| (|Ring|)))
  (($ $ |#3| (|NonNegativeInteger|)) 6 (|has| |#1| (|Ring|)))
  (($ $ (|List| |#3|)) 6 (|has| |#1| (|Ring|)))
  (($ $ |#3|) 6 (|has| |#1| (|Ring|))))
 (= (((|Boolean|) $ $) 6)) (/ (($ $ |#1|) 6 (|has| |#1| (|Field|))))
 (-
  (($ $) 6
   (OR
    (|and| (OR (|has| $ (|AbelianGroup|)) (|has| $ (|AbelianGroup|)))
     (|has| |#1| (|SemiRing|)))
    (AND (|has| |#1| (|CommutativeRing|))
         (|has| $ (|VariablesCommuteWithCoefficients|)))
    (AND (|has| |#1| (|IntegralDomain|))
         (|has| $ (|VariablesCommuteWithCoefficients|)))
    (|has| |#1| (|AbelianGroup|)) (|has| $ (|AbelianGroup|))))
  (($ $ $) 6
   (OR
    (|and| (OR (|has| $ (|AbelianGroup|)) (|has| $ (|AbelianGroup|)))
     (|has| |#1| (|SemiRing|)))
    (AND (|has| |#1| (|CommutativeRing|))
         (|has| $ (|VariablesCommuteWithCoefficients|)))
    (AND (|has| |#1| (|IntegralDomain|))
         (|has| $ (|VariablesCommuteWithCoefficients|)))
    (|has| |#1| (|AbelianGroup|)) (|has| $ (|AbelianGroup|)))))
 (+ (($ $ $) 6))
 (* (($ (|PositiveInteger|) $) 6) (($ $ $) 6) (($ $ |#1|) 6) (($ |#1| $) 6)
    (($ (|Fraction| (|Integer|)) $) 6
     (|has| |#1| (|Algebra| (|Fraction| (|Integer|)))))
    (($ $ (|Fraction| (|Integer|))) 6
     (|has| |#1| (|Algebra| (|Fraction| (|Integer|)))))
    (($ (|NonNegativeInteger|) $) 6
     (OR
      (AND (|has| |#1| (|CommutativeRing|))
           (|has| $ (|VariablesCommuteWithCoefficients|)))
      (AND (|has| |#1| (|IntegralDomain|))
           (|has| $ (|VariablesCommuteWithCoefficients|)))
      (|has| |#1| (|AbelianMonoid|)) (|has| $ (|AbelianMonoid|))))
    (($ (|Integer|) $) 6
     (OR
      (|and| (OR (|has| $ (|AbelianGroup|)) (|has| $ (|AbelianGroup|)))
       (|has| |#1| (|SemiRing|)))
      (AND (|has| |#1| (|CommutativeRing|))
           (|has| $ (|VariablesCommuteWithCoefficients|)))
      (AND (|has| |#1| (|IntegralDomain|))
           (|has| $ (|VariablesCommuteWithCoefficients|)))
      (|has| |#1| (|AbelianGroup|)) (|has| $ (|AbelianGroup|))))))
RPOLCAT
(((|PolynomialCategory| |#1| |#2| |#3|) . T)
 ((|ConvertibleTo| (|String|)) AND (|has| |#3| (|ConvertibleTo| (|Symbol|)))
  (|has| |#1| (|RetractableTo| (|Integer|))))
 ((|ConvertibleTo| (|Polynomial| |#1|)) |has| |#3|
  (|ConvertibleTo| (|Symbol|)))
 ((|CoercibleTo| (|Polynomial| |#1|)) |has| |#3| (|ConvertibleTo| (|Symbol|))))
(((|AbelianGroup|) OR (|has| |t#1| (|AbelianGroup|))
  (AND (|has| $ (|VariablesCommuteWithCoefficients|))
       (|has| |t#1| (|IntegralDomain|)))
  (AND (|has| $ (|VariablesCommuteWithCoefficients|))
       (|has| |t#1| (|CommutativeRing|))))
 ((|AbelianMonoid|) OR (|has| |t#1| (|AbelianMonoid|))
  (AND (|has| |t#1| (|AbelianGroup|)) (|has| |t#1| (|SemiRing|)))
  (AND (|has| $ (|VariablesCommuteWithCoefficients|))
       (|has| |t#1| (|IntegralDomain|)))
  (AND (|has| $ (|VariablesCommuteWithCoefficients|))
       (|has| |t#1| (|CommutativeRing|))))
 ((|AbelianMonoidRing| |t#1| |t#2|) . T) ((|AbelianSemiGroup|) . T)
 ((|Algebra| (|Fraction| (|Integer|))) |has| |t#1|
  (|Algebra| (|Fraction| (|Integer|))))
 ((|Algebra| $) OR (|has| |t#1| (|GcdDomain|))
  (AND (|has| $ (|VariablesCommuteWithCoefficients|))
       (|has| |t#1| (|IntegralDomain|)))
  (AND (|has| $ (|VariablesCommuteWithCoefficients|))
       (|has| |t#1| (|CommutativeRing|))))
 ((|Algebra| |t#1|) AND (|has| $ (|VariablesCommuteWithCoefficients|))
  (|has| |t#1| (|CommutativeRing|)))
 ((|BasicType|) . T) ((|BiModule| |t#1| |t#1|) . T) ((|BiModule| $ $) . T)
 ((|CancellationAbelianMonoid|) OR (|has| |t#1| (|CancellationAbelianMonoid|))
  (AND (|has| |t#1| (|AbelianGroup|)) (|has| |t#1| (|SemiRing|)))
  (AND (|has| |t#1| (|AbelianGroup|)) (|has| |t#1| (|Ring|)))
  (AND (|has| |t#1| (|AbelianGroup|))
       (|has| |t#1| (|PolynomialFactorizationExplicit|)))
  (AND (|has| |t#1| (|AbelianGroup|)) (|has| |t#1| (|GcdDomain|)))
  (AND (|has| |t#1| (|AbelianGroup|)) (|has| |t#1| (|EntireRing|)))
  (AND (|has| |t#1| (|AbelianGroup|)) (|has| |t#1| (|CharacteristicZero|)))
  (AND (|has| |t#1| (|AbelianGroup|)) (|has| |t#1| (|CharacteristicNonZero|)))
  (AND (|has| |t#1| (|AbelianGroup|))
       (|has| |t#1| (|Algebra| (|Fraction| (|Integer|)))))
  (AND (|has| $ (|VariablesCommuteWithCoefficients|))
       (|has| |t#1| (|IntegralDomain|)))
  (AND (|has| $ (|VariablesCommuteWithCoefficients|))
       (|has| |t#1| (|CommutativeRing|))))
 ((|CharacteristicNonZero|) |has| |t#1| (|CharacteristicNonZero|))
 ((|CharacteristicZero|) |has| |t#1| (|CharacteristicZero|))
 ((|CoercibleTo| (|Polynomial| |#1|)) |has| |#3| (|ConvertibleTo| (|Symbol|)))
 ((|CoercibleTo| (|OutputForm|)) . T)
 ((|CommutativeRing|) OR (|has| |t#1| (|GcdDomain|))
  (AND (|has| $ (|VariablesCommuteWithCoefficients|))
       (|has| |t#1| (|IntegralDomain|)))
  (AND (|has| $ (|VariablesCommuteWithCoefficients|))
       (|has| |t#1| (|CommutativeRing|))))
 ((|CommutativeStar|) OR (|has| |t#1| (|GcdDomain|))
  (AND (|has| $ (|VariablesCommuteWithCoefficients|))
       (|has| |t#1| (|IntegralDomain|)))
  (AND (|has| $ (|VariablesCommuteWithCoefficients|))
       (|has| |t#1| (|CommutativeRing|))))
 ((|Comparable|) |has| |t#1| (|Comparable|))
 ((|ConvertibleTo| (|Polynomial| |#1|)) |has| |#3|
  (|ConvertibleTo| (|Symbol|)))
 ((|ConvertibleTo| (|String|)) AND (|has| |#1| (|RetractableTo| (|Integer|)))
  (|has| |#3| (|ConvertibleTo| (|Symbol|))))
 ((|ConvertibleTo| (|Pattern| (|Integer|))) AND
  (|has| |t#1| (|ConvertibleTo| (|Pattern| (|Integer|))))
  (|has| |t#1| (|Ring|))
  (|has| |t#3| (|ConvertibleTo| (|Pattern| (|Integer|)))))
 ((|ConvertibleTo| (|Pattern| (|Float|))) AND
  (|has| |t#1| (|ConvertibleTo| (|Pattern| (|Float|)))) (|has| |t#1| (|Ring|))
  (|has| |t#3| (|ConvertibleTo| (|Pattern| (|Float|)))))
 ((|ConvertibleTo| (|InputForm|)) AND
  (|has| |t#1| (|ConvertibleTo| (|InputForm|)))
  (|has| |t#3| (|ConvertibleTo| (|InputForm|))))
 ((|EntireRing|) OR (|has| |t#1| (|EntireRing|))
  (AND (|has| $ (|VariablesCommuteWithCoefficients|))
       (|has| |t#1| (|IntegralDomain|))))
 ((|Evalable| $) |has| |t#1| (|SemiRing|))
 ((|FiniteAbelianMonoidRing| |t#1| |t#2|) . T)
 ((|FullyLinearlyExplicitOver| |t#1|) |has| |t#1| (|Ring|))
 ((|FullyRetractableTo| |t#1|) . T) ((|GcdDomain|) |has| |t#1| (|GcdDomain|))
 ((|InnerEvalable| |t#1| |t#1|) |has| |t#1| (|SemiRing|))
 ((|InnerEvalable| |t#3| $) . T) ((|InnerEvalable| |t#3| |t#1|) . T)
 ((|IntegralDomain|) OR (|has| |t#1| (|GcdDomain|))
  (AND (|has| $ (|VariablesCommuteWithCoefficients|))
       (|has| |t#1| (|IntegralDomain|))))
 ((|LeftModule| |t#1|) . T) ((|LeftOreRing|) |has| |t#1| (|GcdDomain|))
 ((|LinearlyExplicitOver| (|Integer|)) AND
  (|has| |t#1| (|LinearlyExplicitOver| (|Integer|))) (|has| |t#1| (|Ring|)))
 ((|LinearlyExplicitOver| |t#1|) |has| |t#1| (|Ring|)) ((|Magma|) . T)
 ((|MagmaWithUnit|) OR (|has| |t#1| (|SemiRing|))
  (AND (|has| $ (|VariablesCommuteWithCoefficients|))
       (|has| |t#1| (|IntegralDomain|)))
  (AND (|has| $ (|VariablesCommuteWithCoefficients|))
       (|has| |t#1| (|CommutativeRing|))))
 ((|MaybeSkewPolynomialCategory| |t#1| |t#2| |t#3|) . T)
 ((|Module| |t#1|) OR (|has| |t#1| (|GcdDomain|))
  (|has| |t#1| (|Algebra| (|Fraction| (|Integer|))))
  (AND (|has| $ (|VariablesCommuteWithCoefficients|))
       (|has| |t#1| (|IntegralDomain|)))
  (AND (|has| $ (|VariablesCommuteWithCoefficients|))
       (|has| |t#1| (|CommutativeRing|))))
 ((|Monoid|) OR (|has| |t#1| (|SemiRing|))
  (AND (|has| $ (|VariablesCommuteWithCoefficients|))
       (|has| |t#1| (|IntegralDomain|)))
  (AND (|has| $ (|VariablesCommuteWithCoefficients|))
       (|has| |t#1| (|CommutativeRing|))))
 ((|NonAssociativeRing|) OR (|has| |t#1| (|Ring|))
  (AND (|has| $ (|VariablesCommuteWithCoefficients|))
       (|has| |t#1| (|IntegralDomain|)))
  (AND (|has| $ (|VariablesCommuteWithCoefficients|))
       (|has| |t#1| (|CommutativeRing|))))
 ((|NonAssociativeRng|) OR (|has| |t#1| (|Ring|))
  (AND (|has| $ (|VariablesCommuteWithCoefficients|))
       (|has| |t#1| (|IntegralDomain|)))
  (AND (|has| $ (|VariablesCommuteWithCoefficients|))
       (|has| |t#1| (|CommutativeRing|))))
 ((|NonAssociativeSemiRing|) OR (|has| |t#1| (|SemiRing|))
  (AND (|has| $ (|VariablesCommuteWithCoefficients|))
       (|has| |t#1| (|IntegralDomain|)))
  (AND (|has| $ (|VariablesCommuteWithCoefficients|))
       (|has| |t#1| (|CommutativeRing|))))
 ((|NonAssociativeSemiRng|) . T)
 ((|PartialDifferentialRing| |t#3|) |has| |t#1| (|Ring|))
 ((|PatternMatchable| (|Integer|)) AND
  (|has| |t#1| (|PatternMatchable| (|Integer|))) (|has| |t#1| (|Ring|))
  (|has| |t#3| (|PatternMatchable| (|Integer|))))
 ((|PatternMatchable| (|Float|)) AND
  (|has| |t#1| (|PatternMatchable| (|Float|))) (|has| |t#1| (|Ring|))
  (|has| |t#3| (|PatternMatchable| (|Float|))))
 ((|PolynomialCategory| |#1| |#2| |#3|) . T)
 ((|PolynomialFactorizationExplicit|) |has| |t#1|
  (|PolynomialFactorizationExplicit|))
 ((|RetractableTo| |t#3|) |has| |t#1| (|SemiRing|))
 ((|RetractableTo| (|Fraction| (|Integer|))) |has| |t#1|
  (|RetractableTo| (|Fraction| (|Integer|))))
 ((|RetractableTo| (|Integer|)) |has| |t#1| (|RetractableTo| (|Integer|)))
 ((|RetractableTo| |t#1|) . T) ((|RightModule| |t#2|) . T)
 ((|Ring|) OR (|has| |t#1| (|Ring|))
  (AND (|has| $ (|VariablesCommuteWithCoefficients|))
       (|has| |t#1| (|IntegralDomain|)))
  (AND (|has| $ (|VariablesCommuteWithCoefficients|))
       (|has| |t#1| (|CommutativeRing|))))
 ((|Rng|) OR (|has| |t#1| (|Ring|))
  (AND (|has| $ (|VariablesCommuteWithCoefficients|))
       (|has| |t#1| (|IntegralDomain|)))
  (AND (|has| $ (|VariablesCommuteWithCoefficients|))
       (|has| |t#1| (|CommutativeRing|))))
 ((|SemiGroup|) . T)
 ((|SemiRing|) OR (|has| |t#1| (|SemiRing|))
  (AND (|has| $ (|VariablesCommuteWithCoefficients|))
       (|has| |t#1| (|IntegralDomain|)))
  (AND (|has| $ (|VariablesCommuteWithCoefficients|))
       (|has| |t#1| (|CommutativeRing|))))
 ((|SemiRng|) . T) ((|SetCategory|) . T)
 ((|TwoSidedRecip|) OR (|has| |t#1| (|GcdDomain|))
  (AND (|has| $ (|VariablesCommuteWithCoefficients|))
       (|has| |t#1| (|IntegralDomain|)))
  (AND (|has| $ (|VariablesCommuteWithCoefficients|))
       (|has| |t#1| (|CommutativeRing|))))
 ((|UniqueFactorizationDomain|) |has| |t#1|
  (|PolynomialFactorizationExplicit|))
 ((|VariablesCommuteWithCoefficients|) . T)
 ((|canonicalUnitNormal|) |has| |t#1| (|canonicalUnitNormal|))
 ((|noZeroDivisors|) OR (|has| |t#1| (|EntireRing|))
  (AND (|has| $ (|VariablesCommuteWithCoefficients|))
       (|has| |t#1| (|IntegralDomain|))))
 ((|unitsKnown|) OR (|has| |t#1| (|Ring|))
  (AND (|has| $ (|VariablesCommuteWithCoefficients|))
       (|has| |t#1| (|IntegralDomain|)))
  (AND (|has| $ (|VariablesCommuteWithCoefficients|))
       (|has| |t#1| (|CommutativeRing|)))))
((|constructor|
  (NIL
   "A category for general multi-variate polynomials with coefficients in a ring,{} variables in an ordered set,{} and exponents from an ordered abelian monoid,{} with a \\spadfun{sup} operation. When not constant,{} such a polynomial is viewed as a univariate polynomial in its main variable \\spad{w}. \\spad{r}. \\spad{t}. to the total ordering on the elements in the ordered set,{} so that some operations usually defined for univariate polynomials make sense here."))
 (|mainSquareFreePart|
  (($ $)
   "\\spad{mainSquareFreePart(p)} returns the square free part of \\spad{p} viewed as a univariate polynomial in its main variable and with coefficients in the polynomial ring generated by its other variables over \\spad{R}."))
 (|mainPrimitivePart|
  (($ $)
   "\\spad{mainPrimitivePart(p)} returns the primitive part of \\spad{p} viewed as a univariate polynomial in its main variable and with coefficients in the polynomial ring generated by its other variables over \\spad{R}."))
 (|mainContent|
  (($ $)
   "\\spad{mainContent(p)} returns the content of \\spad{p} viewed as a univariate polynomial in its main variable and with coefficients in the polynomial ring generated by its other variables over \\spad{R}."))
 (|primitivePart!|
  (($ $)
   "\\spad{primitivePart!(p)} replaces \\spad{p} by its primitive part."))
 (|gcd|
  ((|#1| |#1| $)
   "\\spad{gcd(r,{} p)} returns the \\spad{gcd} of \\spad{r} and the content of \\spad{p}."))
 (|iexactQuo|
  ((|#1| |#1| |#1|)
   "\\spad{iexactQuo(x,{} y)} should be local but conditional"))
 (|next_subResultant2|
  (($ $ $ $ $)
   "\\spad{next_subResultant2(p,{} q,{} z,{} s)} is the multivariate version of the operation \\spadopFrom{\\spad{next_sousResultant2}}{PseudoRemainderSequence} from the \\spadtype{PseudoRemainderSequence} constructor."))
 (|LazardQuotient2|
  (($ $ $ $ (|NonNegativeInteger|))
   "\\spad{LazardQuotient2(p,{} a,{} b,{} n)} returns \\spad{(a^(n-1) * p) exquo b^(n-1)} assuming that this quotient does not fail."))
 (|LazardQuotient|
  (($ $ $ (|NonNegativeInteger|))
   "\\spad{LazardQuotient(a,{} b,{} n)} returns \\spad{a^n exquo b^(n-1)} assuming that this quotient does not fail."))
 (|lastSubResultant|
  (($ $ $)
   "\\spad{lastSubResultant(a,{} b)} returns the last non-zero subresultant of \\spad{a} and \\spad{b} where \\spad{a} and \\spad{b} are assumed to have the same main variable \\spad{v} and are viewed as univariate polynomials in \\spad{v}."))
 (|subResultantChain|
  (((|List| $) $ $)
   "\\spad{subResultantChain(a,{} b)},{} where \\spad{a} and \\spad{b} are not constant polynomials with the same main variable,{} returns the subresultant chain of \\spad{a} and \\spad{b}."))
 (|resultant|
  (($ $ $)
   "\\spad{resultant(a,{} b)} computes the resultant of \\spad{a} and \\spad{b} where \\spad{a} and \\spad{b} are assumed to have the same main variable \\spad{v} and are viewed as univariate polynomials in \\spad{v}."))
 (|halfExtendedSubResultantGcd2|
  (((|Record| (|:| |gcd| $) (|:| |coef2| $)) $ $)
   "\\spad{halfExtendedSubResultantGcd2(a,{} b)} returns \\spad{[g,{} cb]} if \\spad{extendedSubResultantGcd(a,{} b)} returns \\spad{[g,{} ca,{} cb]} otherwise produces an error."))
 (|halfExtendedSubResultantGcd1|
  (((|Record| (|:| |gcd| $) (|:| |coef1| $)) $ $)
   "\\spad{halfExtendedSubResultantGcd1(a,{} b)} returns \\spad{[g,{} ca]} if \\spad{extendedSubResultantGcd(a,{} b)} returns \\spad{[g,{} ca,{} cb]} otherwise produces an error."))
 (|extendedSubResultantGcd|
  (((|Record| (|:| |gcd| $) (|:| |coef1| $) (|:| |coef2| $)) $ $)
   "\\spad{extendedSubResultantGcd(a,{} b)} returns \\spad{[ca,{} cb,{} r]} such that \\spad{r} is \\spad{subResultantGcd(a,{} b)} and we have \\spad{ca * a + cb * cb = r} ."))
 (|subResultantGcd|
  (($ $ $)
   "\\spad{subResultantGcd(a,{} b)} computes a \\spad{gcd} of \\spad{a} and \\spad{b} where \\spad{a} and \\spad{b} are assumed to have the same main variable \\spad{v} and are viewed as univariate polynomials in \\spad{v} with coefficients in the fraction field of the polynomial ring generated by their other variables over \\spad{R}."))
 (|exactQuotient!|
  (($ $ $)
   "\\spad{exactQuotient!(a,{} b)} replaces \\spad{a} by \\spad{exactQuotient(a,{} b)}")
  (($ $ |#1|)
   "\\spad{exactQuotient!(p,{} r)} replaces \\spad{p} by \\spad{exactQuotient(p,{} r)}."))
 (|exactQuotient|
  (($ $ $)
   "\\spad{exactQuotient(a,{} b)} computes the exact quotient of \\spad{a} by \\spad{b},{} which is assumed to be a divisor of \\spad{a}. No error is returned if this exact quotient fails!")
  (($ $ |#1|)
   "\\spad{exactQuotient(p,{} r)} computes the exact quotient of \\spad{p} by \\spad{r},{} which is assumed to be a divisor of \\spad{p}. No error is returned if this exact quotient fails!"))
 (|primPartElseUnitCanonical!|
  (($ $)
   "\\spad{primPartElseUnitCanonical!(p)} replaces \\spad{p} by \\spad{primPartElseUnitCanonical(p)}."))
 (|primPartElseUnitCanonical|
  (($ $)
   "\\spad{primPartElseUnitCanonical(p)} returns \\spad{primitivePart(p)} if \\spad{R} is a \\spad{gcd}-domain,{} otherwise \\spad{unitCanonical(p)}."))
 (|convert|
  (($ (|Polynomial| |#1|))
   "\\spad{convert(p)} returns the same as \\spad{retract(p)}.")
  (($ (|Polynomial| (|Integer|)))
   "\\spad{convert(p)} returns the same as \\spad{retract(p)}.")
  (($ (|Polynomial| (|Fraction| (|Integer|))))
   "\\spad{convert(p)} returns the same as \\spad{retract(p)}."))
 (|retract|
  (($ (|Polynomial| |#1|))
   "\\spad{retract(p)} returns \\spad{p} as an element of the current domain,{} if \\spad{retractIfCan(p)} does not return \"failed\",{} otherwise an error is produced.")
  (($ (|Polynomial| (|Integer|)))
   "\\spad{retract(p)} returns \\spad{p} as an element of the current domain,{} if \\spad{retractIfCan(p)} does not return \"failed\",{} otherwise an error is produced.")
  (($ (|Polynomial| (|Fraction| (|Integer|))))
   "\\spad{retract(p)} returns \\spad{p} as an element of the current domain,{} if \\spad{retractIfCan(p)} does not return \"failed\",{} otherwise an error is produced."))
 (|retractIfCan|
  (((|Union| $ "failed") (|Polynomial| |#1|))
   "\\spad{retractIfCan(p)} returns \\spad{p} as an element of the current domain,{} if all its variables belong to \\spad{V}.")
  (((|Union| $ "failed") (|Polynomial| (|Integer|)))
   "\\spad{retractIfCan(p)} returns \\spad{p} as an element of the current domain,{} if all its variables belong to \\spad{V}.")
  (((|Union| $ "failed") (|Polynomial| (|Fraction| (|Integer|))))
   "\\spad{retractIfCan(p)} returns \\spad{p} as an element of the current domain,{} if all its variables belong to \\spad{V}."))
 (|initiallyReduce|
  (($ $ $)
   "\\spad{initiallyReduce(a,{} b)} returns a polynomial \\spad{r} such that \\spad{initiallyReduced?(r,{} b)} holds and there exists an integer \\spad{e} such that \\spad{init(b)^e a - r} is zero modulo \\spad{b}."))
 (|headReduce|
  (($ $ $)
   "\\spad{headReduce(a,{} b)} returns a polynomial \\spad{r} such that \\spad{headReduced?(r,{} b)} holds and there exists an integer \\spad{e} such that \\spad{init(b)^e a - r} is zero modulo \\spad{b}."))
 (|lazyResidueClass|
  (((|Record| (|:| |polnum| $) (|:| |polden| $)
              (|:| |power| (|NonNegativeInteger|)))
    $ $)
   "\\spad{lazyResidueClass(a,{} b)} returns \\spad{[p,{} q,{} n]} where \\spad{p / q^n} represents the residue class of \\spad{a} modulo \\spad{b} and \\spad{p} is reduced \\spad{w}.\\spad{r}.\\spad{t}. \\spad{b} and \\spad{q} is \\spad{init(b)}."))
 (|monicModulo|
  (($ $ $)
   "\\spad{monicModulo(a,{} b)} computes \\spad{a mod b},{} if \\spad{b} is monic as univariate polynomial in its main variable."))
 (|pseudoDivide|
  (((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $)
   "\\spad{pseudoDivide(a,{} b)} computes \\spad{[pquo(a,{} b),{} prem(a,{} b)]},{} both polynomials viewed as univariate polynomials in the main variable of \\spad{b},{} if \\spad{b} is not a constant polynomial."))
 (|lazyPseudoDivide|
  (((|Record| (|:| |coef| $) (|:| |gap| (|NonNegativeInteger|))
              (|:| |quotient| $) (|:| |remainder| $))
    $ $ |#3|)
   "\\spad{lazyPseudoDivide(a,{} b,{} v)} returns \\spad{[c,{} g,{} q,{} r]} such that \\spad{r = lazyPrem(a,{} b,{} v)},{} \\spad{(c^g)*r = prem(a,{} b,{} v)} and \\spad{q} is the pseudo-quotient computed in this lazy pseudo-division.")
  (((|Record| (|:| |coef| $) (|:| |gap| (|NonNegativeInteger|))
              (|:| |quotient| $) (|:| |remainder| $))
    $ $)
   "\\spad{lazyPseudoDivide(a,{} b)} returns \\spad{[c,{} g,{} q,{} r]} such that \\spad{[c,{} g,{} r] = lazyPremWithDefault(a,{} b)} and \\spad{q} is the pseudo-quotient computed in this lazy pseudo-division."))
 (|lazyPremWithDefault|
  (((|Record| (|:| |coef| $) (|:| |gap| (|NonNegativeInteger|))
              (|:| |remainder| $))
    $ $ |#3|)
   "\\spad{lazyPremWithDefault(a,{} b,{} v)} returns \\spad{[c,{} g,{} r]} such that \\spad{r = lazyPrem(a,{} b,{} v)} and \\spad{(c^g)*r = prem(a,{} b,{} v)}.")
  (((|Record| (|:| |coef| $) (|:| |gap| (|NonNegativeInteger|))
              (|:| |remainder| $))
    $ $)
   "\\spad{lazyPremWithDefault(a,{} b)} returns \\spad{[c,{} g,{} r]} such that \\spad{r = lazyPrem(a,{} b)} and \\spad{(c^g)*r = prem(a,{} b)}."))
 (|lazyPquo|
  (($ $ $ |#3|)
   "\\spad{lazyPquo(a,{} b,{} v)} returns the polynomial \\spad{q} such that \\spad{lazyPseudoDivide(a,{} b,{} v)} returns \\spad{[c,{} g,{} q,{} r]}.")
  (($ $ $)
   "\\spad{lazyPquo(a,{} b)} returns the polynomial \\spad{q} such that \\spad{lazyPseudoDivide(a,{} b)} returns \\spad{[c,{} g,{} q,{} r]}."))
 (|lazyPrem|
  (($ $ $ |#3|)
   "\\spad{lazyPrem(a,{} b,{} v)} returns the polynomial \\spad{r} reduced \\spad{w}.\\spad{r}.\\spad{t}. \\spad{b} viewed as univariate polynomials in the variable \\spad{v} such that \\spad{b} divides \\spad{init(b)^e a - r} where \\spad{e} is the number of steps of this pseudo-division.")
  (($ $ $)
   "\\spad{lazyPrem(a,{} b)} returns the polynomial \\spad{r} reduced \\spad{w}.\\spad{r}.\\spad{t}. \\spad{b} and such that \\spad{b} divides \\spad{init(b)^e a - r} where \\spad{e} is the number of steps of this pseudo-division."))
 (|pquo|
  (($ $ $ |#3|)
   "\\spad{pquo(a,{} b,{} v)} computes the pseudo-quotient of \\spad{a} by \\spad{b},{} both viewed as univariate polynomials in \\spad{v}.")
  (($ $ $)
   "\\spad{pquo(a,{} b)} computes the pseudo-quotient of \\spad{a} by \\spad{b},{} both viewed as univariate polynomials in the main variable of \\spad{b}."))
 (|prem|
  (($ $ $ |#3|)
   "\\spad{prem(a,{} b,{} v)} computes the pseudo-remainder of \\spad{a} by \\spad{b},{} both viewed as univariate polynomials in \\spad{v}.")
  (($ $ $)
   "\\spad{prem(a,{} b)} computes the pseudo-remainder of \\spad{a} by \\spad{b},{} both viewed as univariate polynomials in the main variable of \\spad{b}."))
 (|normalized?|
  (((|Boolean|) $ (|List| $))
   "\\spad{normalized?(q,{} lp)} returns \\spad{true} iff \\spad{normalized?(q,{} p)} holds for every \\spad{p} in \\spad{lp}.")
  (((|Boolean|) $ $)
   "\\spad{normalized?(a,{} b)} returns \\spad{true} iff \\spad{a} and its iterated initials have degree zero \\spad{w}.\\spad{r}.\\spad{t}. the main variable of \\spad{b}"))
 (|initiallyReduced?|
  (((|Boolean|) $ (|List| $))
   "\\spad{initiallyReduced?(q,{} lp)} returns \\spad{true} iff \\spad{initiallyReduced?(q,{} p)} holds for every \\spad{p} in \\spad{lp}.")
  (((|Boolean|) $ $)
   "\\spad{initiallyReduced?(a,{} b)} returns \\spad{false} iff there exists an iterated initial of \\spad{a} which is not reduced \\spad{w}.\\spad{r}.\\spad{t} \\spad{b}."))
 (|headReduced?|
  (((|Boolean|) $ (|List| $))
   "\\spad{headReduced?(q,{} lp)} returns \\spad{true} iff \\spad{headReduced?(q,{} p)} holds for every \\spad{p} in \\spad{lp}.")
  (((|Boolean|) $ $)
   "\\spad{headReduced?(a,{} b)} returns \\spad{true} iff \\spad{degree(head(a),{} mvar(b)) < mdeg(b)}."))
 (|reduced?|
  (((|Boolean|) $ (|List| $))
   "\\spad{reduced?(q,{} lp)} returns \\spad{true} iff \\spad{reduced?(q,{} p)} holds for every \\spad{p} in \\spad{lp}.")
  (((|Boolean|) $ $)
   "\\spad{reduced?(a,{} b)} returns \\spad{true} iff \\spad{degree(a,{} mvar(b)) < mdeg(b)}."))
 (|supRittWu?|
  (((|Boolean|) $ $)
   "\\spad{supRittWu?(a,{} b)} returns \\spad{true} if \\spad{a} is greater than \\spad{b} \\spad{w}.\\spad{r}.\\spad{t}. the Ritt and Wu Wen Tsun ordering using the refinement of Lazard."))
 (|infRittWu?|
  (((|Boolean|) $ $)
   "\\spad{infRittWu?(a,{} b)} returns \\spad{true} if \\spad{a} is less than \\spad{b} \\spad{w}.\\spad{r}.\\spad{t}. the Ritt and Wu Wen Tsun ordering using the refinement of Lazard."))
 (|RittWuCompare|
  (((|Union| (|Boolean|) "failed") $ $)
   "\\spad{RittWuCompare(a,{}b)} returns \\spad{\"failed\"} if \\spad{a} and \\spad{b} have same rank \\spad{w}.\\spad{r}.\\spad{t}. Ritt and Wu Wen Tsun ordering using the refinement of Lazard,{} otherwise returns \\spad{infRittWu?(a,{} b)}."))
 (|mainMonomials|
  (((|List| $) $)
   "\\spad{mainMonomials(p)} returns an error if \\spad{p} is \\spad{O},{} otherwise,{} if \\spad{p} belongs to \\spad{R} returns [1],{} otherwise returns the list of the monomials of \\spad{p},{} where \\spad{p} is viewed as a univariate polynomial in its main variable."))
 (|mainCoefficients|
  (((|List| $) $)
   "\\spad{mainCoefficients(p)} returns an error if \\spad{p} is \\spad{O},{} otherwise,{} if \\spad{p} belongs to \\spad{R} returns [\\spad{p}],{} otherwise returns the list of the coefficients of \\spad{p},{} where \\spad{p} is viewed as a univariate polynomial in its main variable."))
 (|leastMonomial|
  (($ $)
   "\\spad{leastMonomial(p)} returns an error if \\spad{p} is \\spad{O},{} otherwise,{} if \\spad{p} belongs to \\spad{R} returns \\spad{1},{} otherwise,{} the monomial of \\spad{p} with lowest degree,{} where \\spad{p} is viewed as a univariate polynomial in its main variable."))
 (|mainMonomial|
  (($ $)
   "\\spad{mainMonomial(p)} returns an error if \\spad{p} is \\spad{O},{} otherwise,{} if \\spad{p} belongs to \\spad{R} returns \\spad{1},{} otherwise,{} \\spad{mvar(p)} raised to the power \\spad{mdeg(p)}."))
 (|quasiMonic?|
  (((|Boolean|) $)
   "\\spad{quasiMonic?(p)} returns \\spad{false} if \\spad{p} belongs to \\spad{R},{} otherwise returns \\spad{true} iff the initial of \\spad{p} lies in the base ring \\spad{R}."))
 (|monic?|
  (((|Boolean|) $)
   "\\spad{monic?(p)} returns \\spad{false} if \\spad{p} belongs to \\spad{R},{} otherwise returns \\spad{true} iff \\spad{p} is monic as a univariate polynomial in its main variable."))
 (|reductum|
  (($ $ |#3|)
   "\\spad{reductum(p,{} v)} returns the reductum of \\spad{p},{} where \\spad{p} is viewed as a univariate polynomial in \\spad{v}."))
 (|leadingCoefficient|
  (($ $ |#3|)
   "\\spad{leadingCoefficient(p,{} v)} returns the leading coefficient of \\spad{p},{} where \\spad{p} is viewed as A univariate polynomial in \\spad{v}."))
 (|deepestInitial|
  (($ $)
   "\\spad{deepestInitial(p)} returns an error if \\spad{p} belongs to \\spad{R},{} otherwise returns the last term of \\spad{iteratedInitials(p)}."))
 (|iteratedInitials|
  (((|List| $) $)
   "\\spad{iteratedInitials(p)} returns \\spad{[]} if \\spad{p} belongs to \\spad{R},{} otherwise returns the list of the iterated initials of \\spad{p}."))
 (|deepestTail|
  (($ $)
   "\\spad{deepestTail(p)} returns \\spad{0} if \\spad{p} belongs to \\spad{R},{} otherwise returns tail(\\spad{p}),{} if \\spad{tail(p)} belongs to \\spad{R} or \\spad{mvar(tail(p)) < mvar(p)},{} otherwise returns \\spad{deepestTail(tail(p))}."))
 (|tail|
  (($ $)
   "\\spad{tail(p)} returns its reductum,{} where \\spad{p} is viewed as a univariate polynomial in its main variable."))
 (|head|
  (($ $)
   "\\spad{head(p)} returns \\spad{p} if \\spad{p} belongs to \\spad{R},{} otherwise returns its leading term (monomial in the FriCAS sense),{} where \\spad{p} is viewed as a univariate polynomial in its main variable."))
 (|init|
  (($ $)
   "\\spad{init(p)} returns an error if \\spad{p} belongs to \\spad{R},{} otherwise returns its leading coefficient,{} where \\spad{p} is viewed as a univariate polynomial in its main variable."))
 (|mdeg|
  (((|NonNegativeInteger|) $)
   "\\spad{mdeg(p)} returns an error if \\spad{p} is \\spad{0},{} otherwise,{} if \\spad{p} belongs to \\spad{R} returns \\spad{0},{} otherwise,{} returns the degree of \\spad{p} in its main variable."))
 (|mvar|
  ((|#3| $)
   "\\spad{mvar(p)} returns an error if \\spad{p} belongs to \\spad{R},{} otherwise returns its main variable \\spad{w}. \\spad{r}. \\spad{t}. to the total ordering on the elements in \\spad{V}.")))
(("documentation" 0 57032) ("ancestors" 0 48638) ("parents" 0 48307)
 ("abbreviation" 0 48299) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 26902) ("modemaps" 0 6167) ("sourceFile" 0 6128)
 ("constructorCategory" 0 222) ("constructorModemap" 0 69)
 ("constructorKind" 0 58) ("constructorForm" 0 20))