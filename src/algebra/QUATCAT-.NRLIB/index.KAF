8337                (|QuaternionCategory&| S R)
|domain|
(((|QuaternionCategory&| |#1| |#2|)
  (CATEGORY |domain| (SIGNATURE < ((|Boolean|) |#1| |#1|))
   (SIGNATURE |coerce| (|#1| (|Fraction| (|Integer|))))
   (SIGNATURE * (|#1| (|Fraction| (|Integer|)) |#1|))
   (SIGNATURE * (|#1| |#1| (|Fraction| (|Integer|))))
   (SIGNATURE |inv| (|#1| |#1|)) (SIGNATURE |convert| ((|InputForm|) |#1|))
   (SIGNATURE |rationalIfCan|
    ((|Union| (|Fraction| (|Integer|)) "failed") |#1|))
   (SIGNATURE |rational| ((|Fraction| (|Integer|)) |#1|))
   (SIGNATURE |rational?| ((|Boolean|) |#1|)) (SIGNATURE |abs| (|#2| |#1|))
   (SIGNATURE |norm| (|#2| |#1|)) (SIGNATURE |conjugate| (|#1| |#1|))
   (SIGNATURE |map| (|#1| (|Mapping| |#2| |#2|) |#1|))
   (SIGNATURE |differentiate| (|#1| |#1| (|Mapping| |#2| |#2|)))
   (SIGNATURE |differentiate|
    (|#1| |#1| (|Mapping| |#2| |#2|) (|NonNegativeInteger|)))
   (SIGNATURE |differentiate|
    (|#1| |#1| (|List| (|Symbol|)) (|List| (|NonNegativeInteger|))))
   (SIGNATURE |differentiate| (|#1| |#1| (|Symbol|) (|NonNegativeInteger|)))
   (SIGNATURE |differentiate| (|#1| |#1| (|List| (|Symbol|))))
   (SIGNATURE |differentiate| (|#1| |#1| (|Symbol|)))
   (SIGNATURE |differentiate| (|#1| |#1| (|NonNegativeInteger|)))
   (SIGNATURE |differentiate| (|#1| |#1|)) (SIGNATURE |retract| (|#2| |#1|))
   (SIGNATURE |retractIfCan| ((|Union| |#2| #1="failed") |#1|))
   (SIGNATURE |retractIfCan| ((|Union| (|Fraction| (|Integer|)) #1#) |#1|))
   (SIGNATURE |retract| ((|Fraction| (|Integer|)) |#1|))
   (SIGNATURE |retractIfCan| ((|Union| (|Integer|) #1#) |#1|))
   (SIGNATURE |retract| ((|Integer|) |#1|)) (SIGNATURE |coerce| (|#1| |#2|))
   (SIGNATURE * (|#1| |#2| |#1|)) (SIGNATURE * (|#1| |#1| |#2|))
   (SIGNATURE |characteristic| ((|NonNegativeInteger|)))
   (SIGNATURE |coerce| (|#1| (|Integer|)))
   (SIGNATURE |one?| ((|Boolean|) |#1|)) (SIGNATURE |zero?| ((|Boolean|) |#1|))
   (SIGNATURE * (|#1| (|NonNegativeInteger|) |#1|)) (SIGNATURE - (|#1| |#1|))
   (SIGNATURE - (|#1| |#1| |#1|)) (SIGNATURE * (|#1| (|Integer|) |#1|))
   (SIGNATURE * (|#1| |#1| |#1|)) (SIGNATURE * (|#1| (|PositiveInteger|) |#1|))
   (SIGNATURE + (|#1| |#1| |#1|)) (SIGNATURE |coerce| ((|OutputForm|) |#1|))
   (SIGNATURE = ((|Boolean|) |#1| |#1|)))
  (|QuaternionCategory| |#2|) (|CommutativeRing|))
 (T |QuaternionCategory&|))
(CATEGORY |domain| (SIGNATURE < ((|Boolean|) |#1| |#1|))
 (SIGNATURE |coerce| (|#1| (|Fraction| (|Integer|))))
 (SIGNATURE * (|#1| (|Fraction| (|Integer|)) |#1|))
 (SIGNATURE * (|#1| |#1| (|Fraction| (|Integer|))))
 (SIGNATURE |inv| (|#1| |#1|)) (SIGNATURE |convert| ((|InputForm|) |#1|))
 (SIGNATURE |rationalIfCan| ((|Union| (|Fraction| (|Integer|)) "failed") |#1|))
 (SIGNATURE |rational| ((|Fraction| (|Integer|)) |#1|))
 (SIGNATURE |rational?| ((|Boolean|) |#1|)) (SIGNATURE |abs| (|#2| |#1|))
 (SIGNATURE |norm| (|#2| |#1|)) (SIGNATURE |conjugate| (|#1| |#1|))
 (SIGNATURE |map| (|#1| (|Mapping| |#2| |#2|) |#1|))
 (SIGNATURE |differentiate| (|#1| |#1| (|Mapping| |#2| |#2|)))
 (SIGNATURE |differentiate|
  (|#1| |#1| (|Mapping| |#2| |#2|) (|NonNegativeInteger|)))
 (SIGNATURE |differentiate|
  (|#1| |#1| (|List| (|Symbol|)) (|List| (|NonNegativeInteger|))))
 (SIGNATURE |differentiate| (|#1| |#1| (|Symbol|) (|NonNegativeInteger|)))
 (SIGNATURE |differentiate| (|#1| |#1| (|List| (|Symbol|))))
 (SIGNATURE |differentiate| (|#1| |#1| (|Symbol|)))
 (SIGNATURE |differentiate| (|#1| |#1| (|NonNegativeInteger|)))
 (SIGNATURE |differentiate| (|#1| |#1|)) (SIGNATURE |retract| (|#2| |#1|))
 (SIGNATURE |retractIfCan| ((|Union| |#2| #1="failed") |#1|))
 (SIGNATURE |retractIfCan| ((|Union| (|Fraction| (|Integer|)) #1#) |#1|))
 (SIGNATURE |retract| ((|Fraction| (|Integer|)) |#1|))
 (SIGNATURE |retractIfCan| ((|Union| (|Integer|) #1#) |#1|))
 (SIGNATURE |retract| ((|Integer|) |#1|)) (SIGNATURE |coerce| (|#1| |#2|))
 (SIGNATURE * (|#1| |#2| |#1|)) (SIGNATURE * (|#1| |#1| |#2|))
 (SIGNATURE |characteristic| ((|NonNegativeInteger|)))
 (SIGNATURE |coerce| (|#1| (|Integer|))) (SIGNATURE |one?| ((|Boolean|) |#1|))
 (SIGNATURE |zero?| ((|Boolean|) |#1|))
 (SIGNATURE * (|#1| (|NonNegativeInteger|) |#1|)) (SIGNATURE - (|#1| |#1|))
 (SIGNATURE - (|#1| |#1| |#1|)) (SIGNATURE * (|#1| (|Integer|) |#1|))
 (SIGNATURE * (|#1| |#1| |#1|)) (SIGNATURE * (|#1| (|PositiveInteger|) |#1|))
 (SIGNATURE + (|#1| |#1| |#1|)) (SIGNATURE |coerce| ((|OutputForm|) |#1|))
 (SIGNATURE = ((|Boolean|) |#1| |#1|)))
"/git/fricas/src/algebra/QUATCAT.spad"
((|characteristic| (*1 *2)
  (AND (|ofCategory| *4 (|CommutativeRing|))
       (|isDomain| *2 (|NonNegativeInteger|))
       (|isDomain| *1 (|QuaternionCategory&| *3 *4))
       (|ofCategory| *3 (|QuaternionCategory| *4)))))
((|zero?| (((|Boolean|) $) 45))
 (|retractIfCan| (((|Union| (|Integer|) #1="failed") $) NIL)
  (((|Union| (|Fraction| (|Integer|)) #1#) $) NIL) (((|Union| |#2| #1#) $) 48))
 (|retract| (((|Integer|) $) NIL) (((|Fraction| (|Integer|)) $) NIL)
            ((|#2| $) 46))
 (|rationalIfCan| (((|Union| (|Fraction| (|Integer|)) "failed") $) 78))
 (|rational?| (((|Boolean|) $) 72))
 (|rational| (((|Fraction| (|Integer|)) $) 76)) (|one?| (((|Boolean|) $) 44))
 (|norm| ((|#2| $) 23)) (|map| (($ (|Mapping| |#2| |#2|) $) 19))
 (|inv| (($ $) 61))
 (|differentiate| (($ $) NIL) (($ $ (|NonNegativeInteger|)) NIL)
  (($ $ (|Symbol|)) NIL) (($ $ (|List| (|Symbol|))) NIL)
  (($ $ (|Symbol|) (|NonNegativeInteger|)) NIL)
  (($ $ (|List| (|Symbol|)) (|List| (|NonNegativeInteger|))) NIL)
  (($ $ (|Mapping| |#2| |#2|) (|NonNegativeInteger|)) NIL)
  (($ $ (|Mapping| |#2| |#2|)) 37))
 (|convert| (((|InputForm|) $) 67)) (|conjugate| (($ $) 17))
 (|coerce| (((|OutputForm|) $) 57) (($ (|Integer|)) 41) (($ |#2|) 39)
           (($ (|Fraction| (|Integer|))) NIL))
 (|characteristic| (((|NonNegativeInteger|)) 10)) (|abs| ((|#2| $) 71))
 (= (((|Boolean|) $ $) 26)) (< (((|Boolean|) $ $) 69))
 (- (($ $ $) 30) (($ $) 31)) (+ (($ $ $) 28))
 (* (($ (|PositiveInteger|) $) NIL) (($ $ $) NIL) (($ (|Integer|) $) 36)
    (($ (|NonNegativeInteger|) $) NIL) (($ $ |#2|) NIL) (($ |#2| $) 33)
    (($ $ (|Fraction| (|Integer|))) NIL) (($ (|Fraction| (|Integer|)) $) NIL)))
((|HasCategory| |#2| '(|IntegerNumberSystem|))
 (|HasCategory| |#2| '(|RealNumberSystem|))
 (|HasCategory| |#2| '(|CharacteristicNonZero|))
 (|HasCategory| |#2| '(|CharacteristicZero|))
 (|HasCategory| |#2| (LIST '|ConvertibleTo| '(|InputForm|)))
 (|HasCategory| |#2| '(|Field|)) (|HasCategory| |#2| '(|OrderedSet|))
 (|HasCategory| |#2| '(|EntireRing|)))
QUATCAT-
((|constructor|
  (NIL
   "\\spadtype{QuaternionCategory} describes the category of quaternions and implements functions that are not representation specific."))
 (|rationalIfCan|
  (((|Union| (|Fraction| (|Integer|)) "failed") $)
   "\\spad{rationalIfCan(q)} returns \\spad{q} as a rational number,{} or \"failed\" if this is not possible. Note: if \\spad{rational?(q)} is \\spad{true},{} the conversion can be done and the rational number will be returned."))
 (|rational|
  (((|Fraction| (|Integer|)) $)
   "\\spad{rational(q)} tries to convert \\spad{q} into a rational number. Error: if this is not possible. If \\spad{rational?(q)} is \\spad{true},{} the conversion will be done and the rational number returned."))
 (|rational?|
  (((|Boolean|) $)
   "\\spad{rational?(q)} returns {\\it \\spad{true}} if all the imaginary parts of \\spad{q} are zero and the real part can be converted into a rational number,{} and {\\it \\spad{false}} otherwise."))
 (|abs|
  ((|#2| $)
   "\\spad{abs(q)} computes the absolute value of quaternion \\spad{q} (sqrt of norm)."))
 (|real|
  ((|#2| $) "\\spad{real(q)} extracts the real part of quaternion \\spad{q}."))
 (|quatern|
  (($ |#2| |#2| |#2| |#2|)
   "\\spad{quatern(r,{} i,{} j,{} k)} constructs a quaternion from scalars."))
 (|norm|
  ((|#2| $)
   "\\spad{norm(q)} computes the norm of \\spad{q} (the sum of the squares of the components)."))
 (|imagK|
  ((|#2| $)
   "\\spad{imagK(q)} extracts the imaginary \\spad{k} part of quaternion \\spad{q}."))
 (|imagJ|
  ((|#2| $)
   "\\spad{imagJ(q)} extracts the imaginary \\spad{j} part of quaternion \\spad{q}."))
 (|imagI|
  ((|#2| $)
   "\\spad{imagI(q)} extracts the imaginary \\spad{i} part of quaternion \\spad{q}."))
 (|conjugate|
  (($ $)
   "\\spad{conjugate(q)} negates the imaginary parts of quaternion \\spad{q}.")))
(("documentation" 0 6512) ("ancestors" 0 NIL) ("parents" 0 NIL)
 ("abbreviation" 0 6503) ("predicates" 0 6147) ("superDomain" 0 NIL)
 ("operationAlist" 0 4700) ("modemaps" 0 4475) ("sourceFile" 0 4436)
 ("constructorCategory" 0 2340) ("constructorModemap" 0 57)
 ("constructorKind" 0 48) ("constructorForm" 0 20))