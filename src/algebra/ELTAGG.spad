)abbrev category ELTAGG EltableAggregate
++ Author: Michael Monagan; revised by Manuel Bronstein and Richard Jenks
++ Date Created: August 87 through August 88
++ Basic Operations:
++ Related Constructors:
++ Also See:
++ AMS Classifications:
++ Keywords:
++ References:
++ Description:
++ An eltable aggregate is one which can be viewed as a function.
++ For example, the list \spad{[1, 7, 4]} can be applied to 1, 2, and 3
++ respectively and will return the integers 1, 7, and 4; thus this
++ list may be viewed as mapping 1 to 1, 2 to 7 and 3 to 4. In general,
++ an aggregate can map members of a domain {\em Dom} to an image
++ domain {\em Im}.
EltableAggregate(Dom : Type, Im : Type) : Category ==
-- This is separated from Eltable
-- and series won't have to support qelt's and setelt's.
  Eltable(Dom, Im) with
    elt : (%, Dom, Im) -> Im
       ++ elt(u, x, y) applies u to x if x is in the domain of u,
       ++ and returns y otherwise.
    qelt : (%, Dom) -> Im
       ++ qelt(u, x) applies \spad{u} to \spad{x} without checking whether
       ++ \spad{x} is in the domain of \spad{u}.  If \spad{x} is not in the
       ++ domain of \spad{u} a memory-access violation may occur.  If a check
       ++ on whether \spad{x} is in the domain of \spad{u} is required, use
       ++ the function \spad{elt}.
    if % has shallowlyMutable then
       setelt! : (%, Dom, Im) -> Im
           ++ setelt!(u, x, y) sets the image of x to be y under u,
           ++ if x is in the domain of u.
           ++ Error: if x is not in the domain of u.
       qsetelt! : (%, Dom, Im) -> Im
           ++ qsetelt!(u, x, y) sets the image of \spad{x} to be \spad{y} under
           ++ \spad{u}, without checking that \spad{x} is in the domain of
           ++ \spad{u}.
           ++ If such a check is required use the function \spad{setelt!}.
 add
  qelt(a, x) == elt(a, x)
  if % has shallowlyMutable then
      qsetelt!(a, x, y) == (a.x := y)

