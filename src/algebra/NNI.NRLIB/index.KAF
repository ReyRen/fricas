6280                (SETQ |$CategoryFrame|
                            (|put| #1='|NonNegativeInteger| '|SuperDomain|
                                   #2='(|Integer|)
                                   (|put| #2# #3='|SubDomain|
                                          (CONS
                                           '(|NonNegativeInteger| >= |#1| 0)
                                           (DELASC #1#
                                                   (|get| #2# #3#
                                                          |$CategoryFrame|)))
                                          |$CategoryFrame|)))
(MAKEPROP '|NonNegativeInteger| 'NILADIC T)
(|NonNegativeInteger|)
|domain|
(((|NonNegativeInteger|)
  (|Join| (|OrderedAbelianMonoidSup|) (|SemiRing|) (|CommutativeStar|)
          (|ConvertibleTo| (|InputForm|))
          (CATEGORY |domain| (SIGNATURE |quo| ($ $ $))
           (SIGNATURE |rem| ($ $ $)) (SIGNATURE |gcd| ($ $ $))
           (SIGNATURE |divide|
            ((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $))
           (SIGNATURE |exquo| ((|Union| $ "failed") $ $))
           (SIGNATURE |shift| ($ $ (|Integer|))) (SIGNATURE |random| ($ $))
           (SIGNATURE |qcoerce| ($ (|Integer|))))))
 (T |NonNegativeInteger|))
(|Join| (|OrderedAbelianMonoidSup|) (|SemiRing|) (|CommutativeStar|)
        (|ConvertibleTo| (|InputForm|))
        (CATEGORY |domain| (SIGNATURE |quo| ($ $ $)) (SIGNATURE |rem| ($ $ $))
         (SIGNATURE |gcd| ($ $ $))
         (SIGNATURE |divide|
          ((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $))
         (SIGNATURE |exquo| ((|Union| $ "failed") $ $))
         (SIGNATURE |shift| ($ $ (|Integer|))) (SIGNATURE |random| ($ $))
         (SIGNATURE |qcoerce| ($ (|Integer|)))))
"/git/fricas/src/algebra/NNI.spad"
((|quo| (*1 *1 *1 *1) (|isDomain| *1 (|NonNegativeInteger|)))
 (|rem| (*1 *1 *1 *1) (|isDomain| *1 (|NonNegativeInteger|)))
 (|gcd| (*1 *1 *1 *1) (|isDomain| *1 (|NonNegativeInteger|)))
 (|divide| (*1 *2 *1 *1)
  (AND
   (|isDomain| *2
               (|Record| (|:| |quotient| (|NonNegativeInteger|))
                         (|:| |remainder| (|NonNegativeInteger|))))
   (|isDomain| *1 (|NonNegativeInteger|))))
 (|exquo| (*1 *1 *1 *1) (|partial| |isDomain| *1 (|NonNegativeInteger|)))
 (|shift| (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|Integer|)) (|isDomain| *1 (|NonNegativeInteger|))))
 (|random| (*1 *1 *1) (|isDomain| *1 (|NonNegativeInteger|)))
 (|qcoerce| (*1 *1 *2)
  (AND (|isDomain| *2 (|Integer|)) (|isDomain| *1 (|NonNegativeInteger|)))))
((~= (((|Boolean|) $ $) NIL)) (|zero?| (((|Boolean|) $) NIL))
 (|sup| (($ $ $) 6)) (|subtractIfCan| (((|Union| $ "failed") $ $) 10))
 (|smaller?| (((|Boolean|) $ $) NIL)) (|shift| (($ $ (|Integer|)) 7))
 (|sample| (($) NIL T CONST)) (|rightRecip| (((|Union| $ #1="failed") $) NIL))
 (|rightPower| (($ $ (|NonNegativeInteger|)) NIL)
  (($ $ (|PositiveInteger|)) NIL))
 (|rem| (($ $ $) NIL)) (|recip| (((|Union| $ #1#) $) NIL))
 (|random| (($ $) NIL)) (|quo| (($ $ $) NIL)) (|qcoerce| (($ (|Integer|)) 8))
 (|opposite?| (((|Boolean|) $ $) NIL)) (|one?| (((|Boolean|) $) NIL))
 (|min| (($ $ $) NIL)) (|max| (($ $ $) NIL))
 (|leftRecip| (((|Union| $ #1#) $) NIL))
 (|leftPower| (($ $ (|NonNegativeInteger|)) NIL)
  (($ $ (|PositiveInteger|)) NIL))
 (|latex| (((|String|) $) NIL))
 (|hashUpdate!| (((|HashState|) (|HashState|) $) NIL))
 (|hash| (((|SingleInteger|) $) NIL)) (|gcd| (($ $ $) NIL))
 (|exquo| (((|Union| $ "failed") $ $) NIL))
 (|divide| (((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $) NIL))
 (|convert| (((|InputForm|) $) NIL)) (|coerce| (((|OutputForm|) $) NIL))
 (|antiCommutator| (($ $ $) NIL))
 (^ (($ $ (|NonNegativeInteger|)) NIL) (($ $ (|PositiveInteger|)) NIL))
 (|Zero| (($) NIL T CONST)) (|One| (($) NIL T CONST))
 (>= (((|Boolean|) $ $) NIL)) (> (((|Boolean|) $ $) NIL))
 (= (((|Boolean|) $ $) NIL)) (<= (((|Boolean|) $ $) NIL))
 (< (((|Boolean|) $ $) NIL))
 (- (($ $ $) NIL (|has| $ (|AbelianGroup|)))
    (($ $) NIL (|has| $ (|AbelianGroup|))))
 (+ (($ $ $) NIL))
 (* (($ (|PositiveInteger|) $) NIL) (($ (|NonNegativeInteger|) $) NIL)
    (($ (|Integer|) $) NIL (|has| $ (|AbelianGroup|))) (($ $ $) NIL)))
((|Integer|) (>= |#1| 0))
((|HasCategory| $ '(|AbelianGroup|)))
NNI
(((|OrderedAbelianMonoidSup|) . T) ((|SemiRing|) . T) ((|CommutativeStar|) . T)
 ((|ConvertibleTo| (|InputForm|)) . T))
(((|AbelianGroup|) |has| |t#1| (|AbelianGroup|)) ((|AbelianMonoid|) . T)
 ((|AbelianSemiGroup|) . T) ((|BasicType|) . T) ((|BiModule| $ $) . T)
 ((|CancellationAbelianMonoid|) . T) ((|CoercibleTo| (|OutputForm|)) . T)
 ((|CommutativeStar|) . T) ((|Comparable|) . T)
 ((|ConvertibleTo| (|InputForm|)) . T) ((|LeftModule| |t#1|) . T)
 ((|Magma|) . T) ((|MagmaWithUnit|) . T) ((|Monoid|) . T)
 ((|NonAssociativeSemiRing|) . T) ((|NonAssociativeSemiRng|) . T)
 ((|OrderedAbelianMonoid|) . T) ((|OrderedAbelianMonoidSup|) . T)
 ((|OrderedAbelianSemiGroup|) . T) ((|OrderedCancellationAbelianMonoid|) . T)
 ((|OrderedSet|) . T) ((|PartialOrder|) . T) ((|RightModule| |t#2|) . T)
 ((|SemiGroup|) . T) ((|SemiRing|) . T) ((|SemiRng|) . T) ((|SetCategory|) . T)
 ((|TwoSidedRecip|) . T))
((|constructor|
  (NIL
   "\\spadtype{NonNegativeInteger} provides functions for non \\indented{2}{negative integers.}"))
 (|qcoerce|
  (($ (|Integer|))
   "\\spad{qcoerce(n)} coerces \\spad{n} to \\spad{\\%} trusting that \\spad{n} is nonnegative"))
 (|random|
  (($ $) "\\spad{random(n)} returns a random integer from 0 to \\spad{n-1}."))
 (|shift|
  (($ $ (|Integer|))
   "\\spad{shift(a,{} i)} shift \\spad{a} by \\spad{i} bits."))
 (|exquo|
  (((|Union| $ "failed") $ $)
   "\\spad{exquo(a,{}b)} returns the quotient of \\spad{a} and \\spad{b},{} or \"failed\" if \\spad{b} is zero or \\spad{a} rem \\spad{b} is zero."))
 (|divide|
  (((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $)
   "\\spad{divide(a,{} b)} returns a record containing both remainder and quotient."))
 (|gcd|
  (($ $ $)
   "\\spad{gcd(a,{} b)} computes the greatest common divisor of two non negative integers \\spad{a} and \\spad{b}."))
 (|rem|
  (($ $ $)
   "\\spad{a rem b} returns the remainder of \\spad{a} and \\spad{b}."))
 (|quo|
  (($ $ $)
   "\\spad{a quo b} returns the quotient of \\spad{a} and \\spad{b},{} forgetting the remainder.")))
(("documentation" 0 5148) ("ancestors" 0 4369) ("parents" 0 4249)
 ("abbreviation" 0 4245) ("predicates" 0 4207) ("superDomain" 0 4181)
 ("operationAlist" 0 2544) ("modemaps" 0 1795) ("sourceFile" 0 1760)
 ("constructorCategory" 0 1262) ("constructorModemap" 0 693)
 ("constructorKind" 0 684) ("constructorForm" 0 661) ("NILADIC" 0 617)
 ("evalOnLoad2" 0 20))