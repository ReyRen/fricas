8098                (|FreeLieAlgebra| |VarSet| R)
|category|
(((|FreeLieAlgebra| |#1| |#2|) (|Category|) (|OrderedSet|) (|CommutativeRing|))
 (T |FreeLieAlgebra|))
(|Join| (|LieAlgebra| |t#2|)
        (CATEGORY |domain|
         (SIGNATURE |coef| (|t#2| (|XRecursivePolynomial| |t#1| |t#2|) $))
         (SIGNATURE |coerce| ($ |t#1|))
         (SIGNATURE |coerce| ((|XDistributedPolynomial| |t#1| |t#2|) $))
         (SIGNATURE |coerce| ((|XRecursivePolynomial| |t#1| |t#2|) $))
         (SIGNATURE |degree| ((|NonNegativeInteger|) $))
         (SIGNATURE |lquo|
          ((|XRecursivePolynomial| |t#1| |t#2|)
           (|XRecursivePolynomial| |t#1| |t#2|) $))
         (SIGNATURE |rquo|
          ((|XRecursivePolynomial| |t#1| |t#2|)
           (|XRecursivePolynomial| |t#1| |t#2|) $))
         (SIGNATURE |LiePoly| ($ (|LyndonWord| |t#1|)))
         (SIGNATURE |mirror| ($ $))
         (SIGNATURE |trunc| ($ $ (|NonNegativeInteger|)))
         (SIGNATURE |varList| ((|List| |t#1|) $))
         (SIGNATURE |eval| ($ $ |t#1| $))
         (SIGNATURE |eval| ($ $ (|List| |t#1|) (|List| $)))))
"/git/fricas/src/algebra/FLALG.spad"
((|coef| (*1 *2 *3 *1)
  (AND (|isDomain| *3 (|XRecursivePolynomial| *4 *2))
       (|ofCategory| *1 (|FreeLieAlgebra| *4 *2))
       (|ofCategory| *4 (|OrderedSet|)) (|ofCategory| *2 (|CommutativeRing|))))
 (|coerce| (*1 *1 *2)
           (AND (|ofCategory| *1 (|FreeLieAlgebra| *2 *3))
                (|ofCategory| *2 (|OrderedSet|))
                (|ofCategory| *3 (|CommutativeRing|))))
 (|coerce| (*1 *2 *1)
           (AND (|ofCategory| *1 (|FreeLieAlgebra| *3 *4))
                (|ofCategory| *3 (|OrderedSet|))
                (|ofCategory| *4 (|CommutativeRing|))
                (|isDomain| *2 (|XDistributedPolynomial| *3 *4))))
 (|coerce| (*1 *2 *1)
           (AND (|ofCategory| *1 (|FreeLieAlgebra| *3 *4))
                (|ofCategory| *3 (|OrderedSet|))
                (|ofCategory| *4 (|CommutativeRing|))
                (|isDomain| *2 (|XRecursivePolynomial| *3 *4))))
 (|degree| (*1 *2 *1)
  (AND (|ofCategory| *1 (|FreeLieAlgebra| *3 *4))
       (|ofCategory| *3 (|OrderedSet|)) (|ofCategory| *4 (|CommutativeRing|))
       (|isDomain| *2 (|NonNegativeInteger|))))
 (|lquo| (*1 *2 *2 *1)
  (AND (|isDomain| *2 (|XRecursivePolynomial| *3 *4))
       (|ofCategory| *1 (|FreeLieAlgebra| *3 *4))
       (|ofCategory| *3 (|OrderedSet|)) (|ofCategory| *4 (|CommutativeRing|))))
 (|rquo| (*1 *2 *2 *1)
  (AND (|isDomain| *2 (|XRecursivePolynomial| *3 *4))
       (|ofCategory| *1 (|FreeLieAlgebra| *3 *4))
       (|ofCategory| *3 (|OrderedSet|)) (|ofCategory| *4 (|CommutativeRing|))))
 (|LiePoly| (*1 *1 *2)
  (AND (|isDomain| *2 (|LyndonWord| *3)) (|ofCategory| *3 (|OrderedSet|))
       (|ofCategory| *1 (|FreeLieAlgebra| *3 *4))
       (|ofCategory| *4 (|CommutativeRing|))))
 (|mirror| (*1 *1 *1)
  (AND (|ofCategory| *1 (|FreeLieAlgebra| *2 *3))
       (|ofCategory| *2 (|OrderedSet|)) (|ofCategory| *3 (|CommutativeRing|))))
 (|trunc| (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|NonNegativeInteger|))
       (|ofCategory| *1 (|FreeLieAlgebra| *3 *4))
       (|ofCategory| *3 (|OrderedSet|)) (|ofCategory| *4 (|CommutativeRing|))))
 (|varList| (*1 *2 *1)
  (AND (|ofCategory| *1 (|FreeLieAlgebra| *3 *4))
       (|ofCategory| *3 (|OrderedSet|)) (|ofCategory| *4 (|CommutativeRing|))
       (|isDomain| *2 (|List| *3))))
 (|eval| (*1 *1 *1 *2 *1)
         (AND (|ofCategory| *1 (|FreeLieAlgebra| *2 *3))
              (|ofCategory| *2 (|OrderedSet|))
              (|ofCategory| *3 (|CommutativeRing|))))
 (|eval| (*1 *1 *1 *2 *3)
         (AND (|isDomain| *2 (|List| *4)) (|isDomain| *3 (|List| *1))
              (|ofCategory| *1 (|FreeLieAlgebra| *4 *5))
              (|ofCategory| *4 (|OrderedSet|))
              (|ofCategory| *5 (|CommutativeRing|)))))
((~= (((|Boolean|) $ $) 6))
 (|zero?|
  (((|Boolean|) $) 6
   (OR (|has| |#2| (|AbelianMonoid|)) (|has| |#2| (|AbelianMonoid|)))))
 (|varList| (((|List| |#1|) $) 6)) (|trunc| (($ $ (|NonNegativeInteger|)) 6))
 (|subtractIfCan|
  (((|Union| $ "failed") $ $) 6
   (OR (|has| |#2| (|AbelianGroup|)) (|has| |#2| (|AbelianGroup|)))))
 (|sample|
  (($) 6 (OR (|has| |#2| (|AbelianMonoid|)) (|has| |#2| (|AbelianMonoid|)))
   CONST))
 (|rquo|
  (((|XRecursivePolynomial| |#1| |#2|) (|XRecursivePolynomial| |#1| |#2|) $)
   6))
 (|opposite?|
  (((|Boolean|) $ $) 6
   (OR (|has| |#2| (|AbelianMonoid|)) (|has| |#2| (|AbelianMonoid|)))))
 (|mirror| (($ $) 6))
 (|lquo|
  (((|XRecursivePolynomial| |#1| |#2|) (|XRecursivePolynomial| |#1| |#2|) $)
   6))
 (|latex| (((|String|) $) 6))
 (|hashUpdate!| (((|HashState|) (|HashState|) $) 6))
 (|hash| (((|SingleInteger|) $) 6))
 (|eval| (($ $ |#1| $) 6) (($ $ (|List| |#1|) (|List| $)) 6))
 (|degree| (((|NonNegativeInteger|) $) 6)) (|construct| (($ $ $) 6))
 (|coerce| (((|OutputForm|) $) 6) (($ |#1|) 6)
           (((|XDistributedPolynomial| |#1| |#2|) $) 6)
           (((|XRecursivePolynomial| |#1| |#2|) $) 6))
 (|coef| ((|#2| (|XRecursivePolynomial| |#1| |#2|) $) 6))
 (|Zero|
  (($) 6 (OR (|has| |#2| (|AbelianMonoid|)) (|has| |#2| (|AbelianMonoid|)))
   CONST))
 (|LiePoly| (($ (|LyndonWord| |#1|)) 6)) (= (((|Boolean|) $ $) 6))
 (/ (($ $ |#2|) 6 (|has| |#2| (|Field|))))
 (- (($ $) 6 (OR (|has| |#2| (|AbelianGroup|)) (|has| |#2| (|AbelianGroup|))))
    (($ $ $) 6
     (OR (|has| |#2| (|AbelianGroup|)) (|has| |#2| (|AbelianGroup|)))))
 (+ (($ $ $) 6))
 (* (($ (|PositiveInteger|) $) 6) (($ |#2| $) 6)
    (($ (|NonNegativeInteger|) $) 6
     (OR (|has| |#2| (|AbelianMonoid|)) (|has| |#2| (|AbelianMonoid|))))
    (($ (|Integer|) $) 6
     (OR (|has| |#2| (|AbelianGroup|)) (|has| |#2| (|AbelianGroup|))))
    (($ $ |#2|) 6)))
FLALG
(((|LieAlgebra| |#2|) . T))
(((|AbelianGroup|) |has| |t#1| (|AbelianGroup|))
 ((|AbelianMonoid|) |has| |t#1| (|AbelianMonoid|)) ((|AbelianSemiGroup|) . T)
 ((|BasicType|) . T) ((|BiModule| |t#1| |t#1|) . T)
 ((|CancellationAbelianMonoid|) |has| |t#1| (|AbelianGroup|))
 ((|CoercibleTo| (|OutputForm|)) . T) ((|LeftModule| |t#1|) . T)
 ((|LieAlgebra| |#2|) . T) ((|Module| |t#1|) . T) ((|RightModule| |t#2|) . T)
 ((|SetCategory|) . T))
((|constructor|
  (NIL
   "The category of free Lie algebras. It is used by domains of non-commutative algebra: \\spadtype{LiePolynomial} and \\spadtype{XPBWPolynomial}. \\newline Author: Michel Petitot (petitot@lifl.\\spad{fr})"))
 (|eval|
  (($ $ (|List| |#1|) (|List| $))
   "\\spad{eval(p,{} [x1,{} ...,{} xn],{} [v1,{} ...,{} vn])} replaces \\spad{\\spad{xi}} by \\spad{\\spad{vi}} in \\spad{p}.")
  (($ $ |#1| $)
   "\\spad{eval(p,{} x,{} v)} replaces \\spad{x} by \\spad{v} in \\spad{p}."))
 (|varList|
  (((|List| |#1|) $)
   "\\spad{varList(x)} returns the list of distinct entries of \\spad{x}."))
 (|trunc|
  (($ $ (|NonNegativeInteger|))
   "\\spad{trunc(p,{} n)} returns the polynomial \\spad{p} truncated at order \\spad{n}."))
 (|mirror|
  (($ $)
   "\\spad{mirror(x)} returns \\spad{Sum(r_i mirror(w_i))} if \\spad{x} is \\spad{Sum(r_i w_i)}."))
 (|LiePoly|
  (($ (|LyndonWord| |#1|))
   "\\spad{LiePoly(l)} returns the bracketed form of \\spad{l} as a Lie polynomial."))
 (|rquo|
  (((|XRecursivePolynomial| |#1| |#2|) (|XRecursivePolynomial| |#1| |#2|) $)
   "\\spad{rquo(x,{} y)} returns the right simplification of \\spad{x} by \\spad{y}."))
 (|lquo|
  (((|XRecursivePolynomial| |#1| |#2|) (|XRecursivePolynomial| |#1| |#2|) $)
   "\\spad{lquo(x,{} y)} returns the left simplification of \\spad{x} by \\spad{y}."))
 (|degree|
  (((|NonNegativeInteger|) $)
   "\\spad{degree(x)} returns the greatest length of a word in the support of \\spad{x}."))
 (|coerce|
  (((|XRecursivePolynomial| |#1| |#2|) $)
   "\\spad{coerce(x)} returns \\spad{x} as a recursive polynomial.")
  (((|XDistributedPolynomial| |#1| |#2|) $)
   "\\spad{coerce(x)} returns \\spad{x} as distributed polynomial.")
  (($ |#1|) "\\spad{coerce(x)} returns \\spad{x} as a Lie polynomial."))
 (|coef|
  ((|#2| (|XRecursivePolynomial| |#1| |#2|) $)
   "\\spad{coef(x,{} y)} returns the scalar product of \\spad{x} by \\spad{y},{} the set of words being regarded as an orthogonal basis.")))
(("documentation" 0 6125) ("ancestors" 0 5717) ("parents" 0 5689)
 ("abbreviation" 0 5683) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 3809) ("modemaps" 0 1131) ("sourceFile" 0 1094)
 ("constructorCategory" 0 164) ("constructorModemap" 0 61)
 ("constructorKind" 0 50) ("constructorForm" 0 20))