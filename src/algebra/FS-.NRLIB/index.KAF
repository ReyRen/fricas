26065               (|FunctionSpace&| S R)
|domain|
(((|FunctionSpace&| |#1| |#2|)
  (CATEGORY |domain| (SIGNATURE |convert| ((|InputForm|) |#1|))
   (SIGNATURE * (|#1| |#1| |#1|)) (SIGNATURE * (|#1| (|PositiveInteger|) |#1|))
   (SIGNATURE * (|#1| (|NonNegativeInteger|) |#1|))
   (SIGNATURE * (|#1| (|Integer|) |#1|))
   (SIGNATURE |coerce| (|#1| (|Integer|)))
   (SIGNATURE |retract| ((|Polynomial| |#2|) |#1|))
   (SIGNATURE |retractIfCan| ((|Union| (|Polynomial| |#2|) #1="failed") |#1|))
   (SIGNATURE |coerce| (|#1| (|Polynomial| |#2|)))
   (SIGNATURE |differentiate| (|#1| |#1| (|Symbol|)))
   (SIGNATURE |differentiate| (|#1| |#1| (|List| (|Symbol|))))
   (SIGNATURE |differentiate| (|#1| |#1| (|Symbol|) (|NonNegativeInteger|)))
   (SIGNATURE |differentiate|
    (|#1| |#1| (|List| (|Symbol|)) (|List| (|NonNegativeInteger|))))
   (SIGNATURE |characteristic| ((|NonNegativeInteger|)))
   (SIGNATURE * (|#1| |#1| |#2|)) (SIGNATURE * (|#1| |#2| |#1|))
   (SIGNATURE |coerce| (|#1| |#1|))
   (SIGNATURE * (|#1| |#1| (|Fraction| (|Integer|))))
   (SIGNATURE * (|#1| (|Fraction| (|Integer|)) |#1|))
   (SIGNATURE |coerce| (|#1| (|Fraction| (|Integer|))))
   (SIGNATURE |retract| ((|Fraction| (|Polynomial| |#2|)) |#1|))
   (SIGNATURE |retractIfCan|
    ((|Union| (|Fraction| (|Polynomial| |#2|)) #1#) |#1|))
   (SIGNATURE |coerce| (|#1| (|Fraction| (|Polynomial| |#2|))))
   (SIGNATURE |retract| ((|Fraction| (|Integer|)) |#1|))
   (SIGNATURE |retractIfCan| ((|Union| (|Fraction| (|Integer|)) #1#) |#1|))
   (SIGNATURE |univariate|
    ((|Fraction| (|SparseUnivariatePolynomial| |#1|)) |#1| (|Kernel| |#1|)))
   (SIGNATURE |coerce| (|#1| (|Fraction| (|Polynomial| (|Fraction| |#2|)))))
   (SIGNATURE |coerce| (|#1| (|Polynomial| (|Fraction| |#2|))))
   (SIGNATURE |coerce| (|#1| (|Fraction| |#2|)))
   (SIGNATURE |denominator| (|#1| |#1|))
   (SIGNATURE |convert| (|#1| (|Factored| |#1|)))
   (SIGNATURE |algtower| ((|List| (|Kernel| |#1|)) (|List| |#1|)))
   (SIGNATURE |algtower| ((|List| (|Kernel| |#1|)) |#1|))
   (SIGNATURE |eval|
    (|#1| |#1| (|Symbol|) (|NonNegativeInteger|) (|Mapping| |#1| |#1|)))
   (SIGNATURE |eval|
    (|#1| |#1| (|Symbol|) (|NonNegativeInteger|)
     (|Mapping| |#1| (|List| |#1|))))
   (SIGNATURE |eval|
    (|#1| |#1| (|List| (|Symbol|)) (|List| (|NonNegativeInteger|))
     (|List| (|Mapping| |#1| (|List| |#1|)))))
   (SIGNATURE |eval|
    (|#1| |#1| (|List| (|Symbol|)) (|List| (|NonNegativeInteger|))
     (|List| (|Mapping| |#1| |#1|))))
   (SIGNATURE |isPower|
    ((|Union| (|Record| (|:| |val| |#1|) (|:| |exponent| (|Integer|)))
              "failed")
     |#1|))
   (SIGNATURE |isExpt|
    ((|Union|
      (|Record| (|:| |var| (|Kernel| |#1|)) (|:| |exponent| (|Integer|)))
      "failed")
     |#1| (|Symbol|)))
   (SIGNATURE |isExpt|
    ((|Union|
      (|Record| (|:| |var| (|Kernel| |#1|)) (|:| |exponent| (|Integer|)))
      "failed")
     |#1| (|BasicOperator|)))
   (SIGNATURE |numerator| (|#1| |#1|))
   (SIGNATURE |coerce|
    (|#1| (|SparseMultivariatePolynomial| |#2| (|Kernel| |#1|))))
   (SIGNATURE |isMult|
    ((|Union| (|Record| (|:| |coef| (|Integer|)) (|:| |var| (|Kernel| |#1|)))
              "failed")
     |#1|))
   (SIGNATURE |isPlus| ((|Union| (|List| |#1|) "failed") |#1|))
   (SIGNATURE |isExpt|
    ((|Union|
      (|Record| (|:| |var| (|Kernel| |#1|)) (|:| |exponent| (|Integer|)))
      "failed")
     |#1|))
   (SIGNATURE |isTimes| ((|Union| (|List| |#1|) "failed") |#1|))
   (SIGNATURE |eval|
    (|#1| |#1| (|List| (|BasicOperator|)) (|List| |#1|) (|Symbol|)))
   (SIGNATURE |eval| (|#1| |#1| (|BasicOperator|) |#1| (|Symbol|)))
   (SIGNATURE |applyQuote| (|#1| (|Symbol|) (|List| |#1|)))
   (SIGNATURE |applyQuote| (|#1| (|Symbol|) |#1| |#1| |#1| |#1|))
   (SIGNATURE |applyQuote| (|#1| (|Symbol|) |#1| |#1| |#1|))
   (SIGNATURE |applyQuote| (|#1| (|Symbol|) |#1| |#1|))
   (SIGNATURE |applyQuote| (|#1| (|Symbol|) |#1|))
   (SIGNATURE |variables| ((|List| (|Symbol|)) (|List| |#1|)))
   (SIGNATURE |variables| ((|List| (|Symbol|)) |#1|))
   (SIGNATURE |ground| (|#2| |#1|)) (SIGNATURE |ground?| ((|Boolean|) |#1|))
   (SIGNATURE |retract| (|#2| |#1|))
   (SIGNATURE |retractIfCan| ((|Union| |#2| #1#) |#1|))
   (SIGNATURE |coerce| (|#1| |#2|))
   (SIGNATURE |retractIfCan| ((|Union| (|Integer|) #1#) |#1|))
   (SIGNATURE |retract| ((|Integer|) |#1|))
   (SIGNATURE |convert| ((|Pattern| (|Float|)) |#1|))
   (SIGNATURE |convert| ((|Pattern| (|Integer|)) |#1|))
   (SIGNATURE |retract| ((|Symbol|) |#1|))
   (SIGNATURE |retractIfCan| ((|Union| (|Symbol|) #1#) |#1|))
   (SIGNATURE |coerce| (|#1| (|Symbol|)))
   (SIGNATURE |eval| (|#1| |#1| (|BasicOperator|) (|Mapping| |#1| |#1|)))
   (SIGNATURE |eval|
    (|#1| |#1| (|BasicOperator|) (|Mapping| |#1| (|List| |#1|))))
   (SIGNATURE |eval|
    (|#1| |#1| (|List| (|BasicOperator|))
     (|List| (|Mapping| |#1| (|List| |#1|)))))
   (SIGNATURE |eval|
    (|#1| |#1| (|List| (|BasicOperator|)) (|List| (|Mapping| |#1| |#1|))))
   (SIGNATURE |eval| (|#1| |#1| (|Symbol|) (|Mapping| |#1| |#1|)))
   (SIGNATURE |eval| (|#1| |#1| (|Symbol|) (|Mapping| |#1| (|List| |#1|))))
   (SIGNATURE |eval|
    (|#1| |#1| (|List| (|Symbol|)) (|List| (|Mapping| |#1| (|List| |#1|)))))
   (SIGNATURE |eval|
    (|#1| |#1| (|List| (|Symbol|)) (|List| (|Mapping| |#1| |#1|))))
   (SIGNATURE |belong?| ((|Boolean|) (|BasicOperator|)))
   (SIGNATURE |operator| ((|BasicOperator|) (|BasicOperator|)))
   (SIGNATURE |kernels| ((|List| (|Kernel| |#1|)) (|List| |#1|)))
   (SIGNATURE |kernels| ((|List| (|Kernel| |#1|)) |#1|))
   (SIGNATURE |mainKernel| ((|Union| (|Kernel| |#1|) "failed") |#1|))
   (SIGNATURE |subst| (|#1| |#1| (|List| (|Kernel| |#1|)) (|List| |#1|)))
   (SIGNATURE |subst| (|#1| |#1| (|List| (|Equation| |#1|))))
   (SIGNATURE |subst| (|#1| |#1| (|Equation| |#1|)))
   (SIGNATURE |elt| (|#1| (|BasicOperator|) (|List| |#1|)))
   (SIGNATURE |elt|
    (|#1| (|BasicOperator|) |#1| |#1| |#1| |#1| |#1| |#1| |#1| |#1| |#1|))
   (SIGNATURE |elt|
    (|#1| (|BasicOperator|) |#1| |#1| |#1| |#1| |#1| |#1| |#1| |#1|))
   (SIGNATURE |elt|
    (|#1| (|BasicOperator|) |#1| |#1| |#1| |#1| |#1| |#1| |#1|))
   (SIGNATURE |elt| (|#1| (|BasicOperator|) |#1| |#1| |#1| |#1| |#1| |#1|))
   (SIGNATURE |elt| (|#1| (|BasicOperator|) |#1| |#1| |#1| |#1| |#1|))
   (SIGNATURE |elt| (|#1| (|BasicOperator|) |#1| |#1| |#1| |#1|))
   (SIGNATURE |elt| (|#1| (|BasicOperator|) |#1| |#1| |#1|))
   (SIGNATURE |elt| (|#1| (|BasicOperator|) |#1| |#1|))
   (SIGNATURE |elt| (|#1| (|BasicOperator|) |#1|))
   (SIGNATURE |eval| (|#1| |#1| (|List| |#1|) (|List| |#1|)))
   (SIGNATURE |eval| (|#1| |#1| |#1| |#1|))
   (SIGNATURE |eval| (|#1| |#1| (|Equation| |#1|)))
   (SIGNATURE |eval| (|#1| |#1| (|List| (|Equation| |#1|))))
   (SIGNATURE |eval| (|#1| |#1| (|List| (|Kernel| |#1|)) (|List| |#1|)))
   (SIGNATURE |eval| (|#1| |#1| (|Kernel| |#1|) |#1|))
   (SIGNATURE |retract| ((|Kernel| |#1|) |#1|))
   (SIGNATURE |retractIfCan| ((|Union| (|Kernel| |#1|) #1#) |#1|))
   (SIGNATURE |coerce| (|#1| (|Kernel| |#1|)))
   (SIGNATURE |coerce| ((|OutputForm|) |#1|)))
  (|FunctionSpace| |#2|) (|Comparable|))
 (T |FunctionSpace&|))
(CATEGORY |domain| (SIGNATURE |convert| ((|InputForm|) |#1|))
 (SIGNATURE * (|#1| |#1| |#1|)) (SIGNATURE * (|#1| (|PositiveInteger|) |#1|))
 (SIGNATURE * (|#1| (|NonNegativeInteger|) |#1|))
 (SIGNATURE * (|#1| (|Integer|) |#1|)) (SIGNATURE |coerce| (|#1| (|Integer|)))
 (SIGNATURE |retract| ((|Polynomial| |#2|) |#1|))
 (SIGNATURE |retractIfCan| ((|Union| (|Polynomial| |#2|) #1="failed") |#1|))
 (SIGNATURE |coerce| (|#1| (|Polynomial| |#2|)))
 (SIGNATURE |differentiate| (|#1| |#1| (|Symbol|)))
 (SIGNATURE |differentiate| (|#1| |#1| (|List| (|Symbol|))))
 (SIGNATURE |differentiate| (|#1| |#1| (|Symbol|) (|NonNegativeInteger|)))
 (SIGNATURE |differentiate|
  (|#1| |#1| (|List| (|Symbol|)) (|List| (|NonNegativeInteger|))))
 (SIGNATURE |characteristic| ((|NonNegativeInteger|)))
 (SIGNATURE * (|#1| |#1| |#2|)) (SIGNATURE * (|#1| |#2| |#1|))
 (SIGNATURE |coerce| (|#1| |#1|))
 (SIGNATURE * (|#1| |#1| (|Fraction| (|Integer|))))
 (SIGNATURE * (|#1| (|Fraction| (|Integer|)) |#1|))
 (SIGNATURE |coerce| (|#1| (|Fraction| (|Integer|))))
 (SIGNATURE |retract| ((|Fraction| (|Polynomial| |#2|)) |#1|))
 (SIGNATURE |retractIfCan|
  ((|Union| (|Fraction| (|Polynomial| |#2|)) #1#) |#1|))
 (SIGNATURE |coerce| (|#1| (|Fraction| (|Polynomial| |#2|))))
 (SIGNATURE |retract| ((|Fraction| (|Integer|)) |#1|))
 (SIGNATURE |retractIfCan| ((|Union| (|Fraction| (|Integer|)) #1#) |#1|))
 (SIGNATURE |univariate|
  ((|Fraction| (|SparseUnivariatePolynomial| |#1|)) |#1| (|Kernel| |#1|)))
 (SIGNATURE |coerce| (|#1| (|Fraction| (|Polynomial| (|Fraction| |#2|)))))
 (SIGNATURE |coerce| (|#1| (|Polynomial| (|Fraction| |#2|))))
 (SIGNATURE |coerce| (|#1| (|Fraction| |#2|)))
 (SIGNATURE |denominator| (|#1| |#1|))
 (SIGNATURE |convert| (|#1| (|Factored| |#1|)))
 (SIGNATURE |algtower| ((|List| (|Kernel| |#1|)) (|List| |#1|)))
 (SIGNATURE |algtower| ((|List| (|Kernel| |#1|)) |#1|))
 (SIGNATURE |eval|
  (|#1| |#1| (|Symbol|) (|NonNegativeInteger|) (|Mapping| |#1| |#1|)))
 (SIGNATURE |eval|
  (|#1| |#1| (|Symbol|) (|NonNegativeInteger|) (|Mapping| |#1| (|List| |#1|))))
 (SIGNATURE |eval|
  (|#1| |#1| (|List| (|Symbol|)) (|List| (|NonNegativeInteger|))
   (|List| (|Mapping| |#1| (|List| |#1|)))))
 (SIGNATURE |eval|
  (|#1| |#1| (|List| (|Symbol|)) (|List| (|NonNegativeInteger|))
   (|List| (|Mapping| |#1| |#1|))))
 (SIGNATURE |isPower|
  ((|Union| (|Record| (|:| |val| |#1|) (|:| |exponent| (|Integer|))) "failed")
   |#1|))
 (SIGNATURE |isExpt|
  ((|Union| (|Record| (|:| |var| (|Kernel| |#1|)) (|:| |exponent| (|Integer|)))
            "failed")
   |#1| (|Symbol|)))
 (SIGNATURE |isExpt|
  ((|Union| (|Record| (|:| |var| (|Kernel| |#1|)) (|:| |exponent| (|Integer|)))
            "failed")
   |#1| (|BasicOperator|)))
 (SIGNATURE |numerator| (|#1| |#1|))
 (SIGNATURE |coerce|
  (|#1| (|SparseMultivariatePolynomial| |#2| (|Kernel| |#1|))))
 (SIGNATURE |isMult|
  ((|Union| (|Record| (|:| |coef| (|Integer|)) (|:| |var| (|Kernel| |#1|)))
            "failed")
   |#1|))
 (SIGNATURE |isPlus| ((|Union| (|List| |#1|) "failed") |#1|))
 (SIGNATURE |isExpt|
  ((|Union| (|Record| (|:| |var| (|Kernel| |#1|)) (|:| |exponent| (|Integer|)))
            "failed")
   |#1|))
 (SIGNATURE |isTimes| ((|Union| (|List| |#1|) "failed") |#1|))
 (SIGNATURE |eval|
  (|#1| |#1| (|List| (|BasicOperator|)) (|List| |#1|) (|Symbol|)))
 (SIGNATURE |eval| (|#1| |#1| (|BasicOperator|) |#1| (|Symbol|)))
 (SIGNATURE |applyQuote| (|#1| (|Symbol|) (|List| |#1|)))
 (SIGNATURE |applyQuote| (|#1| (|Symbol|) |#1| |#1| |#1| |#1|))
 (SIGNATURE |applyQuote| (|#1| (|Symbol|) |#1| |#1| |#1|))
 (SIGNATURE |applyQuote| (|#1| (|Symbol|) |#1| |#1|))
 (SIGNATURE |applyQuote| (|#1| (|Symbol|) |#1|))
 (SIGNATURE |variables| ((|List| (|Symbol|)) (|List| |#1|)))
 (SIGNATURE |variables| ((|List| (|Symbol|)) |#1|))
 (SIGNATURE |ground| (|#2| |#1|)) (SIGNATURE |ground?| ((|Boolean|) |#1|))
 (SIGNATURE |retract| (|#2| |#1|))
 (SIGNATURE |retractIfCan| ((|Union| |#2| #1#) |#1|))
 (SIGNATURE |coerce| (|#1| |#2|))
 (SIGNATURE |retractIfCan| ((|Union| (|Integer|) #1#) |#1|))
 (SIGNATURE |retract| ((|Integer|) |#1|))
 (SIGNATURE |convert| ((|Pattern| (|Float|)) |#1|))
 (SIGNATURE |convert| ((|Pattern| (|Integer|)) |#1|))
 (SIGNATURE |retract| ((|Symbol|) |#1|))
 (SIGNATURE |retractIfCan| ((|Union| (|Symbol|) #1#) |#1|))
 (SIGNATURE |coerce| (|#1| (|Symbol|)))
 (SIGNATURE |eval| (|#1| |#1| (|BasicOperator|) (|Mapping| |#1| |#1|)))
 (SIGNATURE |eval|
  (|#1| |#1| (|BasicOperator|) (|Mapping| |#1| (|List| |#1|))))
 (SIGNATURE |eval|
  (|#1| |#1| (|List| (|BasicOperator|))
   (|List| (|Mapping| |#1| (|List| |#1|)))))
 (SIGNATURE |eval|
  (|#1| |#1| (|List| (|BasicOperator|)) (|List| (|Mapping| |#1| |#1|))))
 (SIGNATURE |eval| (|#1| |#1| (|Symbol|) (|Mapping| |#1| |#1|)))
 (SIGNATURE |eval| (|#1| |#1| (|Symbol|) (|Mapping| |#1| (|List| |#1|))))
 (SIGNATURE |eval|
  (|#1| |#1| (|List| (|Symbol|)) (|List| (|Mapping| |#1| (|List| |#1|)))))
 (SIGNATURE |eval|
  (|#1| |#1| (|List| (|Symbol|)) (|List| (|Mapping| |#1| |#1|))))
 (SIGNATURE |belong?| ((|Boolean|) (|BasicOperator|)))
 (SIGNATURE |operator| ((|BasicOperator|) (|BasicOperator|)))
 (SIGNATURE |kernels| ((|List| (|Kernel| |#1|)) (|List| |#1|)))
 (SIGNATURE |kernels| ((|List| (|Kernel| |#1|)) |#1|))
 (SIGNATURE |mainKernel| ((|Union| (|Kernel| |#1|) "failed") |#1|))
 (SIGNATURE |subst| (|#1| |#1| (|List| (|Kernel| |#1|)) (|List| |#1|)))
 (SIGNATURE |subst| (|#1| |#1| (|List| (|Equation| |#1|))))
 (SIGNATURE |subst| (|#1| |#1| (|Equation| |#1|)))
 (SIGNATURE |elt| (|#1| (|BasicOperator|) (|List| |#1|)))
 (SIGNATURE |elt|
  (|#1| (|BasicOperator|) |#1| |#1| |#1| |#1| |#1| |#1| |#1| |#1| |#1|))
 (SIGNATURE |elt|
  (|#1| (|BasicOperator|) |#1| |#1| |#1| |#1| |#1| |#1| |#1| |#1|))
 (SIGNATURE |elt| (|#1| (|BasicOperator|) |#1| |#1| |#1| |#1| |#1| |#1| |#1|))
 (SIGNATURE |elt| (|#1| (|BasicOperator|) |#1| |#1| |#1| |#1| |#1| |#1|))
 (SIGNATURE |elt| (|#1| (|BasicOperator|) |#1| |#1| |#1| |#1| |#1|))
 (SIGNATURE |elt| (|#1| (|BasicOperator|) |#1| |#1| |#1| |#1|))
 (SIGNATURE |elt| (|#1| (|BasicOperator|) |#1| |#1| |#1|))
 (SIGNATURE |elt| (|#1| (|BasicOperator|) |#1| |#1|))
 (SIGNATURE |elt| (|#1| (|BasicOperator|) |#1|))
 (SIGNATURE |eval| (|#1| |#1| (|List| |#1|) (|List| |#1|)))
 (SIGNATURE |eval| (|#1| |#1| |#1| |#1|))
 (SIGNATURE |eval| (|#1| |#1| (|Equation| |#1|)))
 (SIGNATURE |eval| (|#1| |#1| (|List| (|Equation| |#1|))))
 (SIGNATURE |eval| (|#1| |#1| (|List| (|Kernel| |#1|)) (|List| |#1|)))
 (SIGNATURE |eval| (|#1| |#1| (|Kernel| |#1|) |#1|))
 (SIGNATURE |retract| ((|Kernel| |#1|) |#1|))
 (SIGNATURE |retractIfCan| ((|Union| (|Kernel| |#1|) #1#) |#1|))
 (SIGNATURE |coerce| (|#1| (|Kernel| |#1|)))
 (SIGNATURE |coerce| ((|OutputForm|) |#1|)))
"/git/fricas/src/algebra/FS.spad"
((|operator| (*1 *2 *2)
  (AND (|isDomain| *2 (|BasicOperator|)) (|ofCategory| *4 (|Comparable|))
       (|isDomain| *1 (|FunctionSpace&| *3 *4))
       (|ofCategory| *3 (|FunctionSpace| *4))))
 (|belong?| (*1 *2 *3)
  (AND (|isDomain| *3 (|BasicOperator|)) (|ofCategory| *5 (|Comparable|))
       (|isDomain| *2 (|Boolean|)) (|isDomain| *1 (|FunctionSpace&| *4 *5))
       (|ofCategory| *4 (|FunctionSpace| *5))))
 (|characteristic| (*1 *2)
  (AND (|ofCategory| *4 (|Comparable|)) (|isDomain| *2 (|NonNegativeInteger|))
       (|isDomain| *1 (|FunctionSpace&| *3 *4))
       (|ofCategory| *3 (|FunctionSpace| *4)))))
((|variables| (((|List| (|Symbol|)) $) 76)
  (((|List| (|Symbol|)) (|List| $)) 74))
 (|univariate|
  (((|Fraction| (|SparseUnivariatePolynomial| $)) $ (|Kernel| $)) 274))
 (|subst| (($ $ (|Equation| $)) NIL) (($ $ (|List| (|Equation| $))) NIL)
  (($ $ (|List| (|Kernel| $)) (|List| $)) 241))
 (|retractIfCan| (((|Union| (|Kernel| $) #1="failed") $) NIL)
  (((|Union| (|Symbol|) #1#) $) 79) (((|Union| (|Integer|) #1#) $) NIL)
  (((|Union| |#2| #1#) $) 237) (((|Union| (|Fraction| (|Integer|)) #1#) $) NIL)
  (((|Union| (|Fraction| (|Polynomial| |#2|)) #1#) $) 332)
  (((|Union| (|Polynomial| |#2|) #1#) $) 239))
 (|retract| (((|Kernel| $) $) NIL) (((|Symbol|) $) 31) (((|Integer|) $) NIL)
            ((|#2| $) 235) (((|Fraction| (|Integer|)) $) NIL)
            (((|Fraction| (|Polynomial| |#2|)) $) 306)
            (((|Polynomial| |#2|) $) 236))
 (|operator| (((|BasicOperator|) (|BasicOperator|)) 51))
 (|numerator| (($ $) 91))
 (|mainKernel| (((|Union| (|Kernel| $) "failed") $) 232))
 (|kernels| (((|List| (|Kernel| $)) $) 233)
  (((|List| (|Kernel| $)) (|List| $)) NIL))
 (|isTimes| (((|Union| (|List| $) "failed") $) 249))
 (|isPower|
  (((|Union| (|Record| (|:| |val| $) (|:| |exponent| (|Integer|))) "failed") $)
   256))
 (|isPlus| (((|Union| (|List| $) "failed") $) 247))
 (|isMult|
  (((|Union| (|Record| (|:| |coef| (|Integer|)) (|:| |var| (|Kernel| $)))
             "failed")
    $)
   265))
 (|isExpt|
  (((|Union| (|Record| (|:| |var| (|Kernel| $)) (|:| |exponent| (|Integer|)))
             "failed")
    $)
   253)
  (((|Union| (|Record| (|:| |var| (|Kernel| $)) (|:| |exponent| (|Integer|)))
             "failed")
    $ (|BasicOperator|))
   219)
  (((|Union| (|Record| (|:| |var| (|Kernel| $)) (|:| |exponent| (|Integer|)))
             "failed")
    $ (|Symbol|))
   221))
 (|ground?| (((|Boolean|) $) 20)) (|ground| ((|#2| $) 22))
 (|eval| (($ $ (|Kernel| $) $) NIL)
         (($ $ (|List| (|Kernel| $)) (|List| $)) 240)
         (($ $ (|List| (|Equation| $))) NIL) (($ $ (|Equation| $)) NIL)
         (($ $ $ $) NIL) (($ $ (|List| $) (|List| $)) NIL)
         (($ $ (|List| (|Symbol|)) (|List| (|Mapping| $ $))) NIL)
         (($ $ (|List| (|Symbol|)) (|List| (|Mapping| $ (|List| $)))) 100)
         (($ $ (|Symbol|) (|Mapping| $ (|List| $))) NIL)
         (($ $ (|Symbol|) (|Mapping| $ $)) NIL)
         (($ $ (|List| (|BasicOperator|)) (|List| (|Mapping| $ $))) NIL)
         (($ $ (|List| (|BasicOperator|)) (|List| (|Mapping| $ (|List| $))))
          NIL)
         (($ $ (|BasicOperator|) (|Mapping| $ (|List| $))) NIL)
         (($ $ (|BasicOperator|) (|Mapping| $ $)) NIL)
         (($ $ (|BasicOperator|) $ (|Symbol|)) 61)
         (($ $ (|List| (|BasicOperator|)) (|List| $) (|Symbol|)) 68)
         (($ $ (|List| (|Symbol|)) (|List| (|NonNegativeInteger|))
           (|List| (|Mapping| $ $)))
          110)
         (($ $ (|List| (|Symbol|)) (|List| (|NonNegativeInteger|))
           (|List| (|Mapping| $ (|List| $))))
          244)
         (($ $ (|Symbol|) (|NonNegativeInteger|) (|Mapping| $ (|List| $))) 98)
         (($ $ (|Symbol|) (|NonNegativeInteger|) (|Mapping| $ $)) 97))
 (|elt| (($ (|BasicOperator|) $) NIL) (($ (|BasicOperator|) $ $) NIL)
  (($ (|BasicOperator|) $ $ $) NIL) (($ (|BasicOperator|) $ $ $ $) NIL)
  (($ (|BasicOperator|) $ $ $ $ $) NIL) (($ (|BasicOperator|) $ $ $ $ $ $) NIL)
  (($ (|BasicOperator|) $ $ $ $ $ $ $) NIL)
  (($ (|BasicOperator|) $ $ $ $ $ $ $ $) NIL)
  (($ (|BasicOperator|) $ $ $ $ $ $ $ $ $) NIL)
  (($ (|BasicOperator|) (|List| $)) 109))
 (|differentiate|
  (($ $ (|List| (|Symbol|)) (|List| (|NonNegativeInteger|))) NIL)
  (($ $ (|Symbol|) (|NonNegativeInteger|)) NIL) (($ $ (|List| (|Symbol|))) NIL)
  (($ $ (|Symbol|)) 242))
 (|denominator| (($ $) 285))
 (|convert| (((|Pattern| (|Integer|)) $) 259) (((|Pattern| (|Float|)) $) 262)
            (($ (|Factored| $)) 328) (((|InputForm|) $) NIL))
 (|coerce| (((|OutputForm|) $) 243) (($ (|Kernel| $)) 88) (($ (|Symbol|)) 27)
           (($ |#2|) NIL)
           (($ (|SparseMultivariatePolynomial| |#2| (|Kernel| $))) NIL)
           (($ (|Fraction| |#2|)) 290)
           (($ (|Polynomial| (|Fraction| |#2|))) 337)
           (($ (|Fraction| (|Polynomial| (|Fraction| |#2|)))) 302)
           (($ (|Fraction| (|Polynomial| |#2|))) 296)
           (($ (|Fraction| (|Integer|))) 342) (($ $) NIL)
           (($ (|Polynomial| |#2|)) 190) (($ (|Integer|)) NIL))
 (|characteristic| (((|NonNegativeInteger|)) 83))
 (|belong?| (((|Boolean|) (|BasicOperator|)) 43))
 (|applyQuote| (($ (|Symbol|) $) 34) (($ (|Symbol|) $ $) 35)
  (($ (|Symbol|) $ $ $) 36) (($ (|Symbol|) $ $ $ $) 37)
  (($ (|Symbol|) (|List| $)) 40))
 (|algtower| (((|List| (|Kernel| $)) $) 314)
  (((|List| (|Kernel| $)) (|List| $)) 312))
 (* (($ (|Fraction| (|Integer|)) $) NIL) (($ $ (|Fraction| (|Integer|))) NIL)
    (($ |#2| $) 267) (($ $ |#2|) NIL) (($ (|Integer|) $) NIL)
    (($ (|NonNegativeInteger|) $) NIL) (($ (|PositiveInteger|) $) NIL)
    (($ $ $) NIL)))
((|HasCategory| |#2| (LIST '|RetractableTo| '(|Integer|)))
 (|HasCategory| |#2| '(|IntegralDomain|))
 (|HasCategory| |#2| '(|CommutativeRing|))
 (|HasCategory| |#2| '(|CharacteristicNonZero|))
 (|HasCategory| |#2| '(|CharacteristicZero|)) (|HasCategory| |#2| '(|Ring|))
 (|HasCategory| |#2| '(|AbelianGroup|))
 (|HasCategory| |#2| '(|AbelianSemiGroup|)) (|HasCategory| |#2| '(|Group|))
 (|HasCategory| |#2| '(|SemiGroup|))
 (|HasCategory| |#2| (LIST '|ConvertibleTo| '(|InputForm|))))
FS-
((|constructor|
  (NIL
   "A space of formal functions with arguments in an arbitrary ordered set."))
 (|univariate|
  (((|Fraction| (|SparseUnivariatePolynomial| $)) $ (|Kernel| $))
   "\\spad{univariate(f,{} k)} returns \\spad{f} viewed as a univariate fraction in \\spad{k}."))
 (/
  (($ (|SparseMultivariatePolynomial| |#2| (|Kernel| $))
    (|SparseMultivariatePolynomial| |#2| (|Kernel| $)))
   "\\spad{p1/p2} returns the quotient of \\spad{p1} and \\spad{p2} as an element of \\%."))
 (|denominator|
  (($ $)
   "\\spad{denominator(f)} returns the denominator of \\spad{f} converted to \\%."))
 (|denom|
  (((|SparseMultivariatePolynomial| |#2| (|Kernel| $)) $)
   "\\spad{denom(f)} returns the denominator of \\spad{f} viewed as a polynomial in the kernels over \\spad{R}."))
 (|convert|
  (($ (|Factored| $))
   "\\spad{convert(f1\\^e1 ... fm\\^em)} returns \\spad{(f1)\\^e1 ... (fm)\\^em} as an element of \\%,{} using formal kernels created using a \\spadfunFrom{paren}{ExpressionSpace}."))
 (|algtower|
  (((|List| (|Kernel| $)) (|List| $))
   "\\spad{algtower([f1,{} ...,{} fn])} returns list of kernels \\spad{[ak1,{} ...,{} akl]} such that each toplevel algebraic kernel in one of \\spad{f1},{} ...,{} \\spad{fn} or in arguments of \\spad{ak1},{} ...,{} akl is one of \\spad{ak1},{} ...,{} akl.")
  (((|List| (|Kernel| $)) $) "\\spad{algtower(f)} is algtower([\\spad{f}])"))
 (|isPower|
  (((|Union| (|Record| (|:| |val| $) (|:| |exponent| (|Integer|))) "failed") $)
   "\\spad{isPower(p)} returns \\spad{[x,{} n]} if \\spad{p = x^n} and \\spad{n ~= 0}."))
 (|numerator|
  (($ $)
   "\\spad{numerator(f)} returns the numerator of \\spad{f} converted to \\%."))
 (|numer|
  (((|SparseMultivariatePolynomial| |#2| (|Kernel| $)) $)
   "\\spad{numer(f)} returns the numerator of \\spad{f} viewed as a polynomial in the kernels over \\spad{R} if \\spad{R} is an integral domain. If not,{} then numer(\\spad{f}) = \\spad{f} viewed as a polynomial in the kernels over \\spad{R}."))
 (|coerce|
  (($ (|Fraction| (|Polynomial| (|Fraction| |#2|))))
   "\\spad{coerce(f)} returns \\spad{f} as an element of \\%.")
  (($ (|Polynomial| (|Fraction| |#2|)))
   "\\spad{coerce(p)} returns \\spad{p} as an element of \\%.")
  (($ (|Fraction| |#2|))
   "\\spad{coerce(q)} returns \\spad{q} as an element of \\%.")
  (($ (|SparseMultivariatePolynomial| |#2| (|Kernel| $)))
   "\\spad{coerce(p)} returns \\spad{p} as an element of \\%."))
 (|isMult|
  (((|Union| (|Record| (|:| |coef| (|Integer|)) (|:| |var| (|Kernel| $)))
             "failed")
    $)
   "\\spad{isMult(p)} returns \\spad{[n,{} x]} if \\spad{p = n * x} and \\spad{n ~= 0}."))
 (|isPlus|
  (((|Union| (|List| $) "failed") $)
   "\\spad{isPlus(p)} returns \\spad{[m1,{} ...,{} mn]} if \\spad{p = m1 +...+ mn} and \\spad{n > 1}."))
 (|isExpt|
  (((|Union| (|Record| (|:| |var| (|Kernel| $)) (|:| |exponent| (|Integer|)))
             "failed")
    $ (|Symbol|))
   "\\spad{isExpt(p,{} f)} returns \\spad{[x,{} n]} if \\spad{p = x^n} and \\spad{n ~= 0} and \\spad{x = f(a)}.")
  (((|Union| (|Record| (|:| |var| (|Kernel| $)) (|:| |exponent| (|Integer|)))
             "failed")
    $ (|BasicOperator|))
   "\\spad{isExpt(p,{} op)} returns \\spad{[x,{} n]} if \\spad{p = x^n} and \\spad{n ~= 0} and \\spad{x = op(a)}.")
  (((|Union| (|Record| (|:| |var| (|Kernel| $)) (|:| |exponent| (|Integer|)))
             "failed")
    $)
   "\\spad{isExpt(p)} returns \\spad{[x,{} n]} if \\spad{p = x^n} and \\spad{n ~= 0}."))
 (|isTimes|
  (((|Union| (|List| $) "failed") $)
   "\\spad{isTimes(p)} returns \\spad{[a1,{} ...,{} an]} if \\spad{p = a1*...*an} and \\spad{n > 1}."))
 (|eval|
  (($ $ (|Symbol|) (|NonNegativeInteger|) (|Mapping| $ $))
   "\\spad{eval(x,{} s,{} n,{} f)} replaces every \\spad{s(a)^n} in \\spad{x} by \\spad{f(a)} for any \\spad{a}.")
  (($ $ (|Symbol|) (|NonNegativeInteger|) (|Mapping| $ (|List| $)))
   "\\spad{eval(x,{} s,{} n,{} f)} replaces every \\spad{s(a1,{} ...,{} am)^n} in \\spad{x} by \\spad{f(a1,{} ...,{} am)} for any \\spad{a1},{} ...,{} am.")
  (($ $ (|List| (|Symbol|)) (|List| (|NonNegativeInteger|))
    (|List| (|Mapping| $ (|List| $))))
   "\\spad{eval(x,{} [s1,{} ...,{} sm],{} [n1,{} ...,{} nm],{} [f1,{} ...,{} fm])} replaces every \\spad{\\spad{si}(a1,{} ...,{} an)^ni} in \\spad{x} by \\spad{\\spad{fi}(a1,{} ...,{} an)} for any \\spad{a1},{} ...,{} am.")
  (($ $ (|List| (|Symbol|)) (|List| (|NonNegativeInteger|))
    (|List| (|Mapping| $ $)))
   "\\spad{eval(x,{} [s1,{} ...,{} sm],{} [n1,{} ...,{} nm],{} [f1,{} ...,{} fm])} replaces every \\spad{\\spad{si}(a)^ni} in \\spad{x} by \\spad{\\spad{fi}(a)} for any \\spad{a}.")
  (($ $ (|List| (|BasicOperator|)) (|List| $) (|Symbol|))
   "\\spad{eval(x,{} [s1,{} ...,{} sm],{} [f1,{} ...,{} fm],{} y)} replaces every \\spad{\\spad{si}(a)} in \\spad{x} by \\spad{\\spad{fi}(y)} with \\spad{y} replaced by \\spad{a} for any \\spad{a}.")
  (($ $ (|BasicOperator|) $ (|Symbol|))
   "\\spad{eval(x,{} s,{} f,{} y)} replaces every \\spad{s(a)} in \\spad{x} by \\spad{f(y)} with \\spad{y} replaced by \\spad{a} for any \\spad{a}."))
 (|applyQuote|
  (($ (|Symbol|) (|List| $))
   "\\spad{applyQuote(foo,{} [x1,{} ...,{} xn])} returns \\spad{'foo(x1,{} ...,{} xn)}.")
  (($ (|Symbol|) $ $ $ $)
   "\\spad{applyQuote(foo,{} x,{} y,{} z,{} t)} returns \\spad{'foo(x,{} y,{} z,{} t)}.")
  (($ (|Symbol|) $ $ $)
   "\\spad{applyQuote(foo,{} x,{} y,{} z)} returns \\spad{'foo(x,{} y,{} z)}.")
  (($ (|Symbol|) $ $)
   "\\spad{applyQuote(foo,{} x,{} y)} returns \\spad{'foo(x,{} y)}.")
  (($ (|Symbol|) $) "\\spad{applyQuote(foo,{} x)} returns \\spad{'foo(x)}."))
 (|variables|
  (((|List| (|Symbol|)) (|List| $))
   "\\spad{variables([f1,{} ...,{} fn])} returns the list of all the variables of \\spad{f1},{} ...,{} \\spad{fn}.")
  (((|List| (|Symbol|)) $)
   "\\spad{variables(f)} returns the list of all the variables of \\spad{f}."))
 (|ground|
  ((|#2| $)
   "\\spad{ground(f)} returns \\spad{f} as an element of \\spad{R}. An error occurs if \\spad{f} is not an element of \\spad{R}."))
 (|ground?|
  (((|Boolean|) $)
   "\\spad{ground?(f)} tests if \\spad{f} is an element of \\spad{R}.")))
(("documentation" 0 19926) ("ancestors" 0 NIL) ("parents" 0 NIL)
 ("abbreviation" 0 19922) ("predicates" 0 19437) ("superDomain" 0 NIL)
 ("operationAlist" 0 14469) ("modemaps" 0 13851) ("sourceFile" 0 13817)
 ("constructorCategory" 0 7124) ("constructorModemap" 0 52)
 ("constructorKind" 0 43) ("constructorForm" 0 20))