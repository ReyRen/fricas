26163               (MAKEPROP '|OutputForm| 'NILADIC T)
(|OutputForm|)
|domain|
(((|OutputForm|)
  (|Join| (|SetCategory|)
          (CATEGORY |domain| (SIGNATURE |print| ((|Void|) $))
           (SIGNATURE |message| ($ (|String|)))
           (SIGNATURE |messagePrint| ((|Void|) (|String|)))
           (SIGNATURE |outputForm| ($ (|Integer|)))
           (SIGNATURE |outputForm| ($ (|Symbol|)))
           (SIGNATURE |outputForm| ($ (|String|))) (SIGNATURE |empty| ($))
           (SIGNATURE |hspace| ($ (|Integer|)))
           (SIGNATURE |vspace| ($ (|Integer|)))
           (SIGNATURE |rspace| ($ (|Integer|) (|Integer|)))
           (SIGNATURE |left| ($ $ (|Integer|)))
           (SIGNATURE |right| ($ $ (|Integer|)))
           (SIGNATURE |center| ($ $ (|Integer|))) (SIGNATURE |left| ($ $))
           (SIGNATURE |right| ($ $)) (SIGNATURE |center| ($ $))
           (SIGNATURE |hconcat| ($ $ $)) (SIGNATURE |vconcat| ($ $ $))
           (SIGNATURE |hconcat| ($ (|List| $)))
           (SIGNATURE |vconcat| ($ (|List| $)))
           (SIGNATURE |prefix| ($ $ (|List| $)))
           (SIGNATURE |infix| ($ $ (|List| $))) (SIGNATURE |infix| ($ $ $ $))
           (SIGNATURE |postfix| ($ $ $)) (SIGNATURE |infix?| ((|Boolean|) $))
           (SIGNATURE |elt| ($ $ (|List| $))) (SIGNATURE |label| ($ $ $))
           (SIGNATURE |box| ($ $)) (SIGNATURE |matrix| ($ (|List| (|List| $))))
           (SIGNATURE |zag| ($ $ $)) (SIGNATURE |root| ($ $))
           (SIGNATURE |root| ($ $ $)) (SIGNATURE |over| ($ $ $))
           (SIGNATURE |slash| ($ $ $)) (SIGNATURE |assign| ($ $ $))
           (SIGNATURE |rarrow| ($ $ $))
           (SIGNATURE |differentiate| ($ $ (|NonNegativeInteger|)))
           (SIGNATURE |binomial| ($ $ $)) (SIGNATURE |tensor| ($ $ $))
           (SIGNATURE |sub| ($ $ $)) (SIGNATURE |super| ($ $ $))
           (SIGNATURE |presub| ($ $ $)) (SIGNATURE |presuper| ($ $ $))
           (SIGNATURE |scripts| ($ $ (|List| $)))
           (SIGNATURE |supersub| ($ $ (|List| $))) (SIGNATURE |quote| ($ $))
           (SIGNATURE |dot| ($ $))
           (SIGNATURE |dot| ($ $ (|NonNegativeInteger|)))
           (SIGNATURE |prime| ($ $))
           (SIGNATURE |prime| ($ $ (|NonNegativeInteger|)))
           (SIGNATURE |overbar| ($ $)) (SIGNATURE |overlabel| ($ $ $))
           (SIGNATURE |sum| ($ $)) (SIGNATURE |sum| ($ $ $))
           (SIGNATURE |sum| ($ $ $ $)) (SIGNATURE |prod| ($ $))
           (SIGNATURE |prod| ($ $ $)) (SIGNATURE |prod| ($ $ $ $))
           (SIGNATURE |int| ($ $)) (SIGNATURE |int| ($ $ $))
           (SIGNATURE |int| ($ $ $ $)) (SIGNATURE |brace| ($ $))
           (SIGNATURE |brace| ($ (|List| $))) (SIGNATURE |bracket| ($ $))
           (SIGNATURE |bracket| ($ (|List| $))) (SIGNATURE |paren| ($ $))
           (SIGNATURE |paren| ($ (|List| $))) (SIGNATURE |pile| ($ (|List| $)))
           (SIGNATURE |commaSeparate| ($ (|List| $)))
           (SIGNATURE |semicolonSeparate| ($ (|List| $)))
           (SIGNATURE |blankSeparate| ($ (|List| $))) (SIGNATURE = ($ $ $))
           (SIGNATURE ~= ($ $ $)) (SIGNATURE < ($ $ $)) (SIGNATURE > ($ $ $))
           (SIGNATURE <= ($ $ $)) (SIGNATURE >= ($ $ $)) (SIGNATURE + ($ $ $))
           (SIGNATURE - ($ $ $)) (SIGNATURE - ($ $)) (SIGNATURE * ($ $ $))
           (SIGNATURE / ($ $ $)) (SIGNATURE ^ ($ $ $))
           (SIGNATURE |rem| ($ $ $)) (SIGNATURE |quo| ($ $ $))
           (SIGNATURE |exquo| ($ $ $)) (SIGNATURE |and| ($ $ $))
           (SIGNATURE |or| ($ $ $)) (SIGNATURE |not| ($ $))
           (SIGNATURE SEGMENT ($ $ $)) (SIGNATURE SEGMENT ($ $)))))
 (T |OutputForm|))
(|Join| (|SetCategory|)
        (CATEGORY |domain| (SIGNATURE |print| ((|Void|) $))
         (SIGNATURE |message| ($ (|String|)))
         (SIGNATURE |messagePrint| ((|Void|) (|String|)))
         (SIGNATURE |outputForm| ($ (|Integer|)))
         (SIGNATURE |outputForm| ($ (|Symbol|)))
         (SIGNATURE |outputForm| ($ (|String|))) (SIGNATURE |empty| ($))
         (SIGNATURE |hspace| ($ (|Integer|)))
         (SIGNATURE |vspace| ($ (|Integer|)))
         (SIGNATURE |rspace| ($ (|Integer|) (|Integer|)))
         (SIGNATURE |left| ($ $ (|Integer|)))
         (SIGNATURE |right| ($ $ (|Integer|)))
         (SIGNATURE |center| ($ $ (|Integer|))) (SIGNATURE |left| ($ $))
         (SIGNATURE |right| ($ $)) (SIGNATURE |center| ($ $))
         (SIGNATURE |hconcat| ($ $ $)) (SIGNATURE |vconcat| ($ $ $))
         (SIGNATURE |hconcat| ($ (|List| $)))
         (SIGNATURE |vconcat| ($ (|List| $)))
         (SIGNATURE |prefix| ($ $ (|List| $)))
         (SIGNATURE |infix| ($ $ (|List| $))) (SIGNATURE |infix| ($ $ $ $))
         (SIGNATURE |postfix| ($ $ $)) (SIGNATURE |infix?| ((|Boolean|) $))
         (SIGNATURE |elt| ($ $ (|List| $))) (SIGNATURE |label| ($ $ $))
         (SIGNATURE |box| ($ $)) (SIGNATURE |matrix| ($ (|List| (|List| $))))
         (SIGNATURE |zag| ($ $ $)) (SIGNATURE |root| ($ $))
         (SIGNATURE |root| ($ $ $)) (SIGNATURE |over| ($ $ $))
         (SIGNATURE |slash| ($ $ $)) (SIGNATURE |assign| ($ $ $))
         (SIGNATURE |rarrow| ($ $ $))
         (SIGNATURE |differentiate| ($ $ (|NonNegativeInteger|)))
         (SIGNATURE |binomial| ($ $ $)) (SIGNATURE |tensor| ($ $ $))
         (SIGNATURE |sub| ($ $ $)) (SIGNATURE |super| ($ $ $))
         (SIGNATURE |presub| ($ $ $)) (SIGNATURE |presuper| ($ $ $))
         (SIGNATURE |scripts| ($ $ (|List| $)))
         (SIGNATURE |supersub| ($ $ (|List| $))) (SIGNATURE |quote| ($ $))
         (SIGNATURE |dot| ($ $)) (SIGNATURE |dot| ($ $ (|NonNegativeInteger|)))
         (SIGNATURE |prime| ($ $))
         (SIGNATURE |prime| ($ $ (|NonNegativeInteger|)))
         (SIGNATURE |overbar| ($ $)) (SIGNATURE |overlabel| ($ $ $))
         (SIGNATURE |sum| ($ $)) (SIGNATURE |sum| ($ $ $))
         (SIGNATURE |sum| ($ $ $ $)) (SIGNATURE |prod| ($ $))
         (SIGNATURE |prod| ($ $ $)) (SIGNATURE |prod| ($ $ $ $))
         (SIGNATURE |int| ($ $)) (SIGNATURE |int| ($ $ $))
         (SIGNATURE |int| ($ $ $ $)) (SIGNATURE |brace| ($ $))
         (SIGNATURE |brace| ($ (|List| $))) (SIGNATURE |bracket| ($ $))
         (SIGNATURE |bracket| ($ (|List| $))) (SIGNATURE |paren| ($ $))
         (SIGNATURE |paren| ($ (|List| $))) (SIGNATURE |pile| ($ (|List| $)))
         (SIGNATURE |commaSeparate| ($ (|List| $)))
         (SIGNATURE |semicolonSeparate| ($ (|List| $)))
         (SIGNATURE |blankSeparate| ($ (|List| $))) (SIGNATURE = ($ $ $))
         (SIGNATURE ~= ($ $ $)) (SIGNATURE < ($ $ $)) (SIGNATURE > ($ $ $))
         (SIGNATURE <= ($ $ $)) (SIGNATURE >= ($ $ $)) (SIGNATURE + ($ $ $))
         (SIGNATURE - ($ $ $)) (SIGNATURE - ($ $)) (SIGNATURE * ($ $ $))
         (SIGNATURE / ($ $ $)) (SIGNATURE ^ ($ $ $)) (SIGNATURE |rem| ($ $ $))
         (SIGNATURE |quo| ($ $ $)) (SIGNATURE |exquo| ($ $ $))
         (SIGNATURE |and| ($ $ $)) (SIGNATURE |or| ($ $ $))
         (SIGNATURE |not| ($ $)) (SIGNATURE SEGMENT ($ $ $))
         (SIGNATURE SEGMENT ($ $))))
"/git/fricas/src/algebra/OUTFORM.spad"
((|print| (*1 *2 *1)
  (AND (|isDomain| *2 (|Void|)) (|isDomain| *1 (|OutputForm|))))
 (|message| (*1 *1 *2)
  (AND (|isDomain| *2 (|String|)) (|isDomain| *1 (|OutputForm|))))
 (|messagePrint| (*1 *2 *3)
  (AND (|isDomain| *3 (|String|)) (|isDomain| *2 (|Void|))
       (|isDomain| *1 (|OutputForm|))))
 (|outputForm| (*1 *1 *2)
  (AND (|isDomain| *2 (|Integer|)) (|isDomain| *1 (|OutputForm|))))
 (|outputForm| (*1 *1 *2)
  (AND (|isDomain| *2 (|Symbol|)) (|isDomain| *1 (|OutputForm|))))
 (|outputForm| (*1 *1 *2)
  (AND (|isDomain| *2 (|String|)) (|isDomain| *1 (|OutputForm|))))
 (|empty| (*1 *1) (|isDomain| *1 (|OutputForm|)))
 (|hspace| (*1 *1 *2)
  (AND (|isDomain| *2 (|Integer|)) (|isDomain| *1 (|OutputForm|))))
 (|vspace| (*1 *1 *2)
  (AND (|isDomain| *2 (|Integer|)) (|isDomain| *1 (|OutputForm|))))
 (|rspace| (*1 *1 *2 *2)
  (AND (|isDomain| *2 (|Integer|)) (|isDomain| *1 (|OutputForm|))))
 (|left| (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|Integer|)) (|isDomain| *1 (|OutputForm|))))
 (|right| (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|Integer|)) (|isDomain| *1 (|OutputForm|))))
 (|center| (*1 *1 *1 *2)
           (AND (|isDomain| *2 (|Integer|)) (|isDomain| *1 (|OutputForm|))))
 (|left| (*1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|right| (*1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|center| (*1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|hconcat| (*1 *1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|vconcat| (*1 *1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|hconcat| (*1 *1 *2)
  (AND (|isDomain| *2 (|List| (|OutputForm|))) (|isDomain| *1 (|OutputForm|))))
 (|vconcat| (*1 *1 *2)
  (AND (|isDomain| *2 (|List| (|OutputForm|))) (|isDomain| *1 (|OutputForm|))))
 (|prefix| (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|List| (|OutputForm|))) (|isDomain| *1 (|OutputForm|))))
 (|infix| (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|List| (|OutputForm|))) (|isDomain| *1 (|OutputForm|))))
 (|infix| (*1 *1 *1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|postfix| (*1 *1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|infix?| (*1 *2 *1)
           (AND (|isDomain| *2 (|Boolean|)) (|isDomain| *1 (|OutputForm|))))
 (|elt| (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|List| (|OutputForm|))) (|isDomain| *1 (|OutputForm|))))
 (|label| (*1 *1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|box| (*1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|matrix| (*1 *1 *2)
  (AND (|isDomain| *2 (|List| (|List| (|OutputForm|))))
       (|isDomain| *1 (|OutputForm|))))
 (|zag| (*1 *1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|root| (*1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|root| (*1 *1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|over| (*1 *1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|slash| (*1 *1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|assign| (*1 *1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|rarrow| (*1 *1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|differentiate| (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|NonNegativeInteger|)) (|isDomain| *1 (|OutputForm|))))
 (|binomial| (*1 *1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|tensor| (*1 *1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|sub| (*1 *1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|super| (*1 *1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|presub| (*1 *1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|presuper| (*1 *1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|scripts| (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|List| (|OutputForm|))) (|isDomain| *1 (|OutputForm|))))
 (|supersub| (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|List| (|OutputForm|))) (|isDomain| *1 (|OutputForm|))))
 (|quote| (*1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|dot| (*1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|dot| (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|NonNegativeInteger|)) (|isDomain| *1 (|OutputForm|))))
 (|prime| (*1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|prime| (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|NonNegativeInteger|)) (|isDomain| *1 (|OutputForm|))))
 (|overbar| (*1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|overlabel| (*1 *1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|sum| (*1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|sum| (*1 *1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|sum| (*1 *1 *1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|prod| (*1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|prod| (*1 *1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|prod| (*1 *1 *1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|int| (*1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|int| (*1 *1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|int| (*1 *1 *1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|brace| (*1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|brace| (*1 *1 *2)
  (AND (|isDomain| *2 (|List| (|OutputForm|))) (|isDomain| *1 (|OutputForm|))))
 (|bracket| (*1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|bracket| (*1 *1 *2)
  (AND (|isDomain| *2 (|List| (|OutputForm|))) (|isDomain| *1 (|OutputForm|))))
 (|paren| (*1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|paren| (*1 *1 *2)
  (AND (|isDomain| *2 (|List| (|OutputForm|))) (|isDomain| *1 (|OutputForm|))))
 (|pile| (*1 *1 *2)
  (AND (|isDomain| *2 (|List| (|OutputForm|))) (|isDomain| *1 (|OutputForm|))))
 (|commaSeparate| (*1 *1 *2)
  (AND (|isDomain| *2 (|List| (|OutputForm|))) (|isDomain| *1 (|OutputForm|))))
 (|semicolonSeparate| (*1 *1 *2)
  (AND (|isDomain| *2 (|List| (|OutputForm|))) (|isDomain| *1 (|OutputForm|))))
 (|blankSeparate| (*1 *1 *2)
  (AND (|isDomain| *2 (|List| (|OutputForm|))) (|isDomain| *1 (|OutputForm|))))
 (= (*1 *1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (~= (*1 *1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (< (*1 *1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (> (*1 *1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (<= (*1 *1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (>= (*1 *1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (+ (*1 *1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (- (*1 *1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (- (*1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (* (*1 *1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (/ (*1 *1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (^ (*1 *1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|rem| (*1 *1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|quo| (*1 *1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|exquo| (*1 *1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|and| (*1 *1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|or| (*1 *1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (|not| (*1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (SEGMENT (*1 *1 *1 *1) (|isDomain| *1 (|OutputForm|)))
 (SEGMENT (*1 *1 *1) (|isDomain| *1 (|OutputForm|))))
((~= (((|Boolean|) $ $) NIL) (($ $ $) 75)) (|zag| (($ $ $) 109))
 (|vspace| (($ (|Integer|)) 40)) (|vconcat| (($ $ $) 41) (($ (|List| $)) 74))
 (|tensor| (($ $ $) 131)) (|supersub| (($ $ (|List| $)) 72))
 (|super| (($ $ $) 62)) (|sum| (($ $) 122) (($ $ $) 123) (($ $ $ $) 124))
 (|sub| (($ $ $) 61)) (|slash| (($ $ $) 113))
 (|semicolonSeparate| (($ (|List| $)) 48)) (|scripts| (($ $ (|List| $)) 68))
 (|rspace| (($ (|Integer|) (|Integer|)) 42)) (|root| (($ $) 110) (($ $ $) 111))
 (|right| (($ $ (|Integer|)) 36) (($ $) 39)) (|rem| (($ $ $) 86))
 (|rarrow| (($ $ $) 116)) (|quote| (($ $) 101)) (|quo| (($ $ $) 87))
 (|prod| (($ $) 125) (($ $ $) 126) (($ $ $ $) 127)) (|print| (((|Void|) $) 10))
 (|prime| (($ $) 105) (($ $ (|NonNegativeInteger|)) 104))
 (|presuper| (($ $ $) 64)) (|presub| (($ $ $) 63))
 (|prefix| (($ $ (|List| $)) 97)) (|postfix| (($ $ $) 100))
 (|pile| (($ (|List| $)) 46)) (|paren| (($ $) 59) (($ (|List| $)) 60))
 (|overlabel| (($ $ $) 107)) (|overbar| (($ $) 102)) (|over| (($ $ $) 112))
 (|outputForm| (($ (|Integer|)) 24) (($ (|Symbol|)) 26) (($ (|String|)) 31))
 (|or| (($ $ $) 90)) (|not| (($ $) 91))
 (|messagePrint| (((|Void|) (|String|)) 16)) (|message| (($ (|String|)) 15))
 (|matrix| (($ (|List| (|List| $))) 45))
 (|left| (($ $ (|Integer|)) 35) (($ $) 38)) (|latex| (((|String|) $) NIL))
 (|label| (($ $ $) 115)) (|int| (($ $) 128) (($ $ $) 129) (($ $ $ $) 130))
 (|infix?| (((|Boolean|) $) 95)) (|infix| (($ $ (|List| $)) 98) (($ $ $ $) 99))
 (|hspace| (($ (|Integer|)) 32)) (|hconcat| (($ $ $) 33) (($ (|List| $)) 73))
 (|hashUpdate!| (((|HashState|) (|HashState|) $) NIL))
 (|hash| (((|SingleInteger|) $) NIL)) (|exquo| (($ $ $) 88)) (|empty| (($) 14))
 (|elt| (($ $ (|List| $)) 96))
 (|dot| (($ $) 103) (($ $ (|NonNegativeInteger|)) 106))
 (|differentiate| (($ $ (|NonNegativeInteger|)) 121))
 (|commaSeparate| (($ (|List| $)) 47)) (|coerce| (((|OutputForm|) $) 22))
 (|center| (($ $ (|Integer|)) 34) (($ $) 37))
 (|bracket| (($ $) 58) (($ (|List| $)) 43))
 (|brace| (($ $) 56) (($ (|List| $)) 57)) (|box| (($ $) 108))
 (|blankSeparate| (($ (|List| $)) 55)) (|binomial| (($ $ $) 94))
 (|assign| (($ $ $) 114)) (|and| (($ $ $) 89)) (^ (($ $ $) 85))
 (SEGMENT (($ $ $) 92) (($ $) 93)) (>= (($ $ $) 79)) (> (($ $ $) 77))
 (= (((|Boolean|) $ $) 17) (($ $ $) 20)) (<= (($ $ $) 78)) (< (($ $ $) 76))
 (/ (($ $ $) 84)) (- (($ $ $) 81) (($ $) 82)) (+ (($ $ $) 80)) (* (($ $ $) 83)))
OUTFORM
(((|SetCategory|) . T))
(((|BasicType|) . T) ((|CoercibleTo| (|OutputForm|)) . T) ((|SetCategory|) . T))
((|constructor|
  (NIL
   "This domain is used to create and manipulate mathematical expressions for output. It is intended to provide an insulating layer between the expression rendering software (\\spadignore{e.g.} TeX,{} or Script) and the output coercions in the various domains."))
 (SEGMENT (($ $) "\\spad{SEGMENT(x)} creates the prefix form: \\spad{x..}.")
  (($ $ $) "\\spad{SEGMENT(x,{} y)} creates the infix form: \\spad{x..y}."))
 (|not| (($ $) "\\spad{not f} creates the equivalent prefix form."))
 (|or| (($ $ $) "\\spad{f or g} creates the equivalent infix form."))
 (|and| (($ $ $) "\\spad{f and g} creates the equivalent infix form."))
 (|exquo| (($ $ $) "\\spad{exquo(f,{} g)} creates the equivalent infix form."))
 (|quo| (($ $ $) "\\spad{f quo g} creates the equivalent infix form."))
 (|rem| (($ $ $) "\\spad{f rem g} creates the equivalent infix form."))
 (^ (($ $ $) "\\spad{f ^ g} creates the equivalent infix form."))
 (/ (($ $ $) "\\spad{f / g} creates the equivalent infix form."))
 (* (($ $ $) "\\spad{f * g} creates the equivalent infix form."))
 (- (($ $) "\\spad{- f} creates the equivalent prefix form.")
    (($ $ $) "\\spad{f - g} creates the equivalent infix form."))
 (+ (($ $ $) "\\spad{f + g} creates the equivalent infix form."))
 (>= (($ $ $) "\\spad{f >= g} creates the equivalent infix form."))
 (<= (($ $ $) "\\spad{f <= g} creates the equivalent infix form."))
 (> (($ $ $) "\\spad{f > g} creates the equivalent infix form."))
 (< (($ $ $) "\\spad{f < g} creates the equivalent infix form."))
 (~= (($ $ $) "\\spad{f ~= g} creates the equivalent infix form."))
 (= (($ $ $) "\\spad{f = g} creates the equivalent infix form."))
 (|blankSeparate|
  (($ (|List| $))
   "\\spad{blankSeparate(l)} creates the form separating the elements of \\spad{l} by blanks."))
 (|semicolonSeparate|
  (($ (|List| $))
   "\\spad{semicolonSeparate(l)} creates the form separating the elements of \\spad{l} by semicolons."))
 (|commaSeparate|
  (($ (|List| $))
   "\\spad{commaSeparate(l)} creates the form separating the elements of \\spad{l} by commas."))
 (|pile|
  (($ (|List| $))
   "\\spad{pile(l)} creates the form consisting of the elements of \\spad{l} which displays as a pile,{} \\spadignore{i.e.} the elements begin on a new line and are indented right to the same margin."))
 (|paren|
  (($ (|List| $))
   "\\spad{paren(lf)} creates the form separating the elements of \\spad{lf} by commas and encloses the result in parentheses.")
  (($ $)
   "\\spad{paren(f)} creates the form enclosing \\spad{f} in parentheses."))
 (|bracket|
  (($ (|List| $))
   "\\spad{bracket(lf)} creates the form separating the elements of \\spad{lf} by commas and encloses the result in square brackets.")
  (($ $)
   "\\spad{bracket(f)} creates the form enclosing \\spad{f} in square brackets."))
 (|brace|
  (($ (|List| $))
   "\\spad{brace(lf)} creates the form separating the elements of \\spad{lf} by commas and encloses the result in curly brackets.")
  (($ $)
   "\\spad{brace(f)} creates the form enclosing \\spad{f} in braces (curly brackets)."))
 (|int|
  (($ $ $ $)
   "\\spad{int(expr,{} lowerlimit,{} upperlimit)} creates the form prefixing \\spad{expr} by an integral sign with both a \\spad{lowerlimit} and upperlimit.")
  (($ $ $)
   "\\spad{int(expr,{} lowerlimit)} creates the form prefixing \\spad{expr} by an integral sign with a lowerlimit.")
  (($ $)
   "\\spad{int(expr)} creates the form prefixing \\spad{expr} with an integral sign."))
 (|prod|
  (($ $ $ $)
   "\\spad{prod(expr,{} lowerlimit,{} upperlimit)} creates the form prefixing \\spad{expr} by a capital \\spad{pi} with both a \\spad{lowerlimit} and upperlimit.")
  (($ $ $)
   "\\spad{prod(expr,{} lowerlimit)} creates the form prefixing \\spad{expr} by a capital \\spad{pi} with a lowerlimit.")
  (($ $)
   "\\spad{prod(expr)} creates the form prefixing \\spad{expr} by a capital \\spad{pi}."))
 (|sum|
  (($ $ $ $)
   "\\spad{sum(expr,{} lowerlimit,{} upperlimit)} creates the form prefixing \\spad{expr} by a capital sigma with both a \\spad{lowerlimit} and upperlimit.")
  (($ $ $)
   "\\spad{sum(expr,{} lowerlimit)} creates the form prefixing \\spad{expr} by a capital sigma with a lowerlimit.")
  (($ $)
   "\\spad{sum(expr)} creates the form prefixing \\spad{expr} by a capital sigma."))
 (|overlabel|
  (($ $ $)
   "\\spad{overlabel(x,{}f)} creates the form \\spad{f} with \\spad{\"x} overbar\" over the top."))
 (|overbar|
  (($ $) "\\spad{overbar(f)} creates the form \\spad{f} with an overbar."))
 (|prime|
  (($ $ (|NonNegativeInteger|))
   "\\spad{prime(f,{} n)} creates the form \\spad{f} followed by \\spad{n} primes.")
  (($ $)
   "\\spad{prime(f)} creates the form \\spad{f} followed by a suffix prime (single quote)."))
 (|dot|
  (($ $ (|NonNegativeInteger|))
   "\\spad{dot(f,{} n)} creates the form \\spad{f} with \\spad{n} dots overhead.")
  (($ $) "\\spad{dot(f)} creates the form with one dot overhead."))
 (|quote|
  (($ $) "\\spad{quote(f)} creates the form \\spad{f} with a prefix quote."))
 (|supersub|
  (($ $ (|List| $))
   "\\spad{supersub(a,{} [sub1,{} super1,{} sub2,{} super2,{} ...])} creates a form with each subscript aligned under each superscript."))
 (|scripts|
  (($ $ (|List| $))
   "\\spad{scripts(f,{} l)} where \\spad{l} is \\spad{[sub,{} super,{} presuper,{} presub]} creates a form for \\spad{f} with scripts on all 4 corners. If \\spad{l} has less than 4 elements corresponding scripts are absent."))
 (|presuper|
  (($ $ $)
   "\\spad{presuper(f,{} n)} creates a form for \\spad{f} presuperscripted by \\spad{n}."))
 (|presub|
  (($ $ $)
   "\\spad{presub(f,{} n)} creates a form for \\spad{f} presubscripted by \\spad{n}."))
 (|super|
  (($ $ $)
   "\\spad{super(f,{} n)} creates a form for \\spad{f} superscripted by \\spad{n}."))
 (|sub|
  (($ $ $)
   "\\spad{sub(f,{} n)} creates a form for \\spad{f} subscripted by \\spad{n}."))
 (|tensor|
  (($ $ $) "\\spad{tensor(a,{} b)} creates a form for a tensor \\spad{b}"))
 (|binomial|
  (($ $ $)
   "\\spad{binomial(n,{} m)} creates a form for the binomial coefficient of \\spad{n} and \\spad{m}."))
 (|differentiate|
  (($ $ (|NonNegativeInteger|))
   "\\spad{differentiate(f,{} n)} creates a form for the \\spad{n}th derivative of \\spad{f},{} \\spadignore{e.g.} \\spad{f'},{} \\spad{f''},{} \\spad{f'''},{} \\spad{\"f} super \\spad{iv}\"."))
 (|rarrow|
  (($ $ $)
   "\\spad{rarrow(f,{} g)} creates a form for the mapping \\spad{f -> g}."))
 (|assign|
  (($ $ $)
   "\\spad{assign(f,{} g)} creates a form for the assignment \\spad{f := g}."))
 (|slash|
  (($ $ $)
   "\\spad{slash(f,{} g)} creates a form for the horizontal fraction of \\spad{f} over \\spad{g}."))
 (|over|
  (($ $ $)
   "\\spad{over(f,{} g)} creates a form for the vertical fraction of \\spad{f} over \\spad{g}."))
 (|root|
  (($ $ $)
   "\\spad{root(f,{} n)} creates a form for the \\spad{n}th root of form \\spad{f}.")
  (($ $)
   "\\spad{root(f)} creates a form for the square root of form \\spad{f}."))
 (|zag|
  (($ $ $)
   "\\spad{zag(f,{} g)} creates a form for the continued fraction form for \\spad{f} over \\spad{g}."))
 (|matrix|
  (($ (|List| (|List| $)))
   "\\spad{matrix(llf)} makes \\spad{llf} (a list of lists of forms) into a form which displays as a matrix."))
 (|box| (($ $) "\\spad{box(f)} encloses \\spad{f} in a box."))
 (|label|
  (($ $ $)
   "\\spad{label(n,{} f)} gives form \\spad{f} an equation label \\spad{n}."))
 (|elt|
  (($ $ (|List| $))
   "\\spad{elt(op,{} l)} creates a form for application of \\spad{op} to list of arguments \\spad{l}."))
 (|infix?|
  (((|Boolean|) $)
   "\\spad{infix?(op)} returns \\spad{true} if \\spad{op} is an infix operator,{} and \\spad{false} otherwise."))
 (|postfix|
  (($ $ $)
   "\\spad{postfix(op,{} a)} creates a form which prints as: a \\spad{op}."))
 (|infix|
  (($ $ $ $)
   "\\spad{infix(op,{} a,{} b)} creates a form which prints as: a \\spad{op} \\spad{b}.")
  (($ $ (|List| $))
   "\\spad{infix(f,{} l)} creates a form depicting the \\spad{n}-ary application of infix operation \\spad{f} to a tuple of arguments \\spad{l}."))
 (|prefix|
  (($ $ (|List| $))
   "\\spad{prefix(f,{} l)} creates a form depicting the \\spad{n}-ary prefix application of \\spad{f} to a tuple of arguments given by list \\spad{l}."))
 (|vconcat|
  (($ (|List| $))
   "\\spad{vconcat(u)} vertically concatenates all forms in list \\spad{u}.")
  (($ $ $)
   "\\spad{vconcat(f,{} g)} vertically concatenates forms \\spad{f} and \\spad{g}."))
 (|hconcat|
  (($ (|List| $))
   "\\spad{hconcat(u)} horizontally concatenates all forms in list \\spad{u}.")
  (($ $ $)
   "\\spad{hconcat(f,{} g)} horizontally concatenate forms \\spad{f} and \\spad{g}."))
 (|center| (($ $) "\\spad{center(f)} centers form \\spad{f} in total space.")
           (($ $ (|Integer|))
            "\\spad{center(f,{} n)} centers form \\spad{f} within space of width \\spad{n}."))
 (|right|
  (($ $) "\\spad{right(f)} right-justifies form \\spad{f} in total space.")
  (($ $ (|Integer|))
   "\\spad{right(f,{} n)} right-justifies form \\spad{f} within space of width \\spad{n}."))
 (|left|
  (($ $) "\\spad{left(f)} left-justifies form \\spad{f} in total space.")
  (($ $ (|Integer|))
   "\\spad{left(f,{} n)} left-justifies form \\spad{f} within space of width \\spad{n}."))
 (|rspace|
  (($ (|Integer|) (|Integer|))
   "\\spad{rspace(n,{} m)} creates rectangular white space,{} \\spad{n} wide by \\spad{m} high."))
 (|vspace|
  (($ (|Integer|))
   "\\spad{vspace(n)} creates white space of height \\spad{n}."))
 (|hspace|
  (($ (|Integer|))
   "\\spad{hspace(n)} creates white space of width \\spad{n}."))
 (|empty| (($) "\\spad{empty()} creates an empty form."))
 (|outputForm|
  (($ (|String|))
   "\\spad{outputForm(s)} creates an form for string \\spad{s}.")
  (($ (|Symbol|))
   "\\spad{outputForm(s)} creates an form for symbol \\spad{s}.")
  (($ (|Integer|))
   "\\spad{outputForm(n)} creates an form for integer \\spad{n}."))
 (|messagePrint|
  (((|Void|) (|String|))
   "\\spad{messagePrint(s)} prints \\spad{s} without string quotes. Note: \\spad{messagePrint(s)} is equivalent to \\spad{print message(s)}."))
 (|message|
  (($ (|String|))
   "\\spad{message(s)} creates an form with no string quotes from string \\spad{s}."))
 (|print| (((|Void|) $) "\\spad{print(u)} prints the form \\spad{u}.")))
(("documentation" 0 15863) ("ancestors" 0 15782) ("parents" 0 15758)
 ("abbreviation" 0 15750) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 13337) ("modemaps" 0 6967) ("sourceFile" 0 6928)
 ("constructorCategory" 0 3583) ("constructorModemap" 0 80)
 ("constructorKind" 0 71) ("constructorForm" 0 56) ("NILADIC" 0 20))