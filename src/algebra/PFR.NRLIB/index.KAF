11018               (|PartialFraction| R)
|domain|
(((|PartialFraction| |#1|)
  (|Join| (|Field|) (|Algebra| |#1|)
          (CATEGORY |domain| (SIGNATURE |coerce| ((|Fraction| |#1|) $))
           (SIGNATURE |coerce| ($ (|Fraction| (|Factored| |#1|))))
           (SIGNATURE |compactFraction| ($ $))
           (SIGNATURE |numberOfFractionalTerms| ((|Integer|) $))
           (SIGNATURE |fractionalTerms|
            ((|List| (|Record| (|:| |num| |#1|) (|:| |den| (|Factored| |#1|))))
             $))
           (SIGNATURE |padicallyExpand|
            ((|SparseUnivariatePolynomial| |#1|) |#1| |#1|))
           (SIGNATURE |padicFraction| ($ $))
           (SIGNATURE |partialFraction| ($ |#1| (|Factored| |#1|)))
           (SIGNATURE |wholePart| (|#1| $))
           (IF (|has| |#1| (|UniqueFactorizationDomain|))
               (SIGNATURE |partialFraction| ($ (|Fraction| |#1|)))
               |noBranch|)))
  (|EuclideanDomain|))
 (T |PartialFraction|))
(|Join| (|Field|) (|Algebra| |#1|)
        (CATEGORY |domain| (SIGNATURE |coerce| ((|Fraction| |#1|) $))
         (SIGNATURE |coerce| ($ (|Fraction| (|Factored| |#1|))))
         (SIGNATURE |compactFraction| ($ $))
         (SIGNATURE |numberOfFractionalTerms| ((|Integer|) $))
         (SIGNATURE |fractionalTerms|
          ((|List| (|Record| (|:| |num| |#1|) (|:| |den| (|Factored| |#1|))))
           $))
         (SIGNATURE |padicallyExpand|
          ((|SparseUnivariatePolynomial| |#1|) |#1| |#1|))
         (SIGNATURE |padicFraction| ($ $))
         (SIGNATURE |partialFraction| ($ |#1| (|Factored| |#1|)))
         (SIGNATURE |wholePart| (|#1| $))
         (IF (|has| |#1| (|UniqueFactorizationDomain|))
             (SIGNATURE |partialFraction| ($ (|Fraction| |#1|)))
             |noBranch|)))
"/git/fricas/src/algebra/PFR.spad"
((|coerce| (*1 *2 *1)
           (AND (|isDomain| *2 (|Fraction| *3))
                (|isDomain| *1 (|PartialFraction| *3))
                (|ofCategory| *3 (|EuclideanDomain|))))
 (|coerce| (*1 *1 *2)
           (AND (|isDomain| *2 (|Fraction| (|Factored| *3)))
                (|ofCategory| *3 (|EuclideanDomain|))
                (|isDomain| *1 (|PartialFraction| *3))))
 (|compactFraction| (*1 *1 *1)
  (AND (|isDomain| *1 (|PartialFraction| *2))
       (|ofCategory| *2 (|EuclideanDomain|))))
 (|numberOfFractionalTerms| (*1 *2 *1)
  (AND (|isDomain| *2 (|Integer|)) (|isDomain| *1 (|PartialFraction| *3))
       (|ofCategory| *3 (|EuclideanDomain|))))
 (|fractionalTerms| (*1 *2 *1)
  (AND
   (|isDomain| *2
               (|List| (|Record| (|:| |num| *3) (|:| |den| (|Factored| *3)))))
   (|isDomain| *1 (|PartialFraction| *3))
   (|ofCategory| *3 (|EuclideanDomain|))))
 (|padicallyExpand| (*1 *2 *3 *3)
  (AND (|isDomain| *2 (|SparseUnivariatePolynomial| *3))
       (|isDomain| *1 (|PartialFraction| *3))
       (|ofCategory| *3 (|EuclideanDomain|))))
 (|padicFraction| (*1 *1 *1)
  (AND (|isDomain| *1 (|PartialFraction| *2))
       (|ofCategory| *2 (|EuclideanDomain|))))
 (|partialFraction| (*1 *1 *2 *3)
  (AND (|isDomain| *3 (|Factored| *2)) (|ofCategory| *2 (|EuclideanDomain|))
       (|isDomain| *1 (|PartialFraction| *2))))
 (|wholePart| (*1 *2 *1)
  (AND (|isDomain| *1 (|PartialFraction| *2))
       (|ofCategory| *2 (|EuclideanDomain|))))
 (|partialFraction| (*1 *1 *2)
  (AND (|isDomain| *2 (|Fraction| *3))
       (|ofCategory| *3 (|UniqueFactorizationDomain|))
       (|ofCategory| *3 (|EuclideanDomain|))
       (|isDomain| *1 (|PartialFraction| *3)))))
((~= (((|Boolean|) $ $) NIL)) (|zero?| (((|Boolean|) $) NIL))
 (|wholePart| ((|#1| $) 80))
 (|unitNormal|
  (((|Record| (|:| |unit| $) (|:| |canonical| $) (|:| |associate| $)) $) NIL))
 (|unitCanonical| (($ $) NIL)) (|unit?| (((|Boolean|) $) NIL))
 (|subtractIfCan| (((|Union| $ "failed") $ $) NIL))
 (|squareFreePart| (($ $) NIL)) (|squareFree| (((|Factored| $) $) NIL))
 (|sizeLess?| (((|Boolean|) $ $) NIL)) (|sample| (($) NIL T CONST))
 (|rightRecip| (((|Union| $ #1="failed") $) NIL))
 (|rightPower| (($ $ (|PositiveInteger|)) NIL)
  (($ $ (|NonNegativeInteger|)) NIL))
 (|rem| (($ $ $) NIL)) (|recip| (((|Union| $ #1#) $) 78)) (|quo| (($ $ $) NIL))
 (|principalIdeal|
  (((|Record| (|:| |coef| (|List| $)) (|:| |generator| $)) (|List| $)) NIL))
 (|prime?| (((|Boolean|) $) NIL))
 (|partialFraction| (($ |#1| (|Factored| |#1|)) 76)
  (($ (|Fraction| |#1|)) 102 (|has| |#1| (|UniqueFactorizationDomain|))))
 (|padicallyExpand| (((|SparseUnivariatePolynomial| |#1|) |#1| |#1|) 42))
 (|padicFraction| (($ $) 50)) (|opposite?| (((|Boolean|) $ $) NIL))
 (|one?| (((|Boolean|) $) NIL))
 (|numberOfFractionalTerms| (((|Integer|) $) 79))
 (|multiEuclidean| (((|Union| (|List| $) #2="failed") (|List| $) $) NIL))
 (|leftRecip| (((|Union| $ #1#) $) NIL))
 (|leftPower| (($ $ (|PositiveInteger|)) NIL)
  (($ $ (|NonNegativeInteger|)) NIL))
 (|lcmCoef|
  (((|Record| (|:| |llcm_res| $) (|:| |coeff1| $) (|:| |coeff2| $)) $ $) NIL))
 (|lcm| (($ $ $) NIL) (($ (|List| $)) NIL)) (|latex| (((|String|) $) NIL))
 (|inv| (($ $) NIL)) (|hashUpdate!| (((|HashState|) (|HashState|) $) NIL))
 (|hash| (((|SingleInteger|) $) NIL))
 (|gcdPolynomial|
  (((|SparseUnivariatePolynomial| $) (|SparseUnivariatePolynomial| $)
    (|SparseUnivariatePolynomial| $))
   NIL))
 (|gcd| (($ $ $) NIL) (($ (|List| $)) NIL))
 (|fractionalTerms|
  (((|List| (|Record| (|:| |num| |#1|) (|:| |den| (|Factored| |#1|)))) $) 81))
 (|factor| (((|Factored| $) $) NIL))
 (|extendedEuclidean|
  (((|Record| (|:| |coef1| $) (|:| |coef2| $) (|:| |generator| $)) $ $) NIL)
  (((|Union| (|Record| (|:| |coef1| $) (|:| |coef2| $)) #2#) $ $ $) NIL))
 (|exquo| (((|Union| $ "failed") $ $) 77))
 (|expressIdealMember| (((|Union| (|List| $) "failed") (|List| $) $) NIL))
 (|euclideanSize| (((|NonNegativeInteger|) $) NIL))
 (|divide| (((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $) NIL))
 (|compactFraction| (($ $) 40)) (|commutator| (($ $ $) NIL))
 (|coerce| (((|OutputForm|) $) 99) (($ (|Integer|)) 57) (($ $) NIL)
           (($ (|Fraction| (|Integer|))) NIL) (($ |#1|) 33)
           (((|Fraction| |#1|) $) 62) (($ (|Fraction| (|Factored| |#1|))) 70))
 (|characteristic| (((|NonNegativeInteger|)) 54))
 (|associator| (($ $ $ $) NIL)) (|associates?| (((|Boolean|) $ $) NIL))
 (|antiCommutator| (($ $ $) NIL)) (|annihilate?| (((|Boolean|) $ $) NIL))
 (^ (($ $ (|PositiveInteger|)) NIL) (($ $ (|NonNegativeInteger|)) NIL)
  (($ $ (|Integer|)) NIL))
 (|Zero| (($) 24 T CONST)) (|One| (($) 31 T CONST)) (= (((|Boolean|) $ $) 71))
 (/ (($ $ $) NIL)) (- (($ $ $) NIL) (($ $) 88)) (+ (($ $ $) 39))
 (* (($ (|PositiveInteger|) $) NIL) (($ $ $) 38) (($ (|Integer|) $) 90)
    (($ (|NonNegativeInteger|) $) NIL) (($ $ (|Fraction| (|Integer|))) NIL)
    (($ (|Fraction| (|Integer|)) $) NIL) (($ |#1| $) 89) (($ $ |#1|) NIL)))
((|HasCategory| |#1| '(|UniqueFactorizationDomain|)))
PFR
(((|Field|) . T) ((|Algebra| |#1|) . T))
(((|AbelianGroup|) . T) ((|AbelianMonoid|) . T) ((|AbelianSemiGroup|) . T)
 ((|Algebra| |#1|) . T) ((|Algebra| (|Fraction| (|Integer|))) . T)
 ((|Algebra| $) . T) ((|BasicType|) . T) ((|BiModule| |t#1| |t#1|) . T)
 ((|BiModule| $ $) . T) ((|CancellationAbelianMonoid|) . T)
 ((|CoercibleTo| (|OutputForm|)) . T) ((|CommutativeRing|) . T)
 ((|CommutativeStar|) . T) ((|DivisionRing|) . T) ((|EntireRing|) . T)
 ((|EuclideanDomain|) . T) ((|Field|) . T) ((|GcdDomain|) . T)
 ((|IntegralDomain|) . T) ((|LeftModule| |t#1|) . T) ((|LeftOreRing|) . T)
 ((|Magma|) . T) ((|MagmaWithUnit|) . T) ((|Module| |t#1|) . T)
 ((|Monoid|) . T) ((|NonAssociativeRing|) . T) ((|NonAssociativeRng|) . T)
 ((|NonAssociativeSemiRing|) . T) ((|NonAssociativeSemiRng|) . T)
 ((|PrincipalIdealDomain|) . T) ((|RightModule| |t#2|) . T) ((|Ring|) . T)
 ((|Rng|) . T) ((|SemiGroup|) . T) ((|SemiRing|) . T) ((|SemiRng|) . T)
 ((|SetCategory|) . T) ((|TwoSidedRecip|) . T)
 ((|UniqueFactorizationDomain|) . T) ((|canonicalUnitNormal|) . T)
 ((|canonicalsClosed|) . T) ((|noZeroDivisors|) . T) ((|unitsKnown|) . T))
((|constructor|
  (NIL
   "The domain \\spadtype{PartialFraction} implements partial fractions over a euclidean domain \\spad{R}. This requirement on the argument domain allows us to normalize the fractions. Of particular interest are the 2 forms for these fractions. The ``compact\\spad{''} form has only one fractional term per prime in the denominator,{} while the \\spad{``p}-adic\\spad{''} form expands each numerator \\spad{p}-adically via the prime \\spad{p} in the denominator. For computational efficiency,{} the compact form is used,{} though the \\spad{p}-adic form may be gotten by calling the function \\spadfunFrom{padicFraction}{PartialFraction}. For a general euclidean domain,{} it is not known how to factor the denominator. Thus the function \\spadfunFrom{partialFraction}{PartialFraction} takes an element of \\spadtype{Factored(R)} as its second argument."))
 (|wholePart|
  ((|#1| $)
   "\\spad{wholePart(p)} extracts the whole part of the partial fraction \\spad{p}."))
 (|partialFraction|
  (($ (|Fraction| |#1|))
   "\\spad{partialFraction(f)} is a user friendly interface for partial fractions when \\spad{f} is a fraction of UniqueFactorizationDomain.")
  (($ |#1| (|Factored| |#1|))
   "\\spad{partialFraction(numer,{} denom)} is the main function for constructing partial fractions. The second argument is the denominator and should be factored."))
 (|padicFraction|
  (($ $)
   "\\spad{padicFraction(q)} expands the fraction \\spad{p}-adically in the primes \\spad{p} in the denominator of \\spad{q}. For example,{} \\spad{padicFraction(3/(2^2)) = 1/2 + 1/(2^2)}. Use \\spadfunFrom{compactFraction}{PartialFraction} to return to compact form."))
 (|padicallyExpand|
  (((|SparseUnivariatePolynomial| |#1|) |#1| |#1|)
   "\\spad{padicallyExpand(p,{} x)} is a utility function that expands the second argument \\spad{x} \\spad{``p}-adically\\spad{''} in the first."))
 (|fractionalTerms|
  (((|List| (|Record| (|:| |num| |#1|) (|:| |den| (|Factored| |#1|)))) $)
   "\\spad{fractionalTerms(p)} extracts the fractional part of \\spad{p} to a list of Record(num : \\spad{R},{} den : Factored \\spad{R}). This returns [] if there is no fractional part."))
 (|numberOfFractionalTerms|
  (((|Integer|) $)
   "\\spad{numberOfFractionalTerms(p)} computes the number of fractional terms in \\spad{p}. This returns 0 if there is no fractional part."))
 (|compactFraction|
  (($ $)
   "\\spad{compactFraction(p)} normalizes the partial fraction \\spad{p} to the compact representation. In this form,{} the partial fraction has only one fractional term per prime in the denominator."))
 (|coerce|
  (($ (|Fraction| (|Factored| |#1|)))
   "\\spad{coerce(f)} takes a fraction with numerator and denominator in factored form and creates a partial fraction. It is necessary for the parts to be factored because it is not known in general how to factor elements of \\spad{R} and this is needed to decompose into partial fractions.")
  (((|Fraction| |#1|) $)
   "\\spad{coerce(p)} sums up the components of the partial fraction and returns a single fraction.")))
(("documentation" 0 7945) ("ancestors" 0 6857) ("parents" 0 6816)
 ("abbreviation" 0 6812) ("predicates" 0 6758) ("superDomain" 0 NIL)
 ("operationAlist" 0 3483) ("modemaps" 0 1802) ("sourceFile" 0 1767)
 ("constructorCategory" 0 962) ("constructorModemap" 0 51)
 ("constructorKind" 0 42) ("constructorForm" 0 20))