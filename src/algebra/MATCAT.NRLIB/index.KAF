31235               (|MatrixCategory| R |Row| |Col|)
|category|
(((|MatrixCategory| |#1| |#2| |#3|) (|Category|) (|AbelianMonoid|)
  (|FiniteLinearAggregate| |t#1|) (|FiniteLinearAggregate| |t#1|))
 (T |MatrixCategory|))
(|Join| (|TwoDimensionalArrayCategory| |t#1| |t#2| |t#3|) (|shallowlyMutable|)
        (|finiteAggregate|)
        (CATEGORY |domain| (SIGNATURE |square?| ((|Boolean|) $))
         (SIGNATURE |diagonal?| ((|Boolean|) $))
         (SIGNATURE |symmetric?| ((|Boolean|) $))
         (IF (|has| |t#1| (|AbelianGroup|))
             (SIGNATURE |antisymmetric?| ((|Boolean|) $))
             |noBranch|)
         (SIGNATURE |zero?| ((|Boolean|) $))
         (SIGNATURE |zero| ($ (|NonNegativeInteger|) (|NonNegativeInteger|)))
         (SIGNATURE |matrix| ($ (|List| (|List| |t#1|))))
         (SIGNATURE |matrix|
          ($ (|NonNegativeInteger|) (|NonNegativeInteger|)
           (|Mapping| |t#1| (|Integer|) (|Integer|))))
         (SIGNATURE |scalarMatrix| ($ (|NonNegativeInteger|) |t#1|))
         (SIGNATURE |diagonalMatrix| ($ (|List| |t#1|)))
         (SIGNATURE |diagonalMatrix| ($ (|List| $)))
         (IF (|has| |t#1| (|SemiRng|))
             (PROGN
              (SIGNATURE |kroneckerProduct| ($ $ $))
              (SIGNATURE |kroneckerProduct| ($ (|List| $))))
             |noBranch|)
         (SIGNATURE |kroneckerSum| ($ $ $))
         (SIGNATURE |kroneckerSum| ($ (|List| $)))
         (SIGNATURE |coerce| ($ |t#3|)) (SIGNATURE |transpose| ($ |t#2|))
         (SIGNATURE + ($ $ $))
         (IF (|has| |t#1| (|AbelianGroup|))
             (PROGN
              (SIGNATURE - ($ $ $))
              (SIGNATURE - ($ $))
              (SIGNATURE * ($ (|Integer|) $)))
             |noBranch|)
         (IF (|has| |t#1| (|SemiRng|))
             (PROGN
              (SIGNATURE * ($ $ $))
              (SIGNATURE * ($ |t#1| $))
              (SIGNATURE * ($ $ |t#1|))
              (SIGNATURE * (|t#3| $ |t#3|))
              (SIGNATURE * (|t#2| |t#2| $))
              (SIGNATURE |positivePower| ($ $ (|Integer|)))
              (IF (|has| |t#1| (|Monoid|))
                  (SIGNATURE ^ ($ $ (|NonNegativeInteger|)))
                  |noBranch|))
             |noBranch|)
         (IF (|has| |t#1| (|IntegralDomain|))
             (SIGNATURE |exquo| ((|Union| $ "failed") $ |t#1|))
             |noBranch|)
         (IF (|has| |t#1| (|Field|))
             (SIGNATURE / ($ $ |t#1|))
             |noBranch|)
         (IF (|has| |t#1| (|EuclideanDomain|))
             (PROGN
              (SIGNATURE |rowEchelon| ($ $))
              (SIGNATURE |columnSpace| ((|List| |t#3|) $)))
             |noBranch|)
         (IF (|has| |t#1| (|IntegralDomain|))
             (PROGN
              (SIGNATURE |rank| ((|NonNegativeInteger|) $))
              (SIGNATURE |nullity| ((|NonNegativeInteger|) $))
              (SIGNATURE |nullSpace| ((|List| |t#3|) $)))
             |noBranch|)
         (IF (|has| |t#1| (|CommutativeRing|))
             (PROGN
              (SIGNATURE |determinant| (|t#1| $))
              (SIGNATURE |minordet| (|t#1| $))
              (SIGNATURE |Pfaffian| (|t#1| $)))
             |noBranch|)
         (IF (|has| |t#1| (|Field|))
             (PROGN
              (SIGNATURE |inverse| ((|Union| $ "failed") $))
              (SIGNATURE ^ ($ $ (|Integer|))))
             |noBranch|)
         (SIGNATURE |kronecker_prod1|
          ((|Void|) $ (|Integer|) (|List| (|List| (|NonNegativeInteger|)))
           (|List| $) (|NonNegativeInteger|) (|NonNegativeInteger|)
           (|Union| |t#1| "one")))))
"/git/fricas/src/algebra/MATCAT.spad"
((|square?| (*1 *2 *1)
  (AND (|ofCategory| *1 (|MatrixCategory| *3 *4 *5))
       (|ofCategory| *3 (|AbelianMonoid|))
       (|ofCategory| *4 (|FiniteLinearAggregate| *3))
       (|ofCategory| *5 (|FiniteLinearAggregate| *3))
       (|isDomain| *2 (|Boolean|))))
 (|diagonal?| (*1 *2 *1)
  (AND (|ofCategory| *1 (|MatrixCategory| *3 *4 *5))
       (|ofCategory| *3 (|AbelianMonoid|))
       (|ofCategory| *4 (|FiniteLinearAggregate| *3))
       (|ofCategory| *5 (|FiniteLinearAggregate| *3))
       (|isDomain| *2 (|Boolean|))))
 (|symmetric?| (*1 *2 *1)
  (AND (|ofCategory| *1 (|MatrixCategory| *3 *4 *5))
       (|ofCategory| *3 (|AbelianMonoid|))
       (|ofCategory| *4 (|FiniteLinearAggregate| *3))
       (|ofCategory| *5 (|FiniteLinearAggregate| *3))
       (|isDomain| *2 (|Boolean|))))
 (|antisymmetric?| (*1 *2 *1)
  (AND (|ofCategory| *1 (|MatrixCategory| *3 *4 *5))
       (|ofCategory| *3 (|AbelianMonoid|))
       (|ofCategory| *4 (|FiniteLinearAggregate| *3))
       (|ofCategory| *5 (|FiniteLinearAggregate| *3))
       (|ofCategory| *3 (|AbelianGroup|)) (|isDomain| *2 (|Boolean|))))
 (|zero?| (*1 *2 *1)
  (AND (|ofCategory| *1 (|MatrixCategory| *3 *4 *5))
       (|ofCategory| *3 (|AbelianMonoid|))
       (|ofCategory| *4 (|FiniteLinearAggregate| *3))
       (|ofCategory| *5 (|FiniteLinearAggregate| *3))
       (|isDomain| *2 (|Boolean|))))
 (|zero| (*1 *1 *2 *2)
  (AND (|isDomain| *2 (|NonNegativeInteger|))
       (|ofCategory| *3 (|AbelianMonoid|))
       (|ofCategory| *1 (|MatrixCategory| *3 *4 *5))
       (|ofCategory| *4 (|FiniteLinearAggregate| *3))
       (|ofCategory| *5 (|FiniteLinearAggregate| *3))))
 (|matrix| (*1 *1 *2)
  (AND (|isDomain| *2 (|List| (|List| *3))) (|ofCategory| *3 (|AbelianMonoid|))
       (|ofCategory| *1 (|MatrixCategory| *3 *4 *5))
       (|ofCategory| *4 (|FiniteLinearAggregate| *3))
       (|ofCategory| *5 (|FiniteLinearAggregate| *3))))
 (|matrix| (*1 *1 *2 *2 *3)
  (AND (|isDomain| *2 (|NonNegativeInteger|))
       (|isDomain| *3 (|Mapping| *4 (|Integer|) (|Integer|)))
       (|ofCategory| *4 (|AbelianMonoid|))
       (|ofCategory| *1 (|MatrixCategory| *4 *5 *6))
       (|ofCategory| *5 (|FiniteLinearAggregate| *4))
       (|ofCategory| *6 (|FiniteLinearAggregate| *4))))
 (|scalarMatrix| (*1 *1 *2 *3)
  (AND (|isDomain| *2 (|NonNegativeInteger|))
       (|ofCategory| *3 (|AbelianMonoid|))
       (|ofCategory| *1 (|MatrixCategory| *3 *4 *5))
       (|ofCategory| *4 (|FiniteLinearAggregate| *3))
       (|ofCategory| *5 (|FiniteLinearAggregate| *3))))
 (|diagonalMatrix| (*1 *1 *2)
  (AND (|isDomain| *2 (|List| *3)) (|ofCategory| *3 (|AbelianMonoid|))
       (|ofCategory| *1 (|MatrixCategory| *3 *4 *5))
       (|ofCategory| *4 (|FiniteLinearAggregate| *3))
       (|ofCategory| *5 (|FiniteLinearAggregate| *3))))
 (|diagonalMatrix| (*1 *1 *2)
  (AND (|isDomain| *2 (|List| *1)) (|ofCategory| *3 (|AbelianMonoid|))
       (|ofCategory| *1 (|MatrixCategory| *3 *4 *5))
       (|ofCategory| *4 (|FiniteLinearAggregate| *3))
       (|ofCategory| *5 (|FiniteLinearAggregate| *3))))
 (|kroneckerProduct| (*1 *1 *1 *1)
  (AND (|ofCategory| *1 (|MatrixCategory| *2 *3 *4))
       (|ofCategory| *2 (|AbelianMonoid|))
       (|ofCategory| *3 (|FiniteLinearAggregate| *2))
       (|ofCategory| *4 (|FiniteLinearAggregate| *2))
       (|ofCategory| *2 (|SemiRng|))))
 (|kroneckerProduct| (*1 *1 *2)
  (AND (|isDomain| *2 (|List| *1)) (|ofCategory| *3 (|SemiRng|))
       (|ofCategory| *3 (|AbelianMonoid|))
       (|ofCategory| *1 (|MatrixCategory| *3 *4 *5))
       (|ofCategory| *4 (|FiniteLinearAggregate| *3))
       (|ofCategory| *5 (|FiniteLinearAggregate| *3))))
 (|kroneckerSum| (*1 *1 *1 *1)
  (AND (|ofCategory| *1 (|MatrixCategory| *2 *3 *4))
       (|ofCategory| *2 (|AbelianMonoid|))
       (|ofCategory| *3 (|FiniteLinearAggregate| *2))
       (|ofCategory| *4 (|FiniteLinearAggregate| *2))))
 (|kroneckerSum| (*1 *1 *2)
  (AND (|isDomain| *2 (|List| *1)) (|ofCategory| *3 (|AbelianMonoid|))
       (|ofCategory| *1 (|MatrixCategory| *3 *4 *5))
       (|ofCategory| *4 (|FiniteLinearAggregate| *3))
       (|ofCategory| *5 (|FiniteLinearAggregate| *3))))
 (|coerce| (*1 *1 *2)
           (AND (|ofCategory| *3 (|AbelianMonoid|))
                (|ofCategory| *1 (|MatrixCategory| *3 *4 *2))
                (|ofCategory| *4 (|FiniteLinearAggregate| *3))
                (|ofCategory| *2 (|FiniteLinearAggregate| *3))))
 (|transpose| (*1 *1 *2)
  (AND (|ofCategory| *3 (|AbelianMonoid|))
       (|ofCategory| *1 (|MatrixCategory| *3 *2 *4))
       (|ofCategory| *2 (|FiniteLinearAggregate| *3))
       (|ofCategory| *4 (|FiniteLinearAggregate| *3))))
 (+ (*1 *1 *1 *1)
    (AND (|ofCategory| *1 (|MatrixCategory| *2 *3 *4))
         (|ofCategory| *2 (|AbelianMonoid|))
         (|ofCategory| *3 (|FiniteLinearAggregate| *2))
         (|ofCategory| *4 (|FiniteLinearAggregate| *2))))
 (- (*1 *1 *1 *1)
    (AND (|ofCategory| *1 (|MatrixCategory| *2 *3 *4))
         (|ofCategory| *2 (|AbelianMonoid|))
         (|ofCategory| *3 (|FiniteLinearAggregate| *2))
         (|ofCategory| *4 (|FiniteLinearAggregate| *2))
         (|ofCategory| *2 (|AbelianGroup|))))
 (- (*1 *1 *1)
    (AND (|ofCategory| *1 (|MatrixCategory| *2 *3 *4))
         (|ofCategory| *2 (|AbelianMonoid|))
         (|ofCategory| *3 (|FiniteLinearAggregate| *2))
         (|ofCategory| *4 (|FiniteLinearAggregate| *2))
         (|ofCategory| *2 (|AbelianGroup|))))
 (* (*1 *1 *2 *1)
    (AND (|isDomain| *2 (|Integer|))
         (|ofCategory| *1 (|MatrixCategory| *3 *4 *5))
         (|ofCategory| *3 (|AbelianMonoid|))
         (|ofCategory| *4 (|FiniteLinearAggregate| *3))
         (|ofCategory| *5 (|FiniteLinearAggregate| *3))
         (|ofCategory| *3 (|AbelianGroup|))))
 (* (*1 *1 *1 *1)
    (AND (|ofCategory| *1 (|MatrixCategory| *2 *3 *4))
         (|ofCategory| *2 (|AbelianMonoid|))
         (|ofCategory| *3 (|FiniteLinearAggregate| *2))
         (|ofCategory| *4 (|FiniteLinearAggregate| *2))
         (|ofCategory| *2 (|SemiRng|))))
 (* (*1 *1 *2 *1)
    (AND (|ofCategory| *1 (|MatrixCategory| *2 *3 *4))
         (|ofCategory| *2 (|AbelianMonoid|))
         (|ofCategory| *3 (|FiniteLinearAggregate| *2))
         (|ofCategory| *4 (|FiniteLinearAggregate| *2))
         (|ofCategory| *2 (|SemiRng|))))
 (* (*1 *1 *1 *2)
    (AND (|ofCategory| *1 (|MatrixCategory| *2 *3 *4))
         (|ofCategory| *2 (|AbelianMonoid|))
         (|ofCategory| *3 (|FiniteLinearAggregate| *2))
         (|ofCategory| *4 (|FiniteLinearAggregate| *2))
         (|ofCategory| *2 (|SemiRng|))))
 (* (*1 *2 *1 *2)
    (AND (|ofCategory| *1 (|MatrixCategory| *3 *4 *2))
         (|ofCategory| *3 (|AbelianMonoid|))
         (|ofCategory| *4 (|FiniteLinearAggregate| *3))
         (|ofCategory| *2 (|FiniteLinearAggregate| *3))
         (|ofCategory| *3 (|SemiRng|))))
 (* (*1 *2 *2 *1)
    (AND (|ofCategory| *1 (|MatrixCategory| *3 *2 *4))
         (|ofCategory| *3 (|AbelianMonoid|))
         (|ofCategory| *2 (|FiniteLinearAggregate| *3))
         (|ofCategory| *4 (|FiniteLinearAggregate| *3))
         (|ofCategory| *3 (|SemiRng|))))
 (|positivePower| (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|Integer|))
       (|ofCategory| *1 (|MatrixCategory| *3 *4 *5))
       (|ofCategory| *3 (|AbelianMonoid|))
       (|ofCategory| *4 (|FiniteLinearAggregate| *3))
       (|ofCategory| *5 (|FiniteLinearAggregate| *3))
       (|ofCategory| *3 (|SemiRng|))))
 (^ (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|NonNegativeInteger|))
       (|ofCategory| *1 (|MatrixCategory| *3 *4 *5))
       (|ofCategory| *3 (|AbelianMonoid|))
       (|ofCategory| *4 (|FiniteLinearAggregate| *3))
       (|ofCategory| *5 (|FiniteLinearAggregate| *3))
       (|ofCategory| *3 (|Monoid|)) (|ofCategory| *3 (|SemiRng|))))
 (|exquo| (*1 *1 *1 *2)
  (|partial| AND (|ofCategory| *1 (|MatrixCategory| *2 *3 *4))
   (|ofCategory| *2 (|AbelianMonoid|))
   (|ofCategory| *3 (|FiniteLinearAggregate| *2))
   (|ofCategory| *4 (|FiniteLinearAggregate| *2))
   (|ofCategory| *2 (|IntegralDomain|))))
 (/ (*1 *1 *1 *2)
    (AND (|ofCategory| *1 (|MatrixCategory| *2 *3 *4))
         (|ofCategory| *2 (|AbelianMonoid|))
         (|ofCategory| *3 (|FiniteLinearAggregate| *2))
         (|ofCategory| *4 (|FiniteLinearAggregate| *2))
         (|ofCategory| *2 (|Field|))))
 (|rowEchelon| (*1 *1 *1)
  (AND (|ofCategory| *1 (|MatrixCategory| *2 *3 *4))
       (|ofCategory| *2 (|AbelianMonoid|))
       (|ofCategory| *3 (|FiniteLinearAggregate| *2))
       (|ofCategory| *4 (|FiniteLinearAggregate| *2))
       (|ofCategory| *2 (|EuclideanDomain|))))
 (|columnSpace| (*1 *2 *1)
  (AND (|ofCategory| *1 (|MatrixCategory| *3 *4 *5))
       (|ofCategory| *3 (|AbelianMonoid|))
       (|ofCategory| *4 (|FiniteLinearAggregate| *3))
       (|ofCategory| *5 (|FiniteLinearAggregate| *3))
       (|ofCategory| *3 (|EuclideanDomain|)) (|isDomain| *2 (|List| *5))))
 (|rank| (*1 *2 *1)
  (AND (|ofCategory| *1 (|MatrixCategory| *3 *4 *5))
       (|ofCategory| *3 (|AbelianMonoid|))
       (|ofCategory| *4 (|FiniteLinearAggregate| *3))
       (|ofCategory| *5 (|FiniteLinearAggregate| *3))
       (|ofCategory| *3 (|IntegralDomain|))
       (|isDomain| *2 (|NonNegativeInteger|))))
 (|nullity| (*1 *2 *1)
  (AND (|ofCategory| *1 (|MatrixCategory| *3 *4 *5))
       (|ofCategory| *3 (|AbelianMonoid|))
       (|ofCategory| *4 (|FiniteLinearAggregate| *3))
       (|ofCategory| *5 (|FiniteLinearAggregate| *3))
       (|ofCategory| *3 (|IntegralDomain|))
       (|isDomain| *2 (|NonNegativeInteger|))))
 (|nullSpace| (*1 *2 *1)
  (AND (|ofCategory| *1 (|MatrixCategory| *3 *4 *5))
       (|ofCategory| *3 (|AbelianMonoid|))
       (|ofCategory| *4 (|FiniteLinearAggregate| *3))
       (|ofCategory| *5 (|FiniteLinearAggregate| *3))
       (|ofCategory| *3 (|IntegralDomain|)) (|isDomain| *2 (|List| *5))))
 (|determinant| (*1 *2 *1)
  (AND (|ofCategory| *1 (|MatrixCategory| *2 *3 *4))
       (|ofCategory| *3 (|FiniteLinearAggregate| *2))
       (|ofCategory| *4 (|FiniteLinearAggregate| *2))
       (|ofCategory| *2 (|AbelianMonoid|))
       (|ofCategory| *2 (|CommutativeRing|))))
 (|minordet| (*1 *2 *1)
  (AND (|ofCategory| *1 (|MatrixCategory| *2 *3 *4))
       (|ofCategory| *3 (|FiniteLinearAggregate| *2))
       (|ofCategory| *4 (|FiniteLinearAggregate| *2))
       (|ofCategory| *2 (|AbelianMonoid|))
       (|ofCategory| *2 (|CommutativeRing|))))
 (|Pfaffian| (*1 *2 *1)
  (AND (|ofCategory| *1 (|MatrixCategory| *2 *3 *4))
       (|ofCategory| *3 (|FiniteLinearAggregate| *2))
       (|ofCategory| *4 (|FiniteLinearAggregate| *2))
       (|ofCategory| *2 (|AbelianMonoid|))
       (|ofCategory| *2 (|CommutativeRing|))))
 (|inverse| (*1 *1 *1)
  (|partial| AND (|ofCategory| *1 (|MatrixCategory| *2 *3 *4))
   (|ofCategory| *2 (|AbelianMonoid|))
   (|ofCategory| *3 (|FiniteLinearAggregate| *2))
   (|ofCategory| *4 (|FiniteLinearAggregate| *2)) (|ofCategory| *2 (|Field|))))
 (^ (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|Integer|))
       (|ofCategory| *1 (|MatrixCategory| *3 *4 *5))
       (|ofCategory| *3 (|AbelianMonoid|))
       (|ofCategory| *4 (|FiniteLinearAggregate| *3))
       (|ofCategory| *5 (|FiniteLinearAggregate| *3))
       (|ofCategory| *3 (|Field|))))
 (|kronecker_prod1| (*1 *2 *1 *3 *4 *5 *6 *6 *7)
  (AND (|isDomain| *3 (|Integer|))
       (|isDomain| *4 (|List| (|List| (|NonNegativeInteger|))))
       (|isDomain| *5 (|List| *1)) (|isDomain| *6 (|NonNegativeInteger|))
       (|isDomain| *7 (|Union| *8 "one"))
       (|ofCategory| *1 (|MatrixCategory| *8 *9 *10))
       (|ofCategory| *8 (|AbelianMonoid|))
       (|ofCategory| *9 (|FiniteLinearAggregate| *8))
       (|ofCategory| *10 (|FiniteLinearAggregate| *8))
       (|isDomain| *2 (|Void|)))))
((~=
  (((|Boolean|) $ $) 6
   (OR (|has| |#1| (|SetCategory|))
       (AND (|has| |#1| (|BasicType|)) (|has| $ (|finiteAggregate|))))))
 (|zero?| (((|Boolean|) $) 6))
 (|zero| (($ (|NonNegativeInteger|) (|NonNegativeInteger|)) 6))
 (|vertSplit| (((|List| $) $ (|PositiveInteger|)) 6)
  (((|List| $) $ (|List| (|NonNegativeInteger|))) 6))
 (|vertConcat| (($ $ $) 6) (($ (|List| $)) 6))
 (|transpose| (($ $) 6) (($ |#2|) 6)) (|symmetric?| (((|Boolean|) $) 6))
 (|swapRows!| (($ $ (|Integer|) (|Integer|)) 6))
 (|swapColumns!| (($ $ (|Integer|) (|Integer|)) 6))
 (|subMatrix| (($ $ (|Integer|) (|Integer|) (|Integer|) (|Integer|)) 6))
 (|squareTop| (($ $) 6)) (|square?| (((|Boolean|) $) 6))
 (|smaller?| (((|Boolean|) $ $) 6 (|has| |#1| (|Comparable|))))
 (|size?| (((|Boolean|) $ (|NonNegativeInteger|)) 6))
 (|setsubMatrix!| (($ $ (|Integer|) (|Integer|) $) 6))
 (|setelt!| (($ $ (|Integer|) (|List| (|Segment| (|Integer|))) $) 6)
  (($ $ (|List| (|Segment| (|Integer|))) (|Integer|) $) 6)
  ((|#1| $ (|Integer|) (|Integer|) |#1|) 6)
  (($ $ (|Integer|) (|List| (|Integer|)) $) 6)
  (($ $ (|List| (|Integer|)) (|Integer|) $) 6)
  (($ $ (|List| (|Integer|)) (|List| (|Integer|)) $) 6)
  (($ $ (|Segment| (|Integer|)) (|Segment| (|Integer|)) $) 6)
  (($ $ (|List| (|Integer|)) (|Segment| (|Integer|)) $) 6)
  (($ $ (|Segment| (|Integer|)) (|List| (|Integer|)) $) 6)
  (($ $ (|Segment| (|Integer|)) (|List| (|Segment| (|Integer|))) $) 6)
  (($ $ (|List| (|Segment| (|Integer|))) (|Segment| (|Integer|)) $) 6)
  (($ $ (|List| (|Segment| (|Integer|))) (|List| (|Segment| (|Integer|))) $)
   6))
 (|setRow!| (($ $ (|Integer|) |#2|) 6))
 (|setColumn!| (($ $ (|Integer|) |#3|) 6))
 (|scalarMatrix| (($ (|NonNegativeInteger|) |#1|) 6))
 (|sample| (($) 6 T CONST)) (|rowSlice| (((|Segment| (|Integer|)) $) 6))
 (|rowEchelon| (($ $) 6 (|has| |#1| (|EuclideanDomain|))))
 (|row| ((|#2| $ (|Integer|)) 6))
 (|rank| (((|NonNegativeInteger|) $) 6 (|has| |#1| (|IntegralDomain|))))
 (|qsetelt!| ((|#1| $ (|Integer|) (|Integer|) |#1|) 6))
 (|qnew| (($ (|NonNegativeInteger|) (|NonNegativeInteger|)) 6))
 (|qelt| ((|#1| $ (|Integer|) (|Integer|)) 6))
 (|positivePower| (($ $ (|Integer|)) 6 (|has| |#1| (|SemiRng|))))
 (|parts| (((|List| |#1|) $) 6))
 (|nullity| (((|NonNegativeInteger|) $) 6 (|has| |#1| (|IntegralDomain|))))
 (|nullSpace| (((|List| |#3|) $) 6 (|has| |#1| (|IntegralDomain|))))
 (|nrows| (((|NonNegativeInteger|) $) 6))
 (|new| (($ (|NonNegativeInteger|) (|NonNegativeInteger|) |#1|) 6))
 (|ncols| (((|NonNegativeInteger|) $) 6))
 (|more?| (((|Boolean|) $ (|NonNegativeInteger|)) 6))
 (|minordet| ((|#1| $) 6 (|has| |#1| (|CommutativeRing|))))
 (|minRowIndex| (((|Integer|) $) 6)) (|minColIndex| (((|Integer|) $) 6))
 (|min|
  ((|#1| $) 6 (AND (|has| |#1| (|OrderedSet|)) (|has| $ (|finiteAggregate|)))))
 (|members| (((|List| |#1|) $) 6 (|has| $ (|finiteAggregate|))))
 (|member?|
  (((|Boolean|) |#1| $) 6
   (AND (|has| |#1| (|BasicType|)) (|has| $ (|finiteAggregate|)))))
 (|maxRowIndex| (((|Integer|) $) 6)) (|maxColIndex| (((|Integer|) $) 6))
 (|max|
  ((|#1| (|Mapping| (|Boolean|) |#1| |#1|) $) 6 (|has| $ (|finiteAggregate|)))
  ((|#1| $) 6 (AND (|has| |#1| (|OrderedSet|)) (|has| $ (|finiteAggregate|)))))
 (|matrix| (($ (|List| (|List| |#1|))) 6)
  (($ (|NonNegativeInteger|) (|NonNegativeInteger|)
    (|Mapping| |#1| (|Integer|) (|Integer|)))
   6))
 (|map!| (($ (|Mapping| |#1| |#1|) $) 6))
 (|map| (($ (|Mapping| |#1| |#1|) $) 6) (($ (|Mapping| |#1| |#1| |#1|) $ $) 6)
  (($ (|Mapping| |#1| |#1| |#1|) $ $ |#1|) 6))
 (|listOfLists| (((|List| (|List| |#1|)) $) 6))
 (|less?| (((|Boolean|) $ (|NonNegativeInteger|)) 6))
 (|latex| (((|String|) $) 6 (|has| |#1| (|SetCategory|))))
 (|kronecker_prod1|
  (((|Void|) $ (|Integer|) (|List| (|List| (|NonNegativeInteger|))) (|List| $)
    (|NonNegativeInteger|) (|NonNegativeInteger|) (|Union| |#1| "one"))
   6))
 (|kroneckerSum| (($ $ $) 6) (($ (|List| $)) 6))
 (|kroneckerProduct| (($ $ $) 6 (|has| |#1| (|SemiRng|)))
  (($ (|List| $)) 6 (|has| |#1| (|SemiRng|))))
 (|inverse| (((|Union| $ "failed") $) 6 (|has| |#1| (|Field|))))
 (|horizSplit| (((|List| $) $ (|PositiveInteger|)) 6)
  (((|List| $) $ (|List| (|NonNegativeInteger|))) 6))
 (|horizConcat| (($ $ $) 6) (($ (|List| $)) 6))
 (|hashUpdate!|
  (((|HashState|) (|HashState|) $) 6 (|has| |#1| (|SetCategory|))))
 (|hash| (((|SingleInteger|) $) 6 (|has| |#1| (|SetCategory|))))
 (|fill!| (($ $ |#1|) 6))
 (|exquo| (((|Union| $ "failed") $ |#1|) 6 (|has| |#1| (|IntegralDomain|))))
 (|every?|
  (((|Boolean|) (|Mapping| (|Boolean|) |#1|) $) 6
   (|has| $ (|finiteAggregate|))))
 (|eval|
  (($ $ (|List| (|Equation| |#1|))) 6
   (AND (|has| |#1| (|Evalable| |#1|)) (|has| |#1| (|SetCategory|))))
  (($ $ (|Equation| |#1|)) 6
   (AND (|has| |#1| (|Evalable| |#1|)) (|has| |#1| (|SetCategory|))))
  (($ $ |#1| |#1|) 6
   (AND (|has| |#1| (|Evalable| |#1|)) (|has| |#1| (|SetCategory|))))
  (($ $ (|List| |#1|) (|List| |#1|)) 6
   (AND (|has| |#1| (|Evalable| |#1|)) (|has| |#1| (|SetCategory|)))))
 (|eq?| (((|Boolean|) $ $) 6)) (|empty?| (((|Boolean|) $) 6)) (|empty| (($) 6))
 (|elt| ((|#1| $ (|Integer|) (|Integer|)) 6)
  ((|#1| $ (|Integer|) (|Integer|) |#1|) 6)
  (($ $ (|Integer|) (|List| (|Integer|))) 6)
  (($ $ (|List| (|Integer|)) (|Integer|)) 6)
  (($ $ (|List| (|Integer|)) (|List| (|Integer|))) 6)
  (($ $ (|Segment| (|Integer|)) (|Segment| (|Integer|))) 6)
  (($ $ (|List| (|Integer|)) (|Segment| (|Integer|))) 6)
  (($ $ (|Segment| (|Integer|)) (|List| (|Integer|))) 6)
  (($ $ (|Integer|) (|List| (|Segment| (|Integer|)))) 6)
  (($ $ (|List| (|Segment| (|Integer|))) (|Integer|)) 6)
  (($ $ (|Segment| (|Integer|)) (|List| (|Segment| (|Integer|)))) 6)
  (($ $ (|List| (|Segment| (|Integer|))) (|Segment| (|Integer|))) 6)
  (($ $ (|List| (|Segment| (|Integer|))) (|List| (|Segment| (|Integer|)))) 6))
 (|diagonalMatrix| (($ (|List| |#1|)) 6) (($ (|List| $)) 6))
 (|diagonal?| (((|Boolean|) $) 6))
 (|determinant| ((|#1| $) 6 (|has| |#1| (|CommutativeRing|))))
 (|count|
  (((|NonNegativeInteger|) (|Mapping| (|Boolean|) |#1|) $) 6
   (|has| $ (|finiteAggregate|)))
  (((|NonNegativeInteger|) |#1| $) 6
   (AND (|has| |#1| (|BasicType|)) (|has| $ (|finiteAggregate|)))))
 (|copy| (($ $) 6))
 (|columnSpace| (((|List| |#3|) $) 6 (|has| |#1| (|EuclideanDomain|))))
 (|column| ((|#3| $ (|Integer|)) 6))
 (|colSlice| (((|Segment| (|Integer|)) $) 6))
 (|coerce| (((|OutputForm|) $) 6 (|has| |#1| (|CoercibleTo| (|OutputForm|))))
           (($ |#3|) 6))
 (|blockSplit|
  (((|List| (|List| $)) $ (|PositiveInteger|) (|PositiveInteger|)) 6)
  (((|List| (|List| $)) $ (|List| (|NonNegativeInteger|))
    (|List| (|NonNegativeInteger|)))
   6))
 (|blockConcat| (($ (|List| (|List| $))) 6))
 (|any?|
  (((|Boolean|) (|Mapping| (|Boolean|) |#1|) $) 6
   (|has| $ (|finiteAggregate|))))
 (|antisymmetric?| (((|Boolean|) $) 6 (|has| |#1| (|AbelianGroup|))))
 (^
  (($ $ (|NonNegativeInteger|)) 6
   (AND (|has| |#1| (|Monoid|)) (|has| |#1| (|SemiRng|))))
  (($ $ (|Integer|)) 6 (|has| |#1| (|Field|))))
 (|Pfaffian| ((|#1| $) 6 (|has| |#1| (|CommutativeRing|))))
 (=
  (((|Boolean|) $ $) 6
   (OR (|has| |#1| (|SetCategory|))
       (AND (|has| |#1| (|BasicType|)) (|has| $ (|finiteAggregate|))))))
 (/ (($ $ |#1|) 6 (|has| |#1| (|Field|))))
 (- (($ $ $) 6 (|has| |#1| (|AbelianGroup|)))
    (($ $) 6 (|has| |#1| (|AbelianGroup|))))
 (+ (($ $ $) 6))
 (* (($ (|Integer|) $) 6 (|has| |#1| (|AbelianGroup|)))
    (($ $ $) 6 (|has| |#1| (|SemiRng|)))
    (($ |#1| $) 6 (|has| |#1| (|SemiRng|)))
    (($ $ |#1|) 6 (|has| |#1| (|SemiRng|)))
    ((|#3| $ |#3|) 6 (|has| |#1| (|SemiRng|)))
    ((|#2| |#2| $) 6 (|has| |#1| (|SemiRng|))))
 (|#| (((|NonNegativeInteger|) $) 6 (|has| $ (|finiteAggregate|)))))
MATCAT
(((|TwoDimensionalArrayCategory| |#1| |#2| |#3|) . T)
 ((|shallowlyMutable|) . T) ((|finiteAggregate|) . T))
(((|Aggregate|) . T)
 ((|BasicType|) OR (|has| |t#1| (|SetCategory|))
  (AND (|has| $ (|finiteAggregate|)) (|has| |t#1| (|BasicType|))))
 ((|CoercibleTo| (|OutputForm|)) |has| |t#1| (|CoercibleTo| (|OutputForm|)))
 ((|Comparable|) |has| |t#1| (|Comparable|))
 ((|Evalable| |t#1|) AND (|has| |t#1| (|Evalable| |t#1|))
  (|has| |t#1| (|SetCategory|)))
 ((|HomogeneousAggregate| |t#1|) . T)
 ((|InnerEvalable| |t#1| |t#1|) AND (|has| |t#1| (|Evalable| |t#1|))
  (|has| |t#1| (|SetCategory|)))
 ((|SetCategory|) |has| |t#1| (|SetCategory|))
 ((|TwoDimensionalArrayCategory| |#1| |#2| |#3|) . T) ((|Type|) . T)
 ((|finiteAggregate|) . T) ((|shallowlyMutable|) . T))
((|constructor|
  (NIL
   "\\spadtype{MatrixCategory} is a general matrix category which allows different representations and indexing schemes. Rows and columns may be extracted with rows returned as objects of type Row and colums returned as objects of type Col. A domain belonging to this category will be shallowly mutable. The index of the 'first' row may be obtained by calling the function \\spadfun{minRowIndex}. The index of the 'first' column may be obtained by calling the function \\spadfun{minColIndex}. The index of the first element of a Row is the same as the index of the first column in a matrix and vice versa."))
 (|kronecker_prod1|
  (((|Void|) $ (|Integer|) (|List| (|List| (|NonNegativeInteger|))) (|List| $)
    (|NonNegativeInteger|) (|NonNegativeInteger|) (|Union| |#1| "one"))
   "Should be local but conditional."))
 (|inverse|
  (((|Union| $ "failed") $)
   "\\spad{inverse(m)} returns the inverse of the matrix \\spad{m}. If the matrix is not invertible,{} \"failed\" is returned. Error: if the matrix is not square."))
 (|Pfaffian|
  ((|#1| $)
   "\\spad{Pfaffian(m)} returns the Pfaffian of the matrix \\spad{m}. Error: if the matrix is not antisymmetric."))
 (|minordet|
  ((|#1| $)
   "\\spad{minordet(m)} computes the determinant of the matrix \\spad{m} using minors. Error: if the matrix is not square."))
 (|determinant|
  ((|#1| $)
   "\\spad{determinant(m)} returns the determinant of the matrix \\spad{m}. Error: if the matrix is not square."))
 (|nullSpace|
  (((|List| |#3|) $)
   "\\spad{nullSpace(m)} returns a basis for the null space of the matrix \\spad{m}."))
 (|nullity|
  (((|NonNegativeInteger|) $)
   "\\spad{nullity(m)} returns the nullity of the matrix \\spad{m}. This is the dimension of the null space of the matrix \\spad{m}."))
 (|rank|
  (((|NonNegativeInteger|) $)
   "\\spad{rank(m)} returns the rank of the matrix \\spad{m}."))
 (|columnSpace|
  (((|List| |#3|) $)
   "\\spad{columnSpace(m)} returns a sublist of columns of the matrix \\spad{m} forming a basis of its column space"))
 (|rowEchelon|
  (($ $)
   "\\spad{rowEchelon(m)} returns the row echelon form of the matrix \\spad{m}."))
 (/
  (($ $ |#1|)
   "\\spad{m/r} divides the elements of \\spad{m} by \\spad{r}. Error: if \\spad{r = 0}."))
 (|exquo|
  (((|Union| $ "failed") $ |#1|)
   "\\spad{exquo(m,{} r)} computes the exact quotient of the elements of \\spad{m} by \\spad{r},{} returning \\spad{\"failed\"} if this is not possible."))
 (^
  (($ $ (|Integer|))
   "\\spad{m^n} computes an integral power of the matrix \\spad{m}. Error: if matrix is not square or if the matrix is square but not invertible.")
  (($ $ (|NonNegativeInteger|))
   "\\spad{x ^ n} computes a non-negative integral power of the matrix \\spad{x}. Error: if the matrix is not square."))
 (|positivePower|
  (($ $ (|Integer|))
   "\\spad{positivePower(x,{} n)} computes a positive integral power of the matrix \\spad{x}. Error: if the matrix is not square."))
 (*
  ((|#2| |#2| $)
   "\\spad{r * x} is the product of the row vector \\spad{r} and the matrix \\spad{x}. Error: if the dimensions are incompatible.")
  ((|#3| $ |#3|)
   "\\spad{x * c} is the product of the matrix \\spad{x} and the column vector \\spad{c}. Error: if the dimensions are incompatible.")
  (($ $ |#1|)
   "\\spad{x * r} is the right scalar multiple of the scalar \\spad{r} and the matrix \\spad{x}.")
  (($ |#1| $)
   "\\spad{r*x} is the left scalar multiple of the scalar \\spad{r} and the matrix \\spad{x}.")
  (($ $ $)
   "\\spad{x * y} is the product of the matrices \\spad{x} and \\spad{y}. Error: if the dimensions are incompatible.")
  (($ (|Integer|) $) "\\spad{n * x} is an integer multiple."))
 (- (($ $) "\\spad{-x} returns the negative of the matrix \\spad{x}.")
    (($ $ $)
     "\\spad{x - y} is the difference of the matrices \\spad{x} and \\spad{y}. Error: if the dimensions are incompatible."))
 (+
  (($ $ $)
   "\\spad{x + y} is the sum of the matrices \\spad{x} and \\spad{y}. Error: if the dimensions are incompatible."))
 (|transpose|
  (($ |#2|)
   "\\spad{transpose(r)} converts the row \\spad{r} to a row matrix."))
 (|coerce|
  (($ |#3|)
   "\\spad{coerce(col)} converts the column \\spad{col} to a column matrix."))
 (|kroneckerSum|
  (($ (|List| $))
   "\\spad{kroneckerSum([a1,{} a2,{} ...,{} an])} calculates the Kronecker sum of the matrices \\spad{a1},{} \\spad{a2},{} ...,{} an.")
  (($ $ $)
   "\\spad{kroneckerSum(a,{} b)} calculates the Kronecker sum of the matrices a and \\spad{b}."))
 (|kroneckerProduct|
  (($ (|List| $))
   "\\spad{kroneckerProduct([a1,{} a2,{} ...,{} an])} calculates the Kronecker product of the matrices \\spad{a1},{} \\spad{a2},{} ...,{} an. This corresponds to tensor product of corresponding operators.")
  (($ $ $)
   "\\spad{kroneckerProduct(a,{} b)} calculates the Kronecker product of the matrices a and \\spad{b}. This corresponds to tensor product of corresponding operators."))
 (|diagonalMatrix|
  (($ (|List| $))
   "\\spad{diagonalMatrix([m1,{} ...,{} mk])} creates a block diagonal matrix \\spad{M} with block matrices {\\em m1},{} ...,{} {\\em mk} down the diagonal,{} with 0 block matrices elsewhere. More precisly: if \\spad{\\spad{ri} := nrows \\spad{mi}},{} \\spad{\\spad{ci} := ncols \\spad{mi}},{} then \\spad{m} is an (\\spad{r1+}..\\spad{+rk}) by (\\spad{c1+}..\\spad{+ck}) - matrix with entries \\spad{m.i.j = ml.(i-r1-..-r(l-1)).(j-n1-..-n(l-1))},{} if \\spad{(r1+..+r(l-1)) < i <= r1+..+rl} and \\spad{(c1+..+c(l-1)) < i <= c1+..+cl},{} \\spad{m.i.j} = 0 otherwise.")
  (($ (|List| |#1|))
   "\\spad{diagonalMatrix(l)} returns a diagonal matrix with the elements of \\spad{l} on the diagonal."))
 (|scalarMatrix|
  (($ (|NonNegativeInteger|) |#1|)
   "\\spad{scalarMatrix(n,{} r)} returns an \\spad{n}-by-\\spad{n} matrix with \\spad{r}\\spad{'s} on the diagonal and zeroes elsewhere."))
 (|matrix|
  (($ (|NonNegativeInteger|) (|NonNegativeInteger|)
    (|Mapping| |#1| (|Integer|) (|Integer|)))
   "\\spad{matrix(n,{}m,{}f)} constructs an \\spad{n * m} matrix with the \\spad{(i,{}j)} entry equal to \\spad{f(i,{}j)}.")
  (($ (|List| (|List| |#1|)))
   "\\spad{matrix(l)} converts the list of lists \\spad{l} to a matrix,{} where the list of lists is viewed as a list of the rows of the matrix."))
 (|zero|
  (($ (|NonNegativeInteger|) (|NonNegativeInteger|))
   "\\spad{zero(m,{} n)} returns an \\spad{m}-by-\\spad{n} zero matrix."))
 (|zero?|
  (((|Boolean|) $)
   "\\spad{zero?(m)} returns \\spad{true} if \\spad{m} is a zero matrix and \\spad{false} otherwise."))
 (|antisymmetric?|
  (((|Boolean|) $)
   "\\spad{antisymmetric?(m)} returns \\spad{true} if the matrix \\spad{m} is square and antisymmetric (\\spadignore{i.e.} \\spad{m[i,{} j] = -m[j,{} i]} for all \\spad{i} and \\spad{j}) and \\spad{false} otherwise."))
 (|symmetric?|
  (((|Boolean|) $)
   "\\spad{symmetric?(m)} returns \\spad{true} if the matrix \\spad{m} is square and symmetric (\\spadignore{i.e.} \\spad{m[i,{} j] = m[j,{} i]} for all \\spad{i} and \\spad{j}) and \\spad{false} otherwise."))
 (|diagonal?|
  (((|Boolean|) $)
   "\\spad{diagonal?(m)} returns \\spad{true} if the matrix \\spad{m} is square and diagonal (\\spadignore{i.e.} all entries of \\spad{m} not on the diagonal are zero) and \\spad{false} otherwise."))
 (|square?|
  (((|Boolean|) $)
   "\\spad{square?(m)} returns \\spad{true} if \\spad{m} is a square matrix (\\spadignore{i.e.} if \\spad{m} has the same number of rows as columns) and \\spad{false} otherwise.")))
(("documentation" 0 23754) ("ancestors" 0 23093) ("parents" 0 22984)
 ("abbreviation" 0 22977) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 15265) ("modemaps" 0 3597) ("sourceFile" 0 3559)
 ("constructorCategory" 0 221) ("constructorModemap" 0 64)
 ("constructorKind" 0 53) ("constructorForm" 0 20))