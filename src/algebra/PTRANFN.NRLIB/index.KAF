10823               (|PartialTranscendentalFunctions| K)
|category|
(((|PartialTranscendentalFunctions| |#1|) (|Category|) (|Type|))
 (T |PartialTranscendentalFunctions|))
(|Join|
 (CATEGORY |package|
  (SIGNATURE |nthRootIfCan|
   ((|Union| |t#1| "failed") |t#1| (|NonNegativeInteger|)))
  (SIGNATURE |expIfCan| ((|Union| |t#1| "failed") |t#1|))
  (SIGNATURE |logIfCan| ((|Union| |t#1| "failed") |t#1|))
  (SIGNATURE |sinIfCan| ((|Union| |t#1| "failed") |t#1|))
  (SIGNATURE |cosIfCan| ((|Union| |t#1| "failed") |t#1|))
  (SIGNATURE |tanIfCan| ((|Union| |t#1| "failed") |t#1|))
  (SIGNATURE |cotIfCan| ((|Union| |t#1| "failed") |t#1|))
  (SIGNATURE |secIfCan| ((|Union| |t#1| "failed") |t#1|))
  (SIGNATURE |cscIfCan| ((|Union| |t#1| "failed") |t#1|))
  (SIGNATURE |asinIfCan| ((|Union| |t#1| "failed") |t#1|))
  (SIGNATURE |acosIfCan| ((|Union| |t#1| "failed") |t#1|))
  (SIGNATURE |atanIfCan| ((|Union| |t#1| "failed") |t#1|))
  (SIGNATURE |acotIfCan| ((|Union| |t#1| "failed") |t#1|))
  (SIGNATURE |asecIfCan| ((|Union| |t#1| "failed") |t#1|))
  (SIGNATURE |acscIfCan| ((|Union| |t#1| "failed") |t#1|))
  (SIGNATURE |sinhIfCan| ((|Union| |t#1| "failed") |t#1|))
  (SIGNATURE |coshIfCan| ((|Union| |t#1| "failed") |t#1|))
  (SIGNATURE |tanhIfCan| ((|Union| |t#1| "failed") |t#1|))
  (SIGNATURE |cothIfCan| ((|Union| |t#1| "failed") |t#1|))
  (SIGNATURE |sechIfCan| ((|Union| |t#1| "failed") |t#1|))
  (SIGNATURE |cschIfCan| ((|Union| |t#1| "failed") |t#1|))
  (SIGNATURE |asinhIfCan| ((|Union| |t#1| "failed") |t#1|))
  (SIGNATURE |acoshIfCan| ((|Union| |t#1| "failed") |t#1|))
  (SIGNATURE |atanhIfCan| ((|Union| |t#1| "failed") |t#1|))
  (SIGNATURE |acothIfCan| ((|Union| |t#1| "failed") |t#1|))
  (SIGNATURE |asechIfCan| ((|Union| |t#1| "failed") |t#1|))
  (SIGNATURE |acschIfCan| ((|Union| |t#1| "failed") |t#1|))))
"/git/fricas/src/algebra/PTRANFN.spad"
((|acschIfCan| (*1 *2 *2)
  (|partial| AND (|ofCategory| *1 (|PartialTranscendentalFunctions| *2))
   (|ofCategory| *2 (|Type|))))
 (|asechIfCan| (*1 *2 *2)
  (|partial| AND (|ofCategory| *1 (|PartialTranscendentalFunctions| *2))
   (|ofCategory| *2 (|Type|))))
 (|acothIfCan| (*1 *2 *2)
  (|partial| AND (|ofCategory| *1 (|PartialTranscendentalFunctions| *2))
   (|ofCategory| *2 (|Type|))))
 (|atanhIfCan| (*1 *2 *2)
  (|partial| AND (|ofCategory| *1 (|PartialTranscendentalFunctions| *2))
   (|ofCategory| *2 (|Type|))))
 (|acoshIfCan| (*1 *2 *2)
  (|partial| AND (|ofCategory| *1 (|PartialTranscendentalFunctions| *2))
   (|ofCategory| *2 (|Type|))))
 (|asinhIfCan| (*1 *2 *2)
  (|partial| AND (|ofCategory| *1 (|PartialTranscendentalFunctions| *2))
   (|ofCategory| *2 (|Type|))))
 (|cschIfCan| (*1 *2 *2)
  (|partial| AND (|ofCategory| *1 (|PartialTranscendentalFunctions| *2))
   (|ofCategory| *2 (|Type|))))
 (|sechIfCan| (*1 *2 *2)
  (|partial| AND (|ofCategory| *1 (|PartialTranscendentalFunctions| *2))
   (|ofCategory| *2 (|Type|))))
 (|cothIfCan| (*1 *2 *2)
  (|partial| AND (|ofCategory| *1 (|PartialTranscendentalFunctions| *2))
   (|ofCategory| *2 (|Type|))))
 (|tanhIfCan| (*1 *2 *2)
  (|partial| AND (|ofCategory| *1 (|PartialTranscendentalFunctions| *2))
   (|ofCategory| *2 (|Type|))))
 (|coshIfCan| (*1 *2 *2)
  (|partial| AND (|ofCategory| *1 (|PartialTranscendentalFunctions| *2))
   (|ofCategory| *2 (|Type|))))
 (|sinhIfCan| (*1 *2 *2)
  (|partial| AND (|ofCategory| *1 (|PartialTranscendentalFunctions| *2))
   (|ofCategory| *2 (|Type|))))
 (|acscIfCan| (*1 *2 *2)
  (|partial| AND (|ofCategory| *1 (|PartialTranscendentalFunctions| *2))
   (|ofCategory| *2 (|Type|))))
 (|asecIfCan| (*1 *2 *2)
  (|partial| AND (|ofCategory| *1 (|PartialTranscendentalFunctions| *2))
   (|ofCategory| *2 (|Type|))))
 (|acotIfCan| (*1 *2 *2)
  (|partial| AND (|ofCategory| *1 (|PartialTranscendentalFunctions| *2))
   (|ofCategory| *2 (|Type|))))
 (|atanIfCan| (*1 *2 *2)
  (|partial| AND (|ofCategory| *1 (|PartialTranscendentalFunctions| *2))
   (|ofCategory| *2 (|Type|))))
 (|acosIfCan| (*1 *2 *2)
  (|partial| AND (|ofCategory| *1 (|PartialTranscendentalFunctions| *2))
   (|ofCategory| *2 (|Type|))))
 (|asinIfCan| (*1 *2 *2)
  (|partial| AND (|ofCategory| *1 (|PartialTranscendentalFunctions| *2))
   (|ofCategory| *2 (|Type|))))
 (|cscIfCan| (*1 *2 *2)
  (|partial| AND (|ofCategory| *1 (|PartialTranscendentalFunctions| *2))
   (|ofCategory| *2 (|Type|))))
 (|secIfCan| (*1 *2 *2)
  (|partial| AND (|ofCategory| *1 (|PartialTranscendentalFunctions| *2))
   (|ofCategory| *2 (|Type|))))
 (|cotIfCan| (*1 *2 *2)
  (|partial| AND (|ofCategory| *1 (|PartialTranscendentalFunctions| *2))
   (|ofCategory| *2 (|Type|))))
 (|tanIfCan| (*1 *2 *2)
  (|partial| AND (|ofCategory| *1 (|PartialTranscendentalFunctions| *2))
   (|ofCategory| *2 (|Type|))))
 (|cosIfCan| (*1 *2 *2)
  (|partial| AND (|ofCategory| *1 (|PartialTranscendentalFunctions| *2))
   (|ofCategory| *2 (|Type|))))
 (|sinIfCan| (*1 *2 *2)
  (|partial| AND (|ofCategory| *1 (|PartialTranscendentalFunctions| *2))
   (|ofCategory| *2 (|Type|))))
 (|logIfCan| (*1 *2 *2)
  (|partial| AND (|ofCategory| *1 (|PartialTranscendentalFunctions| *2))
   (|ofCategory| *2 (|Type|))))
 (|expIfCan| (*1 *2 *2)
  (|partial| AND (|ofCategory| *1 (|PartialTranscendentalFunctions| *2))
   (|ofCategory| *2 (|Type|))))
 (|nthRootIfCan| (*1 *2 *2 *3)
  (|partial| AND (|isDomain| *3 (|NonNegativeInteger|))
   (|ofCategory| *1 (|PartialTranscendentalFunctions| *2))
   (|ofCategory| *2 (|Type|)))))
((|tanhIfCan| (((|Union| |#1| "failed") |#1|) 6))
 (|tanIfCan| (((|Union| |#1| "failed") |#1|) 6))
 (|sinhIfCan| (((|Union| |#1| "failed") |#1|) 6))
 (|sinIfCan| (((|Union| |#1| "failed") |#1|) 6))
 (|sechIfCan| (((|Union| |#1| "failed") |#1|) 6))
 (|secIfCan| (((|Union| |#1| "failed") |#1|) 6))
 (|nthRootIfCan| (((|Union| |#1| "failed") |#1| (|NonNegativeInteger|)) 6))
 (|logIfCan| (((|Union| |#1| "failed") |#1|) 6))
 (|expIfCan| (((|Union| |#1| "failed") |#1|) 6))
 (|cschIfCan| (((|Union| |#1| "failed") |#1|) 6))
 (|cscIfCan| (((|Union| |#1| "failed") |#1|) 6))
 (|cothIfCan| (((|Union| |#1| "failed") |#1|) 6))
 (|cotIfCan| (((|Union| |#1| "failed") |#1|) 6))
 (|coshIfCan| (((|Union| |#1| "failed") |#1|) 6))
 (|cosIfCan| (((|Union| |#1| "failed") |#1|) 6))
 (|atanhIfCan| (((|Union| |#1| "failed") |#1|) 6))
 (|atanIfCan| (((|Union| |#1| "failed") |#1|) 6))
 (|asinhIfCan| (((|Union| |#1| "failed") |#1|) 6))
 (|asinIfCan| (((|Union| |#1| "failed") |#1|) 6))
 (|asechIfCan| (((|Union| |#1| "failed") |#1|) 6))
 (|asecIfCan| (((|Union| |#1| "failed") |#1|) 6))
 (|acschIfCan| (((|Union| |#1| "failed") |#1|) 6))
 (|acscIfCan| (((|Union| |#1| "failed") |#1|) 6))
 (|acothIfCan| (((|Union| |#1| "failed") |#1|) 6))
 (|acotIfCan| (((|Union| |#1| "failed") |#1|) 6))
 (|acoshIfCan| (((|Union| |#1| "failed") |#1|) 6))
 (|acosIfCan| (((|Union| |#1| "failed") |#1|) 6)))
PTRANFN
((|constructor|
  (NIL
   "This is the description of any package which provides partial functions on a domain belonging to TranscendentalFunctionCategory."))
 (|acschIfCan|
  (((|Union| |#1| "failed") |#1|)
   "\\spad{acschIfCan(z)} returns acsch(\\spad{z}) if possible,{} and \"failed\" otherwise."))
 (|asechIfCan|
  (((|Union| |#1| "failed") |#1|)
   "\\spad{asechIfCan(z)} returns asech(\\spad{z}) if possible,{} and \"failed\" otherwise."))
 (|acothIfCan|
  (((|Union| |#1| "failed") |#1|)
   "\\spad{acothIfCan(z)} returns acoth(\\spad{z}) if possible,{} and \"failed\" otherwise."))
 (|atanhIfCan|
  (((|Union| |#1| "failed") |#1|)
   "\\spad{atanhIfCan(z)} returns atanh(\\spad{z}) if possible,{} and \"failed\" otherwise."))
 (|acoshIfCan|
  (((|Union| |#1| "failed") |#1|)
   "\\spad{acoshIfCan(z)} returns acosh(\\spad{z}) if possible,{} and \"failed\" otherwise."))
 (|asinhIfCan|
  (((|Union| |#1| "failed") |#1|)
   "\\spad{asinhIfCan(z)} returns asinh(\\spad{z}) if possible,{} and \"failed\" otherwise."))
 (|cschIfCan|
  (((|Union| |#1| "failed") |#1|)
   "\\spad{cschIfCan(z)} returns csch(\\spad{z}) if possible,{} and \"failed\" otherwise."))
 (|sechIfCan|
  (((|Union| |#1| "failed") |#1|)
   "\\spad{sechIfCan(z)} returns sech(\\spad{z}) if possible,{} and \"failed\" otherwise."))
 (|cothIfCan|
  (((|Union| |#1| "failed") |#1|)
   "\\spad{cothIfCan(z)} returns coth(\\spad{z}) if possible,{} and \"failed\" otherwise."))
 (|tanhIfCan|
  (((|Union| |#1| "failed") |#1|)
   "\\spad{tanhIfCan(z)} returns tanh(\\spad{z}) if possible,{} and \"failed\" otherwise."))
 (|coshIfCan|
  (((|Union| |#1| "failed") |#1|)
   "\\spad{coshIfCan(z)} returns cosh(\\spad{z}) if possible,{} and \"failed\" otherwise."))
 (|sinhIfCan|
  (((|Union| |#1| "failed") |#1|)
   "\\spad{sinhIfCan(z)} returns sinh(\\spad{z}) if possible,{} and \"failed\" otherwise."))
 (|acscIfCan|
  (((|Union| |#1| "failed") |#1|)
   "\\spad{acscIfCan(z)} returns acsc(\\spad{z}) if possible,{} and \"failed\" otherwise."))
 (|asecIfCan|
  (((|Union| |#1| "failed") |#1|)
   "\\spad{asecIfCan(z)} returns asec(\\spad{z}) if possible,{} and \"failed\" otherwise."))
 (|acotIfCan|
  (((|Union| |#1| "failed") |#1|)
   "\\spad{acotIfCan(z)} returns acot(\\spad{z}) if possible,{} and \"failed\" otherwise."))
 (|atanIfCan|
  (((|Union| |#1| "failed") |#1|)
   "\\spad{atanIfCan(z)} returns atan(\\spad{z}) if possible,{} and \"failed\" otherwise."))
 (|acosIfCan|
  (((|Union| |#1| "failed") |#1|)
   "\\spad{acosIfCan(z)} returns acos(\\spad{z}) if possible,{} and \"failed\" otherwise."))
 (|asinIfCan|
  (((|Union| |#1| "failed") |#1|)
   "\\spad{asinIfCan(z)} returns asin(\\spad{z}) if possible,{} and \"failed\" otherwise."))
 (|cscIfCan|
  (((|Union| |#1| "failed") |#1|)
   "\\spad{cscIfCan(z)} returns \\spad{csc}(\\spad{z}) if possible,{} and \"failed\" otherwise."))
 (|secIfCan|
  (((|Union| |#1| "failed") |#1|)
   "\\spad{secIfCan(z)} returns sec(\\spad{z}) if possible,{} and \"failed\" otherwise."))
 (|cotIfCan|
  (((|Union| |#1| "failed") |#1|)
   "\\spad{cotIfCan(z)} returns cot(\\spad{z}) if possible,{} and \"failed\" otherwise."))
 (|tanIfCan|
  (((|Union| |#1| "failed") |#1|)
   "\\spad{tanIfCan(z)} returns tan(\\spad{z}) if possible,{} and \"failed\" otherwise."))
 (|cosIfCan|
  (((|Union| |#1| "failed") |#1|)
   "\\spad{cosIfCan(z)} returns cos(\\spad{z}) if possible,{} and \"failed\" otherwise."))
 (|sinIfCan|
  (((|Union| |#1| "failed") |#1|)
   "\\spad{sinIfCan(z)} returns sin(\\spad{z}) if possible,{} and \"failed\" otherwise."))
 (|logIfCan|
  (((|Union| |#1| "failed") |#1|)
   "\\spad{logIfCan(z)} returns log(\\spad{z}) if possible,{} and \"failed\" otherwise."))
 (|expIfCan|
  (((|Union| |#1| "failed") |#1|)
   "\\spad{expIfCan(z)} returns exp(\\spad{z}) if possible,{} and \"failed\" otherwise."))
 (|nthRootIfCan|
  (((|Union| |#1| "failed") |#1| (|NonNegativeInteger|))
   "\\spad{nthRootIfCan(z,{} n)} returns the \\spad{n}th root of \\spad{z} if possible,{} and \"failed\" otherwise.")))
(("documentation" 0 6802) ("ancestors" 0 NIL) ("parents" 0 NIL)
 ("abbreviation" 0 6794) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 5419) ("modemaps" 0 1862) ("sourceFile" 0 1823)
 ("constructorCategory" 0 172) ("constructorModemap" 0 68)
 ("constructorKind" 0 57) ("constructorForm" 0 20))