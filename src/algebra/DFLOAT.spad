)abbrev domain DFLOAT DoubleFloat
++ Author: Michael Monagan
++ Date Created: January 1988
++ Basic Operations: exp1, hash, log2, log10, rationalApproximation, / , ^
++ Related Constructors:
++ Keywords: small float
++ Description:  \spadtype{DoubleFloat} is intended to make accessible
++ hardware floating point arithmetic in \Language{}, either native double
++ precision, or IEEE. On most machines, there will be hardware support for
++ the arithmetic operations:
++ \spadfunFrom{+}{DoubleFloat}, \spadfunFrom{*}{DoubleFloat},
++ \spadfunFrom{/}{DoubleFloat} and possibly also the
++ \spadfunFrom{sqrt}{DoubleFloat} operation.
++ The operations \spadfunFrom{exp}{DoubleFloat},
++ \spadfunFrom{log}{DoubleFloat}, \spadfunFrom{sin}{DoubleFloat},
++ \spadfunFrom{cos}{DoubleFloat},
++ \spadfunFrom{atan}{DoubleFloat} are normally coded in
++ software based on minimax polynomial/rational approximations.
++ Some general comments about the accuracy of the operations:
++ the operations \spadfunFrom{+}{DoubleFloat},
++ \spadfunFrom{*}{DoubleFloat}, \spadfunFrom{/}{DoubleFloat} and
++ \spadfunFrom{sqrt}{DoubleFloat} are expected to be fully accurate.
++ The operations \spadfunFrom{exp}{DoubleFloat},
++ \spadfunFrom{log}{DoubleFloat}, \spadfunFrom{sin}{DoubleFloat},
++ \spadfunFrom{cos}{DoubleFloat} and
++ \spadfunFrom{atan}{DoubleFloat} are not expected to be
++ fully accurate.  In particular, \spadfunFrom{sin}{DoubleFloat}
++ and \spadfunFrom{cos}{DoubleFloat}
++ will lose all precision for large arguments.
++
++ The \spadtype{Float} domain provides an alternative to the \spad{DoubleFloat} domain.
++ It provides an arbitrary precision model of floating point arithmetic.
++ This means that accuracy problems like those above are eliminated
++ by increasing the working precision where necessary.  \spadtype{Float}
++ provides some special functions such as \spadfunFrom{erf}{DoubleFloat},
++ the error function
++ in addition to the elementary functions.  The disadvantage of
++ \spadtype{Float} is that it is much more expensive than small floats when the latter can be used.
-- I've put some timing comparisons in the notes for the Float
-- domain about the difference in speed between the two domains.
DoubleFloat() : Join(FloatingPointSystem, DifferentialRing, OpenMath,
   TranscendentalFunctionCategory, SpecialFunctionCategory, _
   ConvertibleTo InputForm) with
      exp1 : () -> %
        ++ exp1() returns the natural log base \spad{2.718281828...}.
      log2 :  % -> %
        ++ log2(x) computes the logarithm with base 2 for x.
      log10 : % -> %
        ++ log10(x) computes the logarithm with base 10 for x.
      atan : (%, %) -> %
        ++ atan(x, y) computes the arc tangent from x with phase y.
      qlog : % -> %
        ++ qlog(x) computes natural logarithm of x.  It assumes that
        ++ \spad{x > 0}.
      qsqrt : % -> %
        ++ qsqrt(x) computes square root of x.  It assumes that
        ++ \spad{x >= 0}.
      doubleFloatFormat : String -> String
        ++ change the output format for doublefloats using lisp format strings
      rationalApproximation : (%, NonNegativeInteger) -> Fraction Integer
        ++ rationalApproximation(f, n) computes a rational approximation
        ++ r to f with relative error \spad{< 10^(-n)}.
      rationalApproximation : (%, NonNegativeInteger, NonNegativeInteger) -> Fraction Integer
         ++ rationalApproximation(f, n, b) computes a rational
         ++ approximation r to f with relative error \spad{< b^(-n)}
         ++ (that is, \spad{|(r-f)/f| < b^(-n)}).

 == add
   format : String := "~A"
   MER ==> Record(MANTISSA : Integer, EXPONENT : Integer)

   manexp : % -> MER

   doubleFloatFormat(s : String) : String ==
     ss : String := format
     format := s
     ss

   OMwrite(dev : OpenMathDevice, x : %, wholeObj : Boolean) : Void ==
     if wholeObj then
       OMputObject(dev)
     OMputFloat(dev, convert x)
     if wholeObj then
       OMputEndObject(dev)

   max_SF ==> MOST_-POSITIVE_-DOUBLE_-FLOAT$Lisp

   checkComplex(x : %) : % == c_to_r(x)$Lisp

   base()           == FLOAT_-RADIX(0$%)$Lisp
   mantissa x       == manexp(x).MANTISSA
   exponent x       == manexp(x).EXPONENT
   precision()      == FLOAT_-DIGITS(0$%)$Lisp
   bits()           ==
     base() = 2 => precision()
     base() = 16 => 4*precision()
     wholePart(precision()*log2(base()::%))::PositiveInteger
   max()            == max_SF
   min()            == MOST_-NEGATIVE_-DOUBLE_-FLOAT$Lisp
   order(a) == precision() + exponent a - 1
   0                == FLOAT(0$Lisp, max_SF)$Lisp
   1                == FLOAT(1$Lisp, max_SF)$Lisp
   -- rational approximation to e accurate to 23 digits
   exp1()           == (FLOAT(534625820200, max_SF)$Lisp pretend %) /
                         (FLOAT(196677847971, max_SF)$Lisp pretend %)
   pi()             == FLOAT(PI$Lisp, max_SF)$Lisp

   convert(x : %) : String ==
       FORMAT(NIL$Lisp, format, x)$Lisp pretend String

   coerce(x : %) : OutputForm ==
       x >= 0 => message(convert(x)@String)
       - (coerce(-x)@OutputForm)

   convert(x : %) : InputForm == convert(x pretend DoubleFloat)$InputForm
   x < y            == less_DF(x, y)$Lisp
   - x              == minus_DF(x)$Lisp
   x + y            == add_DF(x, y)$Lisp
   x : % - y : %        == sub_DF(x, y)$Lisp
   x : % * y : %        == mul_DF(x, y)$Lisp
   i : Integer * x : %  == mul_DF_I(x, i)$Lisp
   max(x, y)         == max_DF(x, y)$Lisp
   min(x, y)         == min_DF(x, y)$Lisp
   x = y            == eql_DF(x, y)$Lisp
   x : % / i : Integer  == div_DF_I(x, i)$Lisp
   sqrt x           == checkComplex sqrt_DF(x)$Lisp
   qsqrt x          == qsqrt_DF(x)$Lisp
   log10 x          == checkComplex LOG10(x)$Lisp
   x : % ^ i : Integer == expt_DF_I(x, i)$Lisp
   x : % ^ y : %       == checkComplex expt_DF(x, y)$Lisp
   coerce(i : Integer) : % == FLOAT(i, max_SF)$Lisp
   exp x            == exp_DF(x)$Lisp
   log x            == checkComplex log_DF(x)$Lisp
   qlog x           == qlog_DF(x)$Lisp
   log2 x           == checkComplex LOG2(x)$Lisp
   sin x            == sin_DF(x)$Lisp
   cos x            == cos_DF(x)$Lisp
   tan x            == tan_DF(x)$Lisp
   cot x            == COT(x)$Lisp
   sec x            == 1/cos(x)
   csc x            == 1/sin(x)
   asin x           == checkComplex ASIN(x)$Lisp -- can be complex
   acos x           == checkComplex ACOS(x)$Lisp -- can be complex
   atan x           == atan_DF(x)$Lisp
   acsc x           == asin(1/x)

   pi_half : % := pi()/(2::%)

   acot x           ==
       0 < x =>
           not(x < 1) => atan(1/x)
           pi_half - atan(x)
       not(-1 < x) => pi() - atan(-1/x)
       pi_half + atan(-x)

   asec x           == acos(1/x)
   sinh x           == sinh_DF(x)$Lisp
   cosh x           == cosh_DF(x)$Lisp
   tanh x           == tanh_DF(x)$Lisp
   csch x           == 1/sinh(x)
   coth x           == 1/tanh(x)
   sech x           == 1/cosh(x)
   asinh x          == ASINH(x)$Lisp
   acosh x          == checkComplex ACOSH(x)$Lisp -- can be complex
   atanh x          == checkComplex ATANH(x)$Lisp -- can be complex
   acsch x          == asinh(1/x)
   acoth x          == atanh(1/x)
   asech x          == acosh(1/x)
   x : % / y : %        == div_DF(x, y)$Lisp
   negative? x      == negative?_DF(x)$Lisp
   zero? x          == zero?_DF(x)$Lisp
   hashUpdate!(hs, s) == update!(hs, SXHASH(s)$Lisp)$HashState
   recip(x)         == (zero? x => "failed"; 1 / x)
   differentiate x  == 0

   SFSFUN           ==> DoubleFloatSpecialFunctions()
   sfx              ==> x pretend DoubleFloat
   sfy              ==> y pretend DoubleFloat
   sfz              ==> z pretend DoubleFloat
   airyAi x         == airyAi(sfx)$SFSFUN pretend %
   airyBi x         == airyBi(sfx)$SFSFUN pretend %
   besselI(x, y)     == besselI(sfx, sfy)$SFSFUN pretend %
   besselJ(x, y)     == besselJ(sfx, sfy)$SFSFUN pretend %
   besselK(x, y)     == besselK(sfx, sfy)$SFSFUN pretend %
   besselY(x, y)     == besselY(sfx, sfy)$SFSFUN pretend %
   Beta(x, y)        == Beta(sfx, sfy)$SFSFUN pretend %
   digamma x        == digamma(sfx)$SFSFUN pretend %
   Gamma x          == Gamma(sfx)$SFSFUN pretend %
-- not implemented in SFSFUN
--   Gamma(x, y)       == Gamma(sfx, sfy)$SFSFUN pretend %
   polygamma(x, y)   ==
       import from DoubleFloat
       if (n := retractIfCan(sfx)@Union(Integer, "failed")) case Integer _
          and n >= 0
       then polygamma(n::Integer::NonNegativeInteger, sfy)$SFSFUN pretend %
       else error "polygamma: first argument should be a nonnegative integer"

   FSFUN ==> FloatSpecialFunctions

   lambertW(x) == lambertW(sfx)$FSFUN pretend %

   ELIPIDF ==> DoubleFloatEllipticIntegrals

   ellipticF(x, y) == ellipticF(sfx, sfy)$ELIPIDF pretend %
   ellipticK(x) == ellipticK(sfx)$ELIPIDF pretend %
   ellipticE(x, y) == ellipticE(sfx, sfy)$ELIPIDF pretend %
   ellipticE(x) == ellipticE(sfx)$ELIPIDF pretend %
   ellipticPi(x, y, z) == ellipticPi(sfx, sfy, sfz)$ELIPIDF pretend %

   FELFUN ==> FloatEllipticFunctions
   bfx ==> convert(x pretend DoubleFloat)@Float
   bfy ==> convert(y pretend DoubleFloat)@Float
   bfz ==> convert(z pretend DoubleFloat)@Float
   to_sf(x) ==>
       obits := bits()$Float
       try
           bits(68)
           convert(x)@DoubleFloat pretend %
       finally
           bits(obits)
   jacobiSn(x, y) == to_sf(jacobiSn(bfx, bfy)$FELFUN)
   jacobiCn(x, y) == to_sf(jacobiCn(bfx, bfy)$FELFUN)
   jacobiDn(x, y) == to_sf(jacobiDn(bfx, bfy)$FELFUN)
   weierstrassP(x, y, z) == to_sf(weierstrassP(bfx, bfy, bfz)$FELFUN)
   weierstrassPPrime(x, y, z) ==
       to_sf(weierstrassPPrime(bfx, bfy, bfz)$FELFUN)

   wholePart x            == TRUNCATE(x)$Lisp
   float(ma, ex, b)   == ma*(b::%)^ex
   convert(x : %) : DoubleFloat == x pretend DoubleFloat
   convert(x : %) : Float == convert(x pretend DoubleFloat)$Float
   rationalApproximation(x, d) == rationalApproximation(x, d, 10)

   atan(x, y) ==
      x = 0 =>
         y > 0 => pi()/2
         y < 0 => -pi()/2
         0
      -- Only count on first quadrant being on principal branch.
      theta := atan abs(y/x)
      if x < 0 then theta := pi() - theta
      if y < 0 then theta := - theta
      theta

   retract(x : %) : Fraction(Integer) ==
     rationalApproximation(x, (precision() - 1)::NonNegativeInteger, base())

   retractIfCan(x:%):Union(Fraction Integer, "failed") ==
     rationalApproximation(x, (precision() - 1)::NonNegativeInteger, base())

   retract(x : %) : Integer ==
     x = ((n := wholePart x)::%) => n
     error "Not an integer"

   retractIfCan(x:%):Union(Integer, "failed") ==
     x = ((n := wholePart x)::%) => n
     "failed"

   sign(x : %) : Integer == retract FLOAT_-SIGN(x, 1)$Lisp
   abs x   == abs_DF(x)$Lisp

   conjugate x == x

   manexp(x) ==
      zero? x => [0, 0]
      s := sign x; x := abs x
      if x > max()$% then return [s*mantissa(max())+1, exponent max()]
      me : Record(man : %, exp : Integer) := MANEXP(x)$Lisp
      two53 := base()^precision()
      [s*wholePart(two53 * me.man ), me.exp-precision()]

-- rationalApproximation(y, d, b) ==
--    this is the quotient remainder algorithm (requires wholePart operation)
--    x := y
--    if b < 2 then error "base must be > 1"
--    tol := (b::%)^d
--    p0, p1, q0, q1 : Integer
--    p0 := 0; p1 := 1; q0 := 1; q1 := 0
--    repeat
--       a := wholePart x
--       x := fractionPart x
--       p2 := p0+a*p1
--       q2 := q0+a*q1
--       if x = 0 or tol*abs(q2*y-(p2::%)) < abs(q2*y) then
--          return (p2/q2)
--       (p0, p1) := (p1, p2)
--       (q0, q1) := (q1, q2)
--       x := 1/x

   rationalApproximation(f, d, b) ==
      -- this algorithm expresses f as n / d where d = BASE ^ k
      -- then all arithmetic operations are done over the integers
      (nu, ex) := manexp f
      BASE := base()
      ex >= 0 => (nu * BASE ^ (ex::NonNegativeInteger))::Fraction(Integer)
      de : Integer := BASE^((-ex)::NonNegativeInteger)
      b < 2 => error "base must be > 1"
      tol := b^d
      s := nu; t := de
      p0 : Integer := 0; p1 : Integer := 1; q0 : Integer := 1; q1 : Integer := 0
      repeat
         (q, r) := divide(s, t)
         p2 := q*p1+p0
         q2 := q*q1+q0
         r = 0 or tol*abs(nu*q2-de*p2) < de*abs(p2) => return(p2/q2)
         (p0, p1) := (p1, p2)
         (q0, q1) := (q1, q2)
         (s, t) := (t, r)

   x : % ^ r : Fraction Integer ==
      zero? x =>
         zero? r => 1
         negative? r => error "division by 0"
         0
      zero? r or (x = 1) => 1
      (r = 1) => x
      n := numer r
      d := denom r
      negative? x =>
         odd? d =>
            odd? n => return -((-x)^r)
            return ((-x)^r)
         error "negative root"
      d = 2 => sqrt(x) ^ n
      x ^ (n::% / d::%)


--Copyright (c) 1991-2002, The Numerical ALgorithms Group Ltd.
--All rights reserved.
--
--Redistribution and use in source and binary forms, with or without
--modification, are permitted provided that the following conditions are
--met:
--
--    - Redistributions of source code must retain the above copyright
--      notice, this list of conditions and the following disclaimer.
--
--    - Redistributions in binary form must reproduce the above copyright
--      notice, this list of conditions and the following disclaimer in
--      the documentation and/or other materials provided with the
--      distribution.
--
--    - Neither the name of The Numerical ALgorithms Group Ltd. nor the
--      names of its contributors may be used to endorse or promote products
--      derived from this software without specific prior written permission.
--
--THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
--IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
--TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
--PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
--OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
--EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
--PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
--PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
--LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
--NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
--SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

)if false
\begin{thebibliography}{99}
\bibitem{1} Steele, Guy L. Jr. ``Common Lisp The Language''
Second Edition 1990 ISBN 1-55558-041-6 Digital Press
\end{thebibliography}
)endif
