24913               (|JetBundleFunctionCategory| JB)
|category|
(((|JetBundleFunctionCategory| |#1|) (|Category|) (|JetBundleCategory|))
 (T |JetBundleFunctionCategory|))
(|Join| (|PartialDifferentialRing| (|Symbol|)) (|GcdDomain|)
        (|RetractableTo| |t#1|)
        (CATEGORY |domain| (SIGNATURE X ($ (|PositiveInteger|)))
         (SIGNATURE U ($ (|PositiveInteger|)))
         (SIGNATURE P ($ (|PositiveInteger|) (|List| (|NonNegativeInteger|))))
         (SIGNATURE X ($)) (SIGNATURE U ($))
         (SIGNATURE P ($ (|List| (|NonNegativeInteger|))))
         (SIGNATURE P ($ (|PositiveInteger|) (|NonNegativeInteger|)))
         (SIGNATURE P ($ (|NonNegativeInteger|)))
         (SIGNATURE |setNotation| ((|Void|) (|Symbol|)))
         (SIGNATURE |getNotation| ((|Symbol|)))
         (SIGNATURE |numIndVar| ((|PositiveInteger|)))
         (SIGNATURE |numDepVar| ((|PositiveInteger|)))
         (SIGNATURE |coerce| ($ |t#1|))
         (SIGNATURE |jetVariables| ((|List| |t#1|) $))
         (SIGNATURE |const?| ((|Boolean|) $))
         (SIGNATURE |order| ((|NonNegativeInteger|) $))
         (SIGNATURE |class| ((|NonNegativeInteger|) $))
         (SIGNATURE |numerator| ($ $)) (SIGNATURE |denominator| ($ $))
         (SIGNATURE |jacobiMatrix|
          ((|SparseEchelonMatrix| |t#1| $) (|List| $)))
         (SIGNATURE |jacobiMatrix|
          ((|SparseEchelonMatrix| |t#1| $) (|List| $) (|List| (|List| |t#1|))))
         (SIGNATURE |extractSymbol|
          ((|SparseEchelonMatrix| |t#1| $) (|SparseEchelonMatrix| |t#1| $)))
         (SIGNATURE |symbol| ((|SparseEchelonMatrix| |t#1| $) (|List| $)))
         (SIGNATURE |differentiate| ($ $ |t#1|))
         (SIGNATURE |formalDiff| ($ $ (|PositiveInteger|)))
         (SIGNATURE |formalDiff| ($ $ (|List| (|NonNegativeInteger|))))
         (SIGNATURE |formalDiff| ((|List| $) (|List| $) (|PositiveInteger|)))
         (SIGNATURE |formalDiff2|
          ((|Record| (|:| |DPhi| $) (|:| |JVars| (|List| |t#1|))) $
           (|PositiveInteger|) (|SparseEchelonMatrix| |t#1| $)))
         (SIGNATURE |formalDiff2|
          ((|Record| (|:| |DSys| (|List| $))
                     (|:| |JVars| (|List| (|List| |t#1|))))
           (|List| $) (|PositiveInteger|) (|SparseEchelonMatrix| |t#1| $)))
         (SIGNATURE |dimension|
          ((|NonNegativeInteger|) (|List| $) (|SparseEchelonMatrix| |t#1| $)
           (|NonNegativeInteger|)))
         (SIGNATURE |orderDim|
          ((|NonNegativeInteger|) (|List| $) (|SparseEchelonMatrix| |t#1| $)
           (|NonNegativeInteger|)))
         (SIGNATURE |freeOf?| ((|Boolean|) $ |t#1|))
         (SIGNATURE |subst| ($ $ |t#1| $)) (SIGNATURE |leadingDer| (|t#1| $))
         (SIGNATURE |sortLD| ((|List| $) (|List| $)))
         (SIGNATURE |solveFor| ((|Union| $ "failed") $ |t#1|))
         (SIGNATURE |dSubst| ($ $ |t#1| $))
         (SIGNATURE |simplify|
          ((|Record| (|:| |Sys| (|List| $))
                     (|:| JM (|SparseEchelonMatrix| |t#1| $))
                     (|:| |Depend|
                          (|Union| #1="failed"
                                   (|List| (|List| (|NonNegativeInteger|))))))
           (|List| $) (|SparseEchelonMatrix| |t#1| $)))
         (SIGNATURE |simpOne| ($ $))
         (SIGNATURE |simpMod| ((|List| $) (|List| $) (|List| $)))
         (SIGNATURE |simpMod|
          ((|Record| (|:| |Sys| (|List| $))
                     (|:| JM (|SparseEchelonMatrix| |t#1| $))
                     (|:| |Depend|
                          (|Union| #1#
                                   (|List| (|List| (|NonNegativeInteger|))))))
           (|List| $) (|SparseEchelonMatrix| |t#1| $) (|List| $)))
         (SIGNATURE |reduceMod| ((|List| $) (|List| $) (|List| $)))
         (SIGNATURE |autoReduce| ((|List| $) (|List| $)))))
"/git/fricas/src/algebra/JBFC.spad"
((|coerce| (*1 *1 *2)
           (AND (|ofCategory| *1 (|JetBundleFunctionCategory| *2))
                (|ofCategory| *2 (|JetBundleCategory|))))
 (X (*1 *1 *2)
  (AND (|isDomain| *2 (|PositiveInteger|))
       (|ofCategory| *1 (|JetBundleFunctionCategory| *3))
       (|ofCategory| *3 (|JetBundleCategory|))))
 (U (*1 *1 *2)
  (AND (|isDomain| *2 (|PositiveInteger|))
       (|ofCategory| *1 (|JetBundleFunctionCategory| *3))
       (|ofCategory| *3 (|JetBundleCategory|))))
 (P (*1 *1 *2 *3)
  (AND (|isDomain| *2 (|PositiveInteger|))
       (|isDomain| *3 (|List| (|NonNegativeInteger|)))
       (|ofCategory| *1 (|JetBundleFunctionCategory| *4))
       (|ofCategory| *4 (|JetBundleCategory|))))
 (X (*1 *1)
  (AND (|ofCategory| *1 (|JetBundleFunctionCategory| *2))
       (|ofCategory| *2 (|JetBundleCategory|))))
 (U (*1 *1)
  (AND (|ofCategory| *1 (|JetBundleFunctionCategory| *2))
       (|ofCategory| *2 (|JetBundleCategory|))))
 (P (*1 *1 *2)
  (AND (|isDomain| *2 (|List| (|NonNegativeInteger|)))
       (|ofCategory| *1 (|JetBundleFunctionCategory| *3))
       (|ofCategory| *3 (|JetBundleCategory|))))
 (P (*1 *1 *2 *3)
  (AND (|isDomain| *2 (|PositiveInteger|))
       (|isDomain| *3 (|NonNegativeInteger|))
       (|ofCategory| *1 (|JetBundleFunctionCategory| *4))
       (|ofCategory| *4 (|JetBundleCategory|))))
 (P (*1 *1 *2)
  (AND (|isDomain| *2 (|NonNegativeInteger|))
       (|ofCategory| *1 (|JetBundleFunctionCategory| *3))
       (|ofCategory| *3 (|JetBundleCategory|))))
 (|setNotation| (*1 *2 *3)
  (AND (|isDomain| *3 (|Symbol|))
       (|ofCategory| *1 (|JetBundleFunctionCategory| *4))
       (|ofCategory| *4 (|JetBundleCategory|)) (|isDomain| *2 (|Void|))))
 (|getNotation| (*1 *2)
  (AND (|ofCategory| *1 (|JetBundleFunctionCategory| *3))
       (|ofCategory| *3 (|JetBundleCategory|)) (|isDomain| *2 (|Symbol|))))
 (|numIndVar| (*1 *2)
  (AND (|ofCategory| *1 (|JetBundleFunctionCategory| *3))
       (|ofCategory| *3 (|JetBundleCategory|))
       (|isDomain| *2 (|PositiveInteger|))))
 (|numDepVar| (*1 *2)
  (AND (|ofCategory| *1 (|JetBundleFunctionCategory| *3))
       (|ofCategory| *3 (|JetBundleCategory|))
       (|isDomain| *2 (|PositiveInteger|))))
 (|jetVariables| (*1 *2 *1)
  (AND (|ofCategory| *1 (|JetBundleFunctionCategory| *3))
       (|ofCategory| *3 (|JetBundleCategory|)) (|isDomain| *2 (|List| *3))))
 (|const?| (*1 *2 *1)
  (AND (|ofCategory| *1 (|JetBundleFunctionCategory| *3))
       (|ofCategory| *3 (|JetBundleCategory|)) (|isDomain| *2 (|Boolean|))))
 (|order| (*1 *2 *1)
  (AND (|ofCategory| *1 (|JetBundleFunctionCategory| *3))
       (|ofCategory| *3 (|JetBundleCategory|))
       (|isDomain| *2 (|NonNegativeInteger|))))
 (|class| (*1 *2 *1)
  (AND (|ofCategory| *1 (|JetBundleFunctionCategory| *3))
       (|ofCategory| *3 (|JetBundleCategory|))
       (|isDomain| *2 (|NonNegativeInteger|))))
 (|numerator| (*1 *1 *1)
  (AND (|ofCategory| *1 (|JetBundleFunctionCategory| *2))
       (|ofCategory| *2 (|JetBundleCategory|))))
 (|denominator| (*1 *1 *1)
  (AND (|ofCategory| *1 (|JetBundleFunctionCategory| *2))
       (|ofCategory| *2 (|JetBundleCategory|))))
 (|jacobiMatrix| (*1 *2 *3)
  (AND (|isDomain| *3 (|List| *1))
       (|ofCategory| *1 (|JetBundleFunctionCategory| *4))
       (|ofCategory| *4 (|JetBundleCategory|))
       (|isDomain| *2 (|SparseEchelonMatrix| *4 *1))))
 (|jacobiMatrix| (*1 *2 *3 *4)
  (AND (|isDomain| *3 (|List| *1)) (|isDomain| *4 (|List| (|List| *5)))
       (|ofCategory| *1 (|JetBundleFunctionCategory| *5))
       (|ofCategory| *5 (|JetBundleCategory|))
       (|isDomain| *2 (|SparseEchelonMatrix| *5 *1))))
 (|extractSymbol| (*1 *2 *2)
  (AND (|isDomain| *2 (|SparseEchelonMatrix| *3 *1))
       (|ofCategory| *1 (|JetBundleFunctionCategory| *3))
       (|ofCategory| *3 (|JetBundleCategory|))))
 (|symbol| (*1 *2 *3)
  (AND (|isDomain| *3 (|List| *1))
       (|ofCategory| *1 (|JetBundleFunctionCategory| *4))
       (|ofCategory| *4 (|JetBundleCategory|))
       (|isDomain| *2 (|SparseEchelonMatrix| *4 *1))))
 (|differentiate| (*1 *1 *1 *2)
  (AND (|ofCategory| *1 (|JetBundleFunctionCategory| *2))
       (|ofCategory| *2 (|JetBundleCategory|))))
 (|formalDiff| (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|PositiveInteger|))
       (|ofCategory| *1 (|JetBundleFunctionCategory| *3))
       (|ofCategory| *3 (|JetBundleCategory|))))
 (|formalDiff| (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|List| (|NonNegativeInteger|)))
       (|ofCategory| *1 (|JetBundleFunctionCategory| *3))
       (|ofCategory| *3 (|JetBundleCategory|))))
 (|formalDiff| (*1 *2 *2 *3)
  (AND (|isDomain| *2 (|List| *1)) (|isDomain| *3 (|PositiveInteger|))
       (|ofCategory| *1 (|JetBundleFunctionCategory| *4))
       (|ofCategory| *4 (|JetBundleCategory|))))
 (|formalDiff2| (*1 *2 *1 *3 *4)
  (AND (|isDomain| *3 (|PositiveInteger|))
       (|isDomain| *4 (|SparseEchelonMatrix| *5 *1))
       (|ofCategory| *1 (|JetBundleFunctionCategory| *5))
       (|ofCategory| *5 (|JetBundleCategory|))
       (|isDomain| *2 (|Record| (|:| |DPhi| *1) (|:| |JVars| (|List| *5))))))
 (|formalDiff2| (*1 *2 *3 *4 *5)
  (AND (|isDomain| *3 (|List| *1)) (|isDomain| *4 (|PositiveInteger|))
       (|isDomain| *5 (|SparseEchelonMatrix| *6 *1))
       (|ofCategory| *1 (|JetBundleFunctionCategory| *6))
       (|ofCategory| *6 (|JetBundleCategory|))
       (|isDomain| *2
                   (|Record| (|:| |DSys| (|List| *1))
                             (|:| |JVars| (|List| (|List| *6)))))))
 (|dimension| (*1 *2 *3 *4 *2)
  (AND (|isDomain| *2 (|NonNegativeInteger|)) (|isDomain| *3 (|List| *1))
       (|isDomain| *4 (|SparseEchelonMatrix| *5 *1))
       (|ofCategory| *1 (|JetBundleFunctionCategory| *5))
       (|ofCategory| *5 (|JetBundleCategory|))))
 (|orderDim| (*1 *2 *3 *4 *2)
  (AND (|isDomain| *2 (|NonNegativeInteger|)) (|isDomain| *3 (|List| *1))
       (|isDomain| *4 (|SparseEchelonMatrix| *5 *1))
       (|ofCategory| *1 (|JetBundleFunctionCategory| *5))
       (|ofCategory| *5 (|JetBundleCategory|))))
 (|freeOf?| (*1 *2 *1 *3)
  (AND (|ofCategory| *1 (|JetBundleFunctionCategory| *3))
       (|ofCategory| *3 (|JetBundleCategory|)) (|isDomain| *2 (|Boolean|))))
 (|subst| (*1 *1 *1 *2 *1)
  (AND (|ofCategory| *1 (|JetBundleFunctionCategory| *2))
       (|ofCategory| *2 (|JetBundleCategory|))))
 (|leadingDer| (*1 *2 *1)
  (AND (|ofCategory| *1 (|JetBundleFunctionCategory| *2))
       (|ofCategory| *2 (|JetBundleCategory|))))
 (|sortLD| (*1 *2 *2)
  (AND (|isDomain| *2 (|List| *1))
       (|ofCategory| *1 (|JetBundleFunctionCategory| *3))
       (|ofCategory| *3 (|JetBundleCategory|))))
 (|solveFor| (*1 *1 *1 *2)
  (|partial| AND (|ofCategory| *1 (|JetBundleFunctionCategory| *2))
   (|ofCategory| *2 (|JetBundleCategory|))))
 (|dSubst| (*1 *1 *1 *2 *1)
  (AND (|ofCategory| *1 (|JetBundleFunctionCategory| *2))
       (|ofCategory| *2 (|JetBundleCategory|))))
 (|simplify| (*1 *2 *3 *4)
  (AND (|isDomain| *3 (|List| *1))
       (|isDomain| *4 (|SparseEchelonMatrix| *5 *1))
       (|ofCategory| *1 (|JetBundleFunctionCategory| *5))
       (|ofCategory| *5 (|JetBundleCategory|))
       (|isDomain| *2
                   (|Record| (|:| |Sys| (|List| *1))
                             (|:| JM (|SparseEchelonMatrix| *5 *1))
                             (|:| |Depend|
                                  (|Union| #1="failed"
                                           (|List|
                                            (|List|
                                             (|NonNegativeInteger|)))))))))
 (|simpOne| (*1 *1 *1)
  (AND (|ofCategory| *1 (|JetBundleFunctionCategory| *2))
       (|ofCategory| *2 (|JetBundleCategory|))))
 (|simpMod| (*1 *2 *2 *2)
  (AND (|isDomain| *2 (|List| *1))
       (|ofCategory| *1 (|JetBundleFunctionCategory| *3))
       (|ofCategory| *3 (|JetBundleCategory|))))
 (|simpMod| (*1 *2 *3 *4 *3)
  (AND (|isDomain| *3 (|List| *1))
       (|isDomain| *4 (|SparseEchelonMatrix| *5 *1))
       (|ofCategory| *1 (|JetBundleFunctionCategory| *5))
       (|ofCategory| *5 (|JetBundleCategory|))
       (|isDomain| *2
                   (|Record| (|:| |Sys| (|List| *1))
                             (|:| JM (|SparseEchelonMatrix| *5 *1))
                             (|:| |Depend|
                                  (|Union| #1#
                                           (|List|
                                            (|List|
                                             (|NonNegativeInteger|)))))))))
 (|reduceMod| (*1 *2 *2 *2)
  (AND (|isDomain| *2 (|List| *1))
       (|ofCategory| *1 (|JetBundleFunctionCategory| *3))
       (|ofCategory| *3 (|JetBundleCategory|))))
 (|autoReduce| (*1 *2 *2)
  (AND (|isDomain| *2 (|List| *1))
       (|ofCategory| *1 (|JetBundleFunctionCategory| *3))
       (|ofCategory| *3 (|JetBundleCategory|)))))
((~= (((|Boolean|) $ $) 6)) (|zero?| (((|Boolean|) $) 6))
 (|unitNormal|
  (((|Record| (|:| |unit| $) (|:| |canonical| $) (|:| |associate| $)) $) 6))
 (|unitCanonical| (($ $) 6)) (|unit?| (((|Boolean|) $) 6))
 (|symbol| (((|SparseEchelonMatrix| |#1| $) (|List| $)) 6))
 (|subtractIfCan| (((|Union| $ "failed") $ $) 6)) (|subst| (($ $ |#1| $) 6))
 (|sortLD| (((|List| $) (|List| $)) 6))
 (|solveFor| (((|Union| $ "failed") $ |#1|) 6))
 (|simplify|
  (((|Record| (|:| |Sys| (|List| $)) (|:| JM (|SparseEchelonMatrix| |#1| $))
              (|:| |Depend|
                   (|Union| #1="failed"
                            (|List| (|List| (|NonNegativeInteger|))))))
    (|List| $) (|SparseEchelonMatrix| |#1| $))
   6))
 (|simpOne| (($ $) 6))
 (|simpMod| (((|List| $) (|List| $) (|List| $)) 6)
  (((|Record| (|:| |Sys| (|List| $)) (|:| JM (|SparseEchelonMatrix| |#1| $))
              (|:| |Depend|
                   (|Union| #1# (|List| (|List| (|NonNegativeInteger|))))))
    (|List| $) (|SparseEchelonMatrix| |#1| $) (|List| $))
   6))
 (|setNotation| (((|Void|) (|Symbol|)) 6)) (|sample| (($) 6 T CONST))
 (|rightRecip| (((|Union| $ #2="failed") $) 6))
 (|rightPower| (($ $ (|PositiveInteger|)) 6) (($ $ (|NonNegativeInteger|)) 6))
 (|retractIfCan| (((|Union| |#1| "failed") $) 6)) (|retract| ((|#1| $) 6))
 (|reduceMod| (((|List| $) (|List| $) (|List| $)) 6))
 (|recip| (((|Union| $ #2#) $) 6))
 (|orderDim|
  (((|NonNegativeInteger|) (|List| $) (|SparseEchelonMatrix| |#1| $)
    (|NonNegativeInteger|))
   6))
 (|order| (((|NonNegativeInteger|) $) 6)) (|opposite?| (((|Boolean|) $ $) 6))
 (|one?| (((|Boolean|) $) 6)) (|numerator| (($ $) 6))
 (|numIndVar| (((|PositiveInteger|)) 6))
 (|numDepVar| (((|PositiveInteger|)) 6)) (|leftRecip| (((|Union| $ #2#) $) 6))
 (|leftPower| (($ $ (|PositiveInteger|)) 6) (($ $ (|NonNegativeInteger|)) 6))
 (|leadingDer| ((|#1| $) 6))
 (|lcmCoef|
  (((|Record| (|:| |llcm_res| $) (|:| |coeff1| $) (|:| |coeff2| $)) $ $) 6))
 (|lcm| (($ (|List| $)) 6) (($ $ $) 6)) (|latex| (((|String|) $) 6))
 (|jetVariables| (((|List| |#1|) $) 6))
 (|jacobiMatrix| (((|SparseEchelonMatrix| |#1| $) (|List| $)) 6)
  (((|SparseEchelonMatrix| |#1| $) (|List| $) (|List| (|List| |#1|))) 6))
 (|hashUpdate!| (((|HashState|) (|HashState|) $) 6))
 (|hash| (((|SingleInteger|) $) 6)) (|getNotation| (((|Symbol|)) 6))
 (|gcdPolynomial|
  (((|SparseUnivariatePolynomial| $) (|SparseUnivariatePolynomial| $)
    (|SparseUnivariatePolynomial| $))
   6))
 (|gcd| (($ (|List| $)) 6) (($ $ $) 6)) (|freeOf?| (((|Boolean|) $ |#1|) 6))
 (|formalDiff2|
  (((|Record| (|:| |DPhi| $) (|:| |JVars| (|List| |#1|))) $ (|PositiveInteger|)
    (|SparseEchelonMatrix| |#1| $))
   6)
  (((|Record| (|:| |DSys| (|List| $)) (|:| |JVars| (|List| (|List| |#1|))))
    (|List| $) (|PositiveInteger|) (|SparseEchelonMatrix| |#1| $))
   6))
 (|formalDiff| (($ $ (|PositiveInteger|)) 6)
  (($ $ (|List| (|NonNegativeInteger|))) 6)
  (((|List| $) (|List| $) (|PositiveInteger|)) 6))
 (|extractSymbol|
  (((|SparseEchelonMatrix| |#1| $) (|SparseEchelonMatrix| |#1| $)) 6))
 (|exquo| (((|Union| $ "failed") $ $) 6))
 (|dimension|
  (((|NonNegativeInteger|) (|List| $) (|SparseEchelonMatrix| |#1| $)
    (|NonNegativeInteger|))
   6))
 (|differentiate| (($ $ (|Symbol|)) 6) (($ $ (|List| (|Symbol|))) 6)
  (($ $ (|Symbol|) (|NonNegativeInteger|)) 6)
  (($ $ (|List| (|Symbol|)) (|List| (|NonNegativeInteger|))) 6) (($ $ |#1|) 6))
 (|denominator| (($ $) 6)) (|dSubst| (($ $ |#1| $) 6))
 (|const?| (((|Boolean|) $) 6)) (|commutator| (($ $ $) 6))
 (|coerce| (((|OutputForm|) $) 6) (($ (|Integer|)) 6) (($ $) 6) (($ |#1|) 6))
 (|class| (((|NonNegativeInteger|) $) 6))
 (|characteristic| (((|NonNegativeInteger|)) 6))
 (|autoReduce| (((|List| $) (|List| $)) 6)) (|associator| (($ $ $ $) 6))
 (|associates?| (((|Boolean|) $ $) 6)) (|antiCommutator| (($ $ $) 6))
 (|annihilate?| (((|Boolean|) $ $) 6))
 (^ (($ $ (|PositiveInteger|)) 6) (($ $ (|NonNegativeInteger|)) 6))
 (|Zero| (($) 6 T CONST)) (X (($ (|PositiveInteger|)) 6) (($) 6))
 (U (($ (|PositiveInteger|)) 6) (($) 6))
 (P (($ (|PositiveInteger|) (|List| (|NonNegativeInteger|))) 6)
  (($ (|List| (|NonNegativeInteger|))) 6)
  (($ (|PositiveInteger|) (|NonNegativeInteger|)) 6)
  (($ (|NonNegativeInteger|)) 6))
 (|One| (($) 6 T CONST))
 (D (($ $ (|Symbol|)) 6) (($ $ (|List| (|Symbol|))) 6)
  (($ $ (|Symbol|) (|NonNegativeInteger|)) 6)
  (($ $ (|List| (|Symbol|)) (|List| (|NonNegativeInteger|))) 6))
 (= (((|Boolean|) $ $) 6)) (- (($ $ $) 6) (($ $) 6)) (+ (($ $ $) 6))
 (* (($ (|PositiveInteger|) $) 6) (($ $ $) 6) (($ (|Integer|) $) 6)
    (($ (|NonNegativeInteger|) $) 6)))
JBFC
(((|PartialDifferentialRing| (|Symbol|)) . T) ((|GcdDomain|) . T)
 ((|RetractableTo| |#1|) . T))
(((|AbelianGroup|) . T) ((|AbelianMonoid|) . T) ((|AbelianSemiGroup|) . T)
 ((|Algebra| $) . T) ((|BasicType|) . T) ((|BiModule| |t#1| |t#1|) . T)
 ((|BiModule| $ $) . T) ((|CancellationAbelianMonoid|) . T)
 ((|CoercibleTo| (|OutputForm|)) . T) ((|CommutativeRing|) . T)
 ((|CommutativeStar|) . T) ((|EntireRing|) . T) ((|GcdDomain|) . T)
 ((|IntegralDomain|) . T) ((|LeftModule| |t#1|) . T) ((|LeftOreRing|) . T)
 ((|Magma|) . T) ((|MagmaWithUnit|) . T) ((|Module| |t#1|) . T)
 ((|Monoid|) . T) ((|NonAssociativeRing|) . T) ((|NonAssociativeRng|) . T)
 ((|NonAssociativeSemiRing|) . T) ((|NonAssociativeSemiRng|) . T)
 ((|PartialDifferentialRing| (|Symbol|)) . T) ((|RetractableTo| |#1|) . T)
 ((|RightModule| |t#2|) . T) ((|Ring|) . T) ((|Rng|) . T) ((|SemiGroup|) . T)
 ((|SemiRing|) . T) ((|SemiRng|) . T) ((|SetCategory|) . T)
 ((|TwoSidedRecip|) . T) ((|noZeroDivisors|) . T) ((|unitsKnown|) . T))
((|constructor|
  (NIL
   "\\spadtype{JetBundleFunctionCategory} defines the category of functions (local sections) over a jet bundle. The formal derivative is defined already here. It uses the Jacobi matrix of the functions. The columns of the matrices are enumerated by jet variables. Thus they are represented as a \\spadtype{Record} of the matrix and a list of the jet variables. Several simplification routines are implemented already here."))
 (|autoReduce|
  (((|List| $) (|List| $))
   "\\spad{autoReduce(sys)} tries to simplify a system by solving each equation for its leading term and substituting it into the other equations."))
 (|reduceMod|
  (((|List| $) (|List| $) (|List| $))
   "\\spad{reduceMod(sys1,{} sys2)} reduces the system \\spad{sys1} modulo the system \\spad{sys2}."))
 (|simpMod|
  (((|Record| (|:| |Sys| (|List| $)) (|:| JM (|SparseEchelonMatrix| |#1| $))
              (|:| |Depend|
                   (|Union| #1="failed"
                            (|List| (|List| (|NonNegativeInteger|))))))
    (|List| $) (|SparseEchelonMatrix| |#1| $) (|List| $))
   "\\spad{simpMod(sys1,{} sys2)} simplifies the system \\spad{sys1} modulo the system \\spad{sys2}. Returns the same information as \\spad{simplify}.")
  (((|List| $) (|List| $) (|List| $))
   "\\spad{simpMod(sys1,{} sys2)} simplifies the system \\spad{sys1} modulo the system \\spad{sys2}."))
 (|simpOne|
  (($ $)
   "\\spad{simpOne(f)} removes unnecessary coefficients and exponents,{} denominators etc."))
 (|simplify|
  (((|Record| (|:| |Sys| (|List| $)) (|:| JM (|SparseEchelonMatrix| |#1| $))
              (|:| |Depend|
                   (|Union| #1# (|List| (|List| (|NonNegativeInteger|))))))
    (|List| $) (|SparseEchelonMatrix| |#1| $))
   "\\spad{simplify(sys,{} jm)} simplifies a system with given Jacobi matrix. The Jacobi matrix of the simplified system is returned,{} too. \\spad{Depend} contains for each equation of the simplified system the numbers of the equations of the original system out of which it is build,{} if it is possible to obtain this information. If one can generate equations of lower order by purely algebraic operations,{} then \\spad{simplify} should do this."))
 (|dSubst|
  (($ $ |#1| $)
   "\\spad{dSubst(f,{} jv,{} exp)} is like \\spad{subst(f,{} jv,{} exp)}. But additionally for all derivatives of \\spad{jv} the corresponding substitutions are performed."))
 (|solveFor|
  (((|Union| $ "failed") $ |#1|)
   "\\spad{solveFor(fun,{} jv)} tries to solve \\spad{fun} for the jet variable \\spad{jv}."))
 (|sortLD|
  (((|List| $) (|List| $))
   "\\spad{sortLD(sys)} sorts the functions in \\spad{sys} according to their leading derivatives."))
 (|leadingDer|
  ((|#1| $)
   "\\spad{leadingDer(fun)} yields the leading derivative of \\spad{fun}. If \\spad{fun} contains no derivatives \\spad{1} is returned."))
 (|subst|
  (($ $ |#1| $)
   "\\spad{subst(f,{} jv,{} exp)} substitutes \\spad{exp} for the jet variable \\spad{jv} in the function \\spad{f}."))
 (|freeOf?|
  (((|Boolean|) $ |#1|)
   "\\spad{freeOf?(fun,{} jv)} checks whether \\spad{fun} contains the jet variable \\spad{jv}."))
 (|orderDim|
  (((|NonNegativeInteger|) (|List| $) (|SparseEchelonMatrix| |#1| $)
    (|NonNegativeInteger|))
   "\\spad{orderDim(sys,{} jm,{} q)} computes the dimension of the manifold described by the system \\spad{sys} with Jacobi matrix \\spad{jm} in the jet bundle of order \\spad{q} over the jet bundle of order \\spad{q-1}."))
 (|dimension|
  (((|NonNegativeInteger|) (|List| $) (|SparseEchelonMatrix| |#1| $)
    (|NonNegativeInteger|))
   "\\spad{dimension(sys,{} jm,{} q)} computes the dimension of the manifold described by the system \\spad{sys} with Jacobi matrix \\spad{jm} in the jet bundle of order \\spad{q}."))
 (|formalDiff2|
  (((|Record| (|:| |DSys| (|List| $)) (|:| |JVars| (|List| (|List| |#1|))))
    (|List| $) (|PositiveInteger|) (|SparseEchelonMatrix| |#1| $))
   "\\spad{formalDiff2(sys,{} i,{} jm)} is like the other \\spadfun{\\spad{formalDiff2}} but for systems.")
  (((|Record| (|:| |DPhi| $) (|:| |JVars| (|List| |#1|))) $ (|PositiveInteger|)
    (|SparseEchelonMatrix| |#1| $))
   "\\spad{formalDiff2(f,{} i,{} jm)} formally differentiates the function \\spad{f} with the Jacobi matrix \\spad{jm} \\spad{wrt} the \\spad{i}\\spad{-}th independent variable. \\spad{JVars} is a list of the jet variables effectively in the result \\spad{DPhi} (might be too large)."))
 (|formalDiff|
  (((|List| $) (|List| $) (|PositiveInteger|))
   "\\spad{formalDiff(sys,{} i)} formally differentiates a family \\spad{sys} of functions \\spad{wrt} the \\spad{i}\\spad{-}th independent variable.")
  (($ $ (|List| (|NonNegativeInteger|)))
   "\\spad{formalDiff(f,{} mu)} formally differentiates \\spad{f} as indicated by the multi-index \\spad{mu}.")
  (($ $ (|PositiveInteger|))
   "\\spad{formalDiff(f,{} i)} formally (totally) differentiates \\spad{f} \\spad{wrt} the \\spad{i}\\spad{-}th independent variable."))
 (|differentiate|
  (($ $ |#1|)
   "\\spad{differentiate(f,{} jv)} differentiates the function \\spad{f} \\spad{wrt} the jet variable \\spad{jv}."))
 (|symbol|
  (((|SparseEchelonMatrix| |#1| $) (|List| $))
   "\\spad{symbol(sys)} computes directly the symbol of the family \\spad{sys} of functions."))
 (|extractSymbol|
  (((|SparseEchelonMatrix| |#1| $) (|SparseEchelonMatrix| |#1| $))
   "\\spad{extractSymbol(jm)} extracts the highest order part of the Jacobi matrix."))
 (|jacobiMatrix|
  (((|SparseEchelonMatrix| |#1| $) (|List| $) (|List| (|List| |#1|)))
   "\\spad{jacobiMatrix(sys,{} jvars)} constructs the Jacobi matrix of the family \\spad{sys} of functions. \\spad{jvars} contains for each function the effectively occurring jet variables. The columns of the matrix are ordered.")
  (((|SparseEchelonMatrix| |#1| $) (|List| $))
   "\\spad{jacobiMatrix(sys)} constructs the Jacobi matrix of the family \\spad{sys} of functions."))
 (|denominator|
  (($ $) "\\spad{denominator(f)} yields the denominator of \\spad{f}."))
 (|numerator|
  (($ $) "\\spad{numerator(f)} yields the numerator of \\spad{f}."))
 (|class|
  (((|NonNegativeInteger|) $)
   "\\spad{class(f)} is defined as the highest class of the jet variables effectively occurring in \\spad{f}."))
 (|order|
  (((|NonNegativeInteger|) $)
   "\\spad{order(f)} gives highest order of the jet variables effectively occurring in \\spad{f}."))
 (|const?|
  (((|Boolean|) $)
   "\\spad{const?(f)} checks whether \\spad{f} depends of jet variables."))
 (|jetVariables|
  (((|List| |#1|) $)
   "\\spad{jetVariables(f)} yields all jet variables effectively occurring in \\spad{f} in an ordered list."))
 (|coerce|
  (($ |#1|)
   "\\spad{coerce(jv)} coerces the jet variable \\spad{jv} into a local section.")))
(("documentation" 0 18192) ("ancestors" 0 17288) ("parents" 0 17191)
 ("abbreviation" 0 17186) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 12570) ("modemaps" 0 3811) ("sourceFile" 0 3775)
 ("constructorCategory" 0 171) ("constructorModemap" 0 64)
 ("constructorKind" 0 53) ("constructorForm" 0 20))