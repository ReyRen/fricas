)abbrev domain SCELL SimpleCell

-- This domain is made to work with one-dimensional semi-algebraic cells
-- ie either an algebraic point, or an interval. The point is specified as
-- specification of an algebraic value.

SimpleCell(TheField, ThePols) : PUB == PRIV where
  TheField : RealClosedField
  ThePols : UnivariatePolynomialCategory(TheField)
  O           ==> OutputForm
  B           ==> Boolean
  Z           ==> Integer
  N           ==> NonNegativeInteger

  VARS ==> RealPolynomialUtilitiesPackage(TheField, ThePols)
  LF ==> List(TheField)

  PUB == CoercibleTo(O) with

     allSimpleCells : (ThePols, Symbol) -> List %
       ++ allSimpleCells(p, sym) is allSimpleCells([p], sym)
     allSimpleCells : (List(ThePols), Symbol) -> List %
       ++ allSimpleCells(lp, sym) returns decomposition into
       ++ cells such that each p in lp has constant sign on
       ++ each member of decomposition
     hasDimension? : % -> B
       ++ hasDimension?(c) returns true if c is of positive dimension
       ++ (that is one-dimensional), otherwise hasDimension?(c)
       ++ returns false
     samplePoint : % -> TheField
       ++ samplePoint(c) returns the sample point of c
     variableOf : % -> Symbol
       ++ variableOf(c) returns variable of c

  PRIV == add

     separate : (LF,TheField, TheField) -> LF
     pointToCell  : (TheField, B, Symbol) -> %

     Rep := Record(samplePoint : TheField,
                   hasDim : B,
                   varOf : Symbol)

     samplePoint(c) == c.samplePoint

     hasDimension?(c) == c.hasDim

     variableOf(c) == c.varOf

     coerce(c:%):O ==
       o : O := ((c.varOf)::O) = ((c.samplePoint)::O)
       brace [o, (c.hasDim)::O]

     separate(liste, left, right) ==
         middle : TheField := (left + right) / (2::TheField)
         liste = [] => [middle]
         #liste = 1 => [left, first(liste), right]
         nbe := first(liste)
         ll : List(TheField) := []
         lr : List(TheField) := rest(liste)
         sg := sign(middle - nbe)
         while sg > 0 repeat
             ll := cons(nbe, ll)
             lr = [] => return(separate(reverse(ll), left, middle))
             nbe := first(lr)
             sg := sign(middle - nbe)
             lr := rest(lr)
         sg < 0 =>
             append(separate(reverse(ll), left, middle),
                    rest(separate(cons(nbe, lr), middle, right)))
         new_right := (left + middle)/(2::TheField)
         empty?(ll) =>
             new_left := (middle + right)/(2::TheField)
             while new_left >= first(lr) repeat
                 new_left := (middle + new_left)/(2::TheField)
             append([left, middle], separate(lr, new_left, right))
         while new_right <= first(ll) repeat
             new_right := (new_right + middle)/(2::TheField)
         new_left := (middle + right)/(2::TheField)
         empty?(lr) => append(separate(reverse(ll), left, new_right),
                           [middle, right])
         while new_left >= first(lr) repeat
             new_left := (middle + new_left)/(2::TheField)
         append(separate(reverse(ll), left, new_right),
                cons(middle, separate(lr, new_left, right)))


     pointToCell(sp, hasDim?, varName) ==
         [sp, hasDim?, varName]$Rep

     allSimpleCells(p : ThePols, var : Symbol) ==
         allSimpleCells([p], var)

     PACK ==> CylindricalAlgebraicDecompositionUtilities(TheField, ThePols)
     allSimpleCells(lp : List(ThePols), var : Symbol) ==
         lp1 := gcdBasis(lp)$PACK
         empty?(lp1) => [pointToCell(0, true, var)]
         b := ("max" / [ boundOfCauchy(p)$VARS for p in lp1])::TheField
         l := "append" / [allRootsOf(makeSUP(unitCanonical(p))) for p in lp1]
         l := sort(l)
         l1 := separate(l, -b, b)
         res : List(%) := [pointToCell(first(l1), true, var)]
         l1 := rest(l1)
         while not(empty?(l1)) repeat
             res := cons(pointToCell(first(l1), false, var), res)
             l1 := rest(l1)
             l1 = [] => error "Impossible, empty list"
             res := cons(pointToCell(first(l1), true, var), res)
             l1 := rest(l1)
         reverse! res


