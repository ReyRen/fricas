5601                (|PatternMatch| |Base| |Subject| |Pat|)
|package|
(((|PatternMatch| |#1| |#2| |#3|)
  (CATEGORY |package| (SIGNATURE |is?| ((|Boolean|) |#2| |#3|))
   (SIGNATURE |is?| ((|Boolean|) (|List| |#2|) |#3|))
   (SIGNATURE |Is|
    ((|PatternMatchListResult| |#1| |#2| (|List| |#2|)) (|List| |#2|) |#3|))
   (IF (|has| |#2| (|RetractableTo| (|Symbol|)))
       (SIGNATURE |Is| ((|List| (|Equation| |#2|)) |#2| |#3|))
       (IF (|has| |#2| (|Ring|))
           (SIGNATURE |Is|
            ((|List| (|Equation| (|Polynomial| |#2|))) |#2| |#3|))
           (SIGNATURE |Is| ((|PatternMatchResult| |#1| |#2|) |#2| |#3|)))))
  (|SetCategory|) (|PatternMatchable| |#1|) (|ConvertibleTo| (|Pattern| |#1|)))
 (T |PatternMatch|))
(CATEGORY |package| (SIGNATURE |is?| ((|Boolean|) |#2| |#3|))
 (SIGNATURE |is?| ((|Boolean|) (|List| |#2|) |#3|))
 (SIGNATURE |Is|
  ((|PatternMatchListResult| |#1| |#2| (|List| |#2|)) (|List| |#2|) |#3|))
 (IF (|has| |#2| (|RetractableTo| (|Symbol|)))
     (SIGNATURE |Is| ((|List| (|Equation| |#2|)) |#2| |#3|))
     (IF (|has| |#2| (|Ring|))
         (SIGNATURE |Is| ((|List| (|Equation| (|Polynomial| |#2|))) |#2| |#3|))
         (SIGNATURE |Is| ((|PatternMatchResult| |#1| |#2|) |#2| |#3|)))))
"/git/fricas/src/algebra/PATMATCH.spad"
((|Is| (*1 *2 *3 *4)
  (AND (|ofCategory| *5 (|SetCategory|))
       (|isDomain| *2 (|PatternMatchResult| *5 *3))
       (|isDomain| *1 (|PatternMatch| *5 *3 *4))
       (|not| (|ofCategory| *3 (|RetractableTo| (|Symbol|))))
       (|not| (|ofCategory| *3 (|Ring|)))
       (|ofCategory| *3 (|PatternMatchable| *5))
       (|ofCategory| *4 (|ConvertibleTo| (|Pattern| *5)))))
 (|Is| (*1 *2 *3 *4)
  (AND (|ofCategory| *5 (|SetCategory|))
       (|isDomain| *2 (|List| (|Equation| (|Polynomial| *3))))
       (|isDomain| *1 (|PatternMatch| *5 *3 *4)) (|ofCategory| *3 (|Ring|))
       (|not| (|ofCategory| *3 (|RetractableTo| (|Symbol|))))
       (|ofCategory| *3 (|PatternMatchable| *5))
       (|ofCategory| *4 (|ConvertibleTo| (|Pattern| *5)))))
 (|Is| (*1 *2 *3 *4)
  (AND (|ofCategory| *5 (|SetCategory|))
       (|isDomain| *2 (|List| (|Equation| *3)))
       (|isDomain| *1 (|PatternMatch| *5 *3 *4))
       (|ofCategory| *3 (|RetractableTo| (|Symbol|)))
       (|ofCategory| *3 (|PatternMatchable| *5))
       (|ofCategory| *4 (|ConvertibleTo| (|Pattern| *5)))))
 (|Is| (*1 *2 *3 *4)
  (AND (|isDomain| *3 (|List| *6)) (|ofCategory| *6 (|PatternMatchable| *5))
       (|ofCategory| *5 (|SetCategory|))
       (|isDomain| *2 (|PatternMatchListResult| *5 *6 (|List| *6)))
       (|isDomain| *1 (|PatternMatch| *5 *6 *4))
       (|ofCategory| *4 (|ConvertibleTo| (|Pattern| *5)))))
 (|is?| (*1 *2 *3 *4)
  (AND (|isDomain| *3 (|List| *6)) (|ofCategory| *6 (|PatternMatchable| *5))
       (|ofCategory| *5 (|SetCategory|)) (|isDomain| *2 (|Boolean|))
       (|isDomain| *1 (|PatternMatch| *5 *6 *4))
       (|ofCategory| *4 (|ConvertibleTo| (|Pattern| *5)))))
 (|is?| (*1 *2 *3 *4)
  (AND (|ofCategory| *5 (|SetCategory|)) (|isDomain| *2 (|Boolean|))
       (|isDomain| *1 (|PatternMatch| *5 *3 *4))
       (|ofCategory| *3 (|PatternMatchable| *5))
       (|ofCategory| *4 (|ConvertibleTo| (|Pattern| *5))))))
((|is?| (((|Boolean|) (|List| |#2|) |#3|) 22) (((|Boolean|) |#2| |#3|) 17))
 (|Is|
  (((|PatternMatchResult| |#1| |#2|) |#2| |#3|) 42
   (AND (|not| (|has| |#2| (|RetractableTo| (|Symbol|))))
        (|not| (|has| |#2| (|Ring|)))))
  (((|List| (|Equation| (|Polynomial| |#2|))) |#2| |#3|) 41
   (AND (|has| |#2| (|Ring|))
        (|not| (|has| |#2| (|RetractableTo| (|Symbol|))))))
  (((|List| (|Equation| |#2|)) |#2| |#3|) 34
   (|has| |#2| (|RetractableTo| (|Symbol|))))
  (((|PatternMatchListResult| |#1| |#2| (|List| |#2|)) (|List| |#2|) |#3|) 20)))
((|HasCategory| |#2| (LIST '|RetractableTo| '(|Symbol|)))
 (AND (|not| (|HasCategory| |#2| (LIST '|RetractableTo| '(|Symbol|))))
      (|not| (|HasCategory| |#2| '(|Ring|))))
 (AND (|HasCategory| |#2| '(|Ring|))
      (|not| (|HasCategory| |#2| (LIST '|RetractableTo| '(|Symbol|))))))
PATMATCH
((|constructor|
  (NIL "This package provides the top-level pattern macthing functions."))
 (|Is|
  (((|PatternMatchResult| |#1| |#2|) |#2| |#3|)
   "\\spad{Is(expr,{} pat)} matches the pattern pat on the expression \\spad{expr} and returns a match of the form \\spad{[v1 = e1,{} ...,{} vn = en]}; returns an empty match if \\spad{expr} is exactly equal to pat. returns a \\spadfun{failed} match if pat does not match \\spad{expr}.")
  (((|List| (|Equation| (|Polynomial| |#2|))) |#2| |#3|)
   "\\spad{Is(expr,{} pat)} matches the pattern pat on the expression \\spad{expr} and returns a list of matches \\spad{[v1 = e1,{} ...,{} vn = en]}; returns an empty list if either \\spad{expr} is exactly equal to pat or if pat does not match \\spad{expr}.")
  (((|List| (|Equation| |#2|)) |#2| |#3|)
   "\\spad{Is(expr,{} pat)} matches the pattern pat on the expression \\spad{expr} and returns a list of matches \\spad{[v1 = e1,{} ...,{} vn = en]}; returns an empty list if either \\spad{expr} is exactly equal to pat or if pat does not match \\spad{expr}.")
  (((|PatternMatchListResult| |#1| |#2| (|List| |#2|)) (|List| |#2|) |#3|)
   "\\spad{Is([e1,{} ...,{} en],{} pat)} matches the pattern pat on the list of expressions \\spad{[e1,{} ...,{} en]} and returns the result."))
 (|is?|
  (((|Boolean|) (|List| |#2|) |#3|)
   "\\spad{is?([e1,{} ...,{} en],{} pat)} tests if the list of expressions \\spad{[e1,{} ...,{} en]} matches the pattern pat.")
  (((|Boolean|) |#2| |#3|)
   "\\spad{is?(expr,{} pat)} tests if the expression \\spad{expr} matches the pattern pat.")))
(("documentation" 0 4034) ("ancestors" 0 NIL) ("parents" 0 NIL)
 ("abbreviation" 0 4025) ("predicates" 0 3740) ("superDomain" 0 NIL)
 ("operationAlist" 0 3186) ("modemaps" 0 1273) ("sourceFile" 0 1233)
 ("constructorCategory" 0 734) ("constructorModemap" 0 70)
 ("constructorKind" 0 60) ("constructorForm" 0 20))