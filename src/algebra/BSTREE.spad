)abbrev domain BSTREE BinarySearchTree
++ Description: BinarySearchTree(S) is the domain of
++ binary trees where elements are ordered across the tree.
++ A binary search tree is either empty or has
++ a value which is an S, and a
++ left and a right which are both BinarySearchTree(S).
BinarySearchTree(S : OrderedSet) : Exports == Implementation where
  Exports == BinaryTreeCategory(S) with
    binarySearchTree : List S -> %
      ++ binarySearchTree(l) constructs a binary search tree
      ++ with elements from list l.
    insert! : (S, %) -> %
      ++ insert!(x, b) inserts element x as a leave into binary search tree b.
    insertRoot! : (S, %) -> %
      ++ insertRoot!(x, b) inserts element x as the root of
      ++ binary search tree b.
    split : (S, %) -> Record(less : %, greater : %)
      ++ split(x, b) splits binary search tree b into two trees,
      ++ one with elements less than x, the other with elements
      ++ greater than or equal to x.
  Implementation == BinaryTree(S) add
    Rep := BinaryTree(S)
    binarySearchTree(u : List S) ==
      empty?(u) => empty()
      tree := binaryTree(first u)
      for x in rest u repeat insert!(x, tree)
      tree
    insert!(x, t) ==
      empty? t => binaryTree(x)
      x >= value t =>
        setright!(t, insert!(x, right t))
        t
      setleft!(t, insert!(x, left t))
      t
    split(x, t) ==
      empty? t => [empty(), empty()]
      x > value t =>
        a := split(x, right t)
        [node(left t, value t, a.less), a.greater]
      a := split(x, left t)
      [a.less, node(a.greater, value t, right t)]
    insertRoot!(x, t) ==
      a := split(x, t)
      node(a.less, x, a.greater)

