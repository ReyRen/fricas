11541               (|FortranProgram| |name| |returnType| |arguments| |symbols|)
|domain|
(((|FortranProgram| |#1| |#2| |#3| |#4|)
  (|Join| (|FortranProgramCategory|)
          (CATEGORY |domain| (SIGNATURE |coerce| ($ (|FortranCode|)))
           (SIGNATURE |coerce| ($ (|List| (|FortranCode|))))
           (SIGNATURE |coerce|
            ($
             (|Record| (|:| |localSymbols| (|SymbolTable|))
                       (|:| |code| (|List| (|FortranCode|))))))
           (SIGNATURE |coerce| ($ (|Expression| (|MachineInteger|))))
           (SIGNATURE |coerce| ($ (|Expression| (|MachineFloat|))))
           (SIGNATURE |coerce| ($ (|Expression| (|MachineComplex|))))
           (SIGNATURE |coerce|
            ($ (|Equation| (|Expression| (|MachineInteger|)))))
           (SIGNATURE |coerce|
            ($ (|Equation| (|Expression| (|MachineFloat|)))))
           (SIGNATURE |coerce|
            ($ (|Equation| (|Expression| (|MachineComplex|)))))
           (SIGNATURE |coerce| ($ (|Expression| (|Integer|))))
           (SIGNATURE |coerce| ($ (|Expression| (|Float|))))
           (SIGNATURE |coerce| ($ (|Expression| (|Complex| (|Float|)))))
           (SIGNATURE |coerce| ($ (|Equation| (|Expression| (|Integer|)))))
           (SIGNATURE |coerce| ($ (|Equation| (|Expression| (|Float|)))))
           (SIGNATURE |coerce|
            ($ (|Equation| (|Expression| (|Complex| (|Float|))))))))
  (|Symbol|) (|Union| (|:| |fst| (|FortranScalarType|)) (|:| |void| "void"))
  (|List| (|Symbol|)) (|SymbolTable|))
 (T |FortranProgram|))
(|Join| (|FortranProgramCategory|)
        (CATEGORY |domain| (SIGNATURE |coerce| ($ (|FortranCode|)))
         (SIGNATURE |coerce| ($ (|List| (|FortranCode|))))
         (SIGNATURE |coerce|
          ($
           (|Record| (|:| |localSymbols| (|SymbolTable|))
                     (|:| |code| (|List| (|FortranCode|))))))
         (SIGNATURE |coerce| ($ (|Expression| (|MachineInteger|))))
         (SIGNATURE |coerce| ($ (|Expression| (|MachineFloat|))))
         (SIGNATURE |coerce| ($ (|Expression| (|MachineComplex|))))
         (SIGNATURE |coerce|
          ($ (|Equation| (|Expression| (|MachineInteger|)))))
         (SIGNATURE |coerce| ($ (|Equation| (|Expression| (|MachineFloat|)))))
         (SIGNATURE |coerce|
          ($ (|Equation| (|Expression| (|MachineComplex|)))))
         (SIGNATURE |coerce| ($ (|Expression| (|Integer|))))
         (SIGNATURE |coerce| ($ (|Expression| (|Float|))))
         (SIGNATURE |coerce| ($ (|Expression| (|Complex| (|Float|)))))
         (SIGNATURE |coerce| ($ (|Equation| (|Expression| (|Integer|)))))
         (SIGNATURE |coerce| ($ (|Equation| (|Expression| (|Float|)))))
         (SIGNATURE |coerce|
          ($ (|Equation| (|Expression| (|Complex| (|Float|))))))))
"/git/fricas/src/algebra/FORTRAN.spad"
((|coerce| (*1 *1 *2)
           (AND (|isDomain| *2 (|FortranCode|))
                (|isDomain| *1 (|FortranProgram| *3 *4 *5 *6))
                (|ofType| *3 (|Symbol|))
                (|ofType| *4
                 (|Union| (|:| |fst| (|FortranScalarType|))
                          (|:| |void| #1="void")))
                (|ofType| *5 (|List| (|Symbol|)))
                (|ofType| *6 (|SymbolTable|))))
 (|coerce| (*1 *1 *2)
           (AND (|isDomain| *2 (|List| (|FortranCode|)))
                (|isDomain| *1 (|FortranProgram| *3 *4 *5 *6))
                (|ofType| *3 (|Symbol|))
                (|ofType| *4
                 (|Union| (|:| |fst| (|FortranScalarType|)) (|:| |void| #1#)))
                (|ofType| *5 (|List| (|Symbol|)))
                (|ofType| *6 (|SymbolTable|))))
 (|coerce| (*1 *1 *2)
           (AND
            (|isDomain| *2
                        (|Record| (|:| |localSymbols| (|SymbolTable|))
                                  (|:| |code| (|List| (|FortranCode|)))))
            (|isDomain| *1 (|FortranProgram| *3 *4 *5 *6))
            (|ofType| *3 (|Symbol|))
            (|ofType| *4
             (|Union| (|:| |fst| (|FortranScalarType|)) (|:| |void| #1#)))
            (|ofType| *5 (|List| (|Symbol|))) (|ofType| *6 (|SymbolTable|))))
 (|coerce| (*1 *1 *2)
           (AND (|isDomain| *2 (|Expression| (|MachineInteger|)))
                (|isDomain| *1 (|FortranProgram| *3 *4 *5 *6))
                (|ofType| *3 (|Symbol|))
                (|ofType| *4
                 (|Union| (|:| |fst| (|FortranScalarType|)) (|:| |void| #1#)))
                (|ofType| *5 (|List| (|Symbol|)))
                (|ofType| *6 (|SymbolTable|))))
 (|coerce| (*1 *1 *2)
           (AND (|isDomain| *2 (|Expression| (|MachineFloat|)))
                (|isDomain| *1 (|FortranProgram| *3 *4 *5 *6))
                (|ofType| *3 (|Symbol|))
                (|ofType| *4
                 (|Union| (|:| |fst| (|FortranScalarType|)) (|:| |void| #1#)))
                (|ofType| *5 (|List| (|Symbol|)))
                (|ofType| *6 (|SymbolTable|))))
 (|coerce| (*1 *1 *2)
           (AND (|isDomain| *2 (|Expression| (|MachineComplex|)))
                (|isDomain| *1 (|FortranProgram| *3 *4 *5 *6))
                (|ofType| *3 (|Symbol|))
                (|ofType| *4
                 (|Union| (|:| |fst| (|FortranScalarType|)) (|:| |void| #1#)))
                (|ofType| *5 (|List| (|Symbol|)))
                (|ofType| *6 (|SymbolTable|))))
 (|coerce| (*1 *1 *2)
           (AND (|isDomain| *2 (|Equation| (|Expression| (|MachineInteger|))))
                (|isDomain| *1 (|FortranProgram| *3 *4 *5 *6))
                (|ofType| *3 (|Symbol|))
                (|ofType| *4
                 (|Union| (|:| |fst| (|FortranScalarType|)) (|:| |void| #1#)))
                (|ofType| *5 (|List| (|Symbol|)))
                (|ofType| *6 (|SymbolTable|))))
 (|coerce| (*1 *1 *2)
           (AND (|isDomain| *2 (|Equation| (|Expression| (|MachineFloat|))))
                (|isDomain| *1 (|FortranProgram| *3 *4 *5 *6))
                (|ofType| *3 (|Symbol|))
                (|ofType| *4
                 (|Union| (|:| |fst| (|FortranScalarType|)) (|:| |void| #1#)))
                (|ofType| *5 (|List| (|Symbol|)))
                (|ofType| *6 (|SymbolTable|))))
 (|coerce| (*1 *1 *2)
           (AND (|isDomain| *2 (|Equation| (|Expression| (|MachineComplex|))))
                (|isDomain| *1 (|FortranProgram| *3 *4 *5 *6))
                (|ofType| *3 (|Symbol|))
                (|ofType| *4
                 (|Union| (|:| |fst| (|FortranScalarType|)) (|:| |void| #1#)))
                (|ofType| *5 (|List| (|Symbol|)))
                (|ofType| *6 (|SymbolTable|))))
 (|coerce| (*1 *1 *2)
           (AND (|isDomain| *2 (|Expression| (|Integer|)))
                (|isDomain| *1 (|FortranProgram| *3 *4 *5 *6))
                (|ofType| *3 (|Symbol|))
                (|ofType| *4
                 (|Union| (|:| |fst| (|FortranScalarType|)) (|:| |void| #1#)))
                (|ofType| *5 (|List| (|Symbol|)))
                (|ofType| *6 (|SymbolTable|))))
 (|coerce| (*1 *1 *2)
           (AND (|isDomain| *2 (|Expression| (|Float|)))
                (|isDomain| *1 (|FortranProgram| *3 *4 *5 *6))
                (|ofType| *3 (|Symbol|))
                (|ofType| *4
                 (|Union| (|:| |fst| (|FortranScalarType|)) (|:| |void| #1#)))
                (|ofType| *5 (|List| (|Symbol|)))
                (|ofType| *6 (|SymbolTable|))))
 (|coerce| (*1 *1 *2)
           (AND (|isDomain| *2 (|Expression| (|Complex| (|Float|))))
                (|isDomain| *1 (|FortranProgram| *3 *4 *5 *6))
                (|ofType| *3 (|Symbol|))
                (|ofType| *4
                 (|Union| (|:| |fst| (|FortranScalarType|)) (|:| |void| #1#)))
                (|ofType| *5 (|List| (|Symbol|)))
                (|ofType| *6 (|SymbolTable|))))
 (|coerce| (*1 *1 *2)
           (AND (|isDomain| *2 (|Equation| (|Expression| (|Integer|))))
                (|isDomain| *1 (|FortranProgram| *3 *4 *5 *6))
                (|ofType| *3 (|Symbol|))
                (|ofType| *4
                 (|Union| (|:| |fst| (|FortranScalarType|)) (|:| |void| #1#)))
                (|ofType| *5 (|List| (|Symbol|)))
                (|ofType| *6 (|SymbolTable|))))
 (|coerce| (*1 *1 *2)
           (AND (|isDomain| *2 (|Equation| (|Expression| (|Float|))))
                (|isDomain| *1 (|FortranProgram| *3 *4 *5 *6))
                (|ofType| *3 (|Symbol|))
                (|ofType| *4
                 (|Union| (|:| |fst| (|FortranScalarType|)) (|:| |void| #1#)))
                (|ofType| *5 (|List| (|Symbol|)))
                (|ofType| *6 (|SymbolTable|))))
 (|coerce| (*1 *1 *2)
           (AND
            (|isDomain| *2 (|Equation| (|Expression| (|Complex| (|Float|)))))
            (|isDomain| *1 (|FortranProgram| *3 *4 *5 *6))
            (|ofType| *3 (|Symbol|))
            (|ofType| *4
             (|Union| (|:| |fst| (|FortranScalarType|)) (|:| |void| #1#)))
            (|ofType| *5 (|List| (|Symbol|))) (|ofType| *6 (|SymbolTable|)))))
((|outputAsFortran| (((|Void|) $) 40))
 (|coerce| (((|OutputForm|) $) 95) (($ (|FortranCode|)) 98)
           (($ (|List| (|FortranCode|))) 97)
           (($
             (|Record| (|:| |localSymbols| (|SymbolTable|))
                       (|:| |code| (|List| (|FortranCode|)))))
            94)
           (($ (|Expression| (|MachineInteger|))) 56)
           (($ (|Expression| (|MachineFloat|))) 72)
           (($ (|Expression| (|MachineComplex|))) 84)
           (($ (|Equation| (|Expression| (|MachineInteger|)))) 68)
           (($ (|Equation| (|Expression| (|MachineFloat|)))) 80)
           (($ (|Equation| (|Expression| (|MachineComplex|)))) 92)
           (($ (|Expression| (|Integer|))) 102)
           (($ (|Expression| (|Float|))) 114)
           (($ (|Expression| (|Complex| (|Float|)))) 126)
           (($ (|Equation| (|Expression| (|Integer|)))) 110)
           (($ (|Equation| (|Expression| (|Float|)))) 122)
           (($ (|Equation| (|Expression| (|Complex| (|Float|))))) 134)))
FORTRAN
(((|FortranProgramCategory|) . T))
(((|CoercibleTo| (|OutputForm|)) . T) ((|FortranProgramCategory|) . T)
 ((|Type|) . T))
((|constructor|
  (NIL
   "\\spadtype{FortranProgram} allows the user to build and manipulate simple models of FORTRAN subprograms. These can then be transformed into actual FORTRAN notation."))
 (|coerce|
  (($ (|Equation| (|Expression| (|Complex| (|Float|)))))
   "\\spad{coerce(eq)} \\undocumented{}")
  (($ (|Equation| (|Expression| (|Float|))))
   "\\spad{coerce(eq)} \\undocumented{}")
  (($ (|Equation| (|Expression| (|Integer|))))
   "\\spad{coerce(eq)} \\undocumented{}")
  (($ (|Expression| (|Complex| (|Float|))))
   "\\spad{coerce(e)} \\undocumented{}")
  (($ (|Expression| (|Float|))) "\\spad{coerce(e)} \\undocumented{}")
  (($ (|Expression| (|Integer|))) "\\spad{coerce(e)} \\undocumented{}")
  (($ (|Equation| (|Expression| (|MachineComplex|))))
   "\\spad{coerce(eq)} \\undocumented{}")
  (($ (|Equation| (|Expression| (|MachineFloat|))))
   "\\spad{coerce(eq)} \\undocumented{}")
  (($ (|Equation| (|Expression| (|MachineInteger|))))
   "\\spad{coerce(eq)} \\undocumented{}")
  (($ (|Expression| (|MachineComplex|))) "\\spad{coerce(e)} \\undocumented{}")
  (($ (|Expression| (|MachineFloat|))) "\\spad{coerce(e)} \\undocumented{}")
  (($ (|Expression| (|MachineInteger|))) "\\spad{coerce(e)} \\undocumented{}")
  (($
    (|Record| (|:| |localSymbols| (|SymbolTable|))
              (|:| |code| (|List| (|FortranCode|)))))
   "\\spad{coerce(r)} \\undocumented{}")
  (($ (|List| (|FortranCode|))) "\\spad{coerce(lfc)} \\undocumented{}")
  (($ (|FortranCode|)) "\\spad{coerce(fc)} \\undocumented{}")))
(("documentation" 0 10024) ("ancestors" 0 9936) ("parents" 0 9901)
 ("abbreviation" 0 9893) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 8891) ("modemaps" 0 2805) ("sourceFile" 0 2766)
 ("constructorCategory" 0 1546) ("constructorModemap" 0 90)
 ("constructorKind" 0 81) ("constructorForm" 0 20))