29869               (|FortranExpression| |basicSymbols| |subscriptedSymbols| R)
|domain|
(((|FortranExpression| |#1| |#2| |#3|)
  (|Join| (|ExpressionSpace|) (|Algebra| |#3|) (|RetractableTo| |#3|)
          (|PartialDifferentialRing| (|Symbol|))
          (CATEGORY |domain| (SIGNATURE |retract| ($ (|Expression| |#3|)))
           (SIGNATURE |retractIfCan|
            ((|Union| $ "failed") (|Expression| |#3|)))
           (SIGNATURE |retract| ($ (|Symbol|)))
           (SIGNATURE |retractIfCan| ((|Union| $ "failed") (|Symbol|)))
           (SIGNATURE |coerce| ((|Expression| |#3|) $))
           (IF (|has| |#3| (|RetractableTo| (|Integer|)))
               (PROGN
                (SIGNATURE |retract| ($ (|Expression| (|Integer|))))
                (SIGNATURE |retractIfCan|
                 ((|Union| $ "failed") (|Expression| (|Integer|))))
                (SIGNATURE |retract|
                 ($ (|Fraction| (|Polynomial| (|Integer|)))))
                (SIGNATURE |retractIfCan|
                 ((|Union| $ "failed")
                  (|Fraction| (|Polynomial| (|Integer|)))))
                (SIGNATURE |retract| ($ (|Polynomial| (|Integer|))))
                (SIGNATURE |retractIfCan|
                 ((|Union| $ "failed") (|Polynomial| (|Integer|)))))
               |noBranch|)
           (IF (|has| |#3| (|RetractableTo| (|Float|)))
               (PROGN
                (SIGNATURE |retract| ($ (|Expression| (|Float|))))
                (SIGNATURE |retractIfCan|
                 ((|Union| $ "failed") (|Expression| (|Float|))))
                (SIGNATURE |retract| ($ (|Fraction| (|Polynomial| (|Float|)))))
                (SIGNATURE |retractIfCan|
                 ((|Union| $ "failed") (|Fraction| (|Polynomial| (|Float|)))))
                (SIGNATURE |retract| ($ (|Polynomial| (|Float|))))
                (SIGNATURE |retractIfCan|
                 ((|Union| $ "failed") (|Polynomial| (|Float|)))))
               |noBranch|)
           (SIGNATURE |abs| ($ $)) (SIGNATURE |sqrt| ($ $))
           (SIGNATURE |exp| ($ $)) (SIGNATURE |log| ($ $))
           (SIGNATURE |log10| ($ $)) (SIGNATURE |sin| ($ $))
           (SIGNATURE |cos| ($ $)) (SIGNATURE |tan| ($ $))
           (SIGNATURE |asin| ($ $)) (SIGNATURE |acos| ($ $))
           (SIGNATURE |atan| ($ $)) (SIGNATURE |sinh| ($ $))
           (SIGNATURE |cosh| ($ $)) (SIGNATURE |tanh| ($ $))
           (SIGNATURE |pi| ($)) (SIGNATURE |variables| ((|List| (|Symbol|)) $))
           (SIGNATURE |useNagFunctions| ((|Boolean|)))
           (SIGNATURE |useNagFunctions| ((|Boolean|) (|Boolean|)))))
  (|List| (|Symbol|)) (|List| (|Symbol|)) (|FortranMachineTypeCategory|))
 (T |FortranExpression|))
(|Join| (|ExpressionSpace|) (|Algebra| |#3|) (|RetractableTo| |#3|)
        (|PartialDifferentialRing| (|Symbol|))
        (CATEGORY |domain| (SIGNATURE |retract| ($ (|Expression| |#3|)))
         (SIGNATURE |retractIfCan| ((|Union| $ "failed") (|Expression| |#3|)))
         (SIGNATURE |retract| ($ (|Symbol|)))
         (SIGNATURE |retractIfCan| ((|Union| $ "failed") (|Symbol|)))
         (SIGNATURE |coerce| ((|Expression| |#3|) $))
         (IF (|has| |#3| (|RetractableTo| (|Integer|)))
             (PROGN
              (SIGNATURE |retract| ($ (|Expression| (|Integer|))))
              (SIGNATURE |retractIfCan|
               ((|Union| $ "failed") (|Expression| (|Integer|))))
              (SIGNATURE |retract| ($ (|Fraction| (|Polynomial| (|Integer|)))))
              (SIGNATURE |retractIfCan|
               ((|Union| $ "failed") (|Fraction| (|Polynomial| (|Integer|)))))
              (SIGNATURE |retract| ($ (|Polynomial| (|Integer|))))
              (SIGNATURE |retractIfCan|
               ((|Union| $ "failed") (|Polynomial| (|Integer|)))))
             |noBranch|)
         (IF (|has| |#3| (|RetractableTo| (|Float|)))
             (PROGN
              (SIGNATURE |retract| ($ (|Expression| (|Float|))))
              (SIGNATURE |retractIfCan|
               ((|Union| $ "failed") (|Expression| (|Float|))))
              (SIGNATURE |retract| ($ (|Fraction| (|Polynomial| (|Float|)))))
              (SIGNATURE |retractIfCan|
               ((|Union| $ "failed") (|Fraction| (|Polynomial| (|Float|)))))
              (SIGNATURE |retract| ($ (|Polynomial| (|Float|))))
              (SIGNATURE |retractIfCan|
               ((|Union| $ "failed") (|Polynomial| (|Float|)))))
             |noBranch|)
         (SIGNATURE |abs| ($ $)) (SIGNATURE |sqrt| ($ $))
         (SIGNATURE |exp| ($ $)) (SIGNATURE |log| ($ $))
         (SIGNATURE |log10| ($ $)) (SIGNATURE |sin| ($ $))
         (SIGNATURE |cos| ($ $)) (SIGNATURE |tan| ($ $))
         (SIGNATURE |asin| ($ $)) (SIGNATURE |acos| ($ $))
         (SIGNATURE |atan| ($ $)) (SIGNATURE |sinh| ($ $))
         (SIGNATURE |cosh| ($ $)) (SIGNATURE |tanh| ($ $)) (SIGNATURE |pi| ($))
         (SIGNATURE |variables| ((|List| (|Symbol|)) $))
         (SIGNATURE |useNagFunctions| ((|Boolean|)))
         (SIGNATURE |useNagFunctions| ((|Boolean|) (|Boolean|)))))
"/git/fricas/src/algebra/FEXPR.spad"
((|retract| (*1 *1 *2)
            (AND (|isDomain| *2 (|Expression| *5))
                 (|ofCategory| *5 (|FortranMachineTypeCategory|))
                 (|isDomain| *1 (|FortranExpression| *3 *4 *5))
                 (|ofType| *3 (|List| (|Symbol|)))
                 (|ofType| *4 (|List| (|Symbol|)))))
 (|retractIfCan| (*1 *1 *2)
  (|partial| AND (|isDomain| *2 (|Expression| *5))
   (|ofCategory| *5 (|FortranMachineTypeCategory|))
   (|isDomain| *1 (|FortranExpression| *3 *4 *5))
   (|ofType| *3 (|List| (|Symbol|))) (|ofType| *4 (|List| (|Symbol|)))))
 (|retract| (*1 *1 *2)
            (AND (|isDomain| *2 (|Symbol|))
                 (|isDomain| *1 (|FortranExpression| *3 *4 *5))
                 (|ofType| *3 (|List| *2)) (|ofType| *4 (|List| *2))
                 (|ofCategory| *5 (|FortranMachineTypeCategory|))))
 (|retractIfCan| (*1 *1 *2)
  (|partial| AND (|isDomain| *2 (|Symbol|))
   (|isDomain| *1 (|FortranExpression| *3 *4 *5)) (|ofType| *3 (|List| *2))
   (|ofType| *4 (|List| *2)) (|ofCategory| *5 (|FortranMachineTypeCategory|))))
 (|coerce| (*1 *2 *1)
           (AND (|isDomain| *2 (|Expression| *5))
                (|isDomain| *1 (|FortranExpression| *3 *4 *5))
                (|ofType| *3 (|List| (|Symbol|)))
                (|ofType| *4 (|List| (|Symbol|)))
                (|ofCategory| *5 (|FortranMachineTypeCategory|))))
 (|retract| (*1 *1 *2)
            (AND (|isDomain| *2 (|Expression| (|Integer|)))
                 (|isDomain| *1 (|FortranExpression| *3 *4 *5))
                 (|ofCategory| *5 (|RetractableTo| (|Integer|)))
                 (|ofType| *3 (|List| (|Symbol|)))
                 (|ofType| *4 (|List| (|Symbol|)))
                 (|ofCategory| *5 (|FortranMachineTypeCategory|))))
 (|retractIfCan| (*1 *1 *2)
  (|partial| AND (|isDomain| *2 (|Expression| (|Integer|)))
   (|isDomain| *1 (|FortranExpression| *3 *4 *5))
   (|ofCategory| *5 (|RetractableTo| (|Integer|)))
   (|ofType| *3 (|List| (|Symbol|))) (|ofType| *4 (|List| (|Symbol|)))
   (|ofCategory| *5 (|FortranMachineTypeCategory|))))
 (|retract| (*1 *1 *2)
            (AND (|isDomain| *2 (|Fraction| (|Polynomial| (|Integer|))))
                 (|isDomain| *1 (|FortranExpression| *3 *4 *5))
                 (|ofCategory| *5 (|RetractableTo| (|Integer|)))
                 (|ofType| *3 (|List| (|Symbol|)))
                 (|ofType| *4 (|List| (|Symbol|)))
                 (|ofCategory| *5 (|FortranMachineTypeCategory|))))
 (|retractIfCan| (*1 *1 *2)
  (|partial| AND (|isDomain| *2 (|Fraction| (|Polynomial| (|Integer|))))
   (|isDomain| *1 (|FortranExpression| *3 *4 *5))
   (|ofCategory| *5 (|RetractableTo| (|Integer|)))
   (|ofType| *3 (|List| (|Symbol|))) (|ofType| *4 (|List| (|Symbol|)))
   (|ofCategory| *5 (|FortranMachineTypeCategory|))))
 (|retract| (*1 *1 *2)
            (AND (|isDomain| *2 (|Polynomial| (|Integer|)))
                 (|isDomain| *1 (|FortranExpression| *3 *4 *5))
                 (|ofCategory| *5 (|RetractableTo| (|Integer|)))
                 (|ofType| *3 (|List| (|Symbol|)))
                 (|ofType| *4 (|List| (|Symbol|)))
                 (|ofCategory| *5 (|FortranMachineTypeCategory|))))
 (|retractIfCan| (*1 *1 *2)
  (|partial| AND (|isDomain| *2 (|Polynomial| (|Integer|)))
   (|isDomain| *1 (|FortranExpression| *3 *4 *5))
   (|ofCategory| *5 (|RetractableTo| (|Integer|)))
   (|ofType| *3 (|List| (|Symbol|))) (|ofType| *4 (|List| (|Symbol|)))
   (|ofCategory| *5 (|FortranMachineTypeCategory|))))
 (|retract| (*1 *1 *2)
            (AND (|isDomain| *2 (|Expression| (|Float|)))
                 (|isDomain| *1 (|FortranExpression| *3 *4 *5))
                 (|ofCategory| *5 (|RetractableTo| (|Float|)))
                 (|ofType| *3 (|List| (|Symbol|)))
                 (|ofType| *4 (|List| (|Symbol|)))
                 (|ofCategory| *5 (|FortranMachineTypeCategory|))))
 (|retractIfCan| (*1 *1 *2)
  (|partial| AND (|isDomain| *2 (|Expression| (|Float|)))
   (|isDomain| *1 (|FortranExpression| *3 *4 *5))
   (|ofCategory| *5 (|RetractableTo| (|Float|)))
   (|ofType| *3 (|List| (|Symbol|))) (|ofType| *4 (|List| (|Symbol|)))
   (|ofCategory| *5 (|FortranMachineTypeCategory|))))
 (|retract| (*1 *1 *2)
            (AND (|isDomain| *2 (|Fraction| (|Polynomial| (|Float|))))
                 (|isDomain| *1 (|FortranExpression| *3 *4 *5))
                 (|ofCategory| *5 (|RetractableTo| (|Float|)))
                 (|ofType| *3 (|List| (|Symbol|)))
                 (|ofType| *4 (|List| (|Symbol|)))
                 (|ofCategory| *5 (|FortranMachineTypeCategory|))))
 (|retractIfCan| (*1 *1 *2)
  (|partial| AND (|isDomain| *2 (|Fraction| (|Polynomial| (|Float|))))
   (|isDomain| *1 (|FortranExpression| *3 *4 *5))
   (|ofCategory| *5 (|RetractableTo| (|Float|)))
   (|ofType| *3 (|List| (|Symbol|))) (|ofType| *4 (|List| (|Symbol|)))
   (|ofCategory| *5 (|FortranMachineTypeCategory|))))
 (|retract| (*1 *1 *2)
            (AND (|isDomain| *2 (|Polynomial| (|Float|)))
                 (|isDomain| *1 (|FortranExpression| *3 *4 *5))
                 (|ofCategory| *5 (|RetractableTo| (|Float|)))
                 (|ofType| *3 (|List| (|Symbol|)))
                 (|ofType| *4 (|List| (|Symbol|)))
                 (|ofCategory| *5 (|FortranMachineTypeCategory|))))
 (|retractIfCan| (*1 *1 *2)
  (|partial| AND (|isDomain| *2 (|Polynomial| (|Float|)))
   (|isDomain| *1 (|FortranExpression| *3 *4 *5))
   (|ofCategory| *5 (|RetractableTo| (|Float|)))
   (|ofType| *3 (|List| (|Symbol|))) (|ofType| *4 (|List| (|Symbol|)))
   (|ofCategory| *5 (|FortranMachineTypeCategory|))))
 (|abs| (*1 *1 *1)
  (AND (|isDomain| *1 (|FortranExpression| *2 *3 *4))
       (|ofType| *2 (|List| (|Symbol|))) (|ofType| *3 (|List| (|Symbol|)))
       (|ofCategory| *4 (|FortranMachineTypeCategory|))))
 (|sqrt| (*1 *1 *1)
  (AND (|isDomain| *1 (|FortranExpression| *2 *3 *4))
       (|ofType| *2 (|List| (|Symbol|))) (|ofType| *3 (|List| (|Symbol|)))
       (|ofCategory| *4 (|FortranMachineTypeCategory|))))
 (|exp| (*1 *1 *1)
  (AND (|isDomain| *1 (|FortranExpression| *2 *3 *4))
       (|ofType| *2 (|List| (|Symbol|))) (|ofType| *3 (|List| (|Symbol|)))
       (|ofCategory| *4 (|FortranMachineTypeCategory|))))
 (|log| (*1 *1 *1)
  (AND (|isDomain| *1 (|FortranExpression| *2 *3 *4))
       (|ofType| *2 (|List| (|Symbol|))) (|ofType| *3 (|List| (|Symbol|)))
       (|ofCategory| *4 (|FortranMachineTypeCategory|))))
 (|log10| (*1 *1 *1)
  (AND (|isDomain| *1 (|FortranExpression| *2 *3 *4))
       (|ofType| *2 (|List| (|Symbol|))) (|ofType| *3 (|List| (|Symbol|)))
       (|ofCategory| *4 (|FortranMachineTypeCategory|))))
 (|sin| (*1 *1 *1)
  (AND (|isDomain| *1 (|FortranExpression| *2 *3 *4))
       (|ofType| *2 (|List| (|Symbol|))) (|ofType| *3 (|List| (|Symbol|)))
       (|ofCategory| *4 (|FortranMachineTypeCategory|))))
 (|cos| (*1 *1 *1)
  (AND (|isDomain| *1 (|FortranExpression| *2 *3 *4))
       (|ofType| *2 (|List| (|Symbol|))) (|ofType| *3 (|List| (|Symbol|)))
       (|ofCategory| *4 (|FortranMachineTypeCategory|))))
 (|tan| (*1 *1 *1)
  (AND (|isDomain| *1 (|FortranExpression| *2 *3 *4))
       (|ofType| *2 (|List| (|Symbol|))) (|ofType| *3 (|List| (|Symbol|)))
       (|ofCategory| *4 (|FortranMachineTypeCategory|))))
 (|asin| (*1 *1 *1)
  (AND (|isDomain| *1 (|FortranExpression| *2 *3 *4))
       (|ofType| *2 (|List| (|Symbol|))) (|ofType| *3 (|List| (|Symbol|)))
       (|ofCategory| *4 (|FortranMachineTypeCategory|))))
 (|acos| (*1 *1 *1)
  (AND (|isDomain| *1 (|FortranExpression| *2 *3 *4))
       (|ofType| *2 (|List| (|Symbol|))) (|ofType| *3 (|List| (|Symbol|)))
       (|ofCategory| *4 (|FortranMachineTypeCategory|))))
 (|atan| (*1 *1 *1)
  (AND (|isDomain| *1 (|FortranExpression| *2 *3 *4))
       (|ofType| *2 (|List| (|Symbol|))) (|ofType| *3 (|List| (|Symbol|)))
       (|ofCategory| *4 (|FortranMachineTypeCategory|))))
 (|sinh| (*1 *1 *1)
  (AND (|isDomain| *1 (|FortranExpression| *2 *3 *4))
       (|ofType| *2 (|List| (|Symbol|))) (|ofType| *3 (|List| (|Symbol|)))
       (|ofCategory| *4 (|FortranMachineTypeCategory|))))
 (|cosh| (*1 *1 *1)
  (AND (|isDomain| *1 (|FortranExpression| *2 *3 *4))
       (|ofType| *2 (|List| (|Symbol|))) (|ofType| *3 (|List| (|Symbol|)))
       (|ofCategory| *4 (|FortranMachineTypeCategory|))))
 (|tanh| (*1 *1 *1)
  (AND (|isDomain| *1 (|FortranExpression| *2 *3 *4))
       (|ofType| *2 (|List| (|Symbol|))) (|ofType| *3 (|List| (|Symbol|)))
       (|ofCategory| *4 (|FortranMachineTypeCategory|))))
 (|pi| (*1 *1)
  (AND (|isDomain| *1 (|FortranExpression| *2 *3 *4))
       (|ofType| *2 (|List| (|Symbol|))) (|ofType| *3 (|List| (|Symbol|)))
       (|ofCategory| *4 (|FortranMachineTypeCategory|))))
 (|variables| (*1 *2 *1)
  (AND (|isDomain| *2 (|List| (|Symbol|)))
       (|isDomain| *1 (|FortranExpression| *3 *4 *5)) (|ofType| *3 *2)
       (|ofType| *4 *2) (|ofCategory| *5 (|FortranMachineTypeCategory|))))
 (|useNagFunctions| (*1 *2)
  (AND (|isDomain| *2 (|Boolean|))
       (|isDomain| *1 (|FortranExpression| *3 *4 *5))
       (|ofType| *3 (|List| (|Symbol|))) (|ofType| *4 (|List| (|Symbol|)))
       (|ofCategory| *5 (|FortranMachineTypeCategory|))))
 (|useNagFunctions| (*1 *2 *2)
  (AND (|isDomain| *2 (|Boolean|))
       (|isDomain| *1 (|FortranExpression| *3 *4 *5))
       (|ofType| *3 (|List| (|Symbol|))) (|ofType| *4 (|List| (|Symbol|)))
       (|ofCategory| *5 (|FortranMachineTypeCategory|)))))
((~= (((|Boolean|) $ $) NIL)) (|zero?| (((|Boolean|) $) NIL))
 (|variables| (((|List| (|Symbol|)) $) NIL))
 (|useNagFunctions| (((|Boolean|)) 88) (((|Boolean|) (|Boolean|)) 89))
 (|tower| (((|List| (|Kernel| $)) $) NIL)
  (((|List| (|Kernel| $)) (|List| $)) NIL))
 (|tanh| (($ $) NIL)) (|tan| (($ $) NIL))
 (|subtractIfCan| (((|Union| $ "failed") $ $) NIL))
 (|subst| (($ $ (|Equation| $)) NIL) (($ $ (|List| (|Equation| $))) NIL)
  (($ $ (|List| (|Kernel| $)) (|List| $)) NIL))
 (|sqrt| (($ $) NIL)) (|smaller?| (((|Boolean|) $ $) NIL)) (|sinh| (($ $) NIL))
 (|sin| (($ $) NIL)) (|sample| (($) NIL T CONST))
 (|rightRecip| (((|Union| $ #1="failed") $) NIL))
 (|rightPower| (($ $ (|NonNegativeInteger|)) NIL)
  (($ $ (|PositiveInteger|)) NIL))
 (|retractIfCan| (((|Union| (|Kernel| $) #2="failed") $) NIL)
  (((|Union| |#3| #2#) $) NIL) (((|Union| $ "failed") (|Expression| |#3|)) 70)
  (((|Union| $ "failed") (|Symbol|)) 95)
  (((|Union| $ "failed") (|Expression| (|Integer|))) 57
   (|has| |#3| (|RetractableTo| (|Integer|))))
  (((|Union| $ "failed") (|Fraction| (|Polynomial| (|Integer|)))) 63
   (|has| |#3| (|RetractableTo| (|Integer|))))
  (((|Union| $ "failed") (|Polynomial| (|Integer|))) 58
   (|has| |#3| (|RetractableTo| (|Integer|))))
  (((|Union| $ "failed") (|Expression| (|Float|))) 75
   (|has| |#3| (|RetractableTo| (|Float|))))
  (((|Union| $ "failed") (|Fraction| (|Polynomial| (|Float|)))) 81
   (|has| |#3| (|RetractableTo| (|Float|))))
  (((|Union| $ "failed") (|Polynomial| (|Float|))) 76
   (|has| |#3| (|RetractableTo| (|Float|)))))
 (|retract| (((|Kernel| $) $) NIL) ((|#3| $) NIL) (($ (|Expression| |#3|)) 71)
            (($ (|Symbol|)) 96)
            (($ (|Expression| (|Integer|))) 59
             (|has| |#3| (|RetractableTo| (|Integer|))))
            (($ (|Fraction| (|Polynomial| (|Integer|)))) 64
             (|has| |#3| (|RetractableTo| (|Integer|))))
            (($ (|Polynomial| (|Integer|))) 60
             (|has| |#3| (|RetractableTo| (|Integer|))))
            (($ (|Expression| (|Float|))) 77
             (|has| |#3| (|RetractableTo| (|Float|))))
            (($ (|Fraction| (|Polynomial| (|Float|)))) 82
             (|has| |#3| (|RetractableTo| (|Float|))))
            (($ (|Polynomial| (|Float|))) 78
             (|has| |#3| (|RetractableTo| (|Float|)))))
 (|recip| (((|Union| $ #1#) $) NIL)) (|pi| (($) 93)) (|paren| (($ $) NIL))
 (|opposite?| (((|Boolean|) $ $) NIL))
 (|operators| (((|List| (|BasicOperator|)) $) NIL))
 (|operator| (((|BasicOperator|) (|BasicOperator|)) NIL))
 (|one?| (((|Boolean|) $) NIL))
 (|odd?| (((|Boolean|) $) NIL (|has| $ (|RetractableTo| (|Integer|)))))
 (|minPoly|
  (((|SparseUnivariatePolynomial| $) (|Kernel| $)) NIL (|has| $ (|Ring|))))
 (|map| (($ (|Mapping| $ $) (|Kernel| $)) NIL))
 (|mainKernel| (((|Union| (|Kernel| $) "failed") $) NIL)) (|log10| (($ $) 91))
 (|log| (($ $) NIL)) (|leftRecip| (((|Union| $ #1#) $) NIL))
 (|leftPower| (($ $ (|NonNegativeInteger|)) NIL)
  (($ $ (|PositiveInteger|)) NIL))
 (|latex| (((|String|) $) NIL))
 (|kernels| (((|List| (|Kernel| $)) $) NIL)
  (((|List| (|Kernel| $)) (|List| $)) NIL))
 (|kernel| (($ (|BasicOperator|) $) 90) (($ (|BasicOperator|) (|List| $)) NIL))
 (|is?| (((|Boolean|) $ (|BasicOperator|)) NIL)
  (((|Boolean|) $ (|Symbol|)) NIL))
 (|height| (((|NonNegativeInteger|) $) NIL))
 (|hashUpdate!| (((|HashState|) (|HashState|) $) NIL))
 (|hash| (((|SingleInteger|) $) NIL))
 (|freeOf?| (((|Boolean|) $ $) NIL) (((|Boolean|) $ (|Symbol|)) NIL))
 (|exp| (($ $) NIL))
 (|even?| (((|Boolean|) $) NIL (|has| $ (|RetractableTo| (|Integer|)))))
 (|eval| (($ $ (|Kernel| $) $) NIL)
         (($ $ (|List| (|Kernel| $)) (|List| $)) NIL)
         (($ $ (|List| (|Equation| $))) NIL) (($ $ (|Equation| $)) NIL)
         (($ $ $ $) NIL) (($ $ (|List| $) (|List| $)) NIL)
         (($ $ (|List| (|Symbol|)) (|List| (|Mapping| $ $))) NIL)
         (($ $ (|List| (|Symbol|)) (|List| (|Mapping| $ (|List| $)))) NIL)
         (($ $ (|Symbol|) (|Mapping| $ (|List| $))) NIL)
         (($ $ (|Symbol|) (|Mapping| $ $)) NIL)
         (($ $ (|List| (|BasicOperator|)) (|List| (|Mapping| $ $))) NIL)
         (($ $ (|List| (|BasicOperator|)) (|List| (|Mapping| $ (|List| $))))
          NIL)
         (($ $ (|BasicOperator|) (|Mapping| $ (|List| $))) NIL)
         (($ $ (|BasicOperator|) (|Mapping| $ $)) NIL))
 (|elt| (($ (|BasicOperator|) $) NIL) (($ (|BasicOperator|) $ $) NIL)
  (($ (|BasicOperator|) $ $ $) NIL) (($ (|BasicOperator|) $ $ $ $) NIL)
  (($ (|BasicOperator|) $ $ $ $ $) NIL) (($ (|BasicOperator|) $ $ $ $ $ $) NIL)
  (($ (|BasicOperator|) $ $ $ $ $ $ $) NIL)
  (($ (|BasicOperator|) $ $ $ $ $ $ $ $) NIL)
  (($ (|BasicOperator|) $ $ $ $ $ $ $ $ $) NIL)
  (($ (|BasicOperator|) (|List| $)) NIL))
 (|distribute| (($ $) NIL) (($ $ $) NIL))
 (|differentiate|
  (($ $ (|List| (|Symbol|)) (|List| (|NonNegativeInteger|))) NIL)
  (($ $ (|Symbol|) (|NonNegativeInteger|)) NIL) (($ $ (|List| (|Symbol|))) NIL)
  (($ $ (|Symbol|)) NIL))
 (|definingPolynomial| (($ $) NIL (|has| $ (|Ring|)))) (|cosh| (($ $) NIL))
 (|cos| (($ $) NIL)) (|commutator| (($ $ $) NIL))
 (|coerce| (((|OutputForm|) $) NIL) (($ (|Kernel| $)) NIL) (($ |#3|) NIL)
           (($ (|Integer|)) NIL) (((|Expression| |#3|) $) 94))
 (|characteristic| (((|NonNegativeInteger|)) NIL)) (|box| (($ $) NIL))
 (|belong?| (((|Boolean|) (|BasicOperator|)) NIL)) (|atan| (($ $) NIL))
 (|associator| (($ $ $ $) NIL)) (|asin| (($ $) NIL))
 (|antiCommutator| (($ $ $) NIL)) (|annihilate?| (((|Boolean|) $ $) NIL))
 (|acos| (($ $) NIL)) (|abs| (($ $) NIL))
 (^ (($ $ (|NonNegativeInteger|)) NIL) (($ $ (|PositiveInteger|)) NIL))
 (|Zero| (($) 92 T CONST)) (|One| (($) 21 T CONST))
 (D (($ $ (|List| (|Symbol|)) (|List| (|NonNegativeInteger|))) NIL)
  (($ $ (|Symbol|) (|NonNegativeInteger|)) NIL) (($ $ (|List| (|Symbol|))) NIL)
  (($ $ (|Symbol|)) NIL))
 (= (((|Boolean|) $ $) NIL)) (- (($ $) NIL) (($ $ $) NIL)) (+ (($ $ $) NIL))
 (* (($ |#3| $) NIL) (($ $ |#3|) NIL) (($ (|NonNegativeInteger|) $) NIL)
    (($ (|Integer|) $) NIL) (($ $ $) NIL) (($ (|PositiveInteger|) $) NIL)))
((|HasCategory| |#3| (LIST '|RetractableTo| '(|Integer|)))
 (|HasCategory| |#3| (LIST '|RetractableTo| '(|Float|)))
 (|HasCategory| $ '(|Ring|))
 (|HasCategory| $ (LIST '|RetractableTo| '(|Integer|))))
FEXPR
(((|ExpressionSpace|) . T) ((|Algebra| |#3|) . T) ((|RetractableTo| |#3|) . T)
 ((|PartialDifferentialRing| (|Symbol|)) . T))
(((|AbelianGroup|) . T) ((|AbelianMonoid|) . T) ((|AbelianSemiGroup|) . T)
 ((|Algebra| |#3|) . T) ((|BasicType|) . T) ((|BiModule| |t#1| |t#1|) . T)
 ((|BiModule| $ $) . T) ((|CancellationAbelianMonoid|) . T)
 ((|CoercibleTo| (|OutputForm|)) . T) ((|Comparable|) . T) ((|Evalable| $) . T)
 ((|ExpressionSpace|) . T) ((|InnerEvalable| |t#1| |t#1|) . T)
 ((|InnerEvalable| (|Kernel| $) $) . T) ((|LeftModule| |t#1|) . T)
 ((|Magma|) . T) ((|MagmaWithUnit|) . T) ((|Module| |t#1|) . T)
 ((|Monoid|) . T) ((|NonAssociativeRing|) . T) ((|NonAssociativeRng|) . T)
 ((|NonAssociativeSemiRing|) . T) ((|NonAssociativeSemiRng|) . T)
 ((|PartialDifferentialRing| (|Symbol|)) . T) ((|RetractableTo| |#3|) . T)
 ((|RetractableTo| (|Kernel| $)) . T) ((|RightModule| |t#2|) . T)
 ((|Ring|) . T) ((|Rng|) . T) ((|SemiGroup|) . T) ((|SemiRing|) . T)
 ((|SemiRng|) . T) ((|SetCategory|) . T) ((|unitsKnown|) . T))
((|constructor|
  (NIL
   "A domain of expressions involving functions which can be translated into standard Fortran-77,{} with some extra extensions from the NAG Fortran Library."))
 (|useNagFunctions|
  (((|Boolean|) (|Boolean|))
   "\\spad{useNagFunctions(v)} sets the flag which controls whether NAG functions \\indented{1}{are being used for mathematical and machine constants.\\space{2}The previous} \\indented{1}{value is returned.}")
  (((|Boolean|))
   "\\spad{useNagFunctions()} indicates whether NAG functions are being used \\indented{1}{for mathematical and machine constants.}"))
 (|variables|
  (((|List| (|Symbol|)) $)
   "\\spad{variables(e)} return a list of all the variables in \\spad{e}."))
 (|pi|
  (($)
   "\\spad{\\spad{pi}(x)} represents the NAG Library function X01AAF which returns \\indented{1}{an approximation to the value of \\spad{pi}}"))
 (|tanh|
  (($ $) "\\spad{tanh(x)} represents the Fortran intrinsic function TANH"))
 (|cosh|
  (($ $) "\\spad{cosh(x)} represents the Fortran intrinsic function COSH"))
 (|sinh|
  (($ $) "\\spad{sinh(x)} represents the Fortran intrinsic function SINH"))
 (|atan|
  (($ $) "\\spad{atan(x)} represents the Fortran intrinsic function ATAN"))
 (|acos|
  (($ $) "\\spad{acos(x)} represents the Fortran intrinsic function ACOS"))
 (|asin|
  (($ $) "\\spad{asin(x)} represents the Fortran intrinsic function ASIN"))
 (|tan| (($ $) "\\spad{tan(x)} represents the Fortran intrinsic function TAN"))
 (|cos| (($ $) "\\spad{cos(x)} represents the Fortran intrinsic function COS"))
 (|sin| (($ $) "\\spad{sin(x)} represents the Fortran intrinsic function SIN"))
 (|log10|
  (($ $)
   "\\spad{log10(x)} represents the Fortran intrinsic function \\spad{LOG10}"))
 (|log| (($ $) "\\spad{log(x)} represents the Fortran intrinsic function LOG"))
 (|exp| (($ $) "\\spad{exp(x)} represents the Fortran intrinsic function EXP"))
 (|sqrt|
  (($ $) "\\spad{sqrt(x)} represents the Fortran intrinsic function SQRT"))
 (|abs| (($ $) "\\spad{abs(x)} represents the Fortran intrinsic function ABS"))
 (|coerce| (((|Expression| |#3|) $) "\\spad{coerce(x)} \\undocumented{}"))
 (|retractIfCan|
  (((|Union| $ "failed") (|Polynomial| (|Float|)))
   "\\spad{retractIfCan(e)} takes \\spad{e} and tries to transform it into a \\indented{1}{FortranExpression checking that it contains no non-Fortran} \\indented{1}{functions,{} and that it only contains the given basic symbols} \\indented{1}{and subscripted symbols which correspond to scalar and array} \\indented{1}{parameters respectively.}")
  (((|Union| $ "failed") (|Fraction| (|Polynomial| (|Float|))))
   "\\spad{retractIfCan(e)} takes \\spad{e} and tries to transform it into a \\indented{1}{FortranExpression checking that it contains no non-Fortran} \\indented{1}{functions,{} and that it only contains the given basic symbols} \\indented{1}{and subscripted symbols which correspond to scalar and array} \\indented{1}{parameters respectively.}")
  (((|Union| $ "failed") (|Expression| (|Float|)))
   "\\spad{retractIfCan(e)} takes \\spad{e} and tries to transform it into a \\indented{1}{FortranExpression checking that it contains no non-Fortran} \\indented{1}{functions,{} and that it only contains the given basic symbols} \\indented{1}{and subscripted symbols which correspond to scalar and array} \\indented{1}{parameters respectively.}")
  (((|Union| $ "failed") (|Polynomial| (|Integer|)))
   "\\spad{retractIfCan(e)} takes \\spad{e} and tries to transform it into a \\indented{1}{FortranExpression checking that it contains no non-Fortran} \\indented{1}{functions,{} and that it only contains the given basic symbols} \\indented{1}{and subscripted symbols which correspond to scalar and array} \\indented{1}{parameters respectively.}")
  (((|Union| $ "failed") (|Fraction| (|Polynomial| (|Integer|))))
   "\\spad{retractIfCan(e)} takes \\spad{e} and tries to transform it into a \\indented{1}{FortranExpression checking that it contains no non-Fortran} \\indented{1}{functions,{} and that it only contains the given basic symbols} \\indented{1}{and subscripted symbols which correspond to scalar and array} \\indented{1}{parameters respectively.}")
  (((|Union| $ "failed") (|Expression| (|Integer|)))
   "\\spad{retractIfCan(e)} takes \\spad{e} and tries to transform it into a \\indented{1}{FortranExpression checking that it contains no non-Fortran} \\indented{1}{functions,{} and that it only contains the given basic symbols} \\indented{1}{and subscripted symbols which correspond to scalar and array} \\indented{1}{parameters respectively.}")
  (((|Union| $ "failed") (|Symbol|))
   "\\spad{retractIfCan(e)} takes \\spad{e} and tries to transform it into a FortranExpression \\indented{1}{checking that it is one of the given basic symbols} \\indented{1}{or subscripted symbols which correspond to scalar and array} \\indented{1}{parameters respectively.}")
  (((|Union| $ "failed") (|Expression| |#3|))
   "\\spad{retractIfCan(e)} takes \\spad{e} and tries to transform it into a \\indented{1}{FortranExpression checking that it contains no non-Fortran} \\indented{1}{functions,{} and that it only contains the given basic symbols} \\indented{1}{and subscripted symbols which correspond to scalar and array} \\indented{1}{parameters respectively.}"))
 (|retract|
  (($ (|Polynomial| (|Float|)))
   "\\spad{retract(e)} takes \\spad{e} and transforms it into a \\indented{1}{FortranExpression checking that it contains no non-Fortran} \\indented{1}{functions,{} and that it only contains the given basic symbols} \\indented{1}{and subscripted symbols which correspond to scalar and array} \\indented{1}{parameters respectively.}")
  (($ (|Fraction| (|Polynomial| (|Float|))))
   "\\spad{retract(e)} takes \\spad{e} and transforms it into a \\indented{1}{FortranExpression checking that it contains no non-Fortran} \\indented{1}{functions,{} and that it only contains the given basic symbols} \\indented{1}{and subscripted symbols which correspond to scalar and array} \\indented{1}{parameters respectively.}")
  (($ (|Expression| (|Float|)))
   "\\spad{retract(e)} takes \\spad{e} and transforms it into a \\indented{1}{FortranExpression checking that it contains no non-Fortran} \\indented{1}{functions,{} and that it only contains the given basic symbols} \\indented{1}{and subscripted symbols which correspond to scalar and array} \\indented{1}{parameters respectively.}")
  (($ (|Polynomial| (|Integer|)))
   "\\spad{retract(e)} takes \\spad{e} and transforms it into a \\indented{1}{FortranExpression checking that it contains no non-Fortran} \\indented{1}{functions,{} and that it only contains the given basic symbols} \\indented{1}{and subscripted symbols which correspond to scalar and array} \\indented{1}{parameters respectively.}")
  (($ (|Fraction| (|Polynomial| (|Integer|))))
   "\\spad{retract(e)} takes \\spad{e} and transforms it into a \\indented{1}{FortranExpression checking that it contains no non-Fortran} \\indented{1}{functions,{} and that it only contains the given basic symbols} \\indented{1}{and subscripted symbols which correspond to scalar and array} \\indented{1}{parameters respectively.}")
  (($ (|Expression| (|Integer|)))
   "\\spad{retract(e)} takes \\spad{e} and transforms it into a \\indented{1}{FortranExpression checking that it contains no non-Fortran} \\indented{1}{functions,{} and that it only contains the given basic symbols} \\indented{1}{and subscripted symbols which correspond to scalar and array} \\indented{1}{parameters respectively.}")
  (($ (|Symbol|))
   "\\spad{retract(e)} takes \\spad{e} and transforms it into a FortranExpression \\indented{1}{checking that it is one of the given basic symbols} \\indented{1}{or subscripted symbols which correspond to scalar and array} \\indented{1}{parameters respectively.}")
  (($ (|Expression| |#3|))
   "\\spad{retract(e)} takes \\spad{e} and transforms it into a \\indented{1}{FortranExpression checking that it contains no non-Fortran} \\indented{1}{functions,{} and that it only contains the given basic symbols} \\indented{1}{and subscripted symbols which correspond to scalar and array} \\indented{1}{parameters respectively.}")))
(("documentation" 0 21717) ("ancestors" 0 20819) ("parents" 0 20693)
 ("abbreviation" 0 20687) ("predicates" 0 20485) ("superDomain" 0 NIL)
 ("operationAlist" 0 14417) ("modemaps" 0 5040) ("sourceFile" 0 5003)
 ("constructorCategory" 0 2680) ("constructorModemap" 0 89)
 ("constructorKind" 0 80) ("constructorForm" 0 20))