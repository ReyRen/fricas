12982               (|MatrixCategory&| S R |Row| |Col|)
|domain|
(((|MatrixCategory&| |#1| |#2| |#3| |#4|)
  (CATEGORY |domain|
   (SIGNATURE |kronecker_prod1|
    ((|Void|) |#1| (|Integer|) (|List| (|List| (|NonNegativeInteger|)))
     (|List| |#1|) (|NonNegativeInteger|) (|NonNegativeInteger|)
     (|Union| |#2| "one")))
   (SIGNATURE ^ (|#1| |#1| (|Integer|))) (SIGNATURE |Pfaffian| (|#2| |#1|))
   (SIGNATURE |columnSpace| ((|List| |#4|) |#1|))
   (SIGNATURE / (|#1| |#1| |#2|))
   (SIGNATURE |exquo| ((|Union| |#1| "failed") |#1| |#2|))
   (SIGNATURE ^ (|#1| |#1| (|NonNegativeInteger|)))
   (SIGNATURE |positivePower| (|#1| |#1| (|Integer|)))
   (SIGNATURE * (|#3| |#3| |#1|)) (SIGNATURE * (|#4| |#1| |#4|))
   (SIGNATURE * (|#1| |#1| |#2|)) (SIGNATURE * (|#1| |#2| |#1|))
   (SIGNATURE * (|#1| |#1| |#1|)) (SIGNATURE * (|#1| (|Integer|) |#1|))
   (SIGNATURE - (|#1| |#1|)) (SIGNATURE - (|#1| |#1| |#1|))
   (SIGNATURE + (|#1| |#1| |#1|)) (SIGNATURE |transpose| (|#1| |#3|))
   (SIGNATURE |coerce| (|#1| |#4|))
   (SIGNATURE |kroneckerSum| (|#1| (|List| |#1|)))
   (SIGNATURE |kroneckerSum| (|#1| |#1| |#1|))
   (SIGNATURE |kroneckerProduct| (|#1| (|List| |#1|)))
   (SIGNATURE |kroneckerProduct| (|#1| |#1| |#1|))
   (SIGNATURE |diagonalMatrix| (|#1| (|List| |#1|)))
   (SIGNATURE |diagonalMatrix| (|#1| (|List| |#2|)))
   (SIGNATURE |scalarMatrix| (|#1| (|NonNegativeInteger|) |#2|))
   (SIGNATURE |matrix|
    (|#1| (|NonNegativeInteger|) (|NonNegativeInteger|)
     (|Mapping| |#2| (|Integer|) (|Integer|))))
   (SIGNATURE |matrix| (|#1| (|List| (|List| |#2|))))
   (SIGNATURE |zero| (|#1| (|NonNegativeInteger|) (|NonNegativeInteger|)))
   (SIGNATURE |zero?| ((|Boolean|) |#1|))
   (SIGNATURE |antisymmetric?| ((|Boolean|) |#1|))
   (SIGNATURE |symmetric?| ((|Boolean|) |#1|))
   (SIGNATURE |diagonal?| ((|Boolean|) |#1|))
   (SIGNATURE |square?| ((|Boolean|) |#1|))
   (SIGNATURE |coerce| ((|OutputForm|) |#1|))
   (SIGNATURE |transpose| (|#1| |#1|)))
  (|MatrixCategory| |#2| |#3| |#4|) (|AbelianMonoid|)
  (|FiniteLinearAggregate| |#2|) (|FiniteLinearAggregate| |#2|))
 (T |MatrixCategory&|))
(CATEGORY |domain|
 (SIGNATURE |kronecker_prod1|
  ((|Void|) |#1| (|Integer|) (|List| (|List| (|NonNegativeInteger|)))
   (|List| |#1|) (|NonNegativeInteger|) (|NonNegativeInteger|)
   (|Union| |#2| "one")))
 (SIGNATURE ^ (|#1| |#1| (|Integer|))) (SIGNATURE |Pfaffian| (|#2| |#1|))
 (SIGNATURE |columnSpace| ((|List| |#4|) |#1|)) (SIGNATURE / (|#1| |#1| |#2|))
 (SIGNATURE |exquo| ((|Union| |#1| "failed") |#1| |#2|))
 (SIGNATURE ^ (|#1| |#1| (|NonNegativeInteger|)))
 (SIGNATURE |positivePower| (|#1| |#1| (|Integer|)))
 (SIGNATURE * (|#3| |#3| |#1|)) (SIGNATURE * (|#4| |#1| |#4|))
 (SIGNATURE * (|#1| |#1| |#2|)) (SIGNATURE * (|#1| |#2| |#1|))
 (SIGNATURE * (|#1| |#1| |#1|)) (SIGNATURE * (|#1| (|Integer|) |#1|))
 (SIGNATURE - (|#1| |#1|)) (SIGNATURE - (|#1| |#1| |#1|))
 (SIGNATURE + (|#1| |#1| |#1|)) (SIGNATURE |transpose| (|#1| |#3|))
 (SIGNATURE |coerce| (|#1| |#4|))
 (SIGNATURE |kroneckerSum| (|#1| (|List| |#1|)))
 (SIGNATURE |kroneckerSum| (|#1| |#1| |#1|))
 (SIGNATURE |kroneckerProduct| (|#1| (|List| |#1|)))
 (SIGNATURE |kroneckerProduct| (|#1| |#1| |#1|))
 (SIGNATURE |diagonalMatrix| (|#1| (|List| |#1|)))
 (SIGNATURE |diagonalMatrix| (|#1| (|List| |#2|)))
 (SIGNATURE |scalarMatrix| (|#1| (|NonNegativeInteger|) |#2|))
 (SIGNATURE |matrix|
  (|#1| (|NonNegativeInteger|) (|NonNegativeInteger|)
   (|Mapping| |#2| (|Integer|) (|Integer|))))
 (SIGNATURE |matrix| (|#1| (|List| (|List| |#2|))))
 (SIGNATURE |zero| (|#1| (|NonNegativeInteger|) (|NonNegativeInteger|)))
 (SIGNATURE |zero?| ((|Boolean|) |#1|))
 (SIGNATURE |antisymmetric?| ((|Boolean|) |#1|))
 (SIGNATURE |symmetric?| ((|Boolean|) |#1|))
 (SIGNATURE |diagonal?| ((|Boolean|) |#1|))
 (SIGNATURE |square?| ((|Boolean|) |#1|))
 (SIGNATURE |coerce| ((|OutputForm|) |#1|)) (SIGNATURE |transpose| (|#1| |#1|)))
"/git/fricas/src/algebra/MATCAT.spad"
((|zero?| (((|Boolean|) $) 30))
 (|zero| (($ (|NonNegativeInteger|) (|NonNegativeInteger|)) 32))
 (|transpose| (($ $) NIL) (($ |#3|) 76)) (|symmetric?| (((|Boolean|) $) 26))
 (|square?| (((|Boolean|) $) 14))
 (|scalarMatrix| (($ (|NonNegativeInteger|) |#2|) 40))
 (|positivePower| (($ $ (|Integer|)) 90))
 (|matrix| (($ (|List| (|List| |#2|))) 36)
  (($ (|NonNegativeInteger|) (|NonNegativeInteger|)
    (|Mapping| |#2| (|Integer|) (|Integer|)))
   38))
 (|kronecker_prod1|
  (((|Void|) $ (|Integer|) (|List| (|List| (|NonNegativeInteger|))) (|List| $)
    (|NonNegativeInteger|) (|NonNegativeInteger|) (|Union| |#2| "one"))
   56))
 (|kroneckerSum| (($ $ $) 65) (($ (|List| $)) 63))
 (|kroneckerProduct| (($ $ $) 60) (($ (|List| $)) 58))
 (|exquo| (((|Union| $ "failed") $ |#2|) 122))
 (|diagonalMatrix| (($ (|List| |#2|)) 42) (($ (|List| $)) 66))
 (|diagonal?| (((|Boolean|) $) 24)) (|columnSpace| (((|List| |#4|) $) 106))
 (|coerce| (((|OutputForm|) $) NIL) (($ |#4|) 71))
 (|antisymmetric?| (((|Boolean|) $) 28))
 (^ (($ $ (|NonNegativeInteger|)) 92) (($ $ (|Integer|)) 127))
 (|Pfaffian| ((|#2| $) 119)) (/ (($ $ |#2|) 124)) (- (($ $ $) 79) (($ $) 82))
 (+ (($ $ $) 77))
 (* (($ (|Integer|) $) 84) (($ $ $) 87) (($ |#2| $) 85) (($ $ |#2|) 86)
    ((|#4| $ |#4|) 96) ((|#3| |#3| $) 100)))
((|HasCategory| |#2| '(|CommutativeRing|))
 (|HasCategory| |#2| '(|EuclideanDomain|)) (|HasCategory| |#2| '(|Field|))
 (|HasCategory| |#2| '(|IntegralDomain|)) (|HasCategory| |#2| '(|Monoid|))
 (|HasCategory| |#2| '(|SemiRng|)) (|HasCategory| |#2| '(|AbelianGroup|)))
MATCAT-
((|constructor|
  (NIL
   "\\spadtype{MatrixCategory} is a general matrix category which allows different representations and indexing schemes. Rows and columns may be extracted with rows returned as objects of type Row and colums returned as objects of type Col. A domain belonging to this category will be shallowly mutable. The index of the 'first' row may be obtained by calling the function \\spadfun{minRowIndex}. The index of the 'first' column may be obtained by calling the function \\spadfun{minColIndex}. The index of the first element of a Row is the same as the index of the first column in a matrix and vice versa."))
 (|kronecker_prod1|
  (((|Void|) $ (|Integer|) (|List| (|List| (|NonNegativeInteger|))) (|List| $)
    (|NonNegativeInteger|) (|NonNegativeInteger|) (|Union| |#2| "one"))
   "Should be local but conditional."))
 (|inverse|
  (((|Union| $ "failed") $)
   "\\spad{inverse(m)} returns the inverse of the matrix \\spad{m}. If the matrix is not invertible,{} \"failed\" is returned. Error: if the matrix is not square."))
 (|Pfaffian|
  ((|#2| $)
   "\\spad{Pfaffian(m)} returns the Pfaffian of the matrix \\spad{m}. Error: if the matrix is not antisymmetric."))
 (|minordet|
  ((|#2| $)
   "\\spad{minordet(m)} computes the determinant of the matrix \\spad{m} using minors. Error: if the matrix is not square."))
 (|determinant|
  ((|#2| $)
   "\\spad{determinant(m)} returns the determinant of the matrix \\spad{m}. Error: if the matrix is not square."))
 (|nullSpace|
  (((|List| |#4|) $)
   "\\spad{nullSpace(m)} returns a basis for the null space of the matrix \\spad{m}."))
 (|nullity|
  (((|NonNegativeInteger|) $)
   "\\spad{nullity(m)} returns the nullity of the matrix \\spad{m}. This is the dimension of the null space of the matrix \\spad{m}."))
 (|rank|
  (((|NonNegativeInteger|) $)
   "\\spad{rank(m)} returns the rank of the matrix \\spad{m}."))
 (|columnSpace|
  (((|List| |#4|) $)
   "\\spad{columnSpace(m)} returns a sublist of columns of the matrix \\spad{m} forming a basis of its column space"))
 (|rowEchelon|
  (($ $)
   "\\spad{rowEchelon(m)} returns the row echelon form of the matrix \\spad{m}."))
 (/
  (($ $ |#2|)
   "\\spad{m/r} divides the elements of \\spad{m} by \\spad{r}. Error: if \\spad{r = 0}."))
 (|exquo|
  (((|Union| $ "failed") $ |#2|)
   "\\spad{exquo(m,{} r)} computes the exact quotient of the elements of \\spad{m} by \\spad{r},{} returning \\spad{\"failed\"} if this is not possible."))
 (^
  (($ $ (|Integer|))
   "\\spad{m^n} computes an integral power of the matrix \\spad{m}. Error: if matrix is not square or if the matrix is square but not invertible.")
  (($ $ (|NonNegativeInteger|))
   "\\spad{x ^ n} computes a non-negative integral power of the matrix \\spad{x}. Error: if the matrix is not square."))
 (|positivePower|
  (($ $ (|Integer|))
   "\\spad{positivePower(x,{} n)} computes a positive integral power of the matrix \\spad{x}. Error: if the matrix is not square."))
 (*
  ((|#3| |#3| $)
   "\\spad{r * x} is the product of the row vector \\spad{r} and the matrix \\spad{x}. Error: if the dimensions are incompatible.")
  ((|#4| $ |#4|)
   "\\spad{x * c} is the product of the matrix \\spad{x} and the column vector \\spad{c}. Error: if the dimensions are incompatible.")
  (($ $ |#2|)
   "\\spad{x * r} is the right scalar multiple of the scalar \\spad{r} and the matrix \\spad{x}.")
  (($ |#2| $)
   "\\spad{r*x} is the left scalar multiple of the scalar \\spad{r} and the matrix \\spad{x}.")
  (($ $ $)
   "\\spad{x * y} is the product of the matrices \\spad{x} and \\spad{y}. Error: if the dimensions are incompatible.")
  (($ (|Integer|) $) "\\spad{n * x} is an integer multiple."))
 (- (($ $) "\\spad{-x} returns the negative of the matrix \\spad{x}.")
    (($ $ $)
     "\\spad{x - y} is the difference of the matrices \\spad{x} and \\spad{y}. Error: if the dimensions are incompatible."))
 (+
  (($ $ $)
   "\\spad{x + y} is the sum of the matrices \\spad{x} and \\spad{y}. Error: if the dimensions are incompatible."))
 (|transpose|
  (($ |#3|)
   "\\spad{transpose(r)} converts the row \\spad{r} to a row matrix."))
 (|coerce|
  (($ |#4|)
   "\\spad{coerce(col)} converts the column \\spad{col} to a column matrix."))
 (|kroneckerSum|
  (($ (|List| $))
   "\\spad{kroneckerSum([a1,{} a2,{} ...,{} an])} calculates the Kronecker sum of the matrices \\spad{a1},{} \\spad{a2},{} ...,{} an.")
  (($ $ $)
   "\\spad{kroneckerSum(a,{} b)} calculates the Kronecker sum of the matrices a and \\spad{b}."))
 (|kroneckerProduct|
  (($ (|List| $))
   "\\spad{kroneckerProduct([a1,{} a2,{} ...,{} an])} calculates the Kronecker product of the matrices \\spad{a1},{} \\spad{a2},{} ...,{} an. This corresponds to tensor product of corresponding operators.")
  (($ $ $)
   "\\spad{kroneckerProduct(a,{} b)} calculates the Kronecker product of the matrices a and \\spad{b}. This corresponds to tensor product of corresponding operators."))
 (|diagonalMatrix|
  (($ (|List| $))
   "\\spad{diagonalMatrix([m1,{} ...,{} mk])} creates a block diagonal matrix \\spad{M} with block matrices {\\em m1},{} ...,{} {\\em mk} down the diagonal,{} with 0 block matrices elsewhere. More precisly: if \\spad{\\spad{ri} := nrows \\spad{mi}},{} \\spad{\\spad{ci} := ncols \\spad{mi}},{} then \\spad{m} is an (\\spad{r1+}..\\spad{+rk}) by (\\spad{c1+}..\\spad{+ck}) - matrix with entries \\spad{m.i.j = ml.(i-r1-..-r(l-1)).(j-n1-..-n(l-1))},{} if \\spad{(r1+..+r(l-1)) < i <= r1+..+rl} and \\spad{(c1+..+c(l-1)) < i <= c1+..+cl},{} \\spad{m.i.j} = 0 otherwise.")
  (($ (|List| |#2|))
   "\\spad{diagonalMatrix(l)} returns a diagonal matrix with the elements of \\spad{l} on the diagonal."))
 (|scalarMatrix|
  (($ (|NonNegativeInteger|) |#2|)
   "\\spad{scalarMatrix(n,{} r)} returns an \\spad{n}-by-\\spad{n} matrix with \\spad{r}\\spad{'s} on the diagonal and zeroes elsewhere."))
 (|matrix|
  (($ (|NonNegativeInteger|) (|NonNegativeInteger|)
    (|Mapping| |#2| (|Integer|) (|Integer|)))
   "\\spad{matrix(n,{}m,{}f)} constructs an \\spad{n * m} matrix with the \\spad{(i,{}j)} entry equal to \\spad{f(i,{}j)}.")
  (($ (|List| (|List| |#2|)))
   "\\spad{matrix(l)} converts the list of lists \\spad{l} to a matrix,{} where the list of lists is viewed as a list of the rows of the matrix."))
 (|zero|
  (($ (|NonNegativeInteger|) (|NonNegativeInteger|))
   "\\spad{zero(m,{} n)} returns an \\spad{m}-by-\\spad{n} zero matrix."))
 (|zero?|
  (((|Boolean|) $)
   "\\spad{zero?(m)} returns \\spad{true} if \\spad{m} is a zero matrix and \\spad{false} otherwise."))
 (|antisymmetric?|
  (((|Boolean|) $)
   "\\spad{antisymmetric?(m)} returns \\spad{true} if the matrix \\spad{m} is square and antisymmetric (\\spadignore{i.e.} \\spad{m[i,{} j] = -m[j,{} i]} for all \\spad{i} and \\spad{j}) and \\spad{false} otherwise."))
 (|symmetric?|
  (((|Boolean|) $)
   "\\spad{symmetric?(m)} returns \\spad{true} if the matrix \\spad{m} is square and symmetric (\\spadignore{i.e.} \\spad{m[i,{} j] = m[j,{} i]} for all \\spad{i} and \\spad{j}) and \\spad{false} otherwise."))
 (|diagonal?|
  (((|Boolean|) $)
   "\\spad{diagonal?(m)} returns \\spad{true} if the matrix \\spad{m} is square and diagonal (\\spadignore{i.e.} all entries of \\spad{m} not on the diagonal are zero) and \\spad{false} otherwise."))
 (|square?|
  (((|Boolean|) $)
   "\\spad{square?(m)} returns \\spad{true} if \\spad{m} is a square matrix (\\spadignore{i.e.} if \\spad{m} has the same number of rows as columns) and \\spad{false} otherwise.")))
(("documentation" 0 5501) ("ancestors" 0 NIL) ("parents" 0 NIL)
 ("abbreviation" 0 5493) ("predicates" 0 5225) ("superDomain" 0 NIL)
 ("operationAlist" 0 3932) ("modemaps" 0 NIL) ("sourceFile" 0 3894)
 ("constructorCategory" 0 2109) ("constructorModemap" 0 65)
 ("constructorKind" 0 56) ("constructorForm" 0 20))