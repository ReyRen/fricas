)abbrev package DRAW TopLevelDrawFunctions
++ Author: Clifton J. Williamson
++ Date Created: 23 January 1990
++ Basic Operations: draw
++ Related Constructors:
++ Also See:
++ AMS Classifications:
++ Keywords:
++ References:
++ Description: TopLevelDrawFunctions provides top level functions for
++ drawing graphics of expressions.
TopLevelDrawFunctions(Ex : Join(ConvertibleTo InputForm, SetCategory)):
 Exports == Implementation where
  B    ==> Boolean
  BIND ==> SegmentBinding Float
  L    ==> List
  SF   ==> DoubleFloat
  DROP ==> DrawOption

  PPC  ==> ParametricPlaneCurve Ex
  PPCF ==> ParametricPlaneCurve(SF -> SF)
  PSC  ==> ParametricSpaceCurve Ex
  PSCF ==> ParametricSpaceCurve(SF -> SF)
  PSF  ==> ParametricSurface Ex
  PSFF ==> ParametricSurface((SF, SF) -> SF)
  SPACE3 ==> ThreeSpace(SF)
  VIEW2 ==> TwoDimensionalViewport
  VIEW3 ==> ThreeDimensionalViewport

  Exports ==> with

--% Two Dimensional Function Plots

    draw : (Ex, BIND, L DROP) -> VIEW2
      ++ draw(f(x), x = a..b, l) draws the graph of \spad{y = f(x)} as x
      ++ ranges from \spad{min(a, b)} to \spad{max(a, b)}; \spad{f(x)} is the
      ++ default title, and the options contained in the list l of
      ++ the domain \spad{DrawOption} are applied.
    draw : (Ex, BIND) -> VIEW2
      ++ draw(f(x), x = a..b) draws the graph of \spad{y = f(x)} as x
      ++ ranges from \spad{min(a, b)} to \spad{max(a, b)}; \spad{f(x)} appears
      ++ in the title bar.
    makeObject : (Ex, BIND, L DROP) -> GraphImage
      ++ makeObject(f(x), x = a..b, l) creates the graph of \spad{y = f(x)} as x
      ++ ranges from \spad{min(a, b)} to \spad{max(a, b)}; the options
      ++ contained in the list l of the domain \spad{DrawOption} are applied.

--% Parametric Plane Curves

    draw : (PPC, BIND, L DROP) -> VIEW2
      ++ draw(curve(f(t), g(t)), t = a..b, l) draws the graph of the parametric
      ++ curve \spad{x = f(t), y = g(t)} as t ranges from \spad{min(a, b)} to
      ++ \spad{max(a, b)}; \spad{(f(t), g(t))} is the default title, and the
      ++ options contained in the list l of the domain \spad{DrawOption}
      ++ are applied.
    draw : (PPC, BIND) -> VIEW2
      ++ draw(curve(f(t), g(t)), t = a..b) draws the graph of the parametric
      ++ curve \spad{x = f(t), y = g(t)} as t ranges from \spad{min(a, b)} to
      ++ \spad{max(a, b)}; \spad{(f(t), g(t))} appears in the title bar.
    makeObject : (PPC, BIND, L DROP) -> GraphImage
      ++ makeObject(curve(f(t), g(t)), t = a..b, l) creates the graph of
      ++ the parametric curve \spad{x = f(t), y = g(t)} as t ranges
      ++ from \spad{min(a, b)} to \spad{max(a, b)}; the options
      ++ contained in the list l of the domain \spad{DrawOption}
      ++ are applied.

--% Parametric Space Curves

    draw : (PSC, BIND, L DROP) -> VIEW3
      ++ draw(curve(f(t), g(t), h(t)), t = a..b, l) draws the graph of the
      ++ parametric curve \spad{x = f(t)}, \spad{y = g(t)}, \spad{z = h(t)}
      ++ as t ranges from \spad{min(a, b)} to \spad{max(a, b)}; \spad{h(t)}
      ++ is the default title, and the options contained in the list l of
      ++ the domain \spad{DrawOption} are applied.
    draw : (PSC, BIND) -> VIEW3
      ++ draw(curve(f(t), g(t), h(t)), t = a..b) draws the graph of the parametric
      ++ curve \spad{x = f(t)}, \spad{y = g(t)}, \spad{z = h(t)} as t ranges
      ++ from \spad{min(a, b)} to \spad{max(a, b)}; \spad{h(t)} is the default
      ++ title.
    makeObject : (PSC, BIND, L DROP) -> SPACE3
      ++ makeObject(curve(f(t), g(t), h(t)), t = a..b, l) returns a space of
      ++ the domain \spadtype{ThreeSpace} which contains the graph of the
      ++ parametric curve \spad{x = f(t)}, \spad{y = g(t)}, \spad{z = h(t)}
      ++ as t ranges from \spad{min(a, b)} to \spad{max(a, b)}; \spad{h(t)}
      ++ is the default title, and the options contained in the list l of
      ++ the domain \spad{DrawOption} are applied.
    makeObject : (PSC, BIND) -> SPACE3
      ++ makeObject(curve(f(t), g(t), h(t)), t = a..b) returns a space of the
      ++ domain \spadtype{ThreeSpace} which contains the graph of the
      ++ parametric curve \spad{x = f(t)}, \spad{y = g(t)}, \spad{z = h(t)}
      ++ as t ranges from \spad{min(a, b)} to \spad{max(a, b)}; \spad{h(t)} is
      ++ the default title.

--% Three Dimensional Function Plots

    draw : (Ex, BIND, BIND, L DROP) -> VIEW3
      ++ draw(f(x, y), x = a..b, y = c..d, l) draws the graph of \spad{z = f(x, y)}
      ++ as x ranges from \spad{min(a, b)} to \spad{max(a, b)} and y ranges from
      ++ \spad{min(c, d)} to \spad{max(c, d)}; \spad{f(x, y)} is the default
      ++ title, and the options contained in the list l of the domain
      ++ \spad{DrawOption} are applied.
    draw : (Ex, BIND, BIND) -> VIEW3
      ++ draw(f(x, y), x = a..b, y = c..d) draws the graph of \spad{z = f(x, y)}
      ++ as x ranges from \spad{min(a, b)} to \spad{max(a, b)} and y ranges from
      ++ \spad{min(c, d)} to \spad{max(c, d)}; \spad{f(x, y)} appears in the title bar.
    makeObject : (Ex, BIND, BIND, L DROP) -> SPACE3
      ++ makeObject(f(x, y), x = a..b, y = c..d, l) returns a space of the
      ++ domain \spadtype{ThreeSpace} which contains the graph of
      ++ \spad{z = f(x, y)} as x ranges from \spad{min(a, b)} to \spad{max(a, b)}
      ++ and y ranges from \spad{min(c, d)} to \spad{max(c, d)}; \spad{f(x, y)}
      ++ is the default title, and the options contained in the list l of the
      ++ domain \spad{DrawOption} are applied.
    makeObject : (Ex, BIND, BIND) -> SPACE3
      ++ makeObject(f(x, y), x = a..b, y = c..d) returns a space of the domain
      ++ \spadtype{ThreeSpace} which contains the graph of \spad{z = f(x, y)}
      ++ as x ranges from \spad{min(a, b)} to \spad{max(a, b)} and y ranges from
      ++ \spad{min(c, d)} to \spad{max(c, d)}; \spad{f(x, y)} appears as the
      ++ default title.

--% Parametric Surfaces

    draw : (PSF, BIND, BIND, L DROP) -> VIEW3
      ++ draw(surface(f(u, v), g(u, v), h(u, v)), u = a..b, v = c..d, l) draws the
      ++ graph of the parametric surface \spad{x = f(u, v)}, \spad{y = g(u, v)},
      ++ \spad{z = h(u, v)} as u ranges from \spad{min(a, b)} to \spad{max(a, b)}
      ++ and v ranges from \spad{min(c, d)} to \spad{max(c, d)}; \spad{h(t)}
      ++ is the default title, and the options contained in the list l of
      ++ the domain \spad{DrawOption} are applied.
    draw : (PSF, BIND, BIND) -> VIEW3
      ++ draw(surface(f(u, v), g(u, v), h(u, v)), u = a..b, v = c..d) draws the
      ++ graph of the parametric surface \spad{x = f(u, v)}, \spad{y = g(u, v)},
      ++ \spad{z = h(u, v)} as u ranges from \spad{min(a, b)} to \spad{max(a, b)}
      ++ and v ranges from \spad{min(c, d)} to \spad{max(c, d)}; \spad{h(t)} is
      ++ the default title.
    makeObject : (PSF, BIND, BIND, L DROP) -> SPACE3
      ++ makeObject(surface(f(u, v), g(u, v), h(u, v)), u = a..b, v = c..d, l) returns
      ++ a space of the domain \spadtype{ThreeSpace} which contains the graph
      ++ of the parametric surface \spad{x = f(u, v)}, \spad{y = g(u, v)},
      ++ \spad{z = h(u, v)} as u ranges from \spad{min(a, b)} to \spad{max(a, b)}
      ++ and v ranges from \spad{min(c, d)} to \spad{max(c, d)}; \spad{h(t)} is
      ++ the default title, and the options contained in the list l of
      ++ the domain \spad{DrawOption} are applied.
    makeObject : (PSF, BIND, BIND) -> SPACE3
      ++ makeObject(surface(f(u, v), g(u, v), h(u, v)), u = a..b, v = c..d) returns
      ++ a space of the domain \spadtype{ThreeSpace} which contains the
      ++ graph of the parametric surface \spad{x = f(u, v)}, \spad{y = g(u, v)},
      ++ \spad{z = h(u, v)} as u ranges from \spad{min(a, b)} to \spad{max(a, b)}
      ++ and v ranges from \spad{min(c, d)} to \spad{max(c, d)}; \spad{h(t)} is
      ++ the default title.

  Implementation ==> add
    import from TopLevelDrawFunctionsForCompiledFunctions
    import from MakeFloatCompiledFunction(Ex)
    import from ParametricPlaneCurve(SF -> SF)
    import from ParametricSpaceCurve(SF -> SF)
    import from ParametricSurface((SF, SF) -> SF)
    import from ThreeSpace(SF)
    import from Integer

------------------------------------------------------------------------
--                     2D - draw's  (given by formula)
------------------------------------------------------------------------

--% Two Dimensional Function Plots

    makeObject(f : Ex, bind : BIND, l : L DROP) ==
        -- use DRAWCFUN
        makeObject(makeFloatFunction(f, variable bind), segment bind, l)

    maybe_add_title0(f : Ex, l : L DROP, s0 : String) : L DROP ==
        option?(l, 'title) => l
        s : String := unparse(convert(f))$InputForm
        sayLength(s)$DisplayPackage > 50 => concat(title s0, l)
        concat(title s, l)

    maybe_add_title2D(f : Ex, l : L DROP) : L DROP ==
        maybe_add_title0(f, l, "FriCAS2D")

    maybe_add_title3D(f : Ex, l : L DROP) : L DROP ==
        maybe_add_title0(f, l, "FriCAS3D")

    draw(f : Ex, bind : BIND, l : L DROP) ==
        -- create title if necessary
        l := maybe_add_title2D(f, l)
        g := makeObject(f, bind, l)
        makeViewport2D(g, l)

    draw(f : Ex, bind : BIND) == draw(f, bind, [])

--% Parametric Plane Curves

    makeObject(ppc : PPC, bind : BIND, l : L DROP) ==
        f := coordinate(ppc, 1); g := coordinate(ppc, 2)
        -- create curve with functions as coordinates
        curve : PPCF := curve(makeFloatFunction(f, variable bind), _
                            makeFloatFunction(g, variable bind))$PPCF
        -- use DRAWCFUN
        makeObject(curve, segment bind, l)

    draw(ppc : PPC, bind : BIND, l : L DROP) ==
        f := coordinate(ppc, 1)
        l := maybe_add_title2D(f, l)
        g := makeObject(ppc, bind, l)
        makeViewport2D(g, l)

    draw(ppc : PPC, bind : BIND) == draw(ppc, bind, [])

------------------------------------------------------------------------
--                     3D - Curves  (given by formulas)
------------------------------------------------------------------------

    makeObject(psc : PSC, tBind : BIND, l : L DROP) ==
      -- obtain dependent variable and coordinate functions
      t := variable tBind; tSeg := segment tBind
      f := coordinate(psc, 1); g := coordinate(psc, 2); h := coordinate(psc, 3)
      l := maybe_add_title3D(f, l)
      -- create curve with functions as coordinates
      curve : PSCF := curve(makeFloatFunction(f, t), _
                            makeFloatFunction(g, t), _
                            makeFloatFunction(h, t))
      -- call 'draw'
      makeObject(curve, tSeg, l)

    makeObject(psc : PSC, tBind : BIND) ==
      makeObject(psc, tBind, [])

    draw(psc : PSC, tBind : BIND, l : L DROP) ==
      -- obtain dependent variable and coordinate functions
      t := variable tBind; tSeg := segment tBind
      f := coordinate(psc, 1); g := coordinate(psc, 2); h := coordinate(psc, 3)
      l := maybe_add_title3D(f, l)
      -- create curve with functions as coordinates
      curve : PSCF := curve(makeFloatFunction(f, t), _
                            makeFloatFunction(g, t), _
                            makeFloatFunction(h, t))
      -- call 'draw'
      draw(curve, tSeg, l)

    draw(psc : PSC, tBind : BIND) ==
      draw(psc, tBind, [])

------------------------------------------------------------------------
--                     3D - Surfaces  (given by formulas)
------------------------------------------------------------------------

--% Three Dimensional Function Plots

    makeObject(f : Ex, xBind : BIND, yBind : BIND, l : L DROP) ==
      l := maybe_add_title3D(f, l)
      -- obtain dependent variables and their ranges
      x := variable xBind; xSeg := segment xBind
      y := variable yBind; ySeg := segment yBind
      -- call 'draw'
      makeObject(makeFloatFunction(f, x, y), xSeg, ySeg, l)

    makeObject(f : Ex, xBind : BIND, yBind : BIND) ==
      makeObject(f, xBind, yBind, [])

    draw(f : Ex, xBind : BIND, yBind : BIND, l : L DROP) ==
      l := maybe_add_title3D(f, l)
      -- obtain dependent variables and their ranges
      x := variable xBind; xSeg := segment xBind
      y := variable yBind; ySeg := segment yBind
      -- call 'draw'
      draw(makeFloatFunction(f, x, y), xSeg, ySeg, l)

    draw(f : Ex, xBind : BIND, yBind : BIND) ==
      draw(f, xBind, yBind, [])

--% parametric surface

    makeObject(s : PSF, uBind : BIND, vBind : BIND, l : L DROP) ==
      f := coordinate(s, 1); g := coordinate(s, 2); h := coordinate(s, 3)
      l := maybe_add_title3D(f, l)
      u := variable uBind; uSeg := segment uBind
      v := variable vBind; vSeg := segment vBind
      surf : PSFF := surface(makeFloatFunction(f, u, v), _
                             makeFloatFunction(g, u, v), _
                             makeFloatFunction(h, u, v))
      makeObject(surf, uSeg, vSeg, l)

    makeObject(s : PSF, uBind : BIND, vBind : BIND) ==
      makeObject(s, uBind, vBind, [])

    draw(s : PSF, uBind : BIND, vBind : BIND, l : L DROP) ==
      f := coordinate(s, 1); g := coordinate(s, 2); h := coordinate(s, 3)
      l := maybe_add_title3D(f, l)
      -- obtain dependent variables and their ranges
      u := variable uBind; uSeg := segment uBind
      v := variable vBind; vSeg := segment vBind
      -- create surface with functions as coordinates
      surf : PSFF := surface(makeFloatFunction(f, u, v), _
                             makeFloatFunction(g, u, v), _
                             makeFloatFunction(h, u, v))
      -- call 'draw'
      draw(surf, uSeg, vSeg, l)

    draw(s : PSF, uBind : BIND, vBind : BIND) ==
      draw(s, uBind, vBind, [])

