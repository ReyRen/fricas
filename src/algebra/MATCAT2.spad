)abbrev package MATCAT2 MatrixCategoryFunctions2
++ Author: Clifton J. Williamson
++ Date Created: 21 November 1989
++ Basic Operations:
++ Related Domains: IndexedMatrix(R, minRow, minCol), Matrix(R),
++    RectangularMatrix(n, m, R), SquareMatrix(n, R)
++ Also See:
++ AMS Classifications:
++ Keywords:
++ Keywords: matrix, map, reduce
++ Examples:
++ References:
++ Description:
++   \spadtype{MatrixCategoryFunctions2} provides functions between two matrix
++   domains.  The functions provided are \spadfun{map} and \spadfun{reduce}.
MatrixCategoryFunctions2(R1, Row1, Col1, M1, R2, Row2, Col2, M2) : _
         Exports == Implementation where
  R1   : Join(SemiRng, AbelianMonoid)
  Row1 : FiniteLinearAggregate R1
  Col1 : FiniteLinearAggregate R1
  M1   : MatrixCategory(R1, Row1, Col1)
  R2   : Join(SemiRng, AbelianMonoid)
  Row2 : FiniteLinearAggregate R2
  Col2 : FiniteLinearAggregate R2
  M2   : MatrixCategory(R2, Row2, Col2)

  Exports ==> with
    map : (R1 -> R2, M1) -> M2
      ++ \spad{map(f, m)} applies the function f to the elements
      ++ of the matrix m.
    map : (R1 -> Union(R2,"failed"),M1) -> Union(M2,"failed")
      ++ \spad{map(f, m)} applies the function f to the elements
      ++ of the matrix m.
    reduce : ((R1, R2) -> R2, M1, R2) -> R2
      ++ \spad{reduce(f, m, r)} traverses m row by row passing m(i, j)
      ++ as first argument to f.  The second argument to f works as
      ++ accumulator, value from previous call is passed to next call.
      ++ On first call r is passed as second argument to f.
      ++ Return value is the last result returned by f.

  Implementation ==> add
    minr ==> minRowIndex
    maxr ==> maxRowIndex
    minc ==> minColIndex
    maxc ==> maxColIndex

    map(f : (R1->R2), m : M1) : M2 ==
      ans : M2 := new(nrows m, ncols m, 0)
      for i in minr(m)..maxr(m) for k in minr(ans)..maxr(ans) repeat
        for j in minc(m)..maxc(m) for l in minc(ans)..maxc(ans) repeat
          qsetelt!(ans, k, l, f qelt(m, i, j))
      ans

    map(f:(R1 -> (Union(R2,"failed"))),m:M1):Union(M2,"failed") ==
      ans : M2 := new(nrows m, ncols m, 0)
      for i in minr(m)..maxr(m) for k in minr(ans)..maxr(ans) repeat
        for j in minc(m)..maxc(m) for l in minc(ans)..maxc(ans) repeat
          (r := f qelt(m,i,j)) = "failed" => return "failed"
          qsetelt!(ans, k, l, r::R2)
      ans

    reduce(f, m, ident) ==
      s := ident
      for i in minr(m)..maxr(m) repeat
       for j in minc(m)..maxc(m) repeat
         s := f(qelt(m, i, j), s)
      s

