4319                (MAKEPROP '|MagmaWithUnit| 'NILADIC T)
(|MagmaWithUnit|)
|category|
(((|MagmaWithUnit|) (|Category|)) (T |MagmaWithUnit|))
(|Join| (|Magma|)
        (CATEGORY |domain| (SIGNATURE (|One|) ($) |constant|)
         (SIGNATURE |sample| ($) |constant|) (SIGNATURE |one?| ((|Boolean|) $))
         (SIGNATURE |rightPower| ($ $ (|NonNegativeInteger|)))
         (SIGNATURE |leftPower| ($ $ (|NonNegativeInteger|)))
         (SIGNATURE ^ ($ $ (|NonNegativeInteger|)))
         (SIGNATURE |recip| ((|Union| $ "failed") $))
         (SIGNATURE |leftRecip| ((|Union| $ "failed") $))
         (SIGNATURE |rightRecip| ((|Union| $ "failed") $))))
"/git/fricas/src/algebra/MAGMAWU.spad"
((|One| (*1 *1) (|ofCategory| *1 (|MagmaWithUnit|)))
 (|sample| (*1 *1) (|ofCategory| *1 (|MagmaWithUnit|)))
 (|one?| (*1 *2 *1)
  (AND (|ofCategory| *1 (|MagmaWithUnit|)) (|isDomain| *2 (|Boolean|))))
 (|rightPower| (*1 *1 *1 *2)
  (AND (|ofCategory| *1 (|MagmaWithUnit|))
       (|isDomain| *2 (|NonNegativeInteger|))))
 (|leftPower| (*1 *1 *1 *2)
  (AND (|ofCategory| *1 (|MagmaWithUnit|))
       (|isDomain| *2 (|NonNegativeInteger|))))
 (^ (*1 *1 *1 *2)
  (AND (|ofCategory| *1 (|MagmaWithUnit|))
       (|isDomain| *2 (|NonNegativeInteger|))))
 (|recip| (*1 *1 *1) (|partial| |ofCategory| *1 (|MagmaWithUnit|)))
 (|leftRecip| (*1 *1 *1) (|partial| |ofCategory| *1 (|MagmaWithUnit|)))
 (|rightRecip| (*1 *1 *1) (|partial| |ofCategory| *1 (|MagmaWithUnit|))))
((~= (((|Boolean|) $ $) 6)) (|sample| (($) 6 T CONST))
 (|rightRecip| (((|Union| $ "failed") $) 6))
 (|rightPower| (($ $ (|PositiveInteger|)) 6) (($ $ (|NonNegativeInteger|)) 6))
 (|recip| (((|Union| $ "failed") $) 6)) (|one?| (((|Boolean|) $) 6))
 (|leftRecip| (((|Union| $ "failed") $) 6))
 (|leftPower| (($ $ (|PositiveInteger|)) 6) (($ $ (|NonNegativeInteger|)) 6))
 (|latex| (((|String|) $) 6))
 (|hashUpdate!| (((|HashState|) (|HashState|) $) 6))
 (|hash| (((|SingleInteger|) $) 6)) (|coerce| (((|OutputForm|) $) 6))
 (^ (($ $ (|PositiveInteger|)) 6) (($ $ (|NonNegativeInteger|)) 6))
 (|One| (($) 6 T CONST)) (= (((|Boolean|) $ $) 6)) (* (($ $ $) 6)))
MAGMAWU
(((|Magma|) . T))
(((|BasicType|) . T) ((|CoercibleTo| (|OutputForm|)) . T) ((|Magma|) . T)
 ((|SetCategory|) . T))
((|constructor|
  (NIL
   "\\indented{1}{MagmaWithUnit is the class of multiplicative monads with unit,{}} \\indented{1}{\\spadignore{i.e.} sets with a binary operation and a unit element.} Axioms \\indented{3}{leftIdentity(\"*\":(\\%,{}\\%)\\spad{->}\\%,{}1)\\space{3}\\tab{30} 1*x=x} \\indented{3}{rightIdentity(\"*\":(\\%,{}\\%)\\spad{->}\\%,{}1)\\space{2}\\tab{30} x*1=x} Common Additional Axioms \\indented{3}{unitsKnown---if \"recip\" says \"failed\",{} that PROVES input wasn\\spad{'t} a unit}"))
 (|rightRecip|
  (((|Union| $ "failed") $)
   "\\spad{rightRecip(a)} returns an element,{} which is a right inverse of \\spad{a},{} or \\spad{\"failed\"} if such an element doesn\\spad{'t} exist or cannot be determined (see unitsKnown)."))
 (|leftRecip|
  (((|Union| $ "failed") $)
   "\\spad{leftRecip(a)} returns an element,{} which is a left inverse of \\spad{a},{} or \\spad{\"failed\"} if such an element doesn\\spad{'t} exist or cannot be determined (see unitsKnown)."))
 (|recip|
  (((|Union| $ "failed") $)
   "\\spad{recip(a)} returns an element,{} which is both a left and a right inverse of \\spad{a},{} or \\spad{\"failed\"} if such an element doesn\\spad{'t} exist or cannot be determined (see unitsKnown)."))
 (^
  (($ $ (|NonNegativeInteger|))
   "\\spad{a^n} returns the \\spad{n}\\spad{-}th power of \\spad{a},{} defined by repeated squaring."))
 (|leftPower|
  (($ $ (|NonNegativeInteger|))
   "\\spad{leftPower(a,{} n)} returns the \\spad{n}\\spad{-}th left power of \\spad{a},{} \\spadignore{i.e.} \\spad{leftPower(a,{} n) := a * leftPower(a,{} n-1)} and \\spad{leftPower(a,{} 0) := 1}."))
 (|rightPower|
  (($ $ (|NonNegativeInteger|))
   "\\spad{rightPower(a,{} n)} returns the \\spad{n}\\spad{-}th right power of \\spad{a},{} \\spadignore{i.e.} \\spad{rightPower(a,{} n) := rightPower(a,{} n-1) * a} and \\spad{rightPower(a,{} 0) := 1}."))
 (|one?|
  (((|Boolean|) $) "\\spad{one?(a)} tests whether \\spad{a} is the unit 1."))
 (|sample| (($) "\\spad{sample yields} a value of type \\%"))
 ((|One|) (($) "1 returns the unit element,{} denoted by 1.")))
(("documentation" 0 2239) ("ancestors" 0 2141) ("parents" 0 2123)
 ("abbreviation" 0 2115) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 1456) ("modemaps" 0 692) ("sourceFile" 0 653)
 ("constructorCategory" 0 143) ("constructorModemap" 0 88)
 ("constructorKind" 0 77) ("constructorForm" 0 59) ("NILADIC" 0 20))