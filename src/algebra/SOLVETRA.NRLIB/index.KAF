9366                (|TransSolvePackage| R)
|package|
(((|TransSolvePackage| |#1|)
  (CATEGORY |package|
   (SIGNATURE |solve|
    ((|List| (|Equation| (|Expression| |#1|))) (|Expression| |#1|)))
   (SIGNATURE |solve|
    ((|List| (|Equation| (|Expression| |#1|)))
     (|Equation| (|Expression| |#1|))))
   (SIGNATURE |solve|
    ((|List| (|Equation| (|Expression| |#1|))) (|Equation| (|Expression| |#1|))
     (|Symbol|)))
   (SIGNATURE |solve|
    ((|List| (|Equation| (|Expression| |#1|))) (|Expression| |#1|) (|Symbol|)))
   (SIGNATURE |solve|
    ((|List| (|List| (|Equation| (|Expression| |#1|))))
     (|List| (|Equation| (|Expression| |#1|))) (|List| (|Symbol|))))
   (SIGNATURE |solve|
    ((|List| (|List| (|Equation| (|Expression| |#1|))))
     (|List| (|Equation| (|Expression| |#1|)))
     (|List| (|Kernel| (|Expression| |#1|)))))
   (SIGNATURE |solve|
    ((|List| (|List| (|Equation| (|Expression| |#1|))))
     (|List| (|Equation| (|Expression| |#1|))) (|List| (|Expression| |#1|)))))
  (|Join| (|Comparable|) (|PolynomialFactorizationExplicit|)
          (|RetractableTo| (|Integer|)) (|LinearlyExplicitOver| (|Integer|))
          (|CharacteristicZero|)))
 (T |TransSolvePackage|))
(CATEGORY |package|
 (SIGNATURE |solve|
  ((|List| (|Equation| (|Expression| |#1|))) (|Expression| |#1|)))
 (SIGNATURE |solve|
  ((|List| (|Equation| (|Expression| |#1|))) (|Equation| (|Expression| |#1|))))
 (SIGNATURE |solve|
  ((|List| (|Equation| (|Expression| |#1|))) (|Equation| (|Expression| |#1|))
   (|Symbol|)))
 (SIGNATURE |solve|
  ((|List| (|Equation| (|Expression| |#1|))) (|Expression| |#1|) (|Symbol|)))
 (SIGNATURE |solve|
  ((|List| (|List| (|Equation| (|Expression| |#1|))))
   (|List| (|Equation| (|Expression| |#1|))) (|List| (|Symbol|))))
 (SIGNATURE |solve|
  ((|List| (|List| (|Equation| (|Expression| |#1|))))
   (|List| (|Equation| (|Expression| |#1|)))
   (|List| (|Kernel| (|Expression| |#1|)))))
 (SIGNATURE |solve|
  ((|List| (|List| (|Equation| (|Expression| |#1|))))
   (|List| (|Equation| (|Expression| |#1|))) (|List| (|Expression| |#1|)))))
"/git/fricas/src/algebra/SOLVETRA.spad"
((|solve| (*1 *2 *3 *4)
  (AND (|isDomain| *3 (|List| (|Equation| (|Expression| *5))))
       (|isDomain| *4 (|List| (|Expression| *5)))
       (|ofCategory| *5
                     (|Join| (|Comparable|) (|PolynomialFactorizationExplicit|)
                             (|RetractableTo| (|Integer|))
                             (|LinearlyExplicitOver| (|Integer|))
                             (|CharacteristicZero|)))
       (|isDomain| *2 (|List| (|List| (|Equation| (|Expression| *5)))))
       (|isDomain| *1 (|TransSolvePackage| *5))))
 (|solve| (*1 *2 *3 *4)
  (AND (|isDomain| *3 (|List| (|Equation| (|Expression| *5))))
       (|isDomain| *4 (|List| (|Kernel| (|Expression| *5))))
       (|ofCategory| *5
                     (|Join| (|Comparable|) (|PolynomialFactorizationExplicit|)
                             (|RetractableTo| (|Integer|))
                             (|LinearlyExplicitOver| (|Integer|))
                             (|CharacteristicZero|)))
       (|isDomain| *2 (|List| (|List| (|Equation| (|Expression| *5)))))
       (|isDomain| *1 (|TransSolvePackage| *5))))
 (|solve| (*1 *2 *3 *4)
  (AND (|isDomain| *3 (|List| (|Equation| (|Expression| *5))))
       (|isDomain| *4 (|List| (|Symbol|)))
       (|ofCategory| *5
                     (|Join| (|Comparable|) (|PolynomialFactorizationExplicit|)
                             (|RetractableTo| (|Integer|))
                             (|LinearlyExplicitOver| (|Integer|))
                             (|CharacteristicZero|)))
       (|isDomain| *2 (|List| (|List| (|Equation| (|Expression| *5)))))
       (|isDomain| *1 (|TransSolvePackage| *5))))
 (|solve| (*1 *2 *3 *4)
  (AND (|isDomain| *3 (|Expression| *5)) (|isDomain| *4 (|Symbol|))
       (|ofCategory| *5
                     (|Join| (|Comparable|) (|PolynomialFactorizationExplicit|)
                             (|RetractableTo| (|Integer|))
                             (|LinearlyExplicitOver| (|Integer|))
                             (|CharacteristicZero|)))
       (|isDomain| *2 (|List| (|Equation| (|Expression| *5))))
       (|isDomain| *1 (|TransSolvePackage| *5))))
 (|solve| (*1 *2 *3 *4)
  (AND (|isDomain| *3 (|Equation| (|Expression| *5)))
       (|isDomain| *4 (|Symbol|))
       (|ofCategory| *5
                     (|Join| (|Comparable|) (|PolynomialFactorizationExplicit|)
                             (|RetractableTo| (|Integer|))
                             (|LinearlyExplicitOver| (|Integer|))
                             (|CharacteristicZero|)))
       (|isDomain| *2 (|List| (|Equation| (|Expression| *5))))
       (|isDomain| *1 (|TransSolvePackage| *5))))
 (|solve| (*1 *2 *3)
  (AND (|isDomain| *3 (|Equation| (|Expression| *4)))
       (|ofCategory| *4
                     (|Join| (|Comparable|) (|PolynomialFactorizationExplicit|)
                             (|RetractableTo| (|Integer|))
                             (|LinearlyExplicitOver| (|Integer|))
                             (|CharacteristicZero|)))
       (|isDomain| *2 (|List| (|Equation| (|Expression| *4))))
       (|isDomain| *1 (|TransSolvePackage| *4))))
 (|solve| (*1 *2 *3)
  (AND (|isDomain| *3 (|Expression| *4))
       (|ofCategory| *4
                     (|Join| (|Comparable|) (|PolynomialFactorizationExplicit|)
                             (|RetractableTo| (|Integer|))
                             (|LinearlyExplicitOver| (|Integer|))
                             (|CharacteristicZero|)))
       (|isDomain| *2 (|List| (|Equation| (|Expression| *4))))
       (|isDomain| *1 (|TransSolvePackage| *4)))))
((|solve|
  (((|List| (|List| (|Equation| (|Expression| |#1|))))
    (|List| (|Equation| (|Expression| |#1|))) (|List| (|Expression| |#1|)))
   268)
  (((|List| (|List| (|Equation| (|Expression| |#1|))))
    (|List| (|Equation| (|Expression| |#1|)))
    (|List| (|Kernel| (|Expression| |#1|))))
   267)
  (((|List| (|List| (|Equation| (|Expression| |#1|))))
    (|List| (|Equation| (|Expression| |#1|))) (|List| (|Symbol|)))
   263)
  (((|List| (|Equation| (|Expression| |#1|))) (|Expression| |#1|) (|Symbol|))
   17)
  (((|List| (|Equation| (|Expression| |#1|))) (|Equation| (|Expression| |#1|))
    (|Symbol|))
   24)
  (((|List| (|Equation| (|Expression| |#1|))) (|Equation| (|Expression| |#1|)))
   23)
  (((|List| (|Equation| (|Expression| |#1|))) (|Expression| |#1|)) 18)))
SOLVETRA
((|constructor|
  (NIL
   "This package tries to find solutions of equations of type Expression(\\spad{R}). This means expressions involving transcendental,{} exponential,{} logarithmic and nthRoot functions. After trying to transform different kernels to one kernel by applying several rules,{} it calls zerosOf for the SparseUnivariatePolynomial in the remaining kernel. For example the expression \\spad{sin(x)*cos(x)-2} will be transformed to \\indented{3}{\\spad{-2 tan(x/2)^4 -2 tan(x/2)^3 -4 tan(x/2)^2 +2 tan(x/2) -2}} by using the function normalize and then to \\indented{3}{\\spad{-2 tan(x)^2 + tan(x) -2}} with help of subsTan. This function tries to express the given function in terms of \\spad{tan(x/2)} to express in terms of \\spad{tan(x)} . Other examples are the expressions \\spad{sqrt(x+1)+sqrt(x+7)+1} or \\indented{1}{\\spad{sqrt(sin(x))+1} .}"))
 (|solve|
  (((|List| (|List| (|Equation| (|Expression| |#1|))))
    (|List| (|Equation| (|Expression| |#1|))) (|List| (|Expression| |#1|)))
   "\\spad{solve(leqs,{} lexpr)} returns a list of solutions to the list of equations \\spad{leqs} with respect to the list of expressions lexpr. Each expression in lexpr is treated as a variable and must be a single kernel.")
  (((|List| (|List| (|Equation| (|Expression| |#1|))))
    (|List| (|Equation| (|Expression| |#1|)))
    (|List| (|Kernel| (|Expression| |#1|))))
   "\\spad{solve(leqs,{} lker)} returns a list of solutions to the list of equations \\spad{leqs} with respect to the list of kernels lker.")
  (((|List| (|List| (|Equation| (|Expression| |#1|))))
    (|List| (|Equation| (|Expression| |#1|))) (|List| (|Symbol|)))
   "\\spad{solve(leqs,{} lvar)} returns a list of solutions to the list of equations \\spad{leqs} with respect to the list of symbols lvar.")
  (((|List| (|Equation| (|Expression| |#1|))) (|Expression| |#1|) (|Symbol|))
   "\\spad{solve(expr,{} x)} finds the solutions of the equation \\spad{expr} = 0 with respect to the symbol \\spad{x} where \\spad{expr} is a function of type Expression(\\spad{R}).")
  (((|List| (|Equation| (|Expression| |#1|))) (|Equation| (|Expression| |#1|))
    (|Symbol|))
   "\\spad{solve(eq,{} x)} finds the solutions of the equation \\spad{eq} where \\spad{eq} is an equation of functions of type Expression(\\spad{R}) with respect to the symbol \\spad{x}.")
  (((|List| (|Equation| (|Expression| |#1|))) (|Equation| (|Expression| |#1|)))
   "\\spad{solve(eq)} finds the solutions of the equation \\spad{eq} where \\spad{eq} is an equation of functions of type Expression(\\spad{R}) with respect to the unique symbol \\spad{x} appearing in \\spad{eq}.")
  (((|List| (|Equation| (|Expression| |#1|))) (|Expression| |#1|))
   "\\spad{solve(expr)} finds the solutions of the equation \\spad{expr} = 0 where \\spad{expr} is a function of type Expression(\\spad{R}) with respect to the unique symbol \\spad{x} appearing in eq.")))
(("documentation" 0 6462) ("ancestors" 0 NIL) ("parents" 0 NIL)
 ("abbreviation" 0 6453) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 5673) ("modemaps" 0 2117) ("sourceFile" 0 2077)
 ("constructorCategory" 0 1202) ("constructorModemap" 0 54)
 ("constructorKind" 0 44) ("constructorForm" 0 20))