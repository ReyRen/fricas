2895                (|LinearOrdinaryDifferentialOperatorsOps| A L)
|package|
(((|LinearOrdinaryDifferentialOperatorsOps| |#1| |#2|)
  (CATEGORY |package|
   (SIGNATURE |symmetricProduct| (|#2| |#2| |#2| (|Mapping| |#1| |#1|)))
   (SIGNATURE |symmetricPower|
    (|#2| |#2| (|NonNegativeInteger|) (|Mapping| |#1| |#1|)))
   (SIGNATURE |directSum| (|#2| |#2| |#2| (|Mapping| |#1| |#1|))))
  (|Field|) (|LinearOrdinaryDifferentialOperatorCategory| |#1|))
 (T |LinearOrdinaryDifferentialOperatorsOps|))
(CATEGORY |package|
 (SIGNATURE |symmetricProduct| (|#2| |#2| |#2| (|Mapping| |#1| |#1|)))
 (SIGNATURE |symmetricPower|
  (|#2| |#2| (|NonNegativeInteger|) (|Mapping| |#1| |#1|)))
 (SIGNATURE |directSum| (|#2| |#2| |#2| (|Mapping| |#1| |#1|))))
"/git/fricas/src/algebra/LODOOPS.spad"
((|directSum| (*1 *2 *2 *2 *3)
  (AND (|isDomain| *3 (|Mapping| *4 *4)) (|ofCategory| *4 (|Field|))
       (|isDomain| *1 (|LinearOrdinaryDifferentialOperatorsOps| *4 *2))
       (|ofCategory| *2 (|LinearOrdinaryDifferentialOperatorCategory| *4))))
 (|symmetricPower| (*1 *2 *2 *3 *4)
  (AND (|isDomain| *3 (|NonNegativeInteger|)) (|isDomain| *4 (|Mapping| *5 *5))
       (|ofCategory| *5 (|Field|))
       (|isDomain| *1 (|LinearOrdinaryDifferentialOperatorsOps| *5 *2))
       (|ofCategory| *2 (|LinearOrdinaryDifferentialOperatorCategory| *5))))
 (|symmetricProduct| (*1 *2 *2 *2 *3)
  (AND (|isDomain| *3 (|Mapping| *4 *4)) (|ofCategory| *4 (|Field|))
       (|isDomain| *1 (|LinearOrdinaryDifferentialOperatorsOps| *4 *2))
       (|ofCategory| *2 (|LinearOrdinaryDifferentialOperatorCategory| *4)))))
((|symmetricProduct| ((|#2| |#2| |#2| (|Mapping| |#1| |#1|)) 51))
 (|symmetricPower|
  ((|#2| |#2| (|NonNegativeInteger|) (|Mapping| |#1| |#1|)) 35))
 (|directSum| ((|#2| |#2| |#2| (|Mapping| |#1| |#1|)) 53)))
LODOOPS
((|constructor|
  (NIL
   "\\spad{LinearOrdinaryDifferentialOperatorsOps} provides symmetric products and sums for linear ordinary differential operators."))
 (|directSum|
  ((|#2| |#2| |#2| (|Mapping| |#1| |#1|))
   "\\spad{directSum(a,{} b,{} D)} computes an operator \\spad{c} of minimal order such that the nullspace of \\spad{c} is generated by all the sums of a solution of \\spad{a} by a solution of \\spad{b}. \\spad{D} is the derivation to use."))
 (|symmetricPower|
  ((|#2| |#2| (|NonNegativeInteger|) (|Mapping| |#1| |#1|))
   "\\spad{symmetricPower(a,{} n,{} D)} computes an operator \\spad{c} of minimal order such that the nullspace of \\spad{c} is generated by all the products of \\spad{n} solutions of \\spad{a}. \\spad{D} is the derivation to use."))
 (|symmetricProduct|
  ((|#2| |#2| |#2| (|Mapping| |#1| |#1|))
   "\\spad{symmetricProduct(a,{} b,{} D)} computes an operator \\spad{c} of minimal order such that the nullspace of \\spad{c} is generated by all the products of a solution of \\spad{a} by a solution of \\spad{b}. \\spad{D} is the derivation to use.")))
(("documentation" 0 1807) ("ancestors" 0 NIL) ("parents" 0 NIL)
 ("abbreviation" 0 1799) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 1589) ("modemaps" 0 783) ("sourceFile" 0 744)
 ("constructorCategory" 0 499) ("constructorModemap" 0 77)
 ("constructorKind" 0 67) ("constructorForm" 0 20))