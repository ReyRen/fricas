6250                (|BinaryTree| S)
|domain|
(((|BinaryTree| |#1|)
  (|Join| (|BinaryTreeCategory| |#1|)
          (CATEGORY |domain| (SIGNATURE |binaryTree| ($ |#1|))
           (SIGNATURE |binaryTree| ($ $ |#1| $))))
  (|SetCategory|))
 (T |BinaryTree|))
(|Join| (|BinaryTreeCategory| |#1|)
        (CATEGORY |domain| (SIGNATURE |binaryTree| ($ |#1|))
         (SIGNATURE |binaryTree| ($ $ |#1| $))))
"/git/fricas/src/algebra/BTREE.spad"
((|binaryTree| (*1 *1 *2)
  (AND (|isDomain| *1 (|BinaryTree| *2)) (|ofCategory| *2 (|SetCategory|))))
 (|binaryTree| (*1 *1 *1 *2 *1)
  (AND (|isDomain| *1 (|BinaryTree| *2)) (|ofCategory| *2 (|SetCategory|)))))
((~=
  (((|Boolean|) $ $) NIL
   (OR (AND (|has| $ (|finiteAggregate|)) (|has| |#1| (|BasicType|)))
       (|has| |#1| (|SetCategory|)))))
 (|value| ((|#1| $) 23)) (|size?| (((|Boolean|) $ (|NonNegativeInteger|)) NIL))
 (|setvalue!| ((|#1| $ |#1|) 25 (|has| $ (|shallowlyMutable|))))
 (|setright!| (($ $ $) 29 (|has| $ (|shallowlyMutable|))))
 (|setleft!| (($ $ $) 27 (|has| $ (|shallowlyMutable|))))
 (|setelt!| ((|#1| $ #1="value" |#1|) NIL (|has| $ (|shallowlyMutable|)))
  (($ $ #2="left" $) NIL (|has| $ (|shallowlyMutable|)))
  (($ $ #3="right" $) NIL (|has| $ (|shallowlyMutable|))))
 (|setchildren!| (($ $ (|List| $)) NIL (|has| $ (|shallowlyMutable|))))
 (|sample| (($) NIL T CONST)) (|right| (($ $) 19))
 (|parts| (((|List| |#1|) $) NIL (|has| $ (|finiteAggregate|))))
 (|nodes| (((|List| $) $) NIL))
 (|node?| (((|Boolean|) $ $) NIL (|has| |#1| (|BasicType|))))
 (|node| (($ $ |#1| $) 15))
 (|more?| (((|Boolean|) $ (|NonNegativeInteger|)) NIL))
 (|min|
  ((|#1| $) NIL
   (AND (|has| $ (|finiteAggregate|)) (|has| |#1| (|OrderedSet|)))))
 (|members| (((|List| |#1|) $) NIL (|has| $ (|finiteAggregate|))))
 (|member?|
  (((|Boolean|) |#1| $) NIL
   (AND (|has| $ (|finiteAggregate|)) (|has| |#1| (|BasicType|)))))
 (|max|
  ((|#1| (|Mapping| (|Boolean|) |#1| |#1|) $) NIL
   (|has| $ (|finiteAggregate|)))
  ((|#1| $) NIL
   (AND (|has| $ (|finiteAggregate|)) (|has| |#1| (|OrderedSet|)))))
 (|map!| (($ (|Mapping| |#1| |#1|) $) NIL (|has| $ (|shallowlyMutable|))))
 (|map| (($ (|Mapping| |#1| |#1|) $) NIL))
 (|less?| (((|Boolean|) $ (|NonNegativeInteger|)) NIL)) (|left| (($ $) 21))
 (|leaves| (((|List| |#1|) $) NIL)) (|leaf?| (((|Boolean|) $) NIL))
 (|latex| (((|String|) $) NIL (|has| |#1| (|SetCategory|))))
 (|hashUpdate!|
  (((|HashState|) (|HashState|) $) NIL (|has| |#1| (|SetCategory|))))
 (|hash| (((|SingleInteger|) $) NIL (|has| |#1| (|SetCategory|))))
 (|every?|
  (((|Boolean|) (|Mapping| (|Boolean|) |#1|) $) NIL
   (|has| $ (|finiteAggregate|))))
 (|eval|
  (($ $ (|List| (|Equation| |#1|))) NIL
   (AND (|has| |#1| (|Evalable| |#1|)) (|has| |#1| (|SetCategory|))))
  (($ $ (|Equation| |#1|)) NIL
   (AND (|has| |#1| (|Evalable| |#1|)) (|has| |#1| (|SetCategory|))))
  (($ $ |#1| |#1|) NIL
   (AND (|has| |#1| (|Evalable| |#1|)) (|has| |#1| (|SetCategory|))))
  (($ $ (|List| |#1|) (|List| |#1|)) NIL
   (AND (|has| |#1| (|Evalable| |#1|)) (|has| |#1| (|SetCategory|)))))
 (|eq?| (((|Boolean|) $ $) NIL)) (|empty?| (((|Boolean|) $) 18))
 (|empty| (($) 11)) (|elt| ((|#1| $ #1#) NIL) (($ $ #2#) NIL) (($ $ #3#) NIL))
 (|distance| (((|Integer|) $ $) NIL)) (|cyclic?| (((|Boolean|) $) NIL))
 (|count|
  (((|NonNegativeInteger|) (|Mapping| (|Boolean|) |#1|) $) NIL
   (|has| $ (|finiteAggregate|)))
  (((|NonNegativeInteger|) |#1| $) NIL
   (AND (|has| $ (|finiteAggregate|)) (|has| |#1| (|BasicType|)))))
 (|copy| (($ $) NIL))
 (|coerce|
  (((|OutputForm|) $) NIL (|has| |#1| (|CoercibleTo| (|OutputForm|)))))
 (|children| (((|List| $) $) NIL))
 (|child?| (((|Boolean|) $ $) NIL (|has| |#1| (|BasicType|))))
 (|binaryTree| (($ |#1|) 17) (($ $ |#1| $) 16))
 (|any?|
  (((|Boolean|) (|Mapping| (|Boolean|) |#1|) $) NIL
   (|has| $ (|finiteAggregate|))))
 (=
  (((|Boolean|) $ $) 10
   (OR (AND (|has| $ (|finiteAggregate|)) (|has| |#1| (|BasicType|)))
       (|has| |#1| (|SetCategory|)))))
 (|#| (((|NonNegativeInteger|) $) NIL (|has| $ (|finiteAggregate|)))))
((|HasCategory| |#1| '(|SetCategory|))
 (AND (|HasCategory| |#1| (LIST '|Evalable| (|devaluate| |#1|)))
      (|HasCategory| |#1| '(|SetCategory|)))
 (|HasCategory| |#1| '(|OrderedSet|)) (|HasCategory| |#1| '(|BasicType|))
 (OR (|HasCategory| |#1| '(|BasicType|)) (|HasCategory| |#1| '(|SetCategory|)))
 (|HasCategory| |#1| (LIST '|CoercibleTo| '(|OutputForm|)))
 (OR (|HasCategory| |#1| (LIST '|CoercibleTo| '(|OutputForm|)))
     (AND (|HasCategory| |#1| (LIST '|Evalable| (|devaluate| |#1|)))
          (|HasCategory| |#1| '(|SetCategory|))))
 (|HasCategory| $ '(|finiteAggregate|))
 (AND (|HasCategory| |#1| '(|OrderedSet|))
      (|HasCategory| $ '(|finiteAggregate|)))
 (AND (|HasCategory| |#1| '(|BasicType|))
      (|HasCategory| $ '(|finiteAggregate|)))
 (OR
  (AND (|HasCategory| |#1| '(|BasicType|))
       (|HasCategory| $ '(|finiteAggregate|)))
  (|HasCategory| |#1| '(|SetCategory|)))
 (|HasCategory| $ '(|shallowlyMutable|)))
BTREE
(((|BinaryTreeCategory| |#1|) . T))
(((|Aggregate|) . T)
 ((|BasicType|) OR (|has| |t#1| (|SetCategory|))
  (AND (|has| $ (|finiteAggregate|)) (|has| |t#1| (|BasicType|))))
 ((|BinaryRecursiveAggregate| |t#1|) . T) ((|BinaryTreeCategory| |#1|) . T)
 ((|CoercibleTo| (|OutputForm|)) |has| |t#1| (|CoercibleTo| (|OutputForm|)))
 ((|Evalable| |t#1|) AND (|has| |t#1| (|Evalable| |t#1|))
  (|has| |t#1| (|SetCategory|)))
 ((|HomogeneousAggregate| |t#1|) . T)
 ((|InnerEvalable| |t#1| |t#1|) AND (|has| |t#1| (|Evalable| |t#1|))
  (|has| |t#1| (|SetCategory|)))
 ((|RecursiveAggregate| |t#1|) . T)
 ((|SetCategory|) |has| |t#1| (|SetCategory|)) ((|Type|) . T)
 ((|finiteAggregate|) . T) ((|shallowlyMutable|) . T))
((|constructor|
  (NIL
   "\\spadtype{BinaryTree(S)} is the domain of all binary trees. A binary tree over \\spad{S} is either empty or has a \\spadfun{value} which is an \\spad{S} and a \\spadfun{right} and \\spadfun{left} which are both BinaryTree(\\spad{S})."))
 (|binaryTree|
  (($ $ |#1| $)
   "\\spad{binaryTree(l,{} v,{} r)} creates a binary tree with value \\spad{v} and left subtree \\spad{l} and right subtree \\spad{r}.")
  (($ |#1|)
   "\\spad{binaryTree(v)} is an non-empty binary tree with value \\spad{v},{} and left and right empty.")))
(("documentation" 0 5697) ("ancestors" 0 5023) ("parents" 0 4987)
 ("abbreviation" 0 4981) ("predicates" 0 4040) ("superDomain" 0 NIL)
 ("operationAlist" 0 654) ("modemaps" 0 441) ("sourceFile" 0 404)
 ("constructorCategory" 0 258) ("constructorModemap" 0 46)
 ("constructorKind" 0 37) ("constructorForm" 0 20))