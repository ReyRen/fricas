43803               (MAKEPROP '|FortranCode| 'NILADIC T)
(|FortranCode|)
|domain|
(((|FortranCode|)
  (|Join| (|SetCategory|)
          (CATEGORY |domain| (SIGNATURE |coerce| ((|OutputForm|) $))
           (SIGNATURE |forLoop|
            ($ (|SegmentBinding| (|Polynomial| (|Integer|))) $))
           (SIGNATURE |forLoop|
            ($ (|SegmentBinding| (|Polynomial| (|Integer|)))
             (|Polynomial| (|Integer|)) $))
           (SIGNATURE |whileLoop| ($ (|Switch|) $))
           (SIGNATURE |repeatUntilLoop| ($ (|Switch|) $))
           (SIGNATURE |gotoJump| ($ (|SingleInteger|)))
           (SIGNATURE |continue| ($ (|SingleInteger|)))
           (SIGNATURE |comment| ($ (|String|)))
           (SIGNATURE |comment| ($ (|List| (|String|))))
           (SIGNATURE |call| ($ (|String|))) (SIGNATURE |returns| ($))
           (SIGNATURE |returns| ($ (|Expression| (|MachineFloat|))))
           (SIGNATURE |returns| ($ (|Expression| (|MachineInteger|))))
           (SIGNATURE |returns| ($ (|Expression| (|MachineComplex|))))
           (SIGNATURE |returns| ($ (|Expression| (|Float|))))
           (SIGNATURE |returns| ($ (|Expression| (|Integer|))))
           (SIGNATURE |returns| ($ (|Expression| (|Complex| (|Float|)))))
           (SIGNATURE |cond| ($ (|Switch|) $))
           (SIGNATURE |cond| ($ (|Switch|) $ $))
           (SIGNATURE |assign| ($ (|Symbol|) (|String|)))
           (SIGNATURE |assign|
            ($ (|Symbol|) (|Expression| (|MachineInteger|))))
           (SIGNATURE |assign| ($ (|Symbol|) (|Expression| (|MachineFloat|))))
           (SIGNATURE |assign|
            ($ (|Symbol|) (|Expression| (|MachineComplex|))))
           (SIGNATURE |assign| ($ (|Symbol|) (|Matrix| (|MachineInteger|))))
           (SIGNATURE |assign| ($ (|Symbol|) (|Matrix| (|MachineFloat|))))
           (SIGNATURE |assign| ($ (|Symbol|) (|Matrix| (|MachineComplex|))))
           (SIGNATURE |assign| ($ (|Symbol|) (|Vector| (|MachineInteger|))))
           (SIGNATURE |assign| ($ (|Symbol|) (|Vector| (|MachineFloat|))))
           (SIGNATURE |assign| ($ (|Symbol|) (|Vector| (|MachineComplex|))))
           (SIGNATURE |assign|
            ($ (|Symbol|) (|Matrix| (|Expression| (|MachineInteger|)))))
           (SIGNATURE |assign|
            ($ (|Symbol|) (|Matrix| (|Expression| (|MachineFloat|)))))
           (SIGNATURE |assign|
            ($ (|Symbol|) (|Matrix| (|Expression| (|MachineComplex|)))))
           (SIGNATURE |assign|
            ($ (|Symbol|) (|Vector| (|Expression| (|MachineInteger|)))))
           (SIGNATURE |assign|
            ($ (|Symbol|) (|Vector| (|Expression| (|MachineFloat|)))))
           (SIGNATURE |assign|
            ($ (|Symbol|) (|Vector| (|Expression| (|MachineComplex|)))))
           (SIGNATURE |assign|
            ($ (|Symbol|) (|List| (|Polynomial| (|Integer|)))
             (|Expression| (|MachineInteger|))))
           (SIGNATURE |assign|
            ($ (|Symbol|) (|List| (|Polynomial| (|Integer|)))
             (|Expression| (|MachineFloat|))))
           (SIGNATURE |assign|
            ($ (|Symbol|) (|List| (|Polynomial| (|Integer|)))
             (|Expression| (|MachineComplex|))))
           (SIGNATURE |assign| ($ (|Symbol|) (|Expression| (|Integer|))))
           (SIGNATURE |assign| ($ (|Symbol|) (|Expression| (|Float|))))
           (SIGNATURE |assign|
            ($ (|Symbol|) (|Expression| (|Complex| (|Float|)))))
           (SIGNATURE |assign|
            ($ (|Symbol|) (|Matrix| (|Expression| (|Integer|)))))
           (SIGNATURE |assign|
            ($ (|Symbol|) (|Matrix| (|Expression| (|Float|)))))
           (SIGNATURE |assign|
            ($ (|Symbol|) (|Matrix| (|Expression| (|Complex| (|Float|))))))
           (SIGNATURE |assign|
            ($ (|Symbol|) (|Vector| (|Expression| (|Integer|)))))
           (SIGNATURE |assign|
            ($ (|Symbol|) (|Vector| (|Expression| (|Float|)))))
           (SIGNATURE |assign|
            ($ (|Symbol|) (|Vector| (|Expression| (|Complex| (|Float|))))))
           (SIGNATURE |assign|
            ($ (|Symbol|) (|List| (|Polynomial| (|Integer|)))
             (|Expression| (|Integer|))))
           (SIGNATURE |assign|
            ($ (|Symbol|) (|List| (|Polynomial| (|Integer|)))
             (|Expression| (|Float|))))
           (SIGNATURE |assign|
            ($ (|Symbol|) (|List| (|Polynomial| (|Integer|)))
             (|Expression| (|Complex| (|Float|)))))
           (SIGNATURE |block| ($ (|List| $))) (SIGNATURE |stop| ($))
           (SIGNATURE |save| ($))
           (SIGNATURE |printStatement| ($ (|List| (|OutputForm|))))
           (SIGNATURE |common| ($ (|Symbol|) (|List| (|Symbol|))))
           (SIGNATURE |operation|
            ((|Union| (|:| |Null| "null") (|:| |Assignment| "assignment")
                      (|:| |Conditional| "conditional") (|:| |Return| "return")
                      (|:| |Block| "block") (|:| |Comment| "comment")
                      (|:| |Call| "call") (|:| |For| "for")
                      (|:| |While| "while") (|:| |Repeat| "repeat")
                      (|:| |Goto| "goto") (|:| |Continue| "continue")
                      (|:| |ArrayAssignment| "arrayAssignment")
                      (|:| |Save| "save") (|:| |Stop| "stop")
                      (|:| |Common| "common") (|:| |Print| "print"))
             $))
           (SIGNATURE |code|
            ((|Union| (|:| |nullBranch| "null")
                      (|:| |assignmentBranch|
                           (|Record| (|:| |var| (|Symbol|))
                                     (|:| |arrayIndex|
                                          (|List| (|Polynomial| (|Integer|))))
                                     (|:| |rand|
                                          (|Record|
                                           (|:| |ints2Floats?| (|Boolean|))
                                           (|:| |expr| (|OutputForm|))))))
                      (|:| |arrayAssignmentBranch|
                           (|Record| (|:| |var| (|Symbol|))
                                     (|:| |rand| (|OutputForm|))
                                     (|:| |ints2Floats?| (|Boolean|))))
                      (|:| |conditionalBranch|
                           (|Record| (|:| |switch| (|Switch|))
                                     (|:| |thenClause| $)
                                     (|:| |elseClause| $)))
                      (|:| |returnBranch|
                           (|Record| (|:| |empty?| (|Boolean|))
                                     (|:| |value|
                                          (|Record|
                                           (|:| |ints2Floats?| (|Boolean|))
                                           (|:| |expr| (|OutputForm|))))))
                      (|:| |blockBranch| (|List| $))
                      (|:| |commentBranch| (|List| (|String|)))
                      (|:| |callBranch| (|String|))
                      (|:| |forBranch|
                           (|Record|
                            (|:| |range|
                                 (|SegmentBinding| (|Polynomial| (|Integer|))))
                            (|:| |span| (|Polynomial| (|Integer|)))
                            (|:| |body| $)))
                      (|:| |labelBranch| (|SingleInteger|))
                      (|:| |loopBranch|
                           (|Record| (|:| |switch| (|Switch|)) (|:| |body| $)))
                      (|:| |commonBranch|
                           (|Record| (|:| |name| (|Symbol|))
                                     (|:| |contents| (|List| (|Symbol|)))))
                      (|:| |printBranch| (|List| (|OutputForm|))))
             $))
           (SIGNATURE |printCode| ((|Void|) $))
           (SIGNATURE |getCode| ((|List| (|String|)) $))
           (SIGNATURE |setLabelValue| ((|SingleInteger|) (|SingleInteger|))))))
 (T |FortranCode|))
(|Join| (|SetCategory|)
        (CATEGORY |domain| (SIGNATURE |coerce| ((|OutputForm|) $))
         (SIGNATURE |forLoop|
          ($ (|SegmentBinding| (|Polynomial| (|Integer|))) $))
         (SIGNATURE |forLoop|
          ($ (|SegmentBinding| (|Polynomial| (|Integer|)))
           (|Polynomial| (|Integer|)) $))
         (SIGNATURE |whileLoop| ($ (|Switch|) $))
         (SIGNATURE |repeatUntilLoop| ($ (|Switch|) $))
         (SIGNATURE |gotoJump| ($ (|SingleInteger|)))
         (SIGNATURE |continue| ($ (|SingleInteger|)))
         (SIGNATURE |comment| ($ (|String|)))
         (SIGNATURE |comment| ($ (|List| (|String|))))
         (SIGNATURE |call| ($ (|String|))) (SIGNATURE |returns| ($))
         (SIGNATURE |returns| ($ (|Expression| (|MachineFloat|))))
         (SIGNATURE |returns| ($ (|Expression| (|MachineInteger|))))
         (SIGNATURE |returns| ($ (|Expression| (|MachineComplex|))))
         (SIGNATURE |returns| ($ (|Expression| (|Float|))))
         (SIGNATURE |returns| ($ (|Expression| (|Integer|))))
         (SIGNATURE |returns| ($ (|Expression| (|Complex| (|Float|)))))
         (SIGNATURE |cond| ($ (|Switch|) $))
         (SIGNATURE |cond| ($ (|Switch|) $ $))
         (SIGNATURE |assign| ($ (|Symbol|) (|String|)))
         (SIGNATURE |assign| ($ (|Symbol|) (|Expression| (|MachineInteger|))))
         (SIGNATURE |assign| ($ (|Symbol|) (|Expression| (|MachineFloat|))))
         (SIGNATURE |assign| ($ (|Symbol|) (|Expression| (|MachineComplex|))))
         (SIGNATURE |assign| ($ (|Symbol|) (|Matrix| (|MachineInteger|))))
         (SIGNATURE |assign| ($ (|Symbol|) (|Matrix| (|MachineFloat|))))
         (SIGNATURE |assign| ($ (|Symbol|) (|Matrix| (|MachineComplex|))))
         (SIGNATURE |assign| ($ (|Symbol|) (|Vector| (|MachineInteger|))))
         (SIGNATURE |assign| ($ (|Symbol|) (|Vector| (|MachineFloat|))))
         (SIGNATURE |assign| ($ (|Symbol|) (|Vector| (|MachineComplex|))))
         (SIGNATURE |assign|
          ($ (|Symbol|) (|Matrix| (|Expression| (|MachineInteger|)))))
         (SIGNATURE |assign|
          ($ (|Symbol|) (|Matrix| (|Expression| (|MachineFloat|)))))
         (SIGNATURE |assign|
          ($ (|Symbol|) (|Matrix| (|Expression| (|MachineComplex|)))))
         (SIGNATURE |assign|
          ($ (|Symbol|) (|Vector| (|Expression| (|MachineInteger|)))))
         (SIGNATURE |assign|
          ($ (|Symbol|) (|Vector| (|Expression| (|MachineFloat|)))))
         (SIGNATURE |assign|
          ($ (|Symbol|) (|Vector| (|Expression| (|MachineComplex|)))))
         (SIGNATURE |assign|
          ($ (|Symbol|) (|List| (|Polynomial| (|Integer|)))
           (|Expression| (|MachineInteger|))))
         (SIGNATURE |assign|
          ($ (|Symbol|) (|List| (|Polynomial| (|Integer|)))
           (|Expression| (|MachineFloat|))))
         (SIGNATURE |assign|
          ($ (|Symbol|) (|List| (|Polynomial| (|Integer|)))
           (|Expression| (|MachineComplex|))))
         (SIGNATURE |assign| ($ (|Symbol|) (|Expression| (|Integer|))))
         (SIGNATURE |assign| ($ (|Symbol|) (|Expression| (|Float|))))
         (SIGNATURE |assign|
          ($ (|Symbol|) (|Expression| (|Complex| (|Float|)))))
         (SIGNATURE |assign|
          ($ (|Symbol|) (|Matrix| (|Expression| (|Integer|)))))
         (SIGNATURE |assign|
          ($ (|Symbol|) (|Matrix| (|Expression| (|Float|)))))
         (SIGNATURE |assign|
          ($ (|Symbol|) (|Matrix| (|Expression| (|Complex| (|Float|))))))
         (SIGNATURE |assign|
          ($ (|Symbol|) (|Vector| (|Expression| (|Integer|)))))
         (SIGNATURE |assign|
          ($ (|Symbol|) (|Vector| (|Expression| (|Float|)))))
         (SIGNATURE |assign|
          ($ (|Symbol|) (|Vector| (|Expression| (|Complex| (|Float|))))))
         (SIGNATURE |assign|
          ($ (|Symbol|) (|List| (|Polynomial| (|Integer|)))
           (|Expression| (|Integer|))))
         (SIGNATURE |assign|
          ($ (|Symbol|) (|List| (|Polynomial| (|Integer|)))
           (|Expression| (|Float|))))
         (SIGNATURE |assign|
          ($ (|Symbol|) (|List| (|Polynomial| (|Integer|)))
           (|Expression| (|Complex| (|Float|)))))
         (SIGNATURE |block| ($ (|List| $))) (SIGNATURE |stop| ($))
         (SIGNATURE |save| ($))
         (SIGNATURE |printStatement| ($ (|List| (|OutputForm|))))
         (SIGNATURE |common| ($ (|Symbol|) (|List| (|Symbol|))))
         (SIGNATURE |operation|
          ((|Union| (|:| |Null| "null") (|:| |Assignment| "assignment")
                    (|:| |Conditional| "conditional") (|:| |Return| "return")
                    (|:| |Block| "block") (|:| |Comment| "comment")
                    (|:| |Call| "call") (|:| |For| "for") (|:| |While| "while")
                    (|:| |Repeat| "repeat") (|:| |Goto| "goto")
                    (|:| |Continue| "continue")
                    (|:| |ArrayAssignment| "arrayAssignment")
                    (|:| |Save| "save") (|:| |Stop| "stop")
                    (|:| |Common| "common") (|:| |Print| "print"))
           $))
         (SIGNATURE |code|
          ((|Union| (|:| |nullBranch| "null")
                    (|:| |assignmentBranch|
                         (|Record| (|:| |var| (|Symbol|))
                                   (|:| |arrayIndex|
                                        (|List| (|Polynomial| (|Integer|))))
                                   (|:| |rand|
                                        (|Record|
                                         (|:| |ints2Floats?| (|Boolean|))
                                         (|:| |expr| (|OutputForm|))))))
                    (|:| |arrayAssignmentBranch|
                         (|Record| (|:| |var| (|Symbol|))
                                   (|:| |rand| (|OutputForm|))
                                   (|:| |ints2Floats?| (|Boolean|))))
                    (|:| |conditionalBranch|
                         (|Record| (|:| |switch| (|Switch|))
                                   (|:| |thenClause| $) (|:| |elseClause| $)))
                    (|:| |returnBranch|
                         (|Record| (|:| |empty?| (|Boolean|))
                                   (|:| |value|
                                        (|Record|
                                         (|:| |ints2Floats?| (|Boolean|))
                                         (|:| |expr| (|OutputForm|))))))
                    (|:| |blockBranch| (|List| $))
                    (|:| |commentBranch| (|List| (|String|)))
                    (|:| |callBranch| (|String|))
                    (|:| |forBranch|
                         (|Record|
                          (|:| |range|
                               (|SegmentBinding| (|Polynomial| (|Integer|))))
                          (|:| |span| (|Polynomial| (|Integer|)))
                          (|:| |body| $)))
                    (|:| |labelBranch| (|SingleInteger|))
                    (|:| |loopBranch|
                         (|Record| (|:| |switch| (|Switch|)) (|:| |body| $)))
                    (|:| |commonBranch|
                         (|Record| (|:| |name| (|Symbol|))
                                   (|:| |contents| (|List| (|Symbol|)))))
                    (|:| |printBranch| (|List| (|OutputForm|))))
           $))
         (SIGNATURE |printCode| ((|Void|) $))
         (SIGNATURE |getCode| ((|List| (|String|)) $))
         (SIGNATURE |setLabelValue| ((|SingleInteger|) (|SingleInteger|)))))
"/git/fricas/src/algebra/FC.spad"
((|coerce| (*1 *2 *1)
           (AND (|isDomain| *2 (|OutputForm|))
                (|isDomain| *1 (|FortranCode|))))
 (|forLoop| (*1 *1 *2 *1)
  (AND (|isDomain| *2 (|SegmentBinding| (|Polynomial| (|Integer|))))
       (|isDomain| *1 (|FortranCode|))))
 (|forLoop| (*1 *1 *2 *3 *1)
  (AND (|isDomain| *2 (|SegmentBinding| (|Polynomial| (|Integer|))))
       (|isDomain| *3 (|Polynomial| (|Integer|)))
       (|isDomain| *1 (|FortranCode|))))
 (|whileLoop| (*1 *1 *2 *1)
  (AND (|isDomain| *2 (|Switch|)) (|isDomain| *1 (|FortranCode|))))
 (|repeatUntilLoop| (*1 *1 *2 *1)
  (AND (|isDomain| *2 (|Switch|)) (|isDomain| *1 (|FortranCode|))))
 (|gotoJump| (*1 *1 *2)
  (AND (|isDomain| *2 (|SingleInteger|)) (|isDomain| *1 (|FortranCode|))))
 (|continue| (*1 *1 *2)
  (AND (|isDomain| *2 (|SingleInteger|)) (|isDomain| *1 (|FortranCode|))))
 (|comment| (*1 *1 *2)
  (AND (|isDomain| *2 (|String|)) (|isDomain| *1 (|FortranCode|))))
 (|comment| (*1 *1 *2)
  (AND (|isDomain| *2 (|List| (|String|))) (|isDomain| *1 (|FortranCode|))))
 (|call| (*1 *1 *2)
  (AND (|isDomain| *2 (|String|)) (|isDomain| *1 (|FortranCode|))))
 (|returns| (*1 *1) (|isDomain| *1 (|FortranCode|)))
 (|returns| (*1 *1 *2)
  (AND (|isDomain| *2 (|Expression| (|MachineFloat|)))
       (|isDomain| *1 (|FortranCode|))))
 (|returns| (*1 *1 *2)
  (AND (|isDomain| *2 (|Expression| (|MachineInteger|)))
       (|isDomain| *1 (|FortranCode|))))
 (|returns| (*1 *1 *2)
  (AND (|isDomain| *2 (|Expression| (|MachineComplex|)))
       (|isDomain| *1 (|FortranCode|))))
 (|returns| (*1 *1 *2)
  (AND (|isDomain| *2 (|Expression| (|Float|)))
       (|isDomain| *1 (|FortranCode|))))
 (|returns| (*1 *1 *2)
  (AND (|isDomain| *2 (|Expression| (|Integer|)))
       (|isDomain| *1 (|FortranCode|))))
 (|returns| (*1 *1 *2)
  (AND (|isDomain| *2 (|Expression| (|Complex| (|Float|))))
       (|isDomain| *1 (|FortranCode|))))
 (|cond| (*1 *1 *2 *1)
  (AND (|isDomain| *2 (|Switch|)) (|isDomain| *1 (|FortranCode|))))
 (|cond| (*1 *1 *2 *1 *1)
  (AND (|isDomain| *2 (|Switch|)) (|isDomain| *1 (|FortranCode|))))
 (|assign| (*1 *1 *2 *3)
  (AND (|isDomain| *2 (|Symbol|)) (|isDomain| *3 (|String|))
       (|isDomain| *1 (|FortranCode|))))
 (|assign| (*1 *1 *2 *3)
  (AND (|isDomain| *2 (|Symbol|))
       (|isDomain| *3 (|Expression| (|MachineInteger|)))
       (|isDomain| *1 (|FortranCode|))))
 (|assign| (*1 *1 *2 *3)
  (AND (|isDomain| *2 (|Symbol|))
       (|isDomain| *3 (|Expression| (|MachineFloat|)))
       (|isDomain| *1 (|FortranCode|))))
 (|assign| (*1 *1 *2 *3)
  (AND (|isDomain| *2 (|Symbol|))
       (|isDomain| *3 (|Expression| (|MachineComplex|)))
       (|isDomain| *1 (|FortranCode|))))
 (|assign| (*1 *1 *2 *3)
  (AND (|isDomain| *2 (|Symbol|)) (|isDomain| *3 (|Matrix| (|MachineInteger|)))
       (|isDomain| *1 (|FortranCode|))))
 (|assign| (*1 *1 *2 *3)
  (AND (|isDomain| *2 (|Symbol|)) (|isDomain| *3 (|Matrix| (|MachineFloat|)))
       (|isDomain| *1 (|FortranCode|))))
 (|assign| (*1 *1 *2 *3)
  (AND (|isDomain| *2 (|Symbol|)) (|isDomain| *3 (|Matrix| (|MachineComplex|)))
       (|isDomain| *1 (|FortranCode|))))
 (|assign| (*1 *1 *2 *3)
  (AND (|isDomain| *2 (|Symbol|)) (|isDomain| *3 (|Vector| (|MachineInteger|)))
       (|isDomain| *1 (|FortranCode|))))
 (|assign| (*1 *1 *2 *3)
  (AND (|isDomain| *2 (|Symbol|)) (|isDomain| *3 (|Vector| (|MachineFloat|)))
       (|isDomain| *1 (|FortranCode|))))
 (|assign| (*1 *1 *2 *3)
  (AND (|isDomain| *2 (|Symbol|)) (|isDomain| *3 (|Vector| (|MachineComplex|)))
       (|isDomain| *1 (|FortranCode|))))
 (|assign| (*1 *1 *2 *3)
  (AND (|isDomain| *2 (|Symbol|))
       (|isDomain| *3 (|Matrix| (|Expression| (|MachineInteger|))))
       (|isDomain| *1 (|FortranCode|))))
 (|assign| (*1 *1 *2 *3)
  (AND (|isDomain| *2 (|Symbol|))
       (|isDomain| *3 (|Matrix| (|Expression| (|MachineFloat|))))
       (|isDomain| *1 (|FortranCode|))))
 (|assign| (*1 *1 *2 *3)
  (AND (|isDomain| *2 (|Symbol|))
       (|isDomain| *3 (|Matrix| (|Expression| (|MachineComplex|))))
       (|isDomain| *1 (|FortranCode|))))
 (|assign| (*1 *1 *2 *3)
  (AND (|isDomain| *2 (|Symbol|))
       (|isDomain| *3 (|Vector| (|Expression| (|MachineInteger|))))
       (|isDomain| *1 (|FortranCode|))))
 (|assign| (*1 *1 *2 *3)
  (AND (|isDomain| *2 (|Symbol|))
       (|isDomain| *3 (|Vector| (|Expression| (|MachineFloat|))))
       (|isDomain| *1 (|FortranCode|))))
 (|assign| (*1 *1 *2 *3)
  (AND (|isDomain| *2 (|Symbol|))
       (|isDomain| *3 (|Vector| (|Expression| (|MachineComplex|))))
       (|isDomain| *1 (|FortranCode|))))
 (|assign| (*1 *1 *2 *3 *4)
  (AND (|isDomain| *2 (|Symbol|))
       (|isDomain| *3 (|List| (|Polynomial| (|Integer|))))
       (|isDomain| *4 (|Expression| (|MachineInteger|)))
       (|isDomain| *1 (|FortranCode|))))
 (|assign| (*1 *1 *2 *3 *4)
  (AND (|isDomain| *2 (|Symbol|))
       (|isDomain| *3 (|List| (|Polynomial| (|Integer|))))
       (|isDomain| *4 (|Expression| (|MachineFloat|)))
       (|isDomain| *1 (|FortranCode|))))
 (|assign| (*1 *1 *2 *3 *4)
  (AND (|isDomain| *2 (|Symbol|))
       (|isDomain| *3 (|List| (|Polynomial| (|Integer|))))
       (|isDomain| *4 (|Expression| (|MachineComplex|)))
       (|isDomain| *1 (|FortranCode|))))
 (|assign| (*1 *1 *2 *3)
  (AND (|isDomain| *2 (|Symbol|)) (|isDomain| *3 (|Expression| (|Integer|)))
       (|isDomain| *1 (|FortranCode|))))
 (|assign| (*1 *1 *2 *3)
  (AND (|isDomain| *2 (|Symbol|)) (|isDomain| *3 (|Expression| (|Float|)))
       (|isDomain| *1 (|FortranCode|))))
 (|assign| (*1 *1 *2 *3)
  (AND (|isDomain| *2 (|Symbol|))
       (|isDomain| *3 (|Expression| (|Complex| (|Float|))))
       (|isDomain| *1 (|FortranCode|))))
 (|assign| (*1 *1 *2 *3)
  (AND (|isDomain| *2 (|Symbol|))
       (|isDomain| *3 (|Matrix| (|Expression| (|Integer|))))
       (|isDomain| *1 (|FortranCode|))))
 (|assign| (*1 *1 *2 *3)
  (AND (|isDomain| *2 (|Symbol|))
       (|isDomain| *3 (|Matrix| (|Expression| (|Float|))))
       (|isDomain| *1 (|FortranCode|))))
 (|assign| (*1 *1 *2 *3)
  (AND (|isDomain| *2 (|Symbol|))
       (|isDomain| *3 (|Matrix| (|Expression| (|Complex| (|Float|)))))
       (|isDomain| *1 (|FortranCode|))))
 (|assign| (*1 *1 *2 *3)
  (AND (|isDomain| *2 (|Symbol|))
       (|isDomain| *3 (|Vector| (|Expression| (|Integer|))))
       (|isDomain| *1 (|FortranCode|))))
 (|assign| (*1 *1 *2 *3)
  (AND (|isDomain| *2 (|Symbol|))
       (|isDomain| *3 (|Vector| (|Expression| (|Float|))))
       (|isDomain| *1 (|FortranCode|))))
 (|assign| (*1 *1 *2 *3)
  (AND (|isDomain| *2 (|Symbol|))
       (|isDomain| *3 (|Vector| (|Expression| (|Complex| (|Float|)))))
       (|isDomain| *1 (|FortranCode|))))
 (|assign| (*1 *1 *2 *3 *4)
  (AND (|isDomain| *2 (|Symbol|))
       (|isDomain| *3 (|List| (|Polynomial| (|Integer|))))
       (|isDomain| *4 (|Expression| (|Integer|)))
       (|isDomain| *1 (|FortranCode|))))
 (|assign| (*1 *1 *2 *3 *4)
  (AND (|isDomain| *2 (|Symbol|))
       (|isDomain| *3 (|List| (|Polynomial| (|Integer|))))
       (|isDomain| *4 (|Expression| (|Float|)))
       (|isDomain| *1 (|FortranCode|))))
 (|assign| (*1 *1 *2 *3 *4)
  (AND (|isDomain| *2 (|Symbol|))
       (|isDomain| *3 (|List| (|Polynomial| (|Integer|))))
       (|isDomain| *4 (|Expression| (|Complex| (|Float|))))
       (|isDomain| *1 (|FortranCode|))))
 (|block| (*1 *1 *2)
  (AND (|isDomain| *2 (|List| (|FortranCode|)))
       (|isDomain| *1 (|FortranCode|))))
 (|stop| (*1 *1) (|isDomain| *1 (|FortranCode|)))
 (|save| (*1 *1) (|isDomain| *1 (|FortranCode|)))
 (|printStatement| (*1 *1 *2)
  (AND (|isDomain| *2 (|List| (|OutputForm|)))
       (|isDomain| *1 (|FortranCode|))))
 (|common| (*1 *1 *2 *3)
  (AND (|isDomain| *3 (|List| (|Symbol|))) (|isDomain| *2 (|Symbol|))
       (|isDomain| *1 (|FortranCode|))))
 (|operation| (*1 *2 *1)
  (AND
   (|isDomain| *2
               (|Union| (|:| |Null| "null") (|:| |Assignment| "assignment")
                        (|:| |Conditional| "conditional")
                        (|:| |Return| "return") (|:| |Block| "block")
                        (|:| |Comment| "comment") (|:| |Call| "call")
                        (|:| |For| "for") (|:| |While| "while")
                        (|:| |Repeat| "repeat") (|:| |Goto| "goto")
                        (|:| |Continue| "continue")
                        (|:| |ArrayAssignment| "arrayAssignment")
                        (|:| |Save| "save") (|:| |Stop| "stop")
                        (|:| |Common| "common") (|:| |Print| "print")))
   (|isDomain| *1 (|FortranCode|))))
 (|code| (*1 *2 *1)
  (AND
   (|isDomain| *2
               (|Union| (|:| |nullBranch| "null")
                        (|:| |assignmentBranch|
                             (|Record| (|:| |var| (|Symbol|))
                                       (|:| |arrayIndex|
                                            (|List|
                                             (|Polynomial| (|Integer|))))
                                       (|:| |rand|
                                            (|Record|
                                             (|:| |ints2Floats?| (|Boolean|))
                                             (|:| |expr| (|OutputForm|))))))
                        (|:| |arrayAssignmentBranch|
                             (|Record| (|:| |var| (|Symbol|))
                                       (|:| |rand| (|OutputForm|))
                                       (|:| |ints2Floats?| (|Boolean|))))
                        (|:| |conditionalBranch|
                             (|Record| (|:| |switch| (|Switch|))
                                       (|:| |thenClause| (|FortranCode|))
                                       (|:| |elseClause| (|FortranCode|))))
                        (|:| |returnBranch|
                             (|Record| (|:| |empty?| (|Boolean|))
                                       (|:| |value|
                                            (|Record|
                                             (|:| |ints2Floats?| (|Boolean|))
                                             (|:| |expr| (|OutputForm|))))))
                        (|:| |blockBranch| (|List| (|FortranCode|)))
                        (|:| |commentBranch| (|List| (|String|)))
                        (|:| |callBranch| (|String|))
                        (|:| |forBranch|
                             (|Record|
                              (|:| |range|
                                   (|SegmentBinding|
                                    (|Polynomial| (|Integer|))))
                              (|:| |span| (|Polynomial| (|Integer|)))
                              (|:| |body| (|FortranCode|))))
                        (|:| |labelBranch| (|SingleInteger|))
                        (|:| |loopBranch|
                             (|Record| (|:| |switch| (|Switch|))
                                       (|:| |body| (|FortranCode|))))
                        (|:| |commonBranch|
                             (|Record| (|:| |name| (|Symbol|))
                                       (|:| |contents| (|List| (|Symbol|)))))
                        (|:| |printBranch| (|List| (|OutputForm|)))))
   (|isDomain| *1 (|FortranCode|))))
 (|printCode| (*1 *2 *1)
  (AND (|isDomain| *2 (|Void|)) (|isDomain| *1 (|FortranCode|))))
 (|getCode| (*1 *2 *1)
  (AND (|isDomain| *2 (|List| (|String|))) (|isDomain| *1 (|FortranCode|))))
 (|setLabelValue| (*1 *2 *2)
  (AND (|isDomain| *2 (|SingleInteger|)) (|isDomain| *1 (|FortranCode|)))))
((~= (((|Boolean|) $ $) NIL)) (|whileLoop| (($ (|Switch|) $) 96))
 (|stop| (($) 85)) (|setLabelValue| (((|SingleInteger|) (|SingleInteger|)) 37))
 (|save| (($) 86))
 (|returns| (($) 99) (($ (|Expression| (|MachineFloat|))) 105)
  (($ (|Expression| (|MachineInteger|))) 102)
  (($ (|Expression| (|MachineComplex|))) 108)
  (($ (|Expression| (|Float|))) 114) (($ (|Expression| (|Integer|))) 111)
  (($ (|Expression| (|Complex| (|Float|)))) 117))
 (|repeatUntilLoop| (($ (|Switch|) $) 97))
 (|printStatement| (($ (|List| (|OutputForm|))) 87))
 (|printCode| (((|Void|) $) 82))
 (|operation|
  (((|Union| (|:| |Null| "null") (|:| |Assignment| "assignment")
             (|:| |Conditional| "conditional") (|:| |Return| "return")
             (|:| |Block| "block") (|:| |Comment| "comment")
             (|:| |Call| "call") (|:| |For| "for") (|:| |While| "while")
             (|:| |Repeat| "repeat") (|:| |Goto| "goto")
             (|:| |Continue| "continue")
             (|:| |ArrayAssignment| "arrayAssignment") (|:| |Save| "save")
             (|:| |Stop| "stop") (|:| |Common| "common") (|:| |Print| "print"))
    $)
   45))
 (|latex| (((|String|) $) NIL))
 (|hashUpdate!| (((|HashState|) (|HashState|) $) NIL))
 (|hash| (((|SingleInteger|) $) NIL)) (|gotoJump| (($ (|SingleInteger|)) 62))
 (|getCode| (((|List| (|String|)) $) 43))
 (|forLoop| (($ (|SegmentBinding| (|Polynomial| (|Integer|))) $) 93)
  (($ (|SegmentBinding| (|Polynomial| (|Integer|))) (|Polynomial| (|Integer|))
    $)
   94))
 (|continue| (($ (|SingleInteger|)) 95))
 (|cond| (($ (|Switch|) $) 119) (($ (|Switch|) $ $) 120))
 (|common| (($ (|Symbol|) (|List| (|Symbol|))) 84))
 (|comment| (($ (|String|)) 90) (($ (|List| (|String|))) 88))
 (|coerce| (((|OutputForm|) $) 122))
 (|code|
  (((|Union| (|:| |nullBranch| "null")
             (|:| |assignmentBranch|
                  (|Record| (|:| |var| (|Symbol|))
                            (|:| |arrayIndex|
                                 (|List| (|Polynomial| (|Integer|))))
                            (|:| |rand|
                                 (|Record| (|:| |ints2Floats?| (|Boolean|))
                                           (|:| |expr| (|OutputForm|))))))
             (|:| |arrayAssignmentBranch|
                  (|Record| (|:| |var| (|Symbol|)) (|:| |rand| (|OutputForm|))
                            (|:| |ints2Floats?| (|Boolean|))))
             (|:| |conditionalBranch|
                  (|Record| (|:| |switch| (|Switch|)) (|:| |thenClause| $)
                            (|:| |elseClause| $)))
             (|:| |returnBranch|
                  (|Record| (|:| |empty?| (|Boolean|))
                            (|:| |value|
                                 (|Record| (|:| |ints2Floats?| (|Boolean|))
                                           (|:| |expr| (|OutputForm|))))))
             (|:| |blockBranch| (|List| $))
             (|:| |commentBranch| (|List| (|String|)))
             (|:| |callBranch| (|String|))
             (|:| |forBranch|
                  (|Record|
                   (|:| |range| (|SegmentBinding| (|Polynomial| (|Integer|))))
                   (|:| |span| (|Polynomial| (|Integer|))) (|:| |body| $)))
             (|:| |labelBranch| (|SingleInteger|))
             (|:| |loopBranch|
                  (|Record| (|:| |switch| (|Switch|)) (|:| |body| $)))
             (|:| |commonBranch|
                  (|Record| (|:| |name| (|Symbol|))
                            (|:| |contents| (|List| (|Symbol|)))))
             (|:| |printBranch| (|List| (|OutputForm|))))
    $)
   55))
 (|call| (($ (|String|)) 191)) (|block| (($ (|List| $)) 118))
 (|assign| (($ (|Symbol|) (|String|)) 124)
  (($ (|Symbol|) (|Expression| (|MachineInteger|))) 164)
  (($ (|Symbol|) (|Expression| (|MachineFloat|))) 165)
  (($ (|Symbol|) (|Expression| (|MachineComplex|))) 166)
  (($ (|Symbol|) (|Matrix| (|MachineInteger|))) 127)
  (($ (|Symbol|) (|Matrix| (|MachineFloat|))) 130)
  (($ (|Symbol|) (|Matrix| (|MachineComplex|))) 133)
  (($ (|Symbol|) (|Vector| (|MachineInteger|))) 136)
  (($ (|Symbol|) (|Vector| (|MachineFloat|))) 139)
  (($ (|Symbol|) (|Vector| (|MachineComplex|))) 142)
  (($ (|Symbol|) (|Matrix| (|Expression| (|MachineInteger|)))) 145)
  (($ (|Symbol|) (|Matrix| (|Expression| (|MachineFloat|)))) 148)
  (($ (|Symbol|) (|Matrix| (|Expression| (|MachineComplex|)))) 151)
  (($ (|Symbol|) (|Vector| (|Expression| (|MachineInteger|)))) 154)
  (($ (|Symbol|) (|Vector| (|Expression| (|MachineFloat|)))) 157)
  (($ (|Symbol|) (|Vector| (|Expression| (|MachineComplex|)))) 160)
  (($ (|Symbol|) (|List| (|Polynomial| (|Integer|)))
    (|Expression| (|MachineInteger|)))
   161)
  (($ (|Symbol|) (|List| (|Polynomial| (|Integer|)))
    (|Expression| (|MachineFloat|)))
   162)
  (($ (|Symbol|) (|List| (|Polynomial| (|Integer|)))
    (|Expression| (|MachineComplex|)))
   163)
  (($ (|Symbol|) (|Expression| (|Integer|))) 188)
  (($ (|Symbol|) (|Expression| (|Float|))) 189)
  (($ (|Symbol|) (|Expression| (|Complex| (|Float|)))) 190)
  (($ (|Symbol|) (|Matrix| (|Expression| (|Integer|)))) 169)
  (($ (|Symbol|) (|Matrix| (|Expression| (|Float|)))) 172)
  (($ (|Symbol|) (|Matrix| (|Expression| (|Complex| (|Float|))))) 175)
  (($ (|Symbol|) (|Vector| (|Expression| (|Integer|)))) 178)
  (($ (|Symbol|) (|Vector| (|Expression| (|Float|)))) 181)
  (($ (|Symbol|) (|Vector| (|Expression| (|Complex| (|Float|))))) 184)
  (($ (|Symbol|) (|List| (|Polynomial| (|Integer|)))
    (|Expression| (|Integer|)))
   185)
  (($ (|Symbol|) (|List| (|Polynomial| (|Integer|))) (|Expression| (|Float|)))
   186)
  (($ (|Symbol|) (|List| (|Polynomial| (|Integer|)))
    (|Expression| (|Complex| (|Float|))))
   187))
 (= (((|Boolean|) $ $) NIL)))
FC
(((|SetCategory|) . T))
(((|BasicType|) . T) ((|CoercibleTo| (|OutputForm|)) . T) ((|SetCategory|) . T))
((|constructor|
  (NIL
   "This domain builds representations of program code segments for use with the FortranProgram domain."))
 (|setLabelValue|
  (((|SingleInteger|) (|SingleInteger|))
   "\\spad{setLabelValue(i)} resets the counter which produces labels to \\spad{i}"))
 (|getCode|
  (((|List| (|String|)) $)
   "\\spad{getCode(f)} returns a list of strings representing \\spad{f} in Fortran notation. This is used by the FortranProgram domain."))
 (|printCode|
  (((|Void|) $)
   "\\spad{printCode(f)} prints out \\spad{f} in FORTRAN notation."))
 (|code|
  (((|Union| (|:| |nullBranch| "null")
             (|:| |assignmentBranch|
                  (|Record| (|:| |var| (|Symbol|))
                            (|:| |arrayIndex|
                                 (|List| (|Polynomial| (|Integer|))))
                            (|:| |rand|
                                 (|Record| (|:| |ints2Floats?| (|Boolean|))
                                           (|:| |expr| (|OutputForm|))))))
             (|:| |arrayAssignmentBranch|
                  (|Record| (|:| |var| (|Symbol|)) (|:| |rand| (|OutputForm|))
                            (|:| |ints2Floats?| (|Boolean|))))
             (|:| |conditionalBranch|
                  (|Record| (|:| |switch| (|Switch|)) (|:| |thenClause| $)
                            (|:| |elseClause| $)))
             (|:| |returnBranch|
                  (|Record| (|:| |empty?| (|Boolean|))
                            (|:| |value|
                                 (|Record| (|:| |ints2Floats?| (|Boolean|))
                                           (|:| |expr| (|OutputForm|))))))
             (|:| |blockBranch| (|List| $))
             (|:| |commentBranch| (|List| (|String|)))
             (|:| |callBranch| (|String|))
             (|:| |forBranch|
                  (|Record|
                   (|:| |range| (|SegmentBinding| (|Polynomial| (|Integer|))))
                   (|:| |span| (|Polynomial| (|Integer|))) (|:| |body| $)))
             (|:| |labelBranch| (|SingleInteger|))
             (|:| |loopBranch|
                  (|Record| (|:| |switch| (|Switch|)) (|:| |body| $)))
             (|:| |commonBranch|
                  (|Record| (|:| |name| (|Symbol|))
                            (|:| |contents| (|List| (|Symbol|)))))
             (|:| |printBranch| (|List| (|OutputForm|))))
    $)
   "\\spad{code(f)} returns the internal representation of the object represented by \\spad{f}."))
 (|operation|
  (((|Union| (|:| |Null| "null") (|:| |Assignment| "assignment")
             (|:| |Conditional| "conditional") (|:| |Return| "return")
             (|:| |Block| "block") (|:| |Comment| "comment")
             (|:| |Call| "call") (|:| |For| "for") (|:| |While| "while")
             (|:| |Repeat| "repeat") (|:| |Goto| "goto")
             (|:| |Continue| "continue")
             (|:| |ArrayAssignment| "arrayAssignment") (|:| |Save| "save")
             (|:| |Stop| "stop") (|:| |Common| "common") (|:| |Print| "print"))
    $)
   "\\spad{operation(f)} returns the name of the operation represented by \\spad{f}."))
 (|common|
  (($ (|Symbol|) (|List| (|Symbol|)))
   "\\spad{common(name,{} contents)} creates a representation a named common block."))
 (|printStatement|
  (($ (|List| (|OutputForm|)))
   "\\spad{printStatement(l)} creates a representation of a PRINT statement."))
 (|save| (($) "\\spad{save()} creates a representation of a SAVE statement."))
 (|stop| (($) "\\spad{stop()} creates a representation of a STOP statement."))
 (|block|
  (($ (|List| $))
   "\\spad{block(l)} creates a representation of the statements in \\spad{l} as a block."))
 (|assign|
  (($ (|Symbol|) (|List| (|Polynomial| (|Integer|)))
    (|Expression| (|Complex| (|Float|))))
   "\\spad{assign(x,{} l,{} y)} creates a representation of the assignment of \\spad{y} to the \\spad{l}\\spad{'}th element of array \\spad{x} (\\spad{l} is a list of indices).")
  (($ (|Symbol|) (|List| (|Polynomial| (|Integer|))) (|Expression| (|Float|)))
   "\\spad{assign(x,{} l,{} y)} creates a representation of the assignment of \\spad{y} to the \\spad{l}\\spad{'}th element of array \\spad{x} (\\spad{l} is a list of indices).")
  (($ (|Symbol|) (|List| (|Polynomial| (|Integer|)))
    (|Expression| (|Integer|)))
   "\\spad{assign(x,{} l,{} y)} creates a representation of the assignment of \\spad{y} to the \\spad{l}\\spad{'}th element of array \\spad{x} (\\spad{l} is a list of indices).")
  (($ (|Symbol|) (|Vector| (|Expression| (|Complex| (|Float|)))))
   "\\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.")
  (($ (|Symbol|) (|Vector| (|Expression| (|Float|))))
   "\\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.")
  (($ (|Symbol|) (|Vector| (|Expression| (|Integer|))))
   "\\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.")
  (($ (|Symbol|) (|Matrix| (|Expression| (|Complex| (|Float|)))))
   "\\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.")
  (($ (|Symbol|) (|Matrix| (|Expression| (|Float|))))
   "\\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.")
  (($ (|Symbol|) (|Matrix| (|Expression| (|Integer|))))
   "\\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.")
  (($ (|Symbol|) (|Expression| (|Complex| (|Float|))))
   "\\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.")
  (($ (|Symbol|) (|Expression| (|Float|)))
   "\\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.")
  (($ (|Symbol|) (|Expression| (|Integer|)))
   "\\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.")
  (($ (|Symbol|) (|List| (|Polynomial| (|Integer|)))
    (|Expression| (|MachineComplex|)))
   "\\spad{assign(x,{} l,{} y)} creates a representation of the assignment of \\spad{y} to the \\spad{l}\\spad{'}th element of array \\spad{x} (\\spad{l} is a list of indices).")
  (($ (|Symbol|) (|List| (|Polynomial| (|Integer|)))
    (|Expression| (|MachineFloat|)))
   "\\spad{assign(x,{} l,{} y)} creates a representation of the assignment of \\spad{y} to the \\spad{l}\\spad{'}th element of array \\spad{x} (\\spad{l} is a list of indices).")
  (($ (|Symbol|) (|List| (|Polynomial| (|Integer|)))
    (|Expression| (|MachineInteger|)))
   "\\spad{assign(x,{} l,{} y)} creates a representation of the assignment of \\spad{y} to the \\spad{l}\\spad{'}th element of array \\spad{x} (\\spad{l} is a list of indices).")
  (($ (|Symbol|) (|Vector| (|Expression| (|MachineComplex|))))
   "\\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.")
  (($ (|Symbol|) (|Vector| (|Expression| (|MachineFloat|))))
   "\\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.")
  (($ (|Symbol|) (|Vector| (|Expression| (|MachineInteger|))))
   "\\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.")
  (($ (|Symbol|) (|Matrix| (|Expression| (|MachineComplex|))))
   "\\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.")
  (($ (|Symbol|) (|Matrix| (|Expression| (|MachineFloat|))))
   "\\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.")
  (($ (|Symbol|) (|Matrix| (|Expression| (|MachineInteger|))))
   "\\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.")
  (($ (|Symbol|) (|Vector| (|MachineComplex|)))
   "\\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.")
  (($ (|Symbol|) (|Vector| (|MachineFloat|)))
   "\\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.")
  (($ (|Symbol|) (|Vector| (|MachineInteger|)))
   "\\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.")
  (($ (|Symbol|) (|Matrix| (|MachineComplex|)))
   "\\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.")
  (($ (|Symbol|) (|Matrix| (|MachineFloat|)))
   "\\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.")
  (($ (|Symbol|) (|Matrix| (|MachineInteger|)))
   "\\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.")
  (($ (|Symbol|) (|Expression| (|MachineComplex|)))
   "\\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.")
  (($ (|Symbol|) (|Expression| (|MachineFloat|)))
   "\\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.")
  (($ (|Symbol|) (|Expression| (|MachineInteger|)))
   "\\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y.")
  (($ (|Symbol|) (|String|))
   "\\spad{assign(x,{} y)} creates a representation of the FORTRAN expression x=y."))
 (|cond|
  (($ (|Switch|) $ $)
   "\\spad{cond(s,{} e,{} f)} creates a representation of the FORTRAN expression IF (\\spad{s}) THEN \\spad{e} ELSE \\spad{f}.")
  (($ (|Switch|) $)
   "\\spad{cond(s,{} e)} creates a representation of the FORTRAN expression IF (\\spad{s}) THEN \\spad{e}."))
 (|returns|
  (($ (|Expression| (|Complex| (|Float|))))
   "\\spad{returns(e)} creates a representation of a FORTRAN RETURN statement with a returned value.")
  (($ (|Expression| (|Integer|)))
   "\\spad{returns(e)} creates a representation of a FORTRAN RETURN statement with a returned value.")
  (($ (|Expression| (|Float|)))
   "\\spad{returns(e)} creates a representation of a FORTRAN RETURN statement with a returned value.")
  (($ (|Expression| (|MachineComplex|)))
   "\\spad{returns(e)} creates a representation of a FORTRAN RETURN statement with a returned value.")
  (($ (|Expression| (|MachineInteger|)))
   "\\spad{returns(e)} creates a representation of a FORTRAN RETURN statement with a returned value.")
  (($ (|Expression| (|MachineFloat|)))
   "\\spad{returns(e)} creates a representation of a FORTRAN RETURN statement with a returned value.")
  (($)
   "\\spad{returns()} creates a representation of a FORTRAN RETURN statement."))
 (|call|
  (($ (|String|))
   "\\spad{call(s)} creates a representation of a FORTRAN CALL statement"))
 (|comment|
  (($ (|List| (|String|)))
   "\\spad{comment(s)} creates a representation of the Strings \\spad{s} as a multi-line FORTRAN comment.")
  (($ (|String|))
   "\\spad{comment(s)} creates a representation of the String \\spad{s} as a single FORTRAN comment."))
 (|continue|
  (($ (|SingleInteger|))
   "\\spad{continue(l)} creates a representation of a FORTRAN CONTINUE labelled with \\spad{l}"))
 (|gotoJump|
  (($ (|SingleInteger|))
   "\\spad{gotoJump(l)} creates a representation of a FORTRAN GOTO statement"))
 (|repeatUntilLoop|
  (($ (|Switch|) $)
   "\\spad{repeatUntilLoop(s,{} c)} creates a repeat ... until loop in FORTRAN."))
 (|whileLoop|
  (($ (|Switch|) $)
   "\\spad{whileLoop(s,{} c)} creates a while loop in FORTRAN."))
 (|forLoop|
  (($ (|SegmentBinding| (|Polynomial| (|Integer|))) (|Polynomial| (|Integer|))
    $)
   "\\spad{forLoop(i=1..10,{} n,{} c)} creates a representation of a FORTRAN DO loop with \\spad{i} ranging over the values 1 to 10 by \\spad{n}.")
  (($ (|SegmentBinding| (|Polynomial| (|Integer|))) $)
   "\\spad{forLoop(i=1..10,{} c)} creates a representation of a FORTRAN DO loop with \\spad{i} ranging over the values 1 to 10."))
 (|coerce|
  (((|OutputForm|) $)
   "\\spad{coerce(f)} returns an object of type OutputForm.")))
(("documentation" 0 32482) ("ancestors" 0 32401) ("parents" 0 32377)
 ("abbreviation" 0 32374) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 26681) ("modemaps" 0 15278) ("sourceFile" 0 15244)
 ("constructorCategory" 0 7849) ("constructorModemap" 0 82)
 ("constructorKind" 0 73) ("constructorForm" 0 57) ("NILADIC" 0 20))