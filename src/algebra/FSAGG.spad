)abbrev category FSAGG FiniteSetAggregate
++ Author: Michael Monagan; revised by Manuel Bronstein and Richard Jenks
++ Date Created: August 87 through August 88
++ Basic Operations:
++ Related Constructors:
++ Also See:
++ AMS Classifications:
++ Keywords:
++ References:
++ Description:
++ A finite-set aggregate models the notion of a finite set, that is,
++ a collection of elements characterized by membership, but not
++ by order or multiplicity.
++ See \spadtype{Set} for an example.
FiniteSetAggregate(S : SetCategory) : Category ==
  Join(Dictionary S, SetAggregate S, finiteAggregate) with
    cardinality : % -> NonNegativeInteger
      ++ cardinality(u) returns the number of elements of u.
      ++ Note: \spad{cardinality(u) = #u}.
    if S has Finite then
      Finite
      complement : % -> %
        ++ complement(u) returns the complement of the set u,
        ++ i.e. the set of all values not in u.
      universe : () -> %
        ++ universe()$D returns the universal set for finite set aggregate D.
    if S has Comparable then Comparable

 add

   import from NonNegativeInteger
   import from List(S)

   s <= t          == s = intersect(s, t)
   s < t           == #s < #t and s <= t
   s = t           == #s = #t and empty? difference(s, t)
   set   l         == construct l
   cardinality s   == #s
   construct l     == (s := set(); for x in l repeat insert!(x, s); s)
   count(x : S, s : %) == (member?(x, s) => 1; 0)
   subset?(s, t)   ==
       #s <= #t and every?((x : S) : Boolean +-> member?(x, t), parts s)

   coerce(s : %) : OutputForm ==
       brace [x::OutputForm for x in parts s]$List(OutputForm)

   intersect(s, t) ==
       i := set()
       for x in parts s | member?(x, t) repeat insert!(x, i)
       i

   difference(s : %, t : %) ==
       m := copy s
       for x in parts t repeat remove!(x, m)
       m

   symmetricDifference(s, t) ==
       d := copy s
       for x in parts t repeat
           if member?(x, s) then remove!(x, d) else insert!(x, d)
       d

   union(s : %, t : %) ==
       u := copy s
       for x in parts t repeat insert!(x, u)
       u

   if S has Finite then
       universe()   == set([index(i::PositiveInteger) for i in 1..size()$S])
       complement s == difference(universe(), s )
       size()       == 2 ^ size()$S
       index i     ==
           set([index(j::PositiveInteger)$S for j in 1..size()$S
                | bit?(i-1, j-1)])

       lookup s ==
           n : PositiveInteger := 1
           for x in parts s repeat
               n := n + 2 ^ ((lookup(x) - 1)::NonNegativeInteger)
           n

   if S has OrderedSet then
       max s ==
           empty?(l := parts s) => error "Empty set"
           reduce("max", l)

       min s ==
           empty?(l := parts s) => error "Empty set"
           reduce("min", l)

   if S has Comparable then

       smaller?(s1, s2) ==
           ls1 := sort(smaller?$S, parts s1)$List(S)
           ls2 := sort(smaller?$S, parts s2)$List(S)
           smaller?(ls1, ls2)$List(S)

