10693               (|UnivariateSkewPolynomialCategory&| S R)
|domain|
(((|UnivariateSkewPolynomialCategory&| |#1| |#2|)
  (CATEGORY |domain| (SIGNATURE * (|#1| (|Integer|) |#1|))
   (SIGNATURE * (|#1| (|NonNegativeInteger|) |#1|))
   (SIGNATURE |coerce| (|#1| (|Integer|)))
   (SIGNATURE |leftLcm| (|#1| |#1| |#1|))
   (SIGNATURE |right_ext_ext_GCD|
    ((|Record| (|:| |generator| |#1|) (|:| |coef1| |#1|) (|:| |coef2| |#1|)
               (|:| |coefu| |#1|) (|:| |coefv| |#1|))
     |#1| |#1|))
   (SIGNATURE |rightExtendedGcd|
    ((|Record| (|:| |coef1| |#1|) (|:| |coef2| |#1|) (|:| |generator| |#1|))
     |#1| |#1|))
   (SIGNATURE |rightGcd| (|#1| |#1| |#1|))
   (SIGNATURE |rightExactQuotient| ((|Union| |#1| "failed") |#1| |#1|))
   (SIGNATURE |rightRemainder| (|#1| |#1| |#1|))
   (SIGNATURE |rightQuotient| (|#1| |#1| |#1|))
   (SIGNATURE |rightLcm| (|#1| |#1| |#1|))
   (SIGNATURE |leftExtendedGcd|
    ((|Record| (|:| |coef1| |#1|) (|:| |coef2| |#1|) (|:| |generator| |#1|))
     |#1| |#1|))
   (SIGNATURE |leftGcd| (|#1| |#1| |#1|))
   (SIGNATURE |leftExactQuotient| ((|Union| |#1| "failed") |#1| |#1|))
   (SIGNATURE |leftRemainder| (|#1| |#1| |#1|))
   (SIGNATURE |leftQuotient| (|#1| |#1| |#1|))
   (SIGNATURE |exquo| ((|Union| |#1| "failed") |#1| |#2|))
   (SIGNATURE |exquo| ((|Union| |#1| "failed") |#1| |#1|))
   (SIGNATURE |primitivePart| (|#1| |#1|)) (SIGNATURE |content| (|#2| |#1|))
   (SIGNATURE |coefficients| ((|List| |#2|) |#1|))
   (SIGNATURE |retractIfCan| ((|Union| |#2| #1="failed") |#1|))
   (SIGNATURE |coerce| (|#1| |#2|))
   (SIGNATURE |coerce| (|#1| (|Fraction| (|Integer|))))
   (SIGNATURE |retractIfCan| ((|Union| (|Fraction| (|Integer|)) #1#) |#1|))
   (SIGNATURE |retractIfCan| ((|Union| (|Integer|) #1#) |#1|))
   (SIGNATURE |coerce| (|#1| |#1|))
   (SIGNATURE * (|#1| |#1| (|Fraction| (|Integer|))))
   (SIGNATURE * (|#1| (|Fraction| (|Integer|)) |#1|))
   (SIGNATURE * (|#1| |#2| |#1|)) (SIGNATURE * (|#1| |#1| |#2|))
   (SIGNATURE * (|#1| |#1| |#1|)) (SIGNATURE * (|#1| (|PositiveInteger|) |#1|))
   (SIGNATURE |coerce| ((|OutputForm|) |#1|)))
  (|UnivariateSkewPolynomialCategory| |#2|) (|Ring|))
 (T |UnivariateSkewPolynomialCategory&|))
(CATEGORY |domain| (SIGNATURE * (|#1| (|Integer|) |#1|))
 (SIGNATURE * (|#1| (|NonNegativeInteger|) |#1|))
 (SIGNATURE |coerce| (|#1| (|Integer|))) (SIGNATURE |leftLcm| (|#1| |#1| |#1|))
 (SIGNATURE |right_ext_ext_GCD|
  ((|Record| (|:| |generator| |#1|) (|:| |coef1| |#1|) (|:| |coef2| |#1|)
             (|:| |coefu| |#1|) (|:| |coefv| |#1|))
   |#1| |#1|))
 (SIGNATURE |rightExtendedGcd|
  ((|Record| (|:| |coef1| |#1|) (|:| |coef2| |#1|) (|:| |generator| |#1|)) |#1|
   |#1|))
 (SIGNATURE |rightGcd| (|#1| |#1| |#1|))
 (SIGNATURE |rightExactQuotient| ((|Union| |#1| "failed") |#1| |#1|))
 (SIGNATURE |rightRemainder| (|#1| |#1| |#1|))
 (SIGNATURE |rightQuotient| (|#1| |#1| |#1|))
 (SIGNATURE |rightLcm| (|#1| |#1| |#1|))
 (SIGNATURE |leftExtendedGcd|
  ((|Record| (|:| |coef1| |#1|) (|:| |coef2| |#1|) (|:| |generator| |#1|)) |#1|
   |#1|))
 (SIGNATURE |leftGcd| (|#1| |#1| |#1|))
 (SIGNATURE |leftExactQuotient| ((|Union| |#1| "failed") |#1| |#1|))
 (SIGNATURE |leftRemainder| (|#1| |#1| |#1|))
 (SIGNATURE |leftQuotient| (|#1| |#1| |#1|))
 (SIGNATURE |exquo| ((|Union| |#1| "failed") |#1| |#2|))
 (SIGNATURE |exquo| ((|Union| |#1| "failed") |#1| |#1|))
 (SIGNATURE |primitivePart| (|#1| |#1|)) (SIGNATURE |content| (|#2| |#1|))
 (SIGNATURE |coefficients| ((|List| |#2|) |#1|))
 (SIGNATURE |retractIfCan| ((|Union| |#2| #1="failed") |#1|))
 (SIGNATURE |coerce| (|#1| |#2|))
 (SIGNATURE |coerce| (|#1| (|Fraction| (|Integer|))))
 (SIGNATURE |retractIfCan| ((|Union| (|Fraction| (|Integer|)) #1#) |#1|))
 (SIGNATURE |retractIfCan| ((|Union| (|Integer|) #1#) |#1|))
 (SIGNATURE |coerce| (|#1| |#1|))
 (SIGNATURE * (|#1| |#1| (|Fraction| (|Integer|))))
 (SIGNATURE * (|#1| (|Fraction| (|Integer|)) |#1|))
 (SIGNATURE * (|#1| |#2| |#1|)) (SIGNATURE * (|#1| |#1| |#2|))
 (SIGNATURE * (|#1| |#1| |#1|)) (SIGNATURE * (|#1| (|PositiveInteger|) |#1|))
 (SIGNATURE |coerce| ((|OutputForm|) |#1|)))
"/git/fricas/src/algebra/OREPCAT.spad"
((|right_ext_ext_GCD|
  (((|Record| (|:| |generator| $) (|:| |coef1| $) (|:| |coef2| $)
              (|:| |coefu| $) (|:| |coefv| $))
    $ $)
   59))
 (|rightRemainder| (($ $ $) 45)) (|rightQuotient| (($ $ $) 44))
 (|rightLcm| (($ $ $) 42)) (|rightGcd| (($ $ $) 51))
 (|rightExtendedGcd|
  (((|Record| (|:| |coef1| $) (|:| |coef2| $) (|:| |generator| $)) $ $) 46))
 (|rightExactQuotient| (((|Union| $ "failed") $ $) 49))
 (|retractIfCan| (((|Union| (|Integer|) #1="failed") $) NIL)
  (((|Union| (|Fraction| (|Integer|)) #1#) $) NIL) (((|Union| |#2| #1#) $) 25))
 (|primitivePart| (($ $) 35)) (|leftRemainder| (($ $ $) 39))
 (|leftQuotient| (($ $ $) 38)) (|leftLcm| (($ $ $) 47))
 (|leftGcd| (($ $ $) 53))
 (|leftExtendedGcd|
  (((|Record| (|:| |coef1| $) (|:| |coef2| $) (|:| |generator| $)) $ $) 41))
 (|leftExactQuotient| (((|Union| $ "failed") $ $) 48))
 (|exquo| (((|Union| $ "failed") $ $) NIL) (((|Union| $ "failed") $ |#2|) 28))
 (|content| ((|#2| $) 32))
 (|coerce| (((|OutputForm|) $) NIL) (($ $) NIL)
           (($ (|Fraction| (|Integer|))) NIL) (($ |#2|) 12)
           (($ (|Integer|)) NIL))
 (|coefficients| (((|List| |#2|) $) 18))
 (* (($ (|PositiveInteger|) $) NIL) (($ $ $) NIL) (($ $ |#2|) NIL)
    (($ |#2| $) 22) (($ (|Fraction| (|Integer|)) $) NIL)
    (($ $ (|Fraction| (|Integer|))) NIL) (($ (|NonNegativeInteger|) $) NIL)
    (($ (|Integer|) $) NIL)))
((|HasCategory| |#2| '(|Field|)) (|HasCategory| |#2| '(|IntegralDomain|))
 (|HasCategory| |#2| '(|CommutativeRing|)))
OREPCAT-
((|constructor|
  (NIL
   "This is the category of univariate skew polynomials over an Ore coefficient ring. The multiplication is given by \\spad{x a = \\sigma(a) x + \\delta a}. This category is an evolution of the types \\indented{2}{MonogenicLinearOperator,{} OppositeMonogenicLinearOperator,{} and} \\indented{2}{NonCommutativeOperatorDivision} developped by Jean Della Dora and Stephen \\spad{M}. Watt."))
 (|leftLcm|
  (($ $ $)
   "\\spad{leftLcm(a,{} b)} computes the value \\spad{m} of lowest degree such that \\spad{m = aa*a = bb*b} for some values \\spad{aa} and \\spad{bb}. The value \\spad{m} is computed using right-division."))
 (|right_ext_ext_GCD|
  (((|Record| (|:| |generator| $) (|:| |coef1| $) (|:| |coef2| $)
              (|:| |coefu| $) (|:| |coefv| $))
    $ $)
   "\\spad{right_ext_ext_GCD(a,{} b)} returns \\spad{g,{} c,{} d,{} u,{} v} such that \\spad{g = c * a + d * b = rightGcd(a,{} b)},{} \\spad{u * a = - v * b = leftLcm(a,{} b)} and matrix \\spad{matrix([[c,{} d],{} [u,{} v]])} is invertible."))
 (|rightExtendedGcd|
  (((|Record| (|:| |coef1| $) (|:| |coef2| $) (|:| |generator| $)) $ $)
   "\\spad{rightExtendedGcd(a,{} b)} returns \\spad{[c,{} d,{} g]} such that \\spad{g = c * a + d * b = rightGcd(a,{} b)}."))
 (|rightGcd|
  (($ $ $)
   "\\spad{rightGcd(a,{} b)} computes the value \\spad{g} of highest degree such that \\indented{3}{\\spad{a = aa*g}} \\indented{3}{\\spad{b = bb*g}} for some values \\spad{aa} and \\spad{bb}. The value \\spad{g} is computed using right-division."))
 (|rightExactQuotient|
  (((|Union| $ "failed") $ $)
   "\\spad{rightExactQuotient(a,{} b)} computes the value \\spad{q},{} if it exists such that \\spad{a = q*b}."))
 (|rightRemainder|
  (($ $ $)
   "\\spad{rightRemainder(a,{} b)} computes the pair \\spad{[q,{} r]} such that \\spad{a = q*b + r} and the degree of \\spad{r} is less than the degree of \\spad{b}. The value \\spad{r} is returned."))
 (|rightQuotient|
  (($ $ $)
   "\\spad{rightQuotient(a,{} b)} computes the pair \\spad{[q,{} r]} such that \\spad{a = q*b + r} and the degree of \\spad{r} is less than the degree of \\spad{b}. The value \\spad{q} is returned."))
 (|rightDivide|
  (((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $)
   "\\spad{rightDivide(a,{} b)} returns the pair \\spad{[q,{} r]} such that \\spad{a = q*b + r} and the degree of \\spad{r} is less than the degree of \\spad{b}. This process is called ``right division\\spad{''}."))
 (|rightLcm|
  (($ $ $)
   "\\spad{rightLcm(a,{} b)} computes the value \\spad{m} of lowest degree such that \\spad{m = a*aa = b*bb} for some values \\spad{aa} and \\spad{bb}. The value \\spad{m} is computed using left-division."))
 (|leftExtendedGcd|
  (((|Record| (|:| |coef1| $) (|:| |coef2| $) (|:| |generator| $)) $ $)
   "\\spad{leftExtendedGcd(a,{} b)} returns \\spad{[c,{} d,{} g]} such that \\spad{g = a * c + b * d = leftGcd(a,{} b)}."))
 (|leftGcd|
  (($ $ $)
   "\\spad{leftGcd(a,{} b)} computes the value \\spad{g} of highest degree such that \\indented{3}{\\spad{a = g*aa}} \\indented{3}{\\spad{b = g*bb}} for some values \\spad{aa} and \\spad{bb}. The value \\spad{g} is computed using left-division."))
 (|leftExactQuotient|
  (((|Union| $ "failed") $ $)
   "\\spad{leftExactQuotient(a,{} b)} computes the value \\spad{q},{} if it exists,{} \\indented{1}{such that \\spad{a = b*q}.}"))
 (|leftRemainder|
  (($ $ $)
   "\\spad{leftRemainder(a,{} b)} computes the pair \\spad{[q,{} r]} such that \\spad{a = b*q + r} and the degree of \\spad{r} is less than the degree of \\spad{b}. The value \\spad{r} is returned."))
 (|leftQuotient|
  (($ $ $)
   "\\spad{leftQuotient(a,{} b)} computes the pair \\spad{[q,{} r]} such that \\spad{a = b*q + r} and the degree of \\spad{r} is less than the degree of \\spad{b}. The value \\spad{q} is returned."))
 (|leftDivide|
  (((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $)
   "\\spad{leftDivide(a,{} b)} returns the pair \\spad{[q,{} r]} such that \\spad{a = b*q + r} and the degree of \\spad{r} is less than the degree of \\spad{b}. This process is called ``left division\\spad{''}."))
 (|monicRightDivide|
  (((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $)
   "\\spad{monicRightDivide(a,{} b)} returns the pair \\spad{[q,{} r]} such that \\spad{a = q*b + r} and the degree of \\spad{r} is less than the degree of \\spad{b}. \\spad{b} must be monic. This process is called ``right division\\spad{''}."))
 (|monicLeftDivide|
  (((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $)
   "\\spad{monicLeftDivide(a,{} b)} returns the pair \\spad{[q,{} r]} such that \\spad{a = b*q + r} and the degree of \\spad{r} is less than the degree of \\spad{b}. \\spad{b} must be monic. This process is called ``left division\\spad{''}."))
 (|exquo|
  (((|Union| $ "failed") $ |#2|)
   "\\spad{exquo(l,{} a)} returns the exact quotient of \\spad{l} by a,{} returning \\spad{\"failed\"} if this is not possible."))
 (|apply|
  ((|#2| $ |#2| |#2|)
   "\\spad{apply(p,{} c,{} m)} returns \\spad{p(m)} where the action is given by \\spad{x m = c sigma(m) + delta(m)}.")))
(("documentation" 0 5624) ("ancestors" 0 NIL) ("parents" 0 NIL)
 ("abbreviation" 0 5615) ("predicates" 0 5497) ("superDomain" 0 NIL)
 ("operationAlist" 0 4119) ("modemaps" 0 NIL) ("sourceFile" 0 4080)
 ("constructorCategory" 0 2187) ("constructorModemap" 0 71)
 ("constructorKind" 0 62) ("constructorForm" 0 20))