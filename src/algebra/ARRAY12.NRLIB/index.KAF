3401                (|OneDimensionalArrayFunctions2| A B)
|package|
(((|OneDimensionalArrayFunctions2| |#1| |#2|)
  (CATEGORY |package|
   (SIGNATURE |scan|
    ((|OneDimensionalArray| |#2|) (|Mapping| |#2| |#1| |#2|)
     (|OneDimensionalArray| |#1|) |#2|))
   (SIGNATURE |reduce|
    (|#2| (|Mapping| |#2| |#1| |#2|) (|OneDimensionalArray| |#1|) |#2|))
   (SIGNATURE |map|
    ((|OneDimensionalArray| |#2|) (|Mapping| |#2| |#1|)
     (|OneDimensionalArray| |#1|))))
  (|Type|) (|Type|))
 (T |OneDimensionalArrayFunctions2|))
(CATEGORY |package|
 (SIGNATURE |scan|
  ((|OneDimensionalArray| |#2|) (|Mapping| |#2| |#1| |#2|)
   (|OneDimensionalArray| |#1|) |#2|))
 (SIGNATURE |reduce|
  (|#2| (|Mapping| |#2| |#1| |#2|) (|OneDimensionalArray| |#1|) |#2|))
 (SIGNATURE |map|
  ((|OneDimensionalArray| |#2|) (|Mapping| |#2| |#1|)
   (|OneDimensionalArray| |#1|))))
"/git/fricas/src/algebra/ARRAY12.spad"
((|map| (*1 *2 *3 *4)
  (AND (|isDomain| *3 (|Mapping| *6 *5))
       (|isDomain| *4 (|OneDimensionalArray| *5)) (|ofCategory| *5 (|Type|))
       (|ofCategory| *6 (|Type|)) (|isDomain| *2 (|OneDimensionalArray| *6))
       (|isDomain| *1 (|OneDimensionalArrayFunctions2| *5 *6))))
 (|reduce| (*1 *2 *3 *4 *2)
  (AND (|isDomain| *3 (|Mapping| *2 *5 *2))
       (|isDomain| *4 (|OneDimensionalArray| *5)) (|ofCategory| *5 (|Type|))
       (|ofCategory| *2 (|Type|))
       (|isDomain| *1 (|OneDimensionalArrayFunctions2| *5 *2))))
 (|scan| (*1 *2 *3 *4 *5)
  (AND (|isDomain| *3 (|Mapping| *5 *6 *5))
       (|isDomain| *4 (|OneDimensionalArray| *6)) (|ofCategory| *6 (|Type|))
       (|ofCategory| *5 (|Type|)) (|isDomain| *2 (|OneDimensionalArray| *5))
       (|isDomain| *1 (|OneDimensionalArrayFunctions2| *6 *5)))))
((|scan|
  (((|OneDimensionalArray| |#2|) (|Mapping| |#2| |#1| |#2|)
    (|OneDimensionalArray| |#1|) |#2|)
   16))
 (|reduce|
  ((|#2| (|Mapping| |#2| |#1| |#2|) (|OneDimensionalArray| |#1|) |#2|) 18))
 (|map|
  (((|OneDimensionalArray| |#2|) (|Mapping| |#2| |#1|)
    (|OneDimensionalArray| |#1|))
   13)))
ARRAY12
((|constructor|
  (NIL
   "\\indented{1}{This package provides tools for operating on one-dimensional arrays} with unary and binary functions involving different underlying types"))
 (|map|
  (((|OneDimensionalArray| |#2|) (|Mapping| |#2| |#1|)
    (|OneDimensionalArray| |#1|))
   "\\spad{map(f,{} a)} applies function \\spad{f} to each member of one-dimensional array \\spad{a} resulting in a new one-dimensional array over a possibly different underlying domain."))
 (|reduce|
  ((|#2| (|Mapping| |#2| |#1| |#2|) (|OneDimensionalArray| |#1|) |#2|)
   "\\spad{reduce(f,{} a,{} r)} applies function \\spad{f} to each successive element of the one-dimensional array \\spad{a} and an accumulant initialized to \\spad{r}. For example,{} \\spad{reduce(_+\\$Integer,{} [1,{} 2,{} 3],{} 0)} does \\spad{3+(2+(1+0))}. Note: third argument \\spad{r} may be regarded as the identity element for the function \\spad{f}."))
 (|scan|
  (((|OneDimensionalArray| |#2|) (|Mapping| |#2| |#1| |#2|)
    (|OneDimensionalArray| |#1|) |#2|)
   "\\spad{scan(f,{} a,{} r)} successively applies \\spad{reduce(f,{} x,{} r)} to more and more leading sub-arrays \\spad{x} of one-dimensional array \\spad{a}. More precisely,{} if \\spad{a} is \\spad{[a1,{} a2,{} ...]},{} then \\spad{scan(f,{} a,{} r)} returns \\spad{[reduce(f,{} [a1],{} r),{} reduce(f,{} [a1,{} a2],{} r),{} ...]}.")))
(("documentation" 0 2039) ("ancestors" 0 NIL) ("parents" 0 NIL)
 ("abbreviation" 0 2031) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 1722) ("modemaps" 0 902) ("sourceFile" 0 863)
 ("constructorCategory" 0 527) ("constructorModemap" 0 68)
 ("constructorKind" 0 58) ("constructorForm" 0 20))