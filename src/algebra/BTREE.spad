)abbrev domain BTREE BinaryTree
++ Description: \spadtype{BinaryTree(S)} is the domain of all
++ binary trees. A binary tree over \spad{S} is either empty or has
++ a \spadfun{value} which is an S and a \spadfun{right}
++ and \spadfun{left} which are both BinaryTree(S).
BinaryTree(S : SetCategory) : Exports == Implementation where
  Exports == BinaryTreeCategory(S) with
     binaryTree : S -> %
       ++ binaryTree(v) is an non-empty binary tree
       ++ with value v, and left and right empty.
     binaryTree : (%, S, %) -> %
       ++ binaryTree(l, v, r) creates a binary tree with
       ++ value v and left subtree l and right subtree r.
  Implementation == add
     Rep := List Tree S

     t1 = t2 == (t1::Rep) =$Rep (t2::Rep)
     empty()== ([] ::Rep):: %
     node(l, v, r) == cons(tree(v, l::Rep), r::Rep)
     binaryTree(l, v, r) == node(l, v, r)
     binaryTree(v : S) == node(empty(), v, empty())
     empty? t == empty?(t)$Rep
     right t ==
       empty? t => error "binaryTree:no right"
       rest t
     left t ==
       empty? t => error "binaryTree:no left"
       children first t
     value t==
       empty? t => error "binaryTree:no value"
       value first t
     setvalue! (t, nd)==
       empty? t => error "binaryTree:no value to set"
       setvalue!(first(t::Rep), nd)
       nd
     setleft!(t1, t2) ==
       empty? t1 => error "binaryTree:no left to set"
       setchildren!(first(t1::Rep), t2::Rep)
       t1
     setright!(t1, t2) ==
       empty? t1 => error "binaryTree:no right to set"
       setrest!(t1 :: Rep, t2)

