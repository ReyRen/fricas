6026                (MAKEPROP '|Unittest| 'NILADIC T)
(|Unittest|)
|package|
(((|Unittest|)
  (CATEGORY |package| (SIGNATURE |testEquals| ((|Void|) (|String|) (|String|)))
   (SIGNATURE |xftestEquals| ((|Void|) (|String|) (|String|)))
   (SIGNATURE |testRealEquals| ((|Void|) (|String|) (|String|)))
   (SIGNATURE |xftestRealEquals| ((|Void|) (|String|) (|String|)))
   (SIGNATURE |testComplexEquals| ((|Void|) (|String|) (|String|)))
   (SIGNATURE |xftestComplexEquals| ((|Void|) (|String|) (|String|)))
   (SIGNATURE |testNotEquals| ((|Void|) (|String|) (|String|)))
   (SIGNATURE |xftestNotEquals| ((|Void|) (|String|) (|String|)))
   (SIGNATURE |testTrue| ((|Void|) (|String|)))
   (SIGNATURE |xftestTrue| ((|Void|) (|String|)))
   (SIGNATURE |testLibraryError| ((|Void|) (|String|)))
   (SIGNATURE |xftestLibraryError| ((|Void|) (|String|)))))
 (T |Unittest|))
(CATEGORY |package| (SIGNATURE |testEquals| ((|Void|) (|String|) (|String|)))
 (SIGNATURE |xftestEquals| ((|Void|) (|String|) (|String|)))
 (SIGNATURE |testRealEquals| ((|Void|) (|String|) (|String|)))
 (SIGNATURE |xftestRealEquals| ((|Void|) (|String|) (|String|)))
 (SIGNATURE |testComplexEquals| ((|Void|) (|String|) (|String|)))
 (SIGNATURE |xftestComplexEquals| ((|Void|) (|String|) (|String|)))
 (SIGNATURE |testNotEquals| ((|Void|) (|String|) (|String|)))
 (SIGNATURE |xftestNotEquals| ((|Void|) (|String|) (|String|)))
 (SIGNATURE |testTrue| ((|Void|) (|String|)))
 (SIGNATURE |xftestTrue| ((|Void|) (|String|)))
 (SIGNATURE |testLibraryError| ((|Void|) (|String|)))
 (SIGNATURE |xftestLibraryError| ((|Void|) (|String|))))
"/git/fricas/src/algebra/TESTUNIT.spad"
((|xftestLibraryError| (*1 *2 *3)
  (AND (|isDomain| *3 (|String|)) (|isDomain| *2 (|Void|))
       (|isDomain| *1 (|Unittest|))))
 (|testLibraryError| (*1 *2 *3)
  (AND (|isDomain| *3 (|String|)) (|isDomain| *2 (|Void|))
       (|isDomain| *1 (|Unittest|))))
 (|xftestTrue| (*1 *2 *3)
  (AND (|isDomain| *3 (|String|)) (|isDomain| *2 (|Void|))
       (|isDomain| *1 (|Unittest|))))
 (|testTrue| (*1 *2 *3)
  (AND (|isDomain| *3 (|String|)) (|isDomain| *2 (|Void|))
       (|isDomain| *1 (|Unittest|))))
 (|xftestNotEquals| (*1 *2 *3 *3)
  (AND (|isDomain| *3 (|String|)) (|isDomain| *2 (|Void|))
       (|isDomain| *1 (|Unittest|))))
 (|testNotEquals| (*1 *2 *3 *3)
  (AND (|isDomain| *3 (|String|)) (|isDomain| *2 (|Void|))
       (|isDomain| *1 (|Unittest|))))
 (|xftestComplexEquals| (*1 *2 *3 *3)
  (AND (|isDomain| *3 (|String|)) (|isDomain| *2 (|Void|))
       (|isDomain| *1 (|Unittest|))))
 (|testComplexEquals| (*1 *2 *3 *3)
  (AND (|isDomain| *3 (|String|)) (|isDomain| *2 (|Void|))
       (|isDomain| *1 (|Unittest|))))
 (|xftestRealEquals| (*1 *2 *3 *3)
  (AND (|isDomain| *3 (|String|)) (|isDomain| *2 (|Void|))
       (|isDomain| *1 (|Unittest|))))
 (|testRealEquals| (*1 *2 *3 *3)
  (AND (|isDomain| *3 (|String|)) (|isDomain| *2 (|Void|))
       (|isDomain| *1 (|Unittest|))))
 (|xftestEquals| (*1 *2 *3 *3)
  (AND (|isDomain| *3 (|String|)) (|isDomain| *2 (|Void|))
       (|isDomain| *1 (|Unittest|))))
 (|testEquals| (*1 *2 *3 *3)
  (AND (|isDomain| *3 (|String|)) (|isDomain| *2 (|Void|))
       (|isDomain| *1 (|Unittest|)))))
((|xftestTrue| (((|Void|) (|String|)) 31))
 (|xftestRealEquals| (((|Void|) (|String|) (|String|)) 25))
 (|xftestNotEquals| (((|Void|) (|String|) (|String|)) 29))
 (|xftestLibraryError| (((|Void|) (|String|)) 37))
 (|xftestEquals| (((|Void|) (|String|) (|String|)) 23))
 (|xftestComplexEquals| (((|Void|) (|String|) (|String|)) 27))
 (|testTrue| (((|Void|) (|String|)) 30))
 (|testRealEquals| (((|Void|) (|String|) (|String|)) 24))
 (|testNotEquals| (((|Void|) (|String|) (|String|)) 28))
 (|testLibraryError| (((|Void|) (|String|)) 33))
 (|testEquals| (((|Void|) (|String|) (|String|)) 20))
 (|testComplexEquals| (((|Void|) (|String|) (|String|)) 26)))
TESTUNIT
((|constructor|
  (NIL
   "Unittest is a package that provides functions for regression \\indented{13}{testing.\\space{2}Note that it calls the interpreter,{} thus,{} all} \\indented{13}{functions require that their arguments be passed as strings.}"))
 (|xftestLibraryError|
  (((|Void|) (|String|)) "like testLibraryError,{} but expects failure."))
 (|testLibraryError|
  (((|Void|) (|String|))
   "\\spad{testLibraryError ex} states that ex should throw an error. Such a test will never count as a fatal error."))
 (|xftestTrue| (((|Void|) (|String|)) "like testTrue,{} but expects failure."))
 (|testTrue|
  (((|Void|) (|String|))
   "\\spad{testTrue ex} states that ex should be \\spad{true}."))
 (|xftestNotEquals|
  (((|Void|) (|String|) (|String|))
   "like testNotEquals,{} but expects failure."))
 (|testNotEquals|
  (((|Void|) (|String|) (|String|))
   "\\spad{testNotEquals(ex1,{} ex2)} states that \\spad{ex1} and \\spad{ex2} should be different."))
 (|xftestComplexEquals|
  (((|Void|) (|String|) (|String|))
   "like testComplexEquals,{} but expects failure."))
 (|testComplexEquals|
  (((|Void|) (|String|) (|String|))
   "\\spad{testComplexEquals(ex1,{} ex2)} states that \\spad{ex1} and \\spad{ex2} should be approximately equal as complex numbers,{} taking into acount \\spadfun{testAbsolutePrecision} and \\spadfun{testRelativePrecision}."))
 (|xftestRealEquals|
  (((|Void|) (|String|) (|String|))
   "like testRealEquals,{} but expects failure."))
 (|testRealEquals|
  (((|Void|) (|String|) (|String|))
   "\\spad{testRealEquals(ex1,{} ex2)} states that \\spad{ex1} and \\spad{ex2} should be approximately equal as real numbers,{} taking into acount \\spadfun{testAbsolutePrecision} and \\spadfun{testRelativePrecision}."))
 (|xftestEquals|
  (((|Void|) (|String|) (|String|)) "like testEquals,{} but expects failure."))
 (|testEquals|
  (((|Void|) (|String|) (|String|))
   "\\spad{testEquals(ex1,{} ex2)} states that \\spad{ex1} and \\spad{ex2} should be equal. To sidestep the possibility that the equality function of the domain \\spad{R} performs some simplifications,{} we convert \\spad{ex1} and \\spad{ex2} to \\spad{InputForm},{} if possible.")))
(("documentation" 0 3849) ("ancestors" 0 NIL) ("parents" 0 NIL)
 ("abbreviation" 0 3840) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 3187) ("modemaps" 0 1638) ("sourceFile" 0 1598)
 ("constructorCategory" 0 866) ("constructorModemap" 0 77)
 ("constructorKind" 0 67) ("constructorForm" 0 54) ("NILADIC" 0 20))