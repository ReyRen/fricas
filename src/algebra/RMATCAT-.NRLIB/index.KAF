7345                (|RectangularMatrixCategory&| S |m| |n| R |Row| |Col|)
|domain|
(((|RectangularMatrixCategory&| |#1| |#2| |#3| |#4| |#5| |#6|)
  (CATEGORY |domain| (SIGNATURE |size| ((|NonNegativeInteger|)))
   (SIGNATURE |index| (|#1| (|PositiveInteger|)))
   (SIGNATURE |lookup| ((|PositiveInteger|) |#1|)) (SIGNATURE |random| (|#1|))
   (SIGNATURE |ncols| ((|NonNegativeInteger|) |#1|))
   (SIGNATURE |nrows| ((|NonNegativeInteger|) |#1|))
   (SIGNATURE |antisymmetric?| ((|Boolean|) |#1|))
   (SIGNATURE |symmetric?| ((|Boolean|) |#1|))
   (SIGNATURE |diagonal?| ((|Boolean|) |#1|))
   (SIGNATURE |square?| ((|Boolean|) |#1|)))
  (|RectangularMatrixCategory| |#2| |#3| |#4| |#5| |#6|) (|NonNegativeInteger|)
  (|NonNegativeInteger|) (|Join| (|SemiRng|) (|AbelianMonoid|))
  (|DirectProductCategory| |#3| |#4|) (|DirectProductCategory| |#2| |#4|))
 (T |RectangularMatrixCategory&|))
(CATEGORY |domain| (SIGNATURE |size| ((|NonNegativeInteger|)))
 (SIGNATURE |index| (|#1| (|PositiveInteger|)))
 (SIGNATURE |lookup| ((|PositiveInteger|) |#1|)) (SIGNATURE |random| (|#1|))
 (SIGNATURE |ncols| ((|NonNegativeInteger|) |#1|))
 (SIGNATURE |nrows| ((|NonNegativeInteger|) |#1|))
 (SIGNATURE |antisymmetric?| ((|Boolean|) |#1|))
 (SIGNATURE |symmetric?| ((|Boolean|) |#1|))
 (SIGNATURE |diagonal?| ((|Boolean|) |#1|))
 (SIGNATURE |square?| ((|Boolean|) |#1|)))
"/git/fricas/src/algebra/RMATCAT.spad"
((|size| (*1 *2)
  (AND (|ofType| *4 *2) (|ofType| *5 *2)
       (|ofCategory| *6 (|Join| (|SemiRng|) (|AbelianMonoid|)))
       (|ofCategory| *7 (|DirectProductCategory| *5 *6))
       (|ofCategory| *8 (|DirectProductCategory| *4 *6))
       (|isDomain| *2 (|NonNegativeInteger|))
       (|isDomain| *1 (|RectangularMatrixCategory&| *3 *4 *5 *6 *7 *8))
       (|ofCategory| *3 (|RectangularMatrixCategory| *4 *5 *6 *7 *8)))))
((|symmetric?| (((|Boolean|) $) 41)) (|square?| (((|Boolean|) $) 28))
 (|size| (((|NonNegativeInteger|)) 14)) (|random| (($) 18))
 (|nrows| (((|NonNegativeInteger|) $) 25))
 (|ncols| (((|NonNegativeInteger|) $) 26))
 (|lookup| (((|PositiveInteger|) $) 22)) (|index| (($ (|PositiveInteger|)) 24))
 (|diagonal?| (((|Boolean|) $) 38)) (|antisymmetric?| (((|Boolean|) $) 45)))
((|HasCategory| |#4| '(|EuclideanDomain|)) (|HasCategory| |#4| '(|Field|))
 (|HasCategory| |#4| '(|IntegralDomain|))
 (|HasCategory| |#4| '(|AbelianGroup|))
 (|HasCategory| |#4| '(|CommutativeRing|)) (|HasCategory| |#4| '(|Finite|)))
RMATCAT-
((|constructor|
  (NIL
   "\\spadtype{RectangularMatrixCategory} is a category of matrices of fixed dimensions. The dimensions of the matrix will be parameters of the domain. Domains in this category will be \\spad{R}-modules and will be non-mutable."))
 (|nullSpace|
  (((|List| |#6|) $)
   "\\spad{nullSpace(m)}+ returns a basis for the null space of the matrix \\spad{m}."))
 (|nullity|
  (((|NonNegativeInteger|) $)
   "\\spad{nullity(m)} returns the nullity of the matrix \\spad{m}. This is the dimension of the null space of the matrix \\spad{m}."))
 (|rank|
  (((|NonNegativeInteger|) $)
   "\\spad{rank(m)} returns the rank of the matrix \\spad{m}."))
 (|columnSpace|
  (((|List| |#6|) $)
   "\\spad{columnSpace(m)} returns a sublist of columns of the matrix \\spad{m} forming a basis of its column space."))
 (|rowEchelon|
  (($ $)
   "\\spad{rowEchelon(m)} returns the row echelon form of the matrix \\spad{m}."))
 (/
  (($ $ |#4|)
   "\\spad{m/r} divides the elements of \\spad{m} by \\spad{r}. Error: if \\spad{r = 0}."))
 (|exquo|
  (((|Union| $ "failed") $ |#4|)
   "\\spad{exquo(m,{} r)} computes the exact quotient of the elements of \\spad{m} by \\spad{r},{} returning \\spad{\"failed\"} if this is not possible."))
 (|map|
  (($ (|Mapping| |#4| |#4| |#4|) $ $)
   "\\spad{map(f,{} a,{} b)} returns \\spad{c},{} where \\spad{c} is such that \\spad{c(i,{} j) = f(a(i,{} j),{} b(i,{} j))} for all \\spad{i},{} \\spad{j}.")
  (($ (|Mapping| |#4| |#4|) $)
   "\\spad{map(f,{} a)} returns \\spad{b},{} where \\spad{b(i,{} j) = a(i,{} j)} for all \\spad{i},{} \\spad{j}."))
 (|column|
  ((|#6| $ (|Integer|))
   "\\spad{column(m,{} j)} returns the \\spad{j}th column of the matrix \\spad{m}. Error: if the index outside the proper range."))
 (|row|
  ((|#5| $ (|Integer|))
   "\\spad{row(m,{} i)} returns the \\spad{i}th row of the matrix \\spad{m}. Error: if the index is outside the proper range."))
 (|qelt|
  ((|#4| $ (|Integer|) (|Integer|))
   "\\spad{qelt(m,{} i,{} j)} returns the element in the \\spad{i}th row and \\spad{j}th column of the matrix \\spad{m}. Note: there is NO error check to determine if indices are in the proper ranges."))
 (|elt|
  ((|#4| $ (|Integer|) (|Integer|) |#4|)
   "\\spad{elt(m,{} i,{} j,{} r)} returns the element in the \\spad{i}th row and \\spad{j}th column of the matrix \\spad{m},{} if \\spad{m} has an \\spad{i}th row and a \\spad{j}th column,{} and returns \\spad{r} otherwise.")
  ((|#4| $ (|Integer|) (|Integer|))
   "\\spad{elt(m,{} i,{} j)} returns the element in the \\spad{i}th row and \\spad{j}th column of the matrix \\spad{m}. Error: if indices are outside the proper ranges."))
 (|listOfLists|
  (((|List| (|List| |#4|)) $)
   "\\spad{listOfLists(m)} returns the rows of the matrix \\spad{m} as a list of lists."))
 (|ncols|
  (((|NonNegativeInteger|) $)
   "\\spad{ncols(m)} returns the number of columns in the matrix \\spad{m}."))
 (|nrows|
  (((|NonNegativeInteger|) $)
   "\\spad{nrows(m)} returns the number of rows in the matrix \\spad{m}."))
 (|maxColIndex|
  (((|Integer|) $)
   "\\spad{maxColIndex(m)} returns the index of the 'last' column of the matrix \\spad{m}."))
 (|minColIndex|
  (((|Integer|) $)
   "\\spad{minColIndex(m)} returns the index of the 'first' column of the matrix \\spad{m}."))
 (|maxRowIndex|
  (((|Integer|) $)
   "\\spad{maxRowIndex(m)} returns the index of the 'last' row of the matrix \\spad{m}."))
 (|minRowIndex|
  (((|Integer|) $)
   "\\spad{minRowIndex(m)} returns the index of the 'first' row of the matrix \\spad{m}."))
 (|antisymmetric?|
  (((|Boolean|) $)
   "\\spad{antisymmetric?(m)} returns \\spad{true} if the matrix \\spad{m} is square and antisymmetric (\\spadignore{i.e.} \\spad{m[i,{} j] = -m[j,{} i]} for all \\spad{i} and \\spad{j}) and \\spad{false} otherwise.")
  (((|Boolean|) $)
   "\\spad{antisymmetric?(m)} returns \\spad{true} if the matrix \\spad{m} is square and antisymmetric (\\spadignore{i.e.} \\spad{m[i,{} j] = -m[j,{} i]} for all \\spad{i} and \\spad{j}) and \\spad{false} otherwise."))
 (|symmetric?|
  (((|Boolean|) $)
   "\\spad{symmetric?(m)} returns \\spad{true} if the matrix \\spad{m} is square and symmetric (\\spadignore{i.e.} \\spad{m[i,{} j] = m[j,{} i]} for all \\spad{i} and \\spad{j}) and \\spad{false} otherwise."))
 (|diagonal?|
  (((|Boolean|) $)
   "\\spad{diagonal?(m)} returns \\spad{true} if the matrix \\spad{m} is square and diagonal (\\spadignore{i.e.} all entries of \\spad{m} not on the diagonal are zero) and \\spad{false} otherwise."))
 (|square?|
  (((|Boolean|) $)
   "\\spad{square?(m)} returns \\spad{true} if \\spad{m} is a square matrix (\\spadignore{i.e.} if \\spad{m} has the same number of rows as columns) and \\spad{false} otherwise."))
 (|matrix|
  (($ (|List| (|List| |#4|)))
   "\\spad{matrix(l)} converts the list of lists \\spad{l} to a matrix,{} where the list of lists is viewed as a list of the rows of the matrix.")))
(("documentation" 0 2443) ("ancestors" 0 NIL) ("parents" 0 NIL)
 ("abbreviation" 0 2434) ("predicates" 0 2200) ("superDomain" 0 NIL)
 ("operationAlist" 0 1827) ("modemaps" 0 1400) ("sourceFile" 0 1361)
 ("constructorCategory" 0 890) ("constructorModemap" 0 84)
 ("constructorKind" 0 75) ("constructorForm" 0 20))