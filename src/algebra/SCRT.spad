)abbrev domain SCRT SCartesian
++ Author: Martin Baker
++ Date Created: September 2010
++ Basic Operations: point, elt, setelt, copy, dimension, minIndex, maxIndex,
++ convert
++ Related Constructors:
++ Also See:
++ AMS Classifications:
++ Keywords:
++ References:
++ http://www.euclideanspace.com/prog/scratchpad/mycode/graph/
++ Description: an implementation of PointCategory to represent points and
++ vectors in three dimensional coordinate space

SCartesian(n) : Exports == Implementation where
  -- Domains for points, subspaces and properties of components in
  -- a subspace
  n : PositiveInteger
  PI ==> PositiveInteger
  DF ==> DoubleFloat

  Exports ==> SPointCategory()

  Implementation ==> add

    -- a 2D point contains 2 floating point numbers, a 3D point
    -- contains 3 and so on.
    -- then an additional number is added
    -- 1@DF if % represents a point
    -- 0@DF if % represents a vector
    Rep := PrimitiveArray DF

    -- spnt(a, b) constructs a 2D point defined by a and b
    -- of type DF
    spnt(a : DF, b : DF) : % ==
      pt := new(n+1, 0$DF)$Rep
      pt.0 := a
      pt.1 := b
      pt.n := 1@DF
      pt

    -- spnt(a, b, c) constructs a 3D point defined by a, b and c
    -- of type DF
    spnt(a : DF, b : DF, c : DF) : % ==
      pt := new(n+1, 0$DF)$Rep
      pt.0 := a
      pt.1 := b
      if n>2 then pt.2 := c
      pt.n := 1@DF
      pt

    -- svec(a, b) constructs a 2D vector defined by a and b
    -- of type DF
    svec(a : DF, b : DF) : % ==
      pt := new(n+1, 0$DF)$Rep
      pt.0 := a
      pt.1 := b
      pt.n := 0@DF
      pt

    -- svec(a, b, c) constructs a 3D vector defined by a, b and c
    -- of type DF
    svec(a : DF, b : DF, c : DF) : % ==
      pt := new(n+1, 0$DF)$Rep
      pt.0 := a
      pt.1 := b
      if n>2 then pt.2 := c
      pt.n := 0@DF
      pt

    -- min(a, b) returns a point whose value in each dimension is
    -- the minimum. So if a has the smallest x value and b has the
    -- smallest y value then the result will combine these. This is
    -- useful for constructing boundary boxes around sets of points.
    min(a : %, b : %) : % ==
      pt := new(n+1, 0$DF)$Rep
      for i in 0..(n-1) repeat
        pt.i := min(a.i, b.i)
      pt.n := 1$DF
      pt

    -- max(a, b) returns a point whose value in each dimension is
    -- the maximum. So if a has the largest x value and b has the
    -- largest y value then the result will combine these. This is
    -- useful for constructing boundary boxes around sets of points.
    max(a : %, b : %) : % ==
      pt := new(n+1, 0$DF)$Rep
      for i in 0..(n-1) repeat
        pt.i := max(a.i, b.i)
      pt.n := 1$DF
      pt

    dimension(p) == n+1 -- dimension of base space

    -- Test for NaN (Not a Number)
    -- That is have we divided by zero or taken sqrt of negative number at
    -- some stage?
    -- Common Lisp does not support NaN ? So we need some sort of test for
    -- invalid numbers
    -- If not equal to itself then we assume that its not a valid number
    nan?(x : DF) : Boolean == x ~= x

    -- Is this a valid point? if any of its elements are not valid
    -- then return true
    -- Examples of invalid floating point numbers are when have we
    -- have divided a given element by zero or taken
    -- sqrt of negative number at some stage?
    -- Note: we can still represent a point at infinity and we can
    -- represent points using complex numbers, but we do this using
    -- projective or conformal space or by using the appropriate
    -- instance of SPointCategory, not by using invalid floating
    -- point numbers.
    Pnan?(p : %) : Boolean ==
      for i in 0..(n-1) repeat
        if nan?(p.i) then return true
      false

    -- This returns the length of the parallel component of two vectors
    -- in the case of Euclidean space this is the dot product of two
    -- vectors. We use this function to test the colinearity
    parallel(x : %, y : %) : DF == x.0 * y.0 + x.1 * y.1 + x.2 * y.2

    -- scale until length is 1
    unitVector(p : %) : % ==
      factor := 0::DF
      -- take sum of squares
      for i in 0..(n-1) repeat
        factor := factor + (p.i * p.i)
      factor := sqrt(factor)
      pt := new(n+1, 0$DF)$Rep
      for i in 0..(n-1) repeat
        pt.i := p.i/factor
      pt.n := 0@DF -- set to vector
      pt

    -- returns the distance between the points p1 and p2
    -- there are 2 metrics associated with any SPointCategory
    -- the underlying space and the space that it is embedded in
    -- this is the distance in the underlying space.
    distanceSquared(p1 : %, p2 : %) : DF ==
      factor := 0::DF
      for i in 0..(n-1) repeat
        factor := factor + (p1.i - p2.i)^2
      factor

    -- This returns a vector perpendicular to the two vectors
    -- in the case of 3D Euclidean space this is the cross product of the
    -- two vectors. We use this function to compute orthogonal
    perpendicular(x : %, y : %) : % ==
      pt := new(n+1, 0$DF)$Rep
      if n<3 then return sipnt(0, 0)
      pt.0 := x.1 * y.2 - x.2 * y.1
      pt.1 := x.2 * y.0 - x.0 * y.2
      pt.2 := x.0 * y.1 - x.1 * y.0
      pt.n := 0@DF -- set to vector
      pt

    -- scalar multiplication
    -- Although, scalar multiplication is strictly only a valid operation
    -- for vectors and not points, we allow it here because there are some
    -- useful short cuts, for instance, to find the central point between
    -- two points we can add them together and scalar multiply by 0.5.
    _*(s : DF, x : %) : % ==
      pt := new(n+1, 0$DF)$Rep
      for i in 0..(n-1) repeat
        pt.i := x.i * s
      pt.n := x.n
      pt

    -- addition
    -- add the corresponding elements of the vector or point.
    -- The type (vector or point) depends on the following table:
    -- vector + vector = vector
    -- point + vector = point
    -- point + point = invalid (but interpret as point)
    -- Although, adding two points is not strictly a valid operation,
    -- we allow it here by interpreting the point as a vector relative
    -- to the origin. We do that because there are some useful short
    -- cuts, for instance, to find the central point between two points
    -- we can add them together and scalar multiply by 0.5.
    _+(x : %, y : %) : % ==
      pt := new(n+1, 0$DF)$Rep
      for i in 0..(n-1) repeat
        pt.i := x.i + y.i
      -- set the type according to the table above
      pt.n := x.n + y.n
      if pt.n > 1::DF then pt.n := 1::DF
      pt

    -- subtraction
    -- subtract the corresponding elements of the vector or point.
    -- The type (vector or point) depends on the following table:
    -- vector - vector = vector
    -- point - vector = point
    -- vector - point = invalid (but interpret as point)
    -- point - point = invalid (but interpret as vector)
    -- Although, subtracting two points is not strictly a valid operation,
    -- we allow it here by interpreting the result as the vector distance
    -- between the two points.
    _-(x : %, y : %) : % ==
      pt := new(n+1, 0$DF)$Rep
      for i in 0..(n-1) repeat
        pt.i := x.i - y.i
      pt.n := x.n + y.n
      if pt.n > 1::DF then pt.n := 0::DF
      pt

    -- return true if param is inside bounding box
    -- where bounding box is specified by min and max
    inBounds?(pt : %, mns : %, mxs : %) : Boolean ==
      for i in 0..(n-1) repeat
        -- if pt less than minimum (left or top) then false
        if qelt(pt, i) < qelt(mns, i) then return false
        -- if pt greater than maximum (right or bottom) then false
        if qelt(pt, i) > qelt(mxs, i) then return false
      -- inside box so return true
      true

    -- returns the 'x'(left to right) screen coordinate
    screenCoordX(pt : %) : DF == pt.0

    -- returns the 'y'(bottom to top) screen coordinate
    screenCoordY(pt : %) : DF == pt.1

    -- returns the 'z'(out from screen) screen coordinate
    screenCoordZ(pt : %) : DF == if n>2 then pt.2 else 0@DF

    -- returns screen coordinates as a list
    screenCoords(pt : %) : List DF ==
      res : List DF := []
      for i in 0..(n-1) repeat
        res := concat(res, pt.i)
      res

    -- returns extended coordinates as a list
    extendedCoords(pt : %) : List DF == entries(pt)

    -- toPoint(p) returns a Point with the same coordinates as p
    -- If p was originally a vector then that will be treated as the
    -- distance from the origin.
    toPoint(p : %) ==
      pt := new(n+1, 0$DF)$Rep
      for i in 0..(n-1) repeat pt.i := p.i
      pt.n := 1$DF
      pt

    -- toVector returns a Vector with the same coordinates as p
    -- If p was originally a point then the vector will be the
    -- distance from the origin.
    toVector(p : %) ==
      pt := new(n+1, 0$DF)$Rep
      for i in 0..(n-1) repeat pt.i := p.i
      pt.n := 0$DF
      pt

    -- isPoint?(p) returns true if this represents a point as
    -- opposed to a vector.
    isPoint?(p : %) == p.n > 0.9::DF

    -- isVector? returns true if this represents a vector as
    -- opposed to a point.
    isVector?(p : %) == p.n < 0.1::DF

    -- start of SetCategory definitions --

    hash(s : %) : SingleInteger == 0$SingleInteger

    -- returns true if x equals y
    _=(x : %, y : %) : Boolean ==
      for i in 0..n+1 repeat
        if x.i ~= y.i then return false
      true

    -- returns true if x is not equal to y
    _~_=(x : %, y : %) : Boolean == not(x = y)

    -- output
    coerce(pt : %) : OutputForm ==
      s:Symbol := "proj"::Symbol
      if pt.n = 0@DF then s := "vec"::Symbol
      if pt.n = 1@DF then s := "pt"::Symbol
      eles : List OutputForm := [(pt.i)::OutputForm for i in 0..(n-1)]
      hconcat(s::OutputForm, paren(eles))$OutputForm

)if false

Another coding of points and vectors is Argand. This represents two
dimensional points and vectors on Argand plane.
\section{SArgand domain}
)endif

