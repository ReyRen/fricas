)abbrev domain IIARRAY2 InnerIndexedTwoDimensionalArray
InnerIndexedTwoDimensionalArray(R, mnRow, mnCol, Row, Col) : _
       Exports == Implementation where
  ++ This is an internal type which provides an implementation of
  ++ 2-dimensional arrays as PrimitiveArray's of PrimitiveArray's.
  R : Type
  mnRow, mnCol : Integer
  Row : FiniteLinearAggregate R
  Col : FiniteLinearAggregate R

  Exports ==> TwoDimensionalArrayCategory(R, Row, Col)

  Implementation ==> add

    Qsize ==> MATRIX_SIZE$Lisp
    Qnew ==> MAKE_MATRIX$Lisp
    Qnew1 ==> MAKE_MATRIX1$Lisp
    Qnrows ==> ANROWS$Lisp
    Qncols ==> ANCOLS$Lisp
    Qelt2 ==> QAREF2O$Lisp
    Qsetelt2 ==> QSETAREF2O$Lisp



--% Primitive array creation

    empty() == Qnew(0, 0)

    qnew(rows, cols) == Qnew(rows, cols)

    new(rows, cols, a) == Qnew1(rows, cols, a)

--% Size inquiries

    minRowIndex m == mnRow
    minColIndex m == mnCol
    maxRowIndex m == nrows m + mnRow - 1
    maxColIndex m == ncols m + mnCol - 1

    nrows m == Qnrows(m)

    ncols m == Qncols(m)

--% Part selection/assignment

    qelt(m, i, j) == Qelt2(m, i, j, mnRow, mnCol)

    elt(m : %, i : Integer, j : Integer) ==
      i < minRowIndex(m) or i > maxRowIndex(m) =>
        error "elt: index out of range"
      j < minColIndex(m) or j > maxColIndex(m) =>
        error "elt: index out of range"
      qelt(m, i, j)

    qsetelt!(m, i, j, r) == Qsetelt2(m, i, j, r, mnRow, mnCol)

    setelt!(m : %, i : Integer, j : Integer, r : R) ==
      i < minRowIndex(m) or i > maxRowIndex(m) =>
        error "setelt!: index out of range"
      j < minColIndex(m) or j > maxColIndex(m) =>
        error "setelt!: index out of range"
      qsetelt!(m, i, j, r)

    if R has SetCategory then
        latex(m : %) : String ==
          s : String := "\left[ \begin{array}{"
          j : Integer
          for j in minColIndex(m)..maxColIndex(m) repeat
            s := concat(s,"c")$String
          s := concat(s,"} ")$String
          i : Integer
          for i in minRowIndex(m)..maxRowIndex(m) repeat
            for j in minColIndex(m)..maxColIndex(m) repeat
              s := concat(s, latex(qelt(m, i, j))$R)$String
              if j < maxColIndex(m) then s := concat(s, " & ")$String
            if i < maxRowIndex(m) then s := concat(s, " \\ ")$String
          concat(s, "\end{array} \right]")$String

