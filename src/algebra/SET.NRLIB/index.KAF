7185                (|Set| S)
|domain|
(((|Set| |#1|) (|FiniteSetAggregate| |#1|) (|SetCategory|)) (T |Set|))
(|FiniteSetAggregate| |#1|)
"/git/fricas/src/algebra/SET.spad"
((~= (((|Boolean|) $ $) NIL)) (|universe| (($) NIL (|has| |#1| (|Finite|))))
 (|union| (($ |#1| $) NIL) (($ $ |#1|) NIL) (($ $ $) 73))
 (|symmetricDifference| (($ $ $) 70)) (|subset?| (((|Boolean|) $ $) 72))
 (|smaller?| (((|Boolean|) $ $) NIL (|has| |#1| (|Comparable|))))
 (|size?| (((|Boolean|) $ (|NonNegativeInteger|)) NIL))
 (|size| (((|NonNegativeInteger|)) NIL (|has| |#1| (|Finite|))))
 (|set| (($ (|List| |#1|)) NIL) (($) 12))
 (|select!|
  (($ (|Mapping| (|Boolean|) |#1|) $) NIL (|has| $ (|finiteAggregate|))))
 (|select|
  (($ (|Mapping| (|Boolean|) |#1|) $) NIL (|has| $ (|finiteAggregate|))))
 (|sample| (($) NIL T CONST))
 (|removeDuplicates|
  (($ $) NIL (AND (|has| $ (|finiteAggregate|)) (|has| |#1| (|BasicType|)))))
 (|remove!|
  (($ |#1| $) 64
   (AND (|has| $ (|finiteAggregate|)) (|has| |#1| (|BasicType|))))
  (($ (|Mapping| (|Boolean|) |#1|) $) NIL (|has| $ (|finiteAggregate|))))
 (|remove|
  (($ (|Mapping| (|Boolean|) |#1|) $) NIL (|has| $ (|finiteAggregate|)))
  (($ |#1| $) NIL
   (AND (|has| $ (|finiteAggregate|)) (|has| |#1| (|BasicType|)))))
 (|reduce|
  ((|#1| (|Mapping| |#1| |#1| |#1|) $) 36 (|has| $ (|finiteAggregate|)))
  ((|#1| (|Mapping| |#1| |#1| |#1|) $ |#1|) 38 (|has| $ (|finiteAggregate|)))
  ((|#1| (|Mapping| |#1| |#1| |#1|) $ |#1| |#1|) 40
   (AND (|has| $ (|finiteAggregate|)) (|has| |#1| (|BasicType|)))))
 (|random| (($) NIL (|has| |#1| (|Finite|))))
 (|parts| (((|List| |#1|) $) 18 (|has| $ (|finiteAggregate|))))
 (|more?| (((|Boolean|) $ (|NonNegativeInteger|)) NIL))
 (|min|
  ((|#1| $) 52
   (AND (|has| $ (|finiteAggregate|)) (|has| |#1| (|OrderedSet|)))))
 (|members| (((|List| |#1|) $) NIL (|has| $ (|finiteAggregate|))))
 (|member?|
  (((|Boolean|) |#1| $) 63
   (AND (|has| $ (|finiteAggregate|)) (|has| |#1| (|BasicType|)))))
 (|max|
  ((|#1| (|Mapping| (|Boolean|) |#1| |#1|) $) NIL
   (|has| $ (|finiteAggregate|)))
  ((|#1| $) 50
   (AND (|has| $ (|finiteAggregate|)) (|has| |#1| (|OrderedSet|)))))
 (|map!| (($ (|Mapping| |#1| |#1|) $) 32 (|has| $ (|shallowlyMutable|))))
 (|map| (($ (|Mapping| |#1| |#1|) $) 33))
 (|lookup| (((|PositiveInteger|) $) NIL (|has| |#1| (|Finite|))))
 (|less?| (((|Boolean|) $ (|NonNegativeInteger|)) NIL))
 (|latex| (((|String|) $) NIL)) (|intersect| (($ $ $) 68))
 (|inspect| ((|#1| $) 24)) (|insert!| (($ |#1| $) 62))
 (|index| (($ (|PositiveInteger|)) NIL (|has| |#1| (|Finite|))))
 (|hashUpdate!| (((|HashState|) (|HashState|) $) NIL))
 (|hash| (((|SingleInteger|) $) NIL))
 (|find| (((|Union| |#1| "failed") (|Mapping| (|Boolean|) |#1|) $) 30))
 (|extract!| ((|#1| $) 26))
 (|every?|
  (((|Boolean|) (|Mapping| (|Boolean|) |#1|) $) NIL
   (|has| $ (|finiteAggregate|))))
 (|eval|
  (($ $ (|List| (|Equation| |#1|))) NIL
   (AND (|has| |#1| (|Evalable| |#1|)) (|has| |#1| (|SetCategory|))))
  (($ $ (|Equation| |#1|)) NIL
   (AND (|has| |#1| (|Evalable| |#1|)) (|has| |#1| (|SetCategory|))))
  (($ $ |#1| |#1|) NIL
   (AND (|has| |#1| (|Evalable| |#1|)) (|has| |#1| (|SetCategory|))))
  (($ $ (|List| |#1|) (|List| |#1|)) NIL
   (AND (|has| |#1| (|Evalable| |#1|)) (|has| |#1| (|SetCategory|)))))
 (|eq?| (((|Boolean|) $ $) NIL))
 (|enumerate| (((|List| $)) NIL (|has| |#1| (|Finite|))))
 (|empty?| (((|Boolean|) $) 20)) (|empty| (($) 11))
 (|difference| (($ $ |#1|) NIL) (($ $ $) 69))
 (|dictionary| (($) NIL) (($ (|List| |#1|)) NIL))
 (|count|
  (((|NonNegativeInteger|) (|Mapping| (|Boolean|) |#1|) $) NIL
   (|has| $ (|finiteAggregate|)))
  (((|NonNegativeInteger|) |#1| $) NIL
   (AND (|has| $ (|finiteAggregate|)) (|has| |#1| (|BasicType|)))))
 (|copy| (($ $) 15))
 (|convert|
  (((|InputForm|) $) 47 (|has| |#1| (|ConvertibleTo| (|InputForm|)))))
 (|construct| (($ (|List| |#1|)) 58))
 (|complement| (($ $) NIL (|has| |#1| (|Finite|))))
 (|coerce| (((|OutputForm|) $) NIL))
 (|cardinality| (((|NonNegativeInteger|) $) NIL))
 (|any?|
  (((|Boolean|) (|Mapping| (|Boolean|) |#1|) $) NIL
   (|has| $ (|finiteAggregate|))))
 (>= (((|Boolean|) $ $) NIL)) (> (((|Boolean|) $ $) NIL))
 (= (((|Boolean|) $ $) 49)) (<= (((|Boolean|) $ $) NIL))
 (< (((|Boolean|) $ $) NIL))
 (|#| (((|NonNegativeInteger|) $) 10 (|has| $ (|finiteAggregate|)))))
((|HasCategory| |#1| (LIST '|ConvertibleTo| '(|InputForm|)))
 (|HasCategory| |#1| '(|Comparable|)) (|HasCategory| |#1| '(|Finite|))
 (|HasCategory| |#1| '(|OrderedSet|))
 (AND (|HasCategory| |#1| (LIST '|Evalable| (|devaluate| |#1|)))
      (|HasCategory| |#1| '(|SetCategory|)))
 (OR
  (AND (|HasCategory| |#1| (LIST '|Evalable| (|devaluate| |#1|)))
       (|HasCategory| |#1| '(|Comparable|)))
  (AND (|HasCategory| |#1| (LIST '|Evalable| (|devaluate| |#1|)))
       (|HasCategory| |#1| '(|Finite|)))
  (AND (|HasCategory| |#1| (LIST '|Evalable| (|devaluate| |#1|)))
       (|HasCategory| |#1| '(|SetCategory|))))
 (|HasCategory| |#1| '(|BasicType|)) (|HasCategory| $ '(|shallowlyMutable|))
 (|HasCategory| $ '(|finiteAggregate|))
 (AND (|HasCategory| |#1| '(|OrderedSet|))
      (|HasCategory| $ '(|finiteAggregate|)))
 (AND (|HasCategory| |#1| '(|BasicType|))
      (|HasCategory| $ '(|finiteAggregate|))))
SET
(((|FiniteSetAggregate| |#1|) . T))
(((|Aggregate|) . T) ((|BagAggregate| |t#1|) . T) ((|BasicType|) . T)
 ((|CoercibleTo| (|OutputForm|)) . T) ((|Collection| |t#1|) . T)
 ((|Comparable|) |has| |t#1| (|Comparable|))
 ((|ConvertibleTo| (|InputForm|)) |has| |t#1| (|ConvertibleTo| (|InputForm|)))
 ((|Dictionary| |t#1|) . T) ((|DictionaryOperations| |t#1|) . T)
 ((|Evalable| |t#1|) AND (|has| |t#1| (|Evalable| |t#1|))
  (|has| |t#1| (|SetCategory|)))
 ((|Finite|) |has| |t#1| (|Finite|)) ((|FiniteSetAggregate| |#1|) . T)
 ((|HomogeneousAggregate| |t#1|) . T)
 ((|InnerEvalable| |t#1| |t#1|) AND (|has| |t#1| (|Evalable| |t#1|))
  (|has| |t#1| (|SetCategory|)))
 ((|PartialOrder|) . T) ((|SetAggregate| |t#1|) . T) ((|SetCategory|) . T)
 ((|Type|) . T) ((|finiteAggregate|) . T) ((|shallowlyMutable|) . T))
((|constructor|
  (NIL
   "A set over a domain \\spad{S} models the usual mathematical notion of a finite set of elements from \\spad{S}. Sets are unordered collections of distinct elements (that is,{} order and duplication does not matter). The notation \\spad{set [a,{} b,{} c]} can be used to create a set and the usual operations such as union and intersection are available to form new sets. If \\spad{S} has OrderdSet,{} \\Language{} maintains the entries in sorted order. Specifically,{} the parts function returns the entries as a list in ascending order and the \\spadfun{extract!} operation returns the maximum entry. Given two sets \\spad{s} and \\spad{t} where \\spad{\\#s = m} and \\spad{\\#t = n},{} the complexity of \\indented{2}{\\spad{s = t} is \\spad{O(min(n,{} m))}} \\indented{2}{\\spad{s < t} is \\spad{O(max(n,{} m))}} \\indented{2}{\\spad{union(s,{} t)},{} \\spad{intersect(s,{} t)},{} \\spad{minus(s,{} t)},{} \\spad{symmetricDifference(s,{} t)} is \\spad{O(max(n,{} m))}} \\indented{2}{\\spad{member?(x,{} t)} is \\spad{O(n log n)}} \\indented{2}{\\spad{insert!(x,{} t)} and \\spad{remove!(x,{} t)} is \\spad{O(n)}}")))
(("documentation" 0 6039) ("ancestors" 0 5268) ("parents" 0 5232)
 ("abbreviation" 0 5228) ("predicates" 0 4317) ("superDomain" 0 NIL)
 ("operationAlist" 0 173) ("modemaps" 0 NIL) ("sourceFile" 0 138)
 ("constructorCategory" 0 110) ("constructorModemap" 0 39)
 ("constructorKind" 0 30) ("constructorForm" 0 20))