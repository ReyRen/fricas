5179                (|GroebnerPackage| |Dom| |Expon| |Dpol|)
|package|
(((|GroebnerPackage| |#1| |#2| |#3|)
  (CATEGORY |package| (SIGNATURE |groebner| ((|List| |#3|) (|List| |#3|)))
   (SIGNATURE |groebner| ((|List| |#3|) (|List| |#3|) (|String|)))
   (SIGNATURE |groebner| ((|List| |#3|) (|List| |#3|) (|String|) (|String|)))
   (IF (|has| |#1| (|Field|))
       (SIGNATURE |normalForm| (|#3| |#3| (|List| |#3|)))
       |noBranch|))
  (|GcdDomain|) (|OrderedAbelianMonoidSup|)
  (|Join| (|FiniteAbelianMonoidRing| |#1| |#2|)
          (|VariablesCommuteWithCoefficients|)))
 (T |GroebnerPackage|))
(CATEGORY |package| (SIGNATURE |groebner| ((|List| |#3|) (|List| |#3|)))
 (SIGNATURE |groebner| ((|List| |#3|) (|List| |#3|) (|String|)))
 (SIGNATURE |groebner| ((|List| |#3|) (|List| |#3|) (|String|) (|String|)))
 (IF (|has| |#1| (|Field|))
     (SIGNATURE |normalForm| (|#3| |#3| (|List| |#3|)))
     |noBranch|))
"/git/fricas/src/algebra/GB.spad"
((|normalForm| (*1 *2 *2 *3)
  (AND (|isDomain| *3 (|List| *2))
       (|ofCategory| *2
                     (|Join| (|FiniteAbelianMonoidRing| *4 *5)
                             (|VariablesCommuteWithCoefficients|)))
       (|ofCategory| *4 (|Field|)) (|ofCategory| *4 (|GcdDomain|))
       (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|isDomain| *1 (|GroebnerPackage| *4 *5 *2))))
 (|groebner| (*1 *2 *2 *3 *3)
  (AND (|isDomain| *2 (|List| *6)) (|isDomain| *3 (|String|))
       (|ofCategory| *6
                     (|Join| (|FiniteAbelianMonoidRing| *4 *5)
                             (|VariablesCommuteWithCoefficients|)))
       (|ofCategory| *4 (|GcdDomain|))
       (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|isDomain| *1 (|GroebnerPackage| *4 *5 *6))))
 (|groebner| (*1 *2 *2 *3)
  (AND (|isDomain| *2 (|List| *6)) (|isDomain| *3 (|String|))
       (|ofCategory| *6
                     (|Join| (|FiniteAbelianMonoidRing| *4 *5)
                             (|VariablesCommuteWithCoefficients|)))
       (|ofCategory| *4 (|GcdDomain|))
       (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|isDomain| *1 (|GroebnerPackage| *4 *5 *6))))
 (|groebner| (*1 *2 *2)
  (AND (|isDomain| *2 (|List| *5))
       (|ofCategory| *5
                     (|Join| (|FiniteAbelianMonoidRing| *3 *4)
                             (|VariablesCommuteWithCoefficients|)))
       (|ofCategory| *3 (|GcdDomain|))
       (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|isDomain| *1 (|GroebnerPackage| *3 *4 *5)))))
((|normalForm| ((|#3| |#3| (|List| |#3|)) 21 (|has| |#1| (|Field|))))
 (|groebner| (((|List| |#3|) (|List| |#3|) (|String|) (|String|)) 40)
  (((|List| |#3|) (|List| |#3|) (|String|)) 39)
  (((|List| |#3|) (|List| |#3|)) 34)))
((|HasCategory| |#1| '(|Field|)))
GB
((|constructor|
  (NIL
   "\\spadtype{GroebnerPackage} computes groebner bases for polynomial ideals. The basic computation provides a distinguished set of generators for polynomial ideals over fields. This basis allows an easy test for membership: the operation \\spadfun{normalForm} returns zero on ideal members. When the provided coefficient domain,{} Dom,{} is not a field,{} the result is equivalent to considering the extended ideal with \\spadtype{Fraction(Dom)} as coefficients,{} but considerably more efficient since all calculations are performed in Dom. Additional argument \"info\" and \"redcrit\" can be given to provide incremental information during computation. Argument \"info\" produces a computational summary for each \\spad{s}-polynomial. Argument \"redcrit\" prints out the reduced critical pairs. The term ordering is determined by the polynomial type used. Suggested types include \\spadtype{DistributedMultivariatePolynomial},{} \\spadtype{HomogeneousDistributedMultivariatePolynomial},{} \\spadtype{GeneralDistributedMultivariatePolynomial}."))
 (|normalForm|
  ((|#3| |#3| (|List| |#3|))
   "\\spad{normalForm(poly,{} gb)} reduces the polynomial \\spad{poly} modulo the precomputed groebner basis \\spad{gb} giving a canonical representative of the residue class."))
 (|groebner|
  (((|List| |#3|) (|List| |#3|) (|String|) (|String|))
   "\\spad{groebner(lp,{} \"info\",{} \"redcrit\")} computes a groebner basis for a polynomial ideal generated by the list of polynomials \\spad{lp},{} displaying both a summary of the critical pairs considered (\\spad{\"info\"}) and the result of reducing each critical pair (\"redcrit\"). If the second or third arguments have any other string value,{} the indicated information is suppressed.")
  (((|List| |#3|) (|List| |#3|) (|String|))
   "\\spad{groebner(lp,{} infoflag)} computes a groebner basis for a polynomial ideal generated by the list of polynomials \\spad{lp}. Argument infoflag is used to get information on the computation. If infoflag is \"info\",{} then summary information is displayed for each \\spad{s}-polynomial generated. If infoflag is \"redcrit\",{} the reduced critical pairs are displayed. If infoflag is any other string,{} no information is printed during computation.")
  (((|List| |#3|) (|List| |#3|))
   "\\spad{groebner(lp)} computes a groebner basis for a polynomial ideal generated by the list of polynomials \\spad{lp}.")))
(("documentation" 0 2752) ("ancestors" 0 NIL) ("parents" 0 NIL)
 ("abbreviation" 0 2749) ("predicates" 0 2715) ("superDomain" 0 NIL)
 ("operationAlist" 0 2488) ("modemaps" 0 951) ("sourceFile" 0 917)
 ("constructorCategory" 0 601) ("constructorModemap" 0 71)
 ("constructorKind" 0 61) ("constructorForm" 0 20))