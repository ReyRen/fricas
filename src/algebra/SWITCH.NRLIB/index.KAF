16899               (MAKEPROP '|Switch| 'NILADIC T)
(|Switch|)
|domain|
(((|Switch|)
  (|Join| (|CoercibleTo| (|OutputForm|))
          (CATEGORY |domain| (SIGNATURE |coerce| ($ (|Symbol|)))
           (SIGNATURE LT
            ($
             (|Union| (|:| I (|Expression| (|Integer|)))
                      (|:| F (|Expression| (|Float|)))
                      (|:| CF (|Expression| (|Complex| (|Float|))))
                      (|:| |switch| $))
             (|Union| (|:| I (|Expression| (|Integer|)))
                      (|:| F (|Expression| (|Float|)))
                      (|:| CF (|Expression| (|Complex| (|Float|))))
                      (|:| |switch| $))))
           (SIGNATURE GT
            ($
             (|Union| (|:| I (|Expression| (|Integer|)))
                      (|:| F (|Expression| (|Float|)))
                      (|:| CF (|Expression| (|Complex| (|Float|))))
                      (|:| |switch| $))
             (|Union| (|:| I (|Expression| (|Integer|)))
                      (|:| F (|Expression| (|Float|)))
                      (|:| CF (|Expression| (|Complex| (|Float|))))
                      (|:| |switch| $))))
           (SIGNATURE LE
            ($
             (|Union| (|:| I (|Expression| (|Integer|)))
                      (|:| F (|Expression| (|Float|)))
                      (|:| CF (|Expression| (|Complex| (|Float|))))
                      (|:| |switch| $))
             (|Union| (|:| I (|Expression| (|Integer|)))
                      (|:| F (|Expression| (|Float|)))
                      (|:| CF (|Expression| (|Complex| (|Float|))))
                      (|:| |switch| $))))
           (SIGNATURE GE
            ($
             (|Union| (|:| I (|Expression| (|Integer|)))
                      (|:| F (|Expression| (|Float|)))
                      (|:| CF (|Expression| (|Complex| (|Float|))))
                      (|:| |switch| $))
             (|Union| (|:| I (|Expression| (|Integer|)))
                      (|:| F (|Expression| (|Float|)))
                      (|:| CF (|Expression| (|Complex| (|Float|))))
                      (|:| |switch| $))))
           (SIGNATURE OR
            ($
             (|Union| (|:| I (|Expression| (|Integer|)))
                      (|:| F (|Expression| (|Float|)))
                      (|:| CF (|Expression| (|Complex| (|Float|))))
                      (|:| |switch| $))
             (|Union| (|:| I (|Expression| (|Integer|)))
                      (|:| F (|Expression| (|Float|)))
                      (|:| CF (|Expression| (|Complex| (|Float|))))
                      (|:| |switch| $))))
           (SIGNATURE EQ
            ($
             (|Union| (|:| I (|Expression| (|Integer|)))
                      (|:| F (|Expression| (|Float|)))
                      (|:| CF (|Expression| (|Complex| (|Float|))))
                      (|:| |switch| $))
             (|Union| (|:| I (|Expression| (|Integer|)))
                      (|:| F (|Expression| (|Float|)))
                      (|:| CF (|Expression| (|Complex| (|Float|))))
                      (|:| |switch| $))))
           (SIGNATURE AND
            ($
             (|Union| (|:| I (|Expression| (|Integer|)))
                      (|:| F (|Expression| (|Float|)))
                      (|:| CF (|Expression| (|Complex| (|Float|))))
                      (|:| |switch| $))
             (|Union| (|:| I (|Expression| (|Integer|)))
                      (|:| F (|Expression| (|Float|)))
                      (|:| CF (|Expression| (|Complex| (|Float|))))
                      (|:| |switch| $))))
           (SIGNATURE NOT
            ($
             (|Union| (|:| I (|Expression| (|Integer|)))
                      (|:| F (|Expression| (|Float|)))
                      (|:| CF (|Expression| (|Complex| (|Float|))))
                      (|:| |switch| $))))
           (SIGNATURE NOT ($ $)))))
 (T |Switch|))
(|Join| (|CoercibleTo| (|OutputForm|))
        (CATEGORY |domain| (SIGNATURE |coerce| ($ (|Symbol|)))
         (SIGNATURE LT
          ($
           (|Union| (|:| I (|Expression| (|Integer|)))
                    (|:| F (|Expression| (|Float|)))
                    (|:| CF (|Expression| (|Complex| (|Float|))))
                    (|:| |switch| $))
           (|Union| (|:| I (|Expression| (|Integer|)))
                    (|:| F (|Expression| (|Float|)))
                    (|:| CF (|Expression| (|Complex| (|Float|))))
                    (|:| |switch| $))))
         (SIGNATURE GT
          ($
           (|Union| (|:| I (|Expression| (|Integer|)))
                    (|:| F (|Expression| (|Float|)))
                    (|:| CF (|Expression| (|Complex| (|Float|))))
                    (|:| |switch| $))
           (|Union| (|:| I (|Expression| (|Integer|)))
                    (|:| F (|Expression| (|Float|)))
                    (|:| CF (|Expression| (|Complex| (|Float|))))
                    (|:| |switch| $))))
         (SIGNATURE LE
          ($
           (|Union| (|:| I (|Expression| (|Integer|)))
                    (|:| F (|Expression| (|Float|)))
                    (|:| CF (|Expression| (|Complex| (|Float|))))
                    (|:| |switch| $))
           (|Union| (|:| I (|Expression| (|Integer|)))
                    (|:| F (|Expression| (|Float|)))
                    (|:| CF (|Expression| (|Complex| (|Float|))))
                    (|:| |switch| $))))
         (SIGNATURE GE
          ($
           (|Union| (|:| I (|Expression| (|Integer|)))
                    (|:| F (|Expression| (|Float|)))
                    (|:| CF (|Expression| (|Complex| (|Float|))))
                    (|:| |switch| $))
           (|Union| (|:| I (|Expression| (|Integer|)))
                    (|:| F (|Expression| (|Float|)))
                    (|:| CF (|Expression| (|Complex| (|Float|))))
                    (|:| |switch| $))))
         (SIGNATURE OR
          ($
           (|Union| (|:| I (|Expression| (|Integer|)))
                    (|:| F (|Expression| (|Float|)))
                    (|:| CF (|Expression| (|Complex| (|Float|))))
                    (|:| |switch| $))
           (|Union| (|:| I (|Expression| (|Integer|)))
                    (|:| F (|Expression| (|Float|)))
                    (|:| CF (|Expression| (|Complex| (|Float|))))
                    (|:| |switch| $))))
         (SIGNATURE EQ
          ($
           (|Union| (|:| I (|Expression| (|Integer|)))
                    (|:| F (|Expression| (|Float|)))
                    (|:| CF (|Expression| (|Complex| (|Float|))))
                    (|:| |switch| $))
           (|Union| (|:| I (|Expression| (|Integer|)))
                    (|:| F (|Expression| (|Float|)))
                    (|:| CF (|Expression| (|Complex| (|Float|))))
                    (|:| |switch| $))))
         (SIGNATURE AND
          ($
           (|Union| (|:| I (|Expression| (|Integer|)))
                    (|:| F (|Expression| (|Float|)))
                    (|:| CF (|Expression| (|Complex| (|Float|))))
                    (|:| |switch| $))
           (|Union| (|:| I (|Expression| (|Integer|)))
                    (|:| F (|Expression| (|Float|)))
                    (|:| CF (|Expression| (|Complex| (|Float|))))
                    (|:| |switch| $))))
         (SIGNATURE NOT
          ($
           (|Union| (|:| I (|Expression| (|Integer|)))
                    (|:| F (|Expression| (|Float|)))
                    (|:| CF (|Expression| (|Complex| (|Float|))))
                    (|:| |switch| $))))
         (SIGNATURE NOT ($ $))))
"/git/fricas/src/algebra/SWITCH.spad"
((|coerce| (*1 *1 *2)
           (AND (|isDomain| *2 (|Symbol|)) (|isDomain| *1 (|Switch|))))
 (LT (*1 *1 *2 *2)
  (AND
   (|isDomain| *2
               (|Union| (|:| I (|Expression| (|Integer|)))
                        (|:| F (|Expression| (|Float|)))
                        (|:| CF (|Expression| (|Complex| (|Float|))))
                        (|:| |switch| (|Switch|))))
   (|isDomain| *1 (|Switch|))))
 (GT (*1 *1 *2 *2)
  (AND
   (|isDomain| *2
               (|Union| (|:| I (|Expression| (|Integer|)))
                        (|:| F (|Expression| (|Float|)))
                        (|:| CF (|Expression| (|Complex| (|Float|))))
                        (|:| |switch| (|Switch|))))
   (|isDomain| *1 (|Switch|))))
 (LE (*1 *1 *2 *2)
  (AND
   (|isDomain| *2
               (|Union| (|:| I (|Expression| (|Integer|)))
                        (|:| F (|Expression| (|Float|)))
                        (|:| CF (|Expression| (|Complex| (|Float|))))
                        (|:| |switch| (|Switch|))))
   (|isDomain| *1 (|Switch|))))
 (GE (*1 *1 *2 *2)
  (AND
   (|isDomain| *2
               (|Union| (|:| I (|Expression| (|Integer|)))
                        (|:| F (|Expression| (|Float|)))
                        (|:| CF (|Expression| (|Complex| (|Float|))))
                        (|:| |switch| (|Switch|))))
   (|isDomain| *1 (|Switch|))))
 (OR (*1 *1 *2 *2)
     (AND
      (|isDomain| *2
                  (|Union| (|:| I (|Expression| (|Integer|)))
                           (|:| F (|Expression| (|Float|)))
                           (|:| CF (|Expression| (|Complex| (|Float|))))
                           (|:| |switch| (|Switch|))))
      (|isDomain| *1 (|Switch|))))
 (EQ (*1 *1 *2 *2)
     (AND
      (|isDomain| *2
                  (|Union| (|:| I (|Expression| (|Integer|)))
                           (|:| F (|Expression| (|Float|)))
                           (|:| CF (|Expression| (|Complex| (|Float|))))
                           (|:| |switch| (|Switch|))))
      (|isDomain| *1 (|Switch|))))
 (AND (*1 *1 *2 *2)
      (AND
       (|isDomain| *2
                   (|Union| (|:| I (|Expression| (|Integer|)))
                            (|:| F (|Expression| (|Float|)))
                            (|:| CF (|Expression| (|Complex| (|Float|))))
                            (|:| |switch| (|Switch|))))
       (|isDomain| *1 (|Switch|))))
 (NOT (*1 *1 *2)
      (AND
       (|isDomain| *2
                   (|Union| (|:| I (|Expression| (|Integer|)))
                            (|:| F (|Expression| (|Float|)))
                            (|:| CF (|Expression| (|Complex| (|Float|))))
                            (|:| |switch| (|Switch|))))
       (|isDomain| *1 (|Switch|))))
 (NOT (*1 *1 *1) (|isDomain| *1 (|Switch|))))
((|coerce| (((|OutputForm|) $) 22) (($ (|Symbol|)) 24))
 (OR
  (($
    (|Union| (|:| I (|Expression| (|Integer|)))
             (|:| F (|Expression| (|Float|)))
             (|:| CF (|Expression| (|Complex| (|Float|)))) (|:| |switch| $))
    (|Union| (|:| I (|Expression| (|Integer|)))
             (|:| F (|Expression| (|Float|)))
             (|:| CF (|Expression| (|Complex| (|Float|)))) (|:| |switch| $)))
   33))
 (NOT
  (($
    (|Union| (|:| I (|Expression| (|Integer|)))
             (|:| F (|Expression| (|Float|)))
             (|:| CF (|Expression| (|Complex| (|Float|)))) (|:| |switch| $)))
   26)
  (($ $) 27))
 (LT
  (($
    (|Union| (|:| I (|Expression| (|Integer|)))
             (|:| F (|Expression| (|Float|)))
             (|:| CF (|Expression| (|Complex| (|Float|)))) (|:| |switch| $))
    (|Union| (|:| I (|Expression| (|Integer|)))
             (|:| F (|Expression| (|Float|)))
             (|:| CF (|Expression| (|Complex| (|Float|)))) (|:| |switch| $)))
   28))
 (LE
  (($
    (|Union| (|:| I (|Expression| (|Integer|)))
             (|:| F (|Expression| (|Float|)))
             (|:| CF (|Expression| (|Complex| (|Float|)))) (|:| |switch| $))
    (|Union| (|:| I (|Expression| (|Integer|)))
             (|:| F (|Expression| (|Float|)))
             (|:| CF (|Expression| (|Complex| (|Float|)))) (|:| |switch| $)))
   30))
 (GT
  (($
    (|Union| (|:| I (|Expression| (|Integer|)))
             (|:| F (|Expression| (|Float|)))
             (|:| CF (|Expression| (|Complex| (|Float|)))) (|:| |switch| $))
    (|Union| (|:| I (|Expression| (|Integer|)))
             (|:| F (|Expression| (|Float|)))
             (|:| CF (|Expression| (|Complex| (|Float|)))) (|:| |switch| $)))
   29))
 (GE
  (($
    (|Union| (|:| I (|Expression| (|Integer|)))
             (|:| F (|Expression| (|Float|)))
             (|:| CF (|Expression| (|Complex| (|Float|)))) (|:| |switch| $))
    (|Union| (|:| I (|Expression| (|Integer|)))
             (|:| F (|Expression| (|Float|)))
             (|:| CF (|Expression| (|Complex| (|Float|)))) (|:| |switch| $)))
   31))
 (EQ
  (($
    (|Union| (|:| I (|Expression| (|Integer|)))
             (|:| F (|Expression| (|Float|)))
             (|:| CF (|Expression| (|Complex| (|Float|)))) (|:| |switch| $))
    (|Union| (|:| I (|Expression| (|Integer|)))
             (|:| F (|Expression| (|Float|)))
             (|:| CF (|Expression| (|Complex| (|Float|)))) (|:| |switch| $)))
   34))
 (AND
  (($
    (|Union| (|:| I (|Expression| (|Integer|)))
             (|:| F (|Expression| (|Float|)))
             (|:| CF (|Expression| (|Complex| (|Float|)))) (|:| |switch| $))
    (|Union| (|:| I (|Expression| (|Integer|)))
             (|:| F (|Expression| (|Float|)))
             (|:| CF (|Expression| (|Complex| (|Float|)))) (|:| |switch| $)))
   32)))
SWITCH
(((|CoercibleTo| (|OutputForm|)) . T))
(((|CoercibleTo| (|OutputForm|)) . T))
((|constructor|
  (NIL
   "This domain builds representations of boolean expressions for use with the \\spadtype{FortranCode} domain."))
 (NOT
  (($ $)
   "\\spad{NOT(x)} returns the \\spadtype{Switch} expression representing \\spad{\\~~x}.")
  (($
    (|Union| (|:| I (|Expression| (|Integer|)))
             (|:| F (|Expression| (|Float|)))
             (|:| CF (|Expression| (|Complex| (|Float|)))) (|:| |switch| $)))
   "\\spad{NOT(x)} returns the \\spadtype{Switch} expression representing \\spad{\\~~x}."))
 (AND
  (($
    (|Union| (|:| I (|Expression| (|Integer|)))
             (|:| F (|Expression| (|Float|)))
             (|:| CF (|Expression| (|Complex| (|Float|)))) (|:| |switch| $))
    (|Union| (|:| I (|Expression| (|Integer|)))
             (|:| F (|Expression| (|Float|)))
             (|:| CF (|Expression| (|Complex| (|Float|)))) (|:| |switch| $)))
   "\\spad{AND(x,{} y)} returns the \\spadtype{Switch} expression representing \\spad{x and y}."))
 (EQ
  (($
    (|Union| (|:| I (|Expression| (|Integer|)))
             (|:| F (|Expression| (|Float|)))
             (|:| CF (|Expression| (|Complex| (|Float|)))) (|:| |switch| $))
    (|Union| (|:| I (|Expression| (|Integer|)))
             (|:| F (|Expression| (|Float|)))
             (|:| CF (|Expression| (|Complex| (|Float|)))) (|:| |switch| $)))
   "\\spad{EQ(x,{} y)} returns the \\spadtype{Switch} expression representing \\spad{x = y}."))
 (OR
  (($
    (|Union| (|:| I (|Expression| (|Integer|)))
             (|:| F (|Expression| (|Float|)))
             (|:| CF (|Expression| (|Complex| (|Float|)))) (|:| |switch| $))
    (|Union| (|:| I (|Expression| (|Integer|)))
             (|:| F (|Expression| (|Float|)))
             (|:| CF (|Expression| (|Complex| (|Float|)))) (|:| |switch| $)))
   "\\spad{OR(x,{} y)} returns the \\spadtype{Switch} expression representing \\spad{x or y}."))
 (GE
  (($
    (|Union| (|:| I (|Expression| (|Integer|)))
             (|:| F (|Expression| (|Float|)))
             (|:| CF (|Expression| (|Complex| (|Float|)))) (|:| |switch| $))
    (|Union| (|:| I (|Expression| (|Integer|)))
             (|:| F (|Expression| (|Float|)))
             (|:| CF (|Expression| (|Complex| (|Float|)))) (|:| |switch| $)))
   "\\spad{GE(x,{} y)} returns the \\spadtype{Switch} expression representing \\spad{x>=y}."))
 (LE
  (($
    (|Union| (|:| I (|Expression| (|Integer|)))
             (|:| F (|Expression| (|Float|)))
             (|:| CF (|Expression| (|Complex| (|Float|)))) (|:| |switch| $))
    (|Union| (|:| I (|Expression| (|Integer|)))
             (|:| F (|Expression| (|Float|)))
             (|:| CF (|Expression| (|Complex| (|Float|)))) (|:| |switch| $)))
   "\\spad{LE(x,{} y)} returns the \\spadtype{Switch} expression representing \\spad{x<=y}."))
 (GT
  (($
    (|Union| (|:| I (|Expression| (|Integer|)))
             (|:| F (|Expression| (|Float|)))
             (|:| CF (|Expression| (|Complex| (|Float|)))) (|:| |switch| $))
    (|Union| (|:| I (|Expression| (|Integer|)))
             (|:| F (|Expression| (|Float|)))
             (|:| CF (|Expression| (|Complex| (|Float|)))) (|:| |switch| $)))
   "\\spad{GT(x,{} y)} returns the \\spadtype{Switch} expression representing \\spad{x>y}."))
 (LT
  (($
    (|Union| (|:| I (|Expression| (|Integer|)))
             (|:| F (|Expression| (|Float|)))
             (|:| CF (|Expression| (|Complex| (|Float|)))) (|:| |switch| $))
    (|Union| (|:| I (|Expression| (|Integer|)))
             (|:| F (|Expression| (|Float|)))
             (|:| CF (|Expression| (|Complex| (|Float|)))) (|:| |switch| $)))
   "\\spad{LT(x,{} y)} returns the \\spadtype{Switch} expression representing \\spad{x<y}."))
 (|coerce| (($ (|Symbol|)) "\\spad{coerce(s)} \\undocumented{}")))
(("documentation" 0 13170) ("ancestors" 0 13131) ("parents" 0 13092)
 ("abbreviation" 0 13085) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 10288) ("modemaps" 0 7539) ("sourceFile" 0 7501)
 ("constructorCategory" 0 3880) ("constructorModemap" 0 72)
 ("constructorKind" 0 63) ("constructorForm" 0 52) ("NILADIC" 0 20))