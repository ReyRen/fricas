13878               (|CartanKuranishi| JB D)
|package|
(((|CartanKuranishi| |#1| |#2|)
  (CATEGORY |package|
   (SIGNATURE |setOutMode| ((|NonNegativeInteger|) (|NonNegativeInteger|)))
   (SIGNATURE |setSimpMode| ((|NonNegativeInteger|) (|NonNegativeInteger|)))
   (SIGNATURE |setRedMode| ((|NonNegativeInteger|) (|NonNegativeInteger|)))
   (SIGNATURE |stirling|
    ((|NonNegativeInteger|) (|NonNegativeInteger|) (|NonNegativeInteger|)
     (|NonNegativeInteger|)))
   (SIGNATURE |alpha|
    ((|List| (|NonNegativeInteger|)) (|NonNegativeInteger|)
     (|List| (|NonNegativeInteger|))))
   (SIGNATURE |hilbert|
    ((|SparseUnivariatePolynomial| (|Fraction| (|Integer|)))
     (|List| (|NonNegativeInteger|))))
   (SIGNATURE |alphaHilbert|
    ((|List| (|NonNegativeInteger|))
     (|SparseUnivariatePolynomial| (|Fraction| (|Integer|)))))
   (SIGNATURE |arbFunctions|
    ((|List| (|Integer|)) (|NonNegativeInteger|) (|Integer|)
     (|List| (|NonNegativeInteger|))))
   (SIGNATURE |gauge|
    ((|List| (|Integer|)) (|NonNegativeInteger|) (|Integer|)
     (|List| (|NonNegativeInteger|))))
   (SIGNATURE |gaugeHilbert|
    ((|SparseUnivariatePolynomial| (|Fraction| (|Integer|)))
     (|NonNegativeInteger|) (|List| (|NonNegativeInteger|))))
   (SIGNATURE |bound|
    ((|NonNegativeInteger|) (|NonNegativeInteger|) (|NonNegativeInteger|)
     (|NonNegativeInteger|)))
   (SIGNATURE |complete| ((|Void|) (|JetDifferentialEquation| |#1| |#2|)))
   (SIGNATURE |complete2|
    ((|Record| (|:| |IDe| (|JetDifferentialEquation| |#1| |#2|))
               (|:| |ISys| (|List| |#2|)) (|:| |Order| (|NonNegativeInteger|))
               (|:| |NumProj| (|NonNegativeInteger|))
               (|:| |Dim| (|NonNegativeInteger|))
               (|:| |CarChar| (|List| (|NonNegativeInteger|))))
     (|JetDifferentialEquation| |#1| |#2|))))
  (|JetBundleCategory|) (|JetBundleFunctionCategory| |#1|))
 (T |CartanKuranishi|))
(CATEGORY |package|
 (SIGNATURE |setOutMode| ((|NonNegativeInteger|) (|NonNegativeInteger|)))
 (SIGNATURE |setSimpMode| ((|NonNegativeInteger|) (|NonNegativeInteger|)))
 (SIGNATURE |setRedMode| ((|NonNegativeInteger|) (|NonNegativeInteger|)))
 (SIGNATURE |stirling|
  ((|NonNegativeInteger|) (|NonNegativeInteger|) (|NonNegativeInteger|)
   (|NonNegativeInteger|)))
 (SIGNATURE |alpha|
  ((|List| (|NonNegativeInteger|)) (|NonNegativeInteger|)
   (|List| (|NonNegativeInteger|))))
 (SIGNATURE |hilbert|
  ((|SparseUnivariatePolynomial| (|Fraction| (|Integer|)))
   (|List| (|NonNegativeInteger|))))
 (SIGNATURE |alphaHilbert|
  ((|List| (|NonNegativeInteger|))
   (|SparseUnivariatePolynomial| (|Fraction| (|Integer|)))))
 (SIGNATURE |arbFunctions|
  ((|List| (|Integer|)) (|NonNegativeInteger|) (|Integer|)
   (|List| (|NonNegativeInteger|))))
 (SIGNATURE |gauge|
  ((|List| (|Integer|)) (|NonNegativeInteger|) (|Integer|)
   (|List| (|NonNegativeInteger|))))
 (SIGNATURE |gaugeHilbert|
  ((|SparseUnivariatePolynomial| (|Fraction| (|Integer|)))
   (|NonNegativeInteger|) (|List| (|NonNegativeInteger|))))
 (SIGNATURE |bound|
  ((|NonNegativeInteger|) (|NonNegativeInteger|) (|NonNegativeInteger|)
   (|NonNegativeInteger|)))
 (SIGNATURE |complete| ((|Void|) (|JetDifferentialEquation| |#1| |#2|)))
 (SIGNATURE |complete2|
  ((|Record| (|:| |IDe| (|JetDifferentialEquation| |#1| |#2|))
             (|:| |ISys| (|List| |#2|)) (|:| |Order| (|NonNegativeInteger|))
             (|:| |NumProj| (|NonNegativeInteger|))
             (|:| |Dim| (|NonNegativeInteger|))
             (|:| |CarChar| (|List| (|NonNegativeInteger|))))
   (|JetDifferentialEquation| |#1| |#2|))))
"/git/fricas/src/algebra/CKP.spad"
((|complete2| (*1 *2 *3)
  (AND (|isDomain| *3 (|JetDifferentialEquation| *4 *5))
       (|ofCategory| *4 (|JetBundleCategory|))
       (|ofCategory| *5 (|JetBundleFunctionCategory| *4))
       (|isDomain| *2
                   (|Record| (|:| |IDe| (|JetDifferentialEquation| *4 *5))
                             (|:| |ISys| (|List| *5))
                             (|:| |Order| (|NonNegativeInteger|))
                             (|:| |NumProj| (|NonNegativeInteger|))
                             (|:| |Dim| (|NonNegativeInteger|))
                             (|:| |CarChar| (|List| (|NonNegativeInteger|)))))
       (|isDomain| *1 (|CartanKuranishi| *4 *5))))
 (|complete| (*1 *2 *3)
  (AND (|isDomain| *3 (|JetDifferentialEquation| *4 *5))
       (|ofCategory| *4 (|JetBundleCategory|))
       (|ofCategory| *5 (|JetBundleFunctionCategory| *4))
       (|isDomain| *2 (|Void|)) (|isDomain| *1 (|CartanKuranishi| *4 *5))))
 (|bound| (*1 *2 *2 *2 *2)
  (AND (|isDomain| *2 (|NonNegativeInteger|))
       (|ofCategory| *3 (|JetBundleCategory|))
       (|isDomain| *1 (|CartanKuranishi| *3 *4))
       (|ofCategory| *4 (|JetBundleFunctionCategory| *3))))
 (|gaugeHilbert| (*1 *2 *3 *4)
  (AND (|isDomain| *4 (|List| (|NonNegativeInteger|)))
       (|isDomain| *3 (|NonNegativeInteger|))
       (|ofCategory| *5 (|JetBundleCategory|))
       (|isDomain| *2 (|SparseUnivariatePolynomial| (|Fraction| (|Integer|))))
       (|isDomain| *1 (|CartanKuranishi| *5 *6))
       (|ofCategory| *6 (|JetBundleFunctionCategory| *5))))
 (|gauge| (*1 *2 *3 *4 *5)
  (AND (|isDomain| *4 (|Integer|))
       (|isDomain| *5 (|List| (|NonNegativeInteger|)))
       (|isDomain| *3 (|NonNegativeInteger|))
       (|ofCategory| *6 (|JetBundleCategory|))
       (|isDomain| *2 (|List| (|Integer|)))
       (|isDomain| *1 (|CartanKuranishi| *6 *7))
       (|ofCategory| *7 (|JetBundleFunctionCategory| *6))))
 (|arbFunctions| (*1 *2 *3 *4 *5)
  (AND (|isDomain| *4 (|Integer|))
       (|isDomain| *5 (|List| (|NonNegativeInteger|)))
       (|isDomain| *3 (|NonNegativeInteger|))
       (|ofCategory| *6 (|JetBundleCategory|))
       (|isDomain| *2 (|List| (|Integer|)))
       (|isDomain| *1 (|CartanKuranishi| *6 *7))
       (|ofCategory| *7 (|JetBundleFunctionCategory| *6))))
 (|alphaHilbert| (*1 *2 *3)
  (AND (|isDomain| *3 (|SparseUnivariatePolynomial| (|Fraction| (|Integer|))))
       (|ofCategory| *4 (|JetBundleCategory|))
       (|isDomain| *2 (|List| (|NonNegativeInteger|)))
       (|isDomain| *1 (|CartanKuranishi| *4 *5))
       (|ofCategory| *5 (|JetBundleFunctionCategory| *4))))
 (|hilbert| (*1 *2 *3)
  (AND (|isDomain| *3 (|List| (|NonNegativeInteger|)))
       (|ofCategory| *4 (|JetBundleCategory|))
       (|isDomain| *2 (|SparseUnivariatePolynomial| (|Fraction| (|Integer|))))
       (|isDomain| *1 (|CartanKuranishi| *4 *5))
       (|ofCategory| *5 (|JetBundleFunctionCategory| *4))))
 (|alpha| (*1 *2 *3 *2)
  (AND (|isDomain| *2 (|List| (|NonNegativeInteger|)))
       (|isDomain| *3 (|NonNegativeInteger|))
       (|ofCategory| *4 (|JetBundleCategory|))
       (|isDomain| *1 (|CartanKuranishi| *4 *5))
       (|ofCategory| *5 (|JetBundleFunctionCategory| *4))))
 (|stirling| (*1 *2 *2 *2 *2)
  (AND (|isDomain| *2 (|NonNegativeInteger|))
       (|ofCategory| *3 (|JetBundleCategory|))
       (|isDomain| *1 (|CartanKuranishi| *3 *4))
       (|ofCategory| *4 (|JetBundleFunctionCategory| *3))))
 (|setRedMode| (*1 *2 *2)
  (AND (|isDomain| *2 (|NonNegativeInteger|))
       (|ofCategory| *3 (|JetBundleCategory|))
       (|isDomain| *1 (|CartanKuranishi| *3 *4))
       (|ofCategory| *4 (|JetBundleFunctionCategory| *3))))
 (|setSimpMode| (*1 *2 *2)
  (AND (|isDomain| *2 (|NonNegativeInteger|))
       (|ofCategory| *3 (|JetBundleCategory|))
       (|isDomain| *1 (|CartanKuranishi| *3 *4))
       (|ofCategory| *4 (|JetBundleFunctionCategory| *3))))
 (|setOutMode| (*1 *2 *2)
  (AND (|isDomain| *2 (|NonNegativeInteger|))
       (|ofCategory| *3 (|JetBundleCategory|))
       (|isDomain| *1 (|CartanKuranishi| *3 *4))
       (|ofCategory| *4 (|JetBundleFunctionCategory| *3)))))
((|stirling|
  (((|NonNegativeInteger|) (|NonNegativeInteger|) (|NonNegativeInteger|)
    (|NonNegativeInteger|))
   62))
 (|setSimpMode| (((|NonNegativeInteger|) (|NonNegativeInteger|)) 20))
 (|setRedMode| (((|NonNegativeInteger|) (|NonNegativeInteger|)) 21))
 (|setOutMode| (((|NonNegativeInteger|) (|NonNegativeInteger|)) 24))
 (|hilbert|
  (((|SparseUnivariatePolynomial| (|Fraction| (|Integer|)))
    (|List| (|NonNegativeInteger|)))
   79))
 (|gaugeHilbert|
  (((|SparseUnivariatePolynomial| (|Fraction| (|Integer|)))
    (|NonNegativeInteger|) (|List| (|NonNegativeInteger|)))
   97))
 (|gauge|
  (((|List| (|Integer|)) (|NonNegativeInteger|) (|Integer|)
    (|List| (|NonNegativeInteger|)))
   95))
 (|complete2|
  (((|Record| (|:| |IDe| (|JetDifferentialEquation| |#1| |#2|))
              (|:| |ISys| (|List| |#2|)) (|:| |Order| (|NonNegativeInteger|))
              (|:| |NumProj| (|NonNegativeInteger|))
              (|:| |Dim| (|NonNegativeInteger|))
              (|:| |CarChar| (|List| (|NonNegativeInteger|))))
    (|JetDifferentialEquation| |#1| |#2|))
   100))
 (|complete| (((|Void|) (|JetDifferentialEquation| |#1| |#2|)) 101))
 (|bound|
  (((|NonNegativeInteger|) (|NonNegativeInteger|) (|NonNegativeInteger|)
    (|NonNegativeInteger|))
   98))
 (|arbFunctions|
  (((|List| (|Integer|)) (|NonNegativeInteger|) (|Integer|)
    (|List| (|NonNegativeInteger|)))
   91))
 (|alphaHilbert|
  (((|List| (|NonNegativeInteger|))
    (|SparseUnivariatePolynomial| (|Fraction| (|Integer|))))
   85))
 (|alpha|
  (((|List| (|NonNegativeInteger|)) (|NonNegativeInteger|)
    (|List| (|NonNegativeInteger|)))
   67)))
CKP
((|constructor|
  (NIL
   "\\spadtype{CartanKuranishi} is a package for the completion of a given differential equation to an involutive equation. Procedures for Cartan characters and Hilbert polynomial are also provided. Based on the Cartan-Kuranishi theorem as it is used in formal theory."))
 (|complete2|
  (((|Record| (|:| |IDe| (|JetDifferentialEquation| |#1| |#2|))
              (|:| |ISys| (|List| |#2|)) (|:| |Order| (|NonNegativeInteger|))
              (|:| |NumProj| (|NonNegativeInteger|))
              (|:| |Dim| (|NonNegativeInteger|))
              (|:| |CarChar| (|List| (|NonNegativeInteger|))))
    (|JetDifferentialEquation| |#1| |#2|))
   "\\spad{complete2(de)} is like \\spadfun{complete} but returns the involutive equation \\spad{IDe},{} a basis \\spad{ISys} for the involutive system without prolongations,{} its order \\spad{Order},{} the number \\spad{NumProj} of needed projections and the Cartan characters \\spad{CarChar}."))
 (|complete|
  (((|Void|) (|JetDifferentialEquation| |#1| |#2|))
   "\\spad{complete(de)} completes \\spad{de} to an involutive equation. No result is returned; the display depends of the setting of the output flags with \\spadfun{setOutput}."))
 (|bound|
  (((|NonNegativeInteger|) (|NonNegativeInteger|) (|NonNegativeInteger|)
    (|NonNegativeInteger|))
   "\\spad{bound(n,{} m,{} q)} computes an upper bound for the number of prolongations needed to make the symbol of an equation of order \\spad{q} with \\spad{n} independent and \\spad{m} dependent variables involutive."))
 (|gaugeHilbert|
  (((|SparseUnivariatePolynomial| (|Fraction| (|Integer|)))
    (|NonNegativeInteger|) (|List| (|NonNegativeInteger|)))
   "\\spad{gaugeHilbert(q,{} gamma)} computes the gauge correction to the Hilbert polynomial for a system of order \\spad{q} with \\spad{gamma} gauge functions."))
 (|gauge|
  (((|List| (|Integer|)) (|NonNegativeInteger|) (|Integer|)
    (|List| (|NonNegativeInteger|)))
   "\\spad{gauge(q,{} j,{} gamma)} computes the gauge corrections to the number of arbitrary functions of differentiation order \\spad{j} for a system of order \\spad{q} with \\spad{gamma} gauge functions."))
 (|arbFunctions|
  (((|List| (|Integer|)) (|NonNegativeInteger|) (|Integer|)
    (|List| (|NonNegativeInteger|)))
   "\\spad{arbFunctions(q,{} j,{} cc)} uses the Cartan characters \\spad{cc} to compute the number of arbitrary functions of differentiation order \\spad{j} in the general solution of a differential equation of order \\spad{q}."))
 (|alphaHilbert|
  (((|List| (|NonNegativeInteger|))
    (|SparseUnivariatePolynomial| (|Fraction| (|Integer|))))
   "\\spad{alphaHilbert(hp)} computes the Cartan characters for the Hilbert polynomial \\spad{hp}."))
 (|hilbert|
  (((|SparseUnivariatePolynomial| (|Fraction| (|Integer|)))
    (|List| (|NonNegativeInteger|)))
   "\\spad{hilbert(cc)} computes the Hilbert polynomial to the Cartan characters \\spad{cc}."))
 (|alpha|
  (((|List| (|NonNegativeInteger|)) (|NonNegativeInteger|)
    (|List| (|NonNegativeInteger|)))
   "\\spad{alpha(q,{} beta)} computes the Cartan characters for a differential equation of order \\spad{q} and with characters \\spad{beta}."))
 (|stirling|
  (((|NonNegativeInteger|) (|NonNegativeInteger|) (|NonNegativeInteger|)
    (|NonNegativeInteger|))
   "\\spad{stirling(i,{} k,{} q)} computes the corresponding modified Stirling number."))
 (|setRedMode|
  (((|NonNegativeInteger|) (|NonNegativeInteger|))
   "\\spad{setRedMode(i)} sets the flag for the reduction mode. Returns old value. Current values are: \\spad{i = 0} --> No reduction of integrability conditions etc. \\spad{i = 1} --> Autoreduction of complete system and reduction \\indented{16}{of all integrability conditions.} Default is 0."))
 (|setSimpMode|
  (((|NonNegativeInteger|) (|NonNegativeInteger|))
   "\\spad{setSimpMode(i)} sets the simplification mode used in \\spad{JetDifferentialEquation}. Returns old value."))
 (|setOutMode|
  (((|NonNegativeInteger|) (|NonNegativeInteger|))
   "\\spad{setOutput(i)} controls amount of generated output during the completion algorithm: \\spad{i = 0} --> no display,{} \\spad{i = 1} --> result is displayed,{} \\spad{i = 2} --> Cartan characters are displayed,{} \\spad{i = 3} --> integrability conditions are traced,{} \\spad{i = 4} --> intermediate dimensions are traced,{} \\spad{i = 5} --> all intermediate systems are traced,{} \\spad{i = 6} --> all intermediate systems and symbols are traced,{} if \\spad{i > 10} then TeX output is produced. Default is 0. The old value is returned.")))
(("documentation" 0 9336) ("ancestors" 0 NIL) ("parents" 0 NIL)
 ("abbreviation" 0 9332) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 7705) ("modemaps" 0 3618) ("sourceFile" 0 3583)
 ("constructorCategory" 0 1913) ("constructorModemap" 0 55)
 ("constructorKind" 0 45) ("constructorForm" 0 20))