)abbrev domain FC FortranCode
-- The FortranCode domain is used to represent operations which are to be
-- translated into FORTRAN.
++ Author: Mike Dewar
++ Date Created: April 1991
++ Basic Operations:
++ Related Constructors: FortranProgram, Switch, FortranType
++ Also See:
++ AMS Classifications:
++ Keywords:
++ References:
++ Description:
++ This domain builds representations of program code segments for use with
++ the FortranProgram domain.
FortranCode() : public == private where
  L ==> List
  PI ==> PositiveInteger
  PIN ==> Polynomial Integer
  LS ==> List String
  O ==> OutputForm
  OP ==> Union(Null:"null",
               Assignment:"assignment",
               Conditional:"conditional",
               Return:"return",
               Block:"block",
               Comment:"comment",
               Call:"call",
               For:"for",
               While:"while",
               Repeat:"repeat",
               Goto:"goto",
               Continue:"continue",
               ArrayAssignment:"arrayAssignment",
               Save:"save",
               Stop:"stop",
               Common:"common",
               Print:"print")
  ARRAYASS ==> Record(var : Symbol, rand : O, ints2Floats? : Boolean)
  EXPRESSION ==> Record(ints2Floats? : Boolean, expr : O)
  ASS ==> Record(var : Symbol,
                 arrayIndex : L PIN,
                 rand : EXPRESSION
                )
  COND ==> Record(switch : Switch(),
                  thenClause : %,
                  elseClause : %
                 )
  RETURN ==> Record(empty? : Boolean, value : EXPRESSION)
  BLOCK ==> List %
  COMMENT ==> List String
  COMMON ==> Record(name : Symbol, contents : List Symbol)
  CALL ==> String
  FOR ==> Record(range : SegmentBinding PIN, span : PIN,  body : %)
  LABEL ==> SingleInteger
  LOOP ==> Record(switch : Switch(), body : %)
  PRINTLIST ==> List O
  OPREC ==> Union(nullBranch:"null", assignmentBranch:ASS,
                  arrayAssignmentBranch : ARRAYASS,
                  conditionalBranch : COND, returnBranch : RETURN,
                  blockBranch : BLOCK, commentBranch : COMMENT, callBranch : CALL,
                  forBranch : FOR, labelBranch : LABEL, loopBranch : LOOP,
                  commonBranch : COMMON, printBranch : PRINTLIST)

  public == SetCategory with
    coerce : % -> O
      ++ coerce(f) returns an object of type OutputForm.
    forLoop : (SegmentBinding PIN, %) -> %
     ++ forLoop(i=1..10, c) creates a representation of a FORTRAN DO loop with
     ++ \spad{i} ranging over the values 1 to 10.
    forLoop : (SegmentBinding PIN, PIN, %) -> %
     ++ forLoop(i=1..10, n, c) creates a representation of a FORTRAN DO loop with
     ++ \spad{i} ranging over the values 1 to 10 by n.
    whileLoop : (Switch, %) -> %
     ++ whileLoop(s, c) creates a while loop in FORTRAN.
    repeatUntilLoop : (Switch, %) -> %
     ++ repeatUntilLoop(s, c) creates a repeat ... until loop in FORTRAN.
    gotoJump : SingleInteger -> %
      ++ gotoJump(l) creates a representation of a FORTRAN GOTO statement
    continue : SingleInteger -> %
      ++ continue(l) creates a representation of a FORTRAN CONTINUE labelled
      ++ with l
    comment : String -> %
      ++ comment(s) creates a representation of the String s as a single FORTRAN
      ++ comment.
    comment : List String -> %
      ++ comment(s) creates a representation of the Strings s as a multi-line
      ++ FORTRAN comment.
    call : String -> %
      ++ call(s) creates a representation of a FORTRAN CALL statement
    returns : () -> %
      ++ returns() creates a representation of a FORTRAN RETURN statement.
    returns : Expression MachineFloat -> %
      ++ returns(e) creates a representation of a FORTRAN RETURN statement
      ++ with a returned value.
    returns : Expression MachineInteger -> %
      ++ returns(e) creates a representation of a FORTRAN RETURN statement
      ++ with a returned value.
    returns : Expression MachineComplex -> %
      ++ returns(e) creates a representation of a FORTRAN RETURN statement
      ++ with a returned value.
    returns : Expression Float -> %
      ++ returns(e) creates a representation of a FORTRAN RETURN statement
      ++ with a returned value.
    returns : Expression Integer -> %
      ++ returns(e) creates a representation of a FORTRAN RETURN statement
      ++ with a returned value.
    returns : Expression Complex Float -> %
      ++ returns(e) creates a representation of a FORTRAN RETURN statement
      ++ with a returned value.
    cond : (Switch, %) -> %
      ++ cond(s, e) creates a representation of the FORTRAN expression
      ++ IF (s) THEN e.
    cond : (Switch, %, %) -> %
      ++ cond(s, e, f) creates a representation of the FORTRAN expression
      ++ IF (s) THEN e ELSE f.
    assign : (Symbol, String) -> %
      ++ assign(x, y) creates a representation of the FORTRAN expression
      ++ x=y.
    assign : (Symbol, Expression MachineInteger) -> %
      ++ assign(x, y) creates a representation of the FORTRAN expression
      ++ x=y.
    assign : (Symbol, Expression MachineFloat) -> %
      ++ assign(x, y) creates a representation of the FORTRAN expression
      ++ x=y.
    assign : (Symbol, Expression MachineComplex) -> %
      ++ assign(x, y) creates a representation of the FORTRAN expression
      ++ x=y.
    assign : (Symbol, Matrix MachineInteger) -> %
      ++ assign(x, y) creates a representation of the FORTRAN expression
      ++ x=y.
    assign : (Symbol, Matrix MachineFloat) -> %
      ++ assign(x, y) creates a representation of the FORTRAN expression
      ++ x=y.
    assign : (Symbol, Matrix MachineComplex) -> %
      ++ assign(x, y) creates a representation of the FORTRAN expression
      ++ x=y.
    assign : (Symbol, Vector MachineInteger) -> %
      ++ assign(x, y) creates a representation of the FORTRAN expression
      ++ x=y.
    assign : (Symbol, Vector MachineFloat) -> %
      ++ assign(x, y) creates a representation of the FORTRAN expression
      ++ x=y.
    assign : (Symbol, Vector MachineComplex) -> %
      ++ assign(x, y) creates a representation of the FORTRAN expression
      ++ x=y.
    assign : (Symbol, Matrix Expression MachineInteger) -> %
      ++ assign(x, y) creates a representation of the FORTRAN expression
      ++ x=y.
    assign : (Symbol, Matrix Expression MachineFloat) -> %
      ++ assign(x, y) creates a representation of the FORTRAN expression
      ++ x=y.
    assign : (Symbol, Matrix Expression MachineComplex) -> %
      ++ assign(x, y) creates a representation of the FORTRAN expression
      ++ x=y.
    assign : (Symbol, Vector Expression MachineInteger) -> %
      ++ assign(x, y) creates a representation of the FORTRAN expression
      ++ x=y.
    assign : (Symbol, Vector Expression MachineFloat) -> %
      ++ assign(x, y) creates a representation of the FORTRAN expression
      ++ x=y.
    assign : (Symbol, Vector Expression MachineComplex) -> %
      ++ assign(x, y) creates a representation of the FORTRAN expression
      ++ x=y.
    assign : (Symbol, L PIN, Expression MachineInteger) -> %
      ++ assign(x, l, y) creates a representation of the assignment of \spad{y}
      ++ to the \spad{l}'th element of array \spad{x} (\spad{l} is a list of
      ++ indices).
    assign : (Symbol, L PIN, Expression MachineFloat) -> %
      ++ assign(x, l, y) creates a representation of the assignment of \spad{y}
      ++ to the \spad{l}'th element of array \spad{x} (\spad{l} is a list of
      ++ indices).
    assign : (Symbol, L PIN, Expression MachineComplex) -> %
      ++ assign(x, l, y) creates a representation of the assignment of \spad{y}
      ++ to the \spad{l}'th element of array \spad{x} (\spad{l} is a list of
      ++ indices).
    assign : (Symbol, Expression Integer) -> %
      ++ assign(x, y) creates a representation of the FORTRAN expression
      ++ x=y.
    assign : (Symbol, Expression Float) -> %
      ++ assign(x, y) creates a representation of the FORTRAN expression
      ++ x=y.
    assign : (Symbol, Expression Complex Float) -> %
      ++ assign(x, y) creates a representation of the FORTRAN expression
      ++ x=y.
    assign : (Symbol, Matrix Expression Integer) -> %
      ++ assign(x, y) creates a representation of the FORTRAN expression
      ++ x=y.
    assign : (Symbol, Matrix Expression Float) -> %
      ++ assign(x, y) creates a representation of the FORTRAN expression
      ++ x=y.
    assign : (Symbol, Matrix Expression Complex Float) -> %
      ++ assign(x, y) creates a representation of the FORTRAN expression
      ++ x=y.
    assign : (Symbol, Vector Expression Integer) -> %
      ++ assign(x, y) creates a representation of the FORTRAN expression
      ++ x=y.
    assign : (Symbol, Vector Expression Float) -> %
      ++ assign(x, y) creates a representation of the FORTRAN expression
      ++ x=y.
    assign : (Symbol, Vector Expression Complex Float) -> %
      ++ assign(x, y) creates a representation of the FORTRAN expression
      ++ x=y.
    assign : (Symbol, L PIN, Expression Integer) -> %
      ++ assign(x, l, y) creates a representation of the assignment of \spad{y}
      ++ to the \spad{l}'th element of array \spad{x} (\spad{l} is a list of
      ++ indices).
    assign : (Symbol, L PIN, Expression Float) -> %
      ++ assign(x, l, y) creates a representation of the assignment of \spad{y}
      ++ to the \spad{l}'th element of array \spad{x} (\spad{l} is a list of
      ++ indices).
    assign : (Symbol, L PIN, Expression Complex Float) -> %
      ++ assign(x, l, y) creates a representation of the assignment of \spad{y}
      ++ to the \spad{l}'th element of array \spad{x} (\spad{l} is a list of
      ++ indices).
    block : List(%) -> %
      ++ block(l) creates a representation of the statements in l as a block.
    stop : () -> %
      ++ stop() creates a representation of a STOP statement.
    save : () -> %
      ++ save() creates a representation of a SAVE statement.
    printStatement : List O -> %
      ++ printStatement(l) creates a representation of a PRINT statement.
    common : (Symbol, List Symbol) -> %
      ++ common(name, contents) creates a representation a named common block.
    operation : % -> OP
      ++ operation(f) returns the name of the operation represented by \spad{f}.
    code : % -> OPREC
      ++ code(f) returns the internal representation of the object represented
      ++ by \spad{f}.
    printCode : % -> Void
      ++ printCode(f) prints out \spad{f} in FORTRAN notation.
    getCode : % -> LS
      ++ getCode(f) returns a list of strings representing \spad{f}
      ++ in Fortran notation.  This is used by the FortranProgram domain.
    setLabelValue : SingleInteger -> SingleInteger
      ++ setLabelValue(i) resets the counter which produces labels to i

  private == add
    import from Void
    import from ASS
    import from COND
    import from RETURN
    import from L PIN
    import from O
    import from LS
    import from FortranType
    import from TheSymbolTable
    import from FortranCodeTools

    get_assignment(name : O,e : O, int_to_floats? : Boolean) : LS ==
        getStatement(elt('=::O, [name, e]), int_to_floats?)

    format_switch(switch1 : O, l : LS) : List(LS) ==
        if LISTP(switch1)$Lisp then
            l1 : List(O) := switch1 pretend List(O)
            if EQ(first(l1), 'NULL)$Lisp then
                switch1 := first rest l1
        r := reverse!(statement2Fortran switch1)
        while not(empty?(r)) and not(first(r) = "%l") repeat
            l := cons(first(r), l)
            r := rest(r)
        [l, r]

    fortFormatIf1(switch1 : O, i : Integer, kind : String) : LS ==
        l : LS := [")THEN"]
        changeExprLength(-i) -- Leave room for IF( ... )THEN
        (l, r) := format_switch(switch1, l)
        changeExprLength(i)
        reverse! append(reverse!(l), cons(kind, r))

    fortFormatIf(switch1 : O) : LS ==
        do_with_error_env1(() +-> fortFormatIf1(switch1, 8, "IF("))

    fortFormatElseIf(switch1 : O) : LS ==
        do_with_error_env1(() +-> fortFormatIf1(switch1, 12, "ELSEIF("))

    fortFormatIfGoto1(switch1 : O, lab : SingleInteger) : LS ==
        l : LS := [")GOTO ", convert(lab)@String]
        changeExprLength(-8) -- Leave room for IF( ... )THEN
        (l, r) := format_switch(switch1, l)
        changeExprLength(8)
        reverse! append(reverse!(l), cons("IF(", r))

    fortFormatIfGoto(switch1 : O, lab : SingleInteger) : LS ==
        do_with_error_env1(() +-> fortFormatIfGoto1(switch1, lab))

    fortFormatLabelledIfGoto1(switch1 : O, lab1 : SingleInteger,
                             lab2 : SingleInteger) : LS ==
        l := fortFormatIfGoto1(switch1, lab2)
        labString := convert(lab1)@String
        for i in #(labString)..5 repeat labString := concat(labString, " ")
        l := fort_clean_lines(l)
        cons(concat(labString, first(l)(7..)), rest(l))

    fortFormatLabelledIfGoto(switch1 : O, lab1 : SingleInteger,
                             lab2 : SingleInteger) : LS ==
        fortFormatLabelledIfGoto1(switch1, lab1, lab2)

    getfortarrayexp1(name : Symbol, of : O, int_to_floats? : Boolean) : LS ==
        l := expression2Fortran1(() +-> name, of, int_to_floats?)
        first(l, (#l - 2)::NonNegativeInteger)

    getfortarrayexp(name : Symbol, of : O, int_to_floats? : Boolean) : LS ==
        do_with_error_env2(int_to_floats?,
                           () +-> getfortarrayexp1(name, of, int_to_floats?))

    fortFormatDo1(var1 : Symbol, lo : O, hi : O, incr : O,
                 lab : SingleInteger) : LS ==
        lol := statement2Fortran lo
        hil := statement2Fortran hi
        incl : LS :=
            EQUAL(incr, 1@Integer)$Lisp => cons(",", statement2Fortran incr)
            []
        il := append(lol, cons(",", append(hil, incl)))
        append(["DO ", convert(lab)@String, " ", string(var1), "="], il)

    fortFormatDo(var1 : Symbol, lo : O, hi : O, inc : O,
                 lab : SingleInteger) : LS ==
        do_with_error_env2(false,
                           () +-> fortFormatDo1(var1, lo, hi, inc, lab))

    addCommas(l : List Symbol) : LS ==
        empty?(l) => []
        r := [string(first l)]
        for e in rest l repeat r := cons(string(e), cons(",", r))
        reverse!(r)

    Rep := Record(op : OP, data : OPREC)

    -- We need to be able to generate unique labels
    labelValue : SingleInteger := 25000::SingleInteger
    setLabelValue(u : SingleInteger) : SingleInteger == labelValue := u
    newLabel() : SingleInteger ==
      labelValue := labelValue + 1$SingleInteger
      labelValue

    commaSep(l : List String) : List(String) ==
      [(l.1),:[:[",",u] for u in rest(l)]]

    getReturn(rec : RETURN) : LS ==
      returnToken : O := "RETURN"::Symbol::O
      elt(rec, empty?)$RETURN =>
            getStatement(returnToken, false)
      rt : EXPRESSION := elt(rec, value)$RETURN
      rv : O := elt(rt, expr)$EXPRESSION
      getStatement(elt(returnToken, [rv]),
                   elt(rt, ints2Floats?)$EXPRESSION)

    getStop() : LS ==
        fort_clean_lines(["STOP"]$LS)

    getSave() : LS ==
        fort_clean_lines(["SAVE"])

    getCommon(u : COMMON) : LS ==
        fort_clean_lines(append(["COMMON", " /", string (u.name), "/ "]$LS,
                                addCommas(u.contents)))

    getPrint(l : PRINTLIST) : LS ==
        ll : LS := ["PRINT*"]
        for i in l repeat
            ll := append(ll, cons(",", expression2Fortran(i)))
        fort_clean_lines(ll)

    getBlock(rec : BLOCK) : LS ==
        indentFortLevel(1)
        expr : LS := []
        for u in rec repeat
            expr := append(expr, getCode(u))
        indentFortLevel(-1)
        expr

    getBody(f : %) : LS ==
      operation(f) case Block => getCode f
      indentFortLevel(1@Integer)
      expr := getCode f
      indentFortLevel(-1@Integer)
      expr

    getElseIf(f : %) : LS ==
      rec := code f
      expr : LS :=
          fortFormatElseIf(elt(rec.conditionalBranch, switch)$COND::O)
      expr :=
          append(expr, getBody elt(rec.conditionalBranch, thenClause)$COND)
      elseBranch := elt(rec.conditionalBranch, elseClause)$COND
      not(operation(elseBranch) case Null) =>
          operation(elseBranch) case Conditional =>
              append(expr, getElseIf elseBranch)
          expr := append(expr, getStatement('ELSE::O, false))
          expr := append(expr, getBody elseBranch)
      expr

    getContinue(label : SingleInteger) : LS ==
        lab := convert(label)@String
        if #lab > 6 then error "Label too big"
        cnt := "CONTINUE"
        sp  : O := hspace(get_fort_indent() - #lab)
        [STRCONC(lab, sp, cnt)$Lisp]$LS

    getGoto(label : SingleInteger) : LS ==
        fort_clean_lines([concat("GOTO ", convert(label)@String)])

    getRepeat(repRec : LOOP) : LS ==
      sw : Switch := NOT elt(repRec, switch)$LOOP
      lab := newLabel()
      bod := elt(repRec, body)$LOOP
      append(getContinue lab,
             append(getBody bod, fortFormatIfGoto(sw::O, lab)))

    getWhile(whileRec : LOOP) : LS ==
      sw := NOT elt(whileRec, switch)$LOOP
      lab1 := newLabel()
      lab2 := newLabel()
      bod := elt(whileRec, body)$LOOP
      ig : LS := fortFormatLabelledIfGoto(sw::O, lab1, lab2)
      rl1 := [ig, getBody bod, getBody gotoJump(lab1),
              getContinue lab2]$List(LS)
      concat(rl1)$LS

    getArrayAssign(rec : ARRAYASS) : LS ==
        getfortarrayexp(rec.var, rec.rand, rec.ints2Floats?)

    getAssign(rec : ASS) : LS ==
        indices : L PIN := elt(rec, arrayIndex)$ASS
        lhs := elt(rec, var)$ASS::O
        if not(empty?(indices))  then
            lhs := elt(lhs, map((ii : PIN) : O +-> ii::O, indices
                               )$ListFunctions2(PIN, O))
        ass := elt(rec, rand)$ASS
        ex := elt(ass, expr)$EXPRESSION
        get_assignment(lhs, ex, elt(ass, ints2Floats?)$EXPRESSION)

    getCond(rec : COND) : LS ==
      expr := append(fortFormatIf(elt(rec, switch)$COND::O),
                     getBody elt(rec, thenClause)$COND)
      elseBranch := elt(rec, elseClause)$COND
      if not(operation(elseBranch) case Null) then
        operation(elseBranch) case Conditional =>
            expr := append(expr, getElseIf elseBranch)
        expr := append(expr,
                       append(getStatement('ELSE::O, false),
                              getBody elseBranch))
      append(expr, getStatement('ENDIF::O, false))

    getComment(rec : COMMENT) : LS ==
        [concat("C     ", c)$String for c in rec]

    getCall(rec : CALL) : LS ==
      expr := concat("CALL ",rec)$String
      #expr > 1320 => error "Fortran CALL too large"
      fort_clean_lines([expr])

    getFor(rec : FOR) : LS ==
      rnge : SegmentBinding PIN := elt(rec, range)$FOR
      increment : PIN := elt(rec, span)$FOR
      lab : SingleInteger := newLabel()
      declare!(variable rnge, fortranInteger())
      expr : LS := fortFormatDo(variable rnge, (low(segment(rnge)))::O, _
          (high(segment(rnge)))::O, increment::O, lab)
      append(expr, append(getBody elt(rec, body)$FOR, getContinue(lab)))

    getCode(f : %) : LS ==
      opp : OP := operation f
      rec : OPREC := code f
      opp case Assignment => getAssign(rec.assignmentBranch)
      opp case ArrayAssignment => getArrayAssign(rec.arrayAssignmentBranch)
      opp case Conditional => getCond(rec.conditionalBranch)
      opp case Return => getReturn(rec.returnBranch)
      opp case Block => getBlock(rec.blockBranch)
      opp case Comment => getComment(rec.commentBranch)
      opp case Call => getCall(rec.callBranch)
      opp case For => getFor(rec.forBranch)
      opp case Continue => getContinue(rec.labelBranch)
      opp case Goto => getGoto(rec.labelBranch)
      opp case Repeat => getRepeat(rec.loopBranch)
      opp case While => getWhile(rec.loopBranch)
      opp case Save => getSave()
      opp case Stop => getStop()
      opp case Print => getPrint(rec.printBranch)
      opp case Common => getCommon(rec.commonBranch)
      error "Unsupported program construct."

    printCode(f : %) : Void ==
      displayLines(getCode f)
      void()$Void

    code (f : %) : OPREC ==
      elt(f, data)$Rep

    operation (f : %) : OP ==
      elt(f, op)$Rep

    common(name : Symbol, contents : List Symbol) : % ==
      [["common"]$OP,[[name,contents]$COMMON]$OPREC]$Rep

    stop() : % ==
      [["stop"]$OP,["null"]$OPREC]$Rep

    save() : % ==
      [["save"]$OP,["null"]$OPREC]$Rep

    printStatement(l : List O) : % ==
      [["print"]$OP,[l]$OPREC]$Rep

    comment(s : List String) : % ==
      [["comment"]$OP,[s]$OPREC]$Rep

    comment(s : String) : % ==
      [["comment"]$OP,[list s]$OPREC]$Rep

    forLoop(r : SegmentBinding PIN, body : %) : % ==
      [["for"]$OP,[[r,(incr segment r)::PIN,body]$FOR]$OPREC]$Rep

    forLoop(r : SegmentBinding PIN, increment : PIN, body : %) : % ==
      [["for"]$OP,[[r,increment,body]$FOR]$OPREC]$Rep

    gotoJump(l : SingleInteger) : % ==
      [["goto"]$OP,[l]$OPREC]$Rep

    continue(l : SingleInteger) : % ==
      [["continue"]$OP,[l]$OPREC]$Rep

    whileLoop(sw : Switch, b : %) : % ==
      [["while"]$OP,[[sw,b]$LOOP]$OPREC]$Rep

    repeatUntilLoop(sw : Switch, b : %) : % ==
      [["repeat"]$OP,[[sw,b]$LOOP]$OPREC]$Rep

    returns() : % ==
      v := [false, 0::O]$EXPRESSION
      [["return"]$OP,[[true,v]$RETURN]$OPREC]$Rep

    returns(v : Expression MachineInteger) : % ==
      [["return"]$OP,[[false,[false,v::O]$EXPRESSION]$RETURN]$OPREC]$Rep

    returns(v : Expression MachineFloat) : % ==
      [["return"]$OP,[[false,[false,v::O]$EXPRESSION]$RETURN]$OPREC]$Rep

    returns(v : Expression MachineComplex) : % ==
      [["return"]$OP,[[false,[false,v::O]$EXPRESSION]$RETURN]$OPREC]$Rep

    returns(v : Expression Integer) : % ==
      [["return"]$OP,[[false,[false,v::O]$EXPRESSION]$RETURN]$OPREC]$Rep

    returns(v : Expression Float) : % ==
      [["return"]$OP,[[false,[false,v::O]$EXPRESSION]$RETURN]$OPREC]$Rep

    returns(v : Expression Complex Float) : % ==
      [["return"]$OP,[[false,[false,v::O]$EXPRESSION]$RETURN]$OPREC]$Rep

    block(l : List %) : % ==
      [["block"]$OP,[l]$OPREC]$Rep

    cond(sw : Switch, thenC : %) : % ==
      [["conditional"]$OP,
       [[sw,thenC,[["null"]$OP,["null"]$OPREC]$Rep]$COND]$OPREC]$Rep

    cond(sw : Switch, thenC : %, elseC : %) : % ==
      [["conditional"]$OP,[[sw,thenC,elseC]$COND]$OPREC]$Rep

    coerce(f : %) : O ==
      (f.op)::O

    assign(v : Symbol, rhs : String) : % ==
      [["assignment"]$OP,[[v, []::L PIN,[false,rhs::O]$EXPRESSION]$ASS]$OPREC]$Rep

    assign(v : Symbol, rhs : Matrix MachineInteger) : % ==
      [["arrayAssignment"]$OP,[[v,rhs::O,false]$ARRAYASS]$OPREC]$Rep

    assign(v : Symbol, rhs : Matrix MachineFloat) : % ==
      [["arrayAssignment"]$OP,[[v,rhs::O,true]$ARRAYASS]$OPREC]$Rep

    assign(v : Symbol, rhs : Matrix MachineComplex) : % ==
      [["arrayAssignment"]$OP,[[v,rhs::O,true]$ARRAYASS]$OPREC]$Rep

    assign(v : Symbol, rhs : Vector MachineInteger) : % ==
      [["arrayAssignment"]$OP,[[v,rhs::O,false]$ARRAYASS]$OPREC]$Rep

    assign(v : Symbol, rhs : Vector MachineFloat) : % ==
      [["arrayAssignment"]$OP,[[v,rhs::O,true]$ARRAYASS]$OPREC]$Rep

    assign(v : Symbol, rhs : Vector MachineComplex) : % ==
      [["arrayAssignment"]$OP,[[v,rhs::O,true]$ARRAYASS]$OPREC]$Rep

    assign(v : Symbol, rhs : Matrix Expression MachineInteger) : % ==
      [["arrayAssignment"]$OP,[[v,rhs::O,false]$ARRAYASS]$OPREC]$Rep

    assign(v : Symbol, rhs : Matrix Expression MachineFloat) : % ==
      [["arrayAssignment"]$OP,[[v,rhs::O,true]$ARRAYASS]$OPREC]$Rep

    assign(v : Symbol, rhs : Matrix Expression MachineComplex) : % ==
      [["arrayAssignment"]$OP,[[v,rhs::O,true]$ARRAYASS]$OPREC]$Rep

    assign(v : Symbol, rhs : Vector Expression MachineInteger) : % ==
      [["arrayAssignment"]$OP,[[v,rhs::O,false]$ARRAYASS]$OPREC]$Rep

    assign(v : Symbol, rhs : Vector Expression MachineFloat) : % ==
      [["arrayAssignment"]$OP,[[v,rhs::O,true]$ARRAYASS]$OPREC]$Rep

    assign(v : Symbol, rhs : Vector Expression MachineComplex) : % ==
      [["arrayAssignment"]$OP,[[v,rhs::O,true]$ARRAYASS]$OPREC]$Rep

    assign(v : Symbol, index : L PIN, rhs : Expression MachineInteger) : % ==
      [["assignment"]$OP,[[v,index,[false,rhs::O]$EXPRESSION]$ASS]$OPREC]$Rep

    assign(v : Symbol, index : L PIN, rhs : Expression MachineFloat) : % ==
      [["assignment"]$OP,[[v,index,[true,rhs::O]$EXPRESSION]$ASS]$OPREC]$Rep

    assign(v : Symbol, index : L PIN, rhs : Expression MachineComplex) : % ==
      [["assignment"]$OP,[[v,index,[true,rhs::O]$EXPRESSION]$ASS]$OPREC]$Rep

    assign(v : Symbol, rhs : Expression MachineInteger) : % ==
      [["assignment"]$OP,[[v, []::L PIN,[false,rhs::O]$EXPRESSION]$ASS]$OPREC]$Rep

    assign(v : Symbol, rhs : Expression MachineFloat) : % ==
      [["assignment"]$OP,[[v, []::L PIN,[true,rhs::O]$EXPRESSION]$ASS]$OPREC]$Rep

    assign(v : Symbol, rhs : Expression MachineComplex) : % ==
      [["assignment"]$OP,[[v, []::L PIN,[true,rhs::O]$EXPRESSION]$ASS]$OPREC]$Rep

    assign(v : Symbol, rhs : Matrix Expression Integer) : % ==
      [["arrayAssignment"]$OP,[[v,rhs::O,false]$ARRAYASS]$OPREC]$Rep

    assign(v : Symbol, rhs : Matrix Expression Float) : % ==
      [["arrayAssignment"]$OP,[[v,rhs::O,true]$ARRAYASS]$OPREC]$Rep

    assign(v : Symbol, rhs : Matrix Expression Complex Float) : % ==
      [["arrayAssignment"]$OP,[[v,rhs::O,true]$ARRAYASS]$OPREC]$Rep

    assign(v : Symbol, rhs : Vector Expression Integer) : % ==
      [["arrayAssignment"]$OP,[[v,rhs::O,false]$ARRAYASS]$OPREC]$Rep

    assign(v : Symbol, rhs : Vector Expression Float) : % ==
      [["arrayAssignment"]$OP,[[v,rhs::O,true]$ARRAYASS]$OPREC]$Rep

    assign(v : Symbol, rhs : Vector Expression Complex Float) : % ==
      [["arrayAssignment"]$OP,[[v,rhs::O,true]$ARRAYASS]$OPREC]$Rep

    assign(v : Symbol, index : L PIN, rhs : Expression Integer) : % ==
      [["assignment"]$OP,[[v,index,[false,rhs::O]$EXPRESSION]$ASS]$OPREC]$Rep

    assign(v : Symbol, index : L PIN, rhs : Expression Float) : % ==
      [["assignment"]$OP,[[v,index,[true,rhs::O]$EXPRESSION]$ASS]$OPREC]$Rep

    assign(v : Symbol, index : L PIN, rhs : Expression Complex Float) : % ==
      [["assignment"]$OP,[[v,index,[true,rhs::O]$EXPRESSION]$ASS]$OPREC]$Rep

    assign(v : Symbol, rhs : Expression Integer) : % ==
      [["assignment"]$OP,[[v, []::L PIN,[false,rhs::O]$EXPRESSION]$ASS]$OPREC]$Rep

    assign(v : Symbol, rhs : Expression Float) : % ==
      [["assignment"]$OP,[[v, []::L PIN,[true,rhs::O]$EXPRESSION]$ASS]$OPREC]$Rep

    assign(v : Symbol, rhs : Expression Complex Float) : % ==
      [["assignment"]$OP,[[v, []::L PIN,[true,rhs::O]$EXPRESSION]$ASS]$OPREC]$Rep

    call(s : String) : % ==
      [["call"]$OP,[s]$OPREC]$Rep

