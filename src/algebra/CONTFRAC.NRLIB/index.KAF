13263               (|ContinuedFraction| R)
|domain|
(((|ContinuedFraction| |#1|)
  (|Join| (|Algebra| |#1|) (|Algebra| (|Fraction| |#1|)) (|Field|)
          (CATEGORY |domain|
           (SIGNATURE |continuedFraction| ($ (|Fraction| |#1|)))
           (SIGNATURE |continuedFraction|
            ($ |#1| (|Stream| |#1|) (|Stream| |#1|)))
           (SIGNATURE |reducedContinuedFraction| ($ |#1| (|Stream| |#1|)))
           (SIGNATURE |partialNumerators| ((|Stream| |#1|) $))
           (SIGNATURE |partialDenominators| ((|Stream| |#1|) $))
           (SIGNATURE |partialQuotients| ((|Stream| |#1|) $))
           (SIGNATURE |wholePart| (|#1| $)) (SIGNATURE |reducedForm| ($ $))
           (SIGNATURE |approximants| ((|Stream| (|Fraction| |#1|)) $))
           (SIGNATURE |convergents| ((|Stream| (|Fraction| |#1|)) $))
           (SIGNATURE |numerators| ((|Stream| |#1|) $))
           (SIGNATURE |denominators| ((|Stream| |#1|) $))
           (SIGNATURE |extend| ($ $ (|Integer|)))
           (SIGNATURE |complete| ($ $))))
  (|EuclideanDomain|))
 (T |ContinuedFraction|))
(|Join| (|Algebra| |#1|) (|Algebra| (|Fraction| |#1|)) (|Field|)
        (CATEGORY |domain|
         (SIGNATURE |continuedFraction| ($ (|Fraction| |#1|)))
         (SIGNATURE |continuedFraction|
          ($ |#1| (|Stream| |#1|) (|Stream| |#1|)))
         (SIGNATURE |reducedContinuedFraction| ($ |#1| (|Stream| |#1|)))
         (SIGNATURE |partialNumerators| ((|Stream| |#1|) $))
         (SIGNATURE |partialDenominators| ((|Stream| |#1|) $))
         (SIGNATURE |partialQuotients| ((|Stream| |#1|) $))
         (SIGNATURE |wholePart| (|#1| $)) (SIGNATURE |reducedForm| ($ $))
         (SIGNATURE |approximants| ((|Stream| (|Fraction| |#1|)) $))
         (SIGNATURE |convergents| ((|Stream| (|Fraction| |#1|)) $))
         (SIGNATURE |numerators| ((|Stream| |#1|) $))
         (SIGNATURE |denominators| ((|Stream| |#1|) $))
         (SIGNATURE |extend| ($ $ (|Integer|))) (SIGNATURE |complete| ($ $))))
"/git/fricas/src/algebra/CONTFRAC.spad"
((|continuedFraction| (*1 *1 *2)
  (AND (|isDomain| *2 (|Fraction| *3)) (|ofCategory| *3 (|EuclideanDomain|))
       (|isDomain| *1 (|ContinuedFraction| *3))))
 (|continuedFraction| (*1 *1 *2 *3 *3)
  (AND (|isDomain| *3 (|Stream| *2)) (|ofCategory| *2 (|EuclideanDomain|))
       (|isDomain| *1 (|ContinuedFraction| *2))))
 (|reducedContinuedFraction| (*1 *1 *2 *3)
  (AND (|isDomain| *3 (|Stream| *2)) (|ofCategory| *2 (|EuclideanDomain|))
       (|isDomain| *1 (|ContinuedFraction| *2))))
 (|partialNumerators| (*1 *2 *1)
  (AND (|isDomain| *2 (|Stream| *3)) (|isDomain| *1 (|ContinuedFraction| *3))
       (|ofCategory| *3 (|EuclideanDomain|))))
 (|partialDenominators| (*1 *2 *1)
  (AND (|isDomain| *2 (|Stream| *3)) (|isDomain| *1 (|ContinuedFraction| *3))
       (|ofCategory| *3 (|EuclideanDomain|))))
 (|partialQuotients| (*1 *2 *1)
  (AND (|isDomain| *2 (|Stream| *3)) (|isDomain| *1 (|ContinuedFraction| *3))
       (|ofCategory| *3 (|EuclideanDomain|))))
 (|wholePart| (*1 *2 *1)
  (AND (|isDomain| *1 (|ContinuedFraction| *2))
       (|ofCategory| *2 (|EuclideanDomain|))))
 (|reducedForm| (*1 *1 *1)
  (AND (|isDomain| *1 (|ContinuedFraction| *2))
       (|ofCategory| *2 (|EuclideanDomain|))))
 (|approximants| (*1 *2 *1)
  (AND (|isDomain| *2 (|Stream| (|Fraction| *3)))
       (|isDomain| *1 (|ContinuedFraction| *3))
       (|ofCategory| *3 (|EuclideanDomain|))))
 (|convergents| (*1 *2 *1)
  (AND (|isDomain| *2 (|Stream| (|Fraction| *3)))
       (|isDomain| *1 (|ContinuedFraction| *3))
       (|ofCategory| *3 (|EuclideanDomain|))))
 (|numerators| (*1 *2 *1)
  (AND (|isDomain| *2 (|Stream| *3)) (|isDomain| *1 (|ContinuedFraction| *3))
       (|ofCategory| *3 (|EuclideanDomain|))))
 (|denominators| (*1 *2 *1)
  (AND (|isDomain| *2 (|Stream| *3)) (|isDomain| *1 (|ContinuedFraction| *3))
       (|ofCategory| *3 (|EuclideanDomain|))))
 (|extend| (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|Integer|)) (|isDomain| *1 (|ContinuedFraction| *3))
       (|ofCategory| *3 (|EuclideanDomain|))))
 (|complete| (*1 *1 *1)
  (AND (|isDomain| *1 (|ContinuedFraction| *2))
       (|ofCategory| *2 (|EuclideanDomain|)))))
((~= (((|Boolean|) $ $) NIL)) (|zero?| (((|Boolean|) $) NIL))
 (|wholePart| ((|#1| $) 74))
 (|unitNormal|
  (((|Record| (|:| |unit| $) (|:| |canonical| $) (|:| |associate| $)) $) NIL))
 (|unitCanonical| (($ $) NIL)) (|unit?| (((|Boolean|) $) NIL))
 (|subtractIfCan| (((|Union| $ "failed") $ $) NIL))
 (|squareFreePart| (($ $) NIL)) (|squareFree| (((|Factored| $) $) NIL))
 (|sizeLess?| (((|Boolean|) $ $) NIL)) (|sample| (($) NIL T CONST))
 (|rightRecip| (((|Union| $ #1="failed") $) NIL))
 (|rightPower| (($ $ (|PositiveInteger|)) NIL)
  (($ $ (|NonNegativeInteger|)) NIL))
 (|rem| (($ $ $) NIL)) (|reducedForm| (($ $) 19))
 (|reducedContinuedFraction| (($ |#1| (|Stream| |#1|)) 47))
 (|recip| (((|Union| $ #1#) $) 116)) (|quo| (($ $ $) NIL))
 (|principalIdeal|
  (((|Record| (|:| |coef| (|List| $)) (|:| |generator| $)) (|List| $)) NIL))
 (|prime?| (((|Boolean|) $) NIL)) (|partialQuotients| (((|Stream| |#1|) $) 81))
 (|partialNumerators| (((|Stream| |#1|) $) 78))
 (|partialDenominators| (((|Stream| |#1|) $) 79))
 (|opposite?| (((|Boolean|) $ $) NIL)) (|one?| (((|Boolean|) $) NIL))
 (|numerators| (((|Stream| |#1|) $) 87))
 (|multiEuclidean| (((|Union| (|List| $) #2="failed") (|List| $) $) NIL))
 (|leftRecip| (((|Union| $ #1#) $) NIL))
 (|leftPower| (($ $ (|PositiveInteger|)) NIL)
  (($ $ (|NonNegativeInteger|)) NIL))
 (|lcmCoef|
  (((|Record| (|:| |llcm_res| $) (|:| |coeff1| $) (|:| |coeff2| $)) $ $) NIL))
 (|lcm| (($ (|List| $)) NIL) (($ $ $) NIL)) (|latex| (((|String|) $) NIL))
 (|inv| (($ $) NIL)) (|hashUpdate!| (((|HashState|) (|HashState|) $) NIL))
 (|hash| (((|SingleInteger|) $) NIL))
 (|gcdPolynomial|
  (((|SparseUnivariatePolynomial| $) (|SparseUnivariatePolynomial| $)
    (|SparseUnivariatePolynomial| $))
   NIL))
 (|gcd| (($ (|List| $)) NIL) (($ $ $) NIL)) (|factor| (((|Factored| $) $) NIL))
 (|extendedEuclidean|
  (((|Union| (|Record| (|:| |coef1| $) (|:| |coef2| $)) #2#) $ $ $) NIL)
  (((|Record| (|:| |coef1| $) (|:| |coef2| $) (|:| |generator| $)) $ $) NIL))
 (|extend| (($ $ (|Integer|)) 90)) (|exquo| (((|Union| $ "failed") $ $) NIL))
 (|expressIdealMember| (((|Union| (|List| $) "failed") (|List| $) $) NIL))
 (|euclideanSize| (((|NonNegativeInteger|) $) NIL))
 (|divide| (((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $) NIL))
 (|denominators| (((|Stream| |#1|) $) 88))
 (|convergents| (((|Stream| (|Fraction| |#1|)) $) 13))
 (|continuedFraction| (($ (|Fraction| |#1|)) 17)
  (($ |#1| (|Stream| |#1|) (|Stream| |#1|)) 37))
 (|complete| (($ $) 92)) (|commutator| (($ $ $) NIL))
 (|coerce| (((|OutputForm|) $) 128) (($ (|Integer|)) 50) (($ |#1|) 51)
           (($ (|Fraction| |#1|)) 35) (($ (|Fraction| (|Integer|))) NIL)
           (($ $) NIL))
 (|characteristic| (((|NonNegativeInteger|)) 62))
 (|associator| (($ $ $ $) NIL)) (|associates?| (((|Boolean|) $ $) NIL))
 (|approximants| (((|Stream| (|Fraction| |#1|)) $) 18))
 (|antiCommutator| (($ $ $) NIL)) (|annihilate?| (((|Boolean|) $ $) NIL))
 (^ (($ $ (|PositiveInteger|)) NIL) (($ $ (|NonNegativeInteger|)) NIL)
  (($ $ (|Integer|)) NIL))
 (|Zero| (($) 25 T CONST)) (|One| (($) 28 T CONST)) (= (((|Boolean|) $ $) 34))
 (/ (($ $ $) 114)) (- (($ $ $) 102) (($ $) 105)) (+ (($ $ $) 100))
 (* (($ (|PositiveInteger|) $) NIL) (($ $ $) 107) (($ (|Integer|) $) 112)
    (($ (|NonNegativeInteger|) $) NIL) (($ $ |#1|) NIL) (($ |#1| $) 109)
    (($ (|Fraction| |#1|) $) 110) (($ $ (|Fraction| |#1|)) NIL)
    (($ (|Fraction| (|Integer|)) $) NIL) (($ $ (|Fraction| (|Integer|))) NIL)))
CONTFRAC
(((|Algebra| |#1|) . T) ((|Algebra| (|Fraction| |#1|)) . T) ((|Field|) . T))
(((|AbelianGroup|) . T) ((|AbelianMonoid|) . T) ((|AbelianSemiGroup|) . T)
 ((|Algebra| (|Fraction| (|Integer|))) . T) ((|Algebra| $) . T)
 ((|Algebra| (|Fraction| |#1|)) . T) ((|Algebra| |#1|) . T) ((|BasicType|) . T)
 ((|BiModule| |t#1| |t#1|) . T) ((|BiModule| $ $) . T)
 ((|CancellationAbelianMonoid|) . T) ((|CoercibleTo| (|OutputForm|)) . T)
 ((|CommutativeRing|) . T) ((|CommutativeStar|) . T) ((|DivisionRing|) . T)
 ((|EntireRing|) . T) ((|EuclideanDomain|) . T) ((|Field|) . T)
 ((|GcdDomain|) . T) ((|IntegralDomain|) . T) ((|LeftModule| |t#1|) . T)
 ((|LeftOreRing|) . T) ((|Magma|) . T) ((|MagmaWithUnit|) . T)
 ((|Module| |t#1|) . T) ((|Monoid|) . T) ((|NonAssociativeRing|) . T)
 ((|NonAssociativeRng|) . T) ((|NonAssociativeSemiRing|) . T)
 ((|NonAssociativeSemiRng|) . T) ((|PrincipalIdealDomain|) . T)
 ((|RightModule| |t#2|) . T) ((|Ring|) . T) ((|Rng|) . T) ((|SemiGroup|) . T)
 ((|SemiRing|) . T) ((|SemiRng|) . T) ((|SetCategory|) . T)
 ((|TwoSidedRecip|) . T) ((|UniqueFactorizationDomain|) . T)
 ((|canonicalUnitNormal|) . T) ((|canonicalsClosed|) . T)
 ((|noZeroDivisors|) . T) ((|unitsKnown|) . T))
((|constructor|
  (NIL
   "\\spadtype{ContinuedFraction} implements general \\indented{1}{continued fractions.\\space{2}This version is not restricted to simple,{}} \\indented{1}{finite fractions and uses the \\spadtype{Stream} as a} \\indented{1}{representation.\\space{2}The arithmetic functions assume that the} \\indented{1}{approximants alternate below/above the convergence point.} \\indented{1}{This is enforced by ensuring the partial numerators and partial} \\indented{1}{denominators are greater than 0 in the Euclidean domain view of \\spad{R}} \\indented{1}{(\\spadignore{i.e.} \\spad{sizeLess?(0,{} x)}).}"))
 (|complete|
  (($ $)
   "\\spad{complete(x)} causes all entries in \\spadvar{\\spad{x}} to be computed. Normally entries are only computed as needed. If \\spadvar{\\spad{x}} is an infinite continued fraction,{} a user-initiated interrupt is necessary to stop the computation."))
 (|extend|
  (($ $ (|Integer|))
   "\\spad{extend(x,{} n)} causes the first \\spadvar{\\spad{n}} entries in the continued fraction \\spadvar{\\spad{x}} to be computed. Normally entries are only computed as needed."))
 (|denominators|
  (((|Stream| |#1|) $)
   "\\spad{denominators(x)} returns the stream of denominators of the approximants of the continued fraction \\spadvar{\\spad{x}}. If the continued fraction is finite,{} then the stream will be finite."))
 (|numerators|
  (((|Stream| |#1|) $)
   "\\spad{numerators(x)} returns the stream of numerators of the approximants of the continued fraction \\spadvar{\\spad{x}}. If the continued fraction is finite,{} then the stream will be finite."))
 (|convergents|
  (((|Stream| (|Fraction| |#1|)) $)
   "\\spad{convergents(x)} returns the stream of the convergents of the continued fraction \\spadvar{\\spad{x}}. If the continued fraction is finite,{} then the stream will be finite."))
 (|approximants|
  (((|Stream| (|Fraction| |#1|)) $)
   "\\spad{approximants(x)} returns the stream of approximants of the continued fraction \\spadvar{\\spad{x}}. If the continued fraction is finite,{} then the stream will be infinite and periodic with period 1."))
 (|reducedForm|
  (($ $)
   "\\spad{reducedForm(x)} puts the continued fraction \\spadvar{\\spad{x}} in reduced form,{} \\spadignore{i.e.} the function returns an equivalent continued fraction of the form \\spad{continuedFraction(b0,{} [1,{} 1,{} 1,{} ...],{} [b1,{} b2,{} b3,{} ...])}."))
 (|wholePart|
  ((|#1| $)
   "\\spad{wholePart(x)} extracts the whole part of \\spadvar{\\spad{x}}. That is,{} if \\spad{x = continuedFraction(b0,{} [a1,{} a2,{} a3,{} ...],{} [b1,{} b2,{} b3,{} ...])},{} then \\spad{wholePart(x) = b0}."))
 (|partialQuotients|
  (((|Stream| |#1|) $)
   "\\spad{partialQuotients(x)} extracts the partial quotients in \\spadvar{\\spad{x}}. That is,{} if \\spad{x = continuedFraction(b0,{} [a1,{} a2,{} a3,{} ...],{} [b1,{} b2,{} b3,{} ...])},{} then \\spad{partialQuotients(x) = [b0,{} b1,{} b2,{} b3,{} ...]}."))
 (|partialDenominators|
  (((|Stream| |#1|) $)
   "\\spad{partialDenominators(x)} extracts the denominators in \\spadvar{\\spad{x}}. That is,{} if \\spad{x = continuedFraction(b0,{} [a1,{} a2,{} a3,{} ...],{} [b1,{} b2,{} b3,{} ...])},{} then \\spad{partialDenominators(x) = [b1,{} b2,{} b3,{} ...]}."))
 (|partialNumerators|
  (((|Stream| |#1|) $)
   "\\spad{partialNumerators(x)} extracts the numerators in \\spadvar{\\spad{x}}. That is,{} if \\spad{x = continuedFraction(b0,{} [a1,{} a2,{} a3,{} ...],{} [b1,{} b2,{} b3,{} ...])},{} then \\spad{partialNumerators(x) = [a1,{} a2,{} a3,{} ...]}."))
 (|reducedContinuedFraction|
  (($ |#1| (|Stream| |#1|))
   "\\spad{reducedContinuedFraction(b0,{} b)} constructs a continued fraction in the following way: if \\spad{b = [b1,{} b2,{} ...]} then the result is the continued fraction \\spad{b0 + 1/(b1 + 1/(b2 + ...))}. That is,{} the result is the same as \\spad{continuedFraction(b0,{} [1,{} 1,{} 1,{} ...],{} [b1,{} b2,{} b3,{} ...])}."))
 (|continuedFraction|
  (($ |#1| (|Stream| |#1|) (|Stream| |#1|))
   "\\spad{continuedFraction(b0,{} a,{} b)} constructs a continued fraction in the following way: if \\spad{a = [a1,{} a2,{} ...]} and \\spad{b = [b1,{} b2,{} ...]} then the result is the continued fraction \\spad{b0 + a1/(b1 + a2/(b2 + ...))}.")
  (($ (|Fraction| |#1|))
   "\\spad{continuedFraction(r)} converts the fraction \\spadvar{\\spad{r}} with components of type \\spad{R} to a continued fraction over \\spad{R}.")))
(("documentation" 0 8836) ("ancestors" 0 7711) ("parents" 0 7634)
 ("abbreviation" 0 7625) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 4146) ("modemaps" 0 2020) ("sourceFile" 0 1980)
 ("constructorCategory" 0 1076) ("constructorModemap" 0 53)
 ("constructorKind" 0 44) ("constructorForm" 0 20))