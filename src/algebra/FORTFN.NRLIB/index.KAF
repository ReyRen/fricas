7832                (MAKEPROP '|FortranFunctionCategory| 'NILADIC T)
(|FortranFunctionCategory|)
|category|
(((|FortranFunctionCategory|) (|Category|)) (T |FortranFunctionCategory|))
(|Join| (|FortranProgramCategory|)
        (CATEGORY |domain| (SIGNATURE |coerce| ($ (|List| (|FortranCode|))))
         (SIGNATURE |coerce| ($ (|FortranCode|)))
         (SIGNATURE |coerce|
          ($
           (|Record| (|:| |localSymbols| (|SymbolTable|))
                     (|:| |code| (|List| (|FortranCode|))))))
         (SIGNATURE |retract| ($ (|Expression| (|Float|))))
         (SIGNATURE |retractIfCan|
          ((|Union| $ "failed") (|Expression| (|Float|))))
         (SIGNATURE |retract| ($ (|Expression| (|Integer|))))
         (SIGNATURE |retractIfCan|
          ((|Union| $ "failed") (|Expression| (|Integer|))))
         (SIGNATURE |retract| ($ (|Polynomial| (|Float|))))
         (SIGNATURE |retractIfCan|
          ((|Union| $ "failed") (|Polynomial| (|Float|))))
         (SIGNATURE |retract| ($ (|Polynomial| (|Integer|))))
         (SIGNATURE |retractIfCan|
          ((|Union| $ "failed") (|Polynomial| (|Integer|))))
         (SIGNATURE |retract| ($ (|Fraction| (|Polynomial| (|Float|)))))
         (SIGNATURE |retractIfCan|
          ((|Union| $ "failed") (|Fraction| (|Polynomial| (|Float|)))))
         (SIGNATURE |retract| ($ (|Fraction| (|Polynomial| (|Integer|)))))
         (SIGNATURE |retractIfCan|
          ((|Union| $ "failed") (|Fraction| (|Polynomial| (|Integer|)))))))
"/git/fricas/src/algebra/FORTFN.spad"
((|coerce| (*1 *1 *2)
           (AND (|isDomain| *2 (|List| (|FortranCode|)))
                (|ofCategory| *1 (|FortranFunctionCategory|))))
 (|coerce| (*1 *1 *2)
           (AND (|isDomain| *2 (|FortranCode|))
                (|ofCategory| *1 (|FortranFunctionCategory|))))
 (|coerce| (*1 *1 *2)
           (AND
            (|isDomain| *2
                        (|Record| (|:| |localSymbols| (|SymbolTable|))
                                  (|:| |code| (|List| (|FortranCode|)))))
            (|ofCategory| *1 (|FortranFunctionCategory|))))
 (|retract| (*1 *1 *2)
            (AND (|isDomain| *2 (|Expression| (|Float|)))
                 (|ofCategory| *1 (|FortranFunctionCategory|))))
 (|retractIfCan| (*1 *1 *2)
  (|partial| AND (|isDomain| *2 (|Expression| (|Float|)))
   (|ofCategory| *1 (|FortranFunctionCategory|))))
 (|retract| (*1 *1 *2)
            (AND (|isDomain| *2 (|Expression| (|Integer|)))
                 (|ofCategory| *1 (|FortranFunctionCategory|))))
 (|retractIfCan| (*1 *1 *2)
  (|partial| AND (|isDomain| *2 (|Expression| (|Integer|)))
   (|ofCategory| *1 (|FortranFunctionCategory|))))
 (|retract| (*1 *1 *2)
            (AND (|isDomain| *2 (|Polynomial| (|Float|)))
                 (|ofCategory| *1 (|FortranFunctionCategory|))))
 (|retractIfCan| (*1 *1 *2)
  (|partial| AND (|isDomain| *2 (|Polynomial| (|Float|)))
   (|ofCategory| *1 (|FortranFunctionCategory|))))
 (|retract| (*1 *1 *2)
            (AND (|isDomain| *2 (|Polynomial| (|Integer|)))
                 (|ofCategory| *1 (|FortranFunctionCategory|))))
 (|retractIfCan| (*1 *1 *2)
  (|partial| AND (|isDomain| *2 (|Polynomial| (|Integer|)))
   (|ofCategory| *1 (|FortranFunctionCategory|))))
 (|retract| (*1 *1 *2)
            (AND (|isDomain| *2 (|Fraction| (|Polynomial| (|Float|))))
                 (|ofCategory| *1 (|FortranFunctionCategory|))))
 (|retractIfCan| (*1 *1 *2)
  (|partial| AND (|isDomain| *2 (|Fraction| (|Polynomial| (|Float|))))
   (|ofCategory| *1 (|FortranFunctionCategory|))))
 (|retract| (*1 *1 *2)
            (AND (|isDomain| *2 (|Fraction| (|Polynomial| (|Integer|))))
                 (|ofCategory| *1 (|FortranFunctionCategory|))))
 (|retractIfCan| (*1 *1 *2)
  (|partial| AND (|isDomain| *2 (|Fraction| (|Polynomial| (|Integer|))))
   (|ofCategory| *1 (|FortranFunctionCategory|)))))
((|retractIfCan| (((|Union| $ "failed") (|Expression| (|Float|))) 6)
  (((|Union| $ "failed") (|Expression| (|Integer|))) 6)
  (((|Union| $ "failed") (|Polynomial| (|Float|))) 6)
  (((|Union| $ "failed") (|Polynomial| (|Integer|))) 6)
  (((|Union| $ "failed") (|Fraction| (|Polynomial| (|Float|)))) 6)
  (((|Union| $ "failed") (|Fraction| (|Polynomial| (|Integer|)))) 6))
 (|retract| (($ (|Expression| (|Float|))) 6) (($ (|Expression| (|Integer|))) 6)
            (($ (|Polynomial| (|Float|))) 6) (($ (|Polynomial| (|Integer|))) 6)
            (($ (|Fraction| (|Polynomial| (|Float|)))) 6)
            (($ (|Fraction| (|Polynomial| (|Integer|)))) 6))
 (|outputAsFortran| (((|Void|) $) 6))
 (|coerce| (((|OutputForm|) $) 6) (($ (|List| (|FortranCode|))) 6)
           (($ (|FortranCode|)) 6)
           (($
             (|Record| (|:| |localSymbols| (|SymbolTable|))
                       (|:| |code| (|List| (|FortranCode|)))))
            6)))
FORTFN
(((|FortranProgramCategory|) . T))
(((|CoercibleTo| (|OutputForm|)) . T) ((|FortranProgramCategory|) . T)
 ((|Type|) . T))
((|constructor|
  (NIL
   "\\spadtype{FortranFunctionCategory} is the category of arguments to NAG Library routines which return (sets of) function values."))
 (|retractIfCan|
  (((|Union| $ "failed") (|Fraction| (|Polynomial| (|Integer|))))
   "\\spad{retractIfCan(e)} tries to convert \\spad{e} into an ASP,{} checking that \\indented{1}{legal Fortran-77 is produced.}")
  (((|Union| $ "failed") (|Fraction| (|Polynomial| (|Float|))))
   "\\spad{retractIfCan(e)} tries to convert \\spad{e} into an ASP,{} checking that \\indented{1}{legal Fortran-77 is produced.}")
  (((|Union| $ "failed") (|Polynomial| (|Integer|)))
   "\\spad{retractIfCan(e)} tries to convert \\spad{e} into an ASP,{} checking that \\indented{1}{legal Fortran-77 is produced.}")
  (((|Union| $ "failed") (|Polynomial| (|Float|)))
   "\\spad{retractIfCan(e)} tries to convert \\spad{e} into an ASP,{} checking that \\indented{1}{legal Fortran-77 is produced.}")
  (((|Union| $ "failed") (|Expression| (|Integer|)))
   "\\spad{retractIfCan(e)} tries to convert \\spad{e} into an ASP,{} checking that \\indented{1}{legal Fortran-77 is produced.}")
  (((|Union| $ "failed") (|Expression| (|Float|)))
   "\\spad{retractIfCan(e)} tries to convert \\spad{e} into an ASP,{} checking that \\indented{1}{legal Fortran-77 is produced.}"))
 (|retract|
  (($ (|Fraction| (|Polynomial| (|Integer|))))
   "\\spad{retract(e)} tries to convert \\spad{e} into an ASP,{} checking that \\indented{1}{legal Fortran-77 is produced.}")
  (($ (|Fraction| (|Polynomial| (|Float|))))
   "\\spad{retract(e)} tries to convert \\spad{e} into an ASP,{} checking that \\indented{1}{legal Fortran-77 is produced.}")
  (($ (|Polynomial| (|Integer|)))
   "\\spad{retract(e)} tries to convert \\spad{e} into an ASP,{} checking that \\indented{1}{legal Fortran-77 is produced.}")
  (($ (|Polynomial| (|Float|)))
   "\\spad{retract(e)} tries to convert \\spad{e} into an ASP,{} checking that \\indented{1}{legal Fortran-77 is produced.}")
  (($ (|Expression| (|Integer|)))
   "\\spad{retract(e)} tries to convert \\spad{e} into an ASP,{} checking that \\indented{1}{legal Fortran-77 is produced.}")
  (($ (|Expression| (|Float|)))
   "\\spad{retract(e)} tries to convert \\spad{e} into an ASP,{} checking that \\indented{1}{legal Fortran-77 is produced.}"))
 (|coerce|
  (($
    (|Record| (|:| |localSymbols| (|SymbolTable|))
              (|:| |code| (|List| (|FortranCode|)))))
   "\\spad{coerce(e)} takes the component of \\spad{e} from \\spadtype{List FortranCode} and uses it as the body of the ASP,{} making the declarations in the \\spadtype{SymbolTable} component.")
  (($ (|FortranCode|))
   "\\spad{coerce(e)} takes an object from \\spadtype{FortranCode} and \\indented{1}{uses it as the body of an ASP.}")
  (($ (|List| (|FortranCode|)))
   "\\spad{coerce(e)} takes an object from \\spadtype{List FortranCode} and \\indented{1}{uses it as the body of an ASP.}")))
(("documentation" 0 4921) ("ancestors" 0 4833) ("parents" 0 4798)
 ("abbreviation" 0 4791) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 3845) ("modemaps" 0 1535) ("sourceFile" 0 1497)
 ("constructorCategory" 0 183) ("constructorModemap" 0 108)
 ("constructorKind" 0 97) ("constructorForm" 0 69) ("NILADIC" 0 20))