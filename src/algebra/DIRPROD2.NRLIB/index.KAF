3332                (|DirectProductFunctions2| |dim| A B)
|package|
(((|DirectProductFunctions2| |#1| |#2| |#3|)
  (CATEGORY |package|
   (SIGNATURE |scan|
    ((|DirectProduct| |#1| |#3|) (|Mapping| |#3| |#2| |#3|)
     (|DirectProduct| |#1| |#2|) |#3|))
   (SIGNATURE |reduce|
    (|#3| (|Mapping| |#3| |#2| |#3|) (|DirectProduct| |#1| |#2|) |#3|))
   (SIGNATURE |map|
    ((|DirectProduct| |#1| |#3|) (|Mapping| |#3| |#2|)
     (|DirectProduct| |#1| |#2|))))
  (|NonNegativeInteger|) (|Type|) (|Type|))
 (T |DirectProductFunctions2|))
(CATEGORY |package|
 (SIGNATURE |scan|
  ((|DirectProduct| |#1| |#3|) (|Mapping| |#3| |#2| |#3|)
   (|DirectProduct| |#1| |#2|) |#3|))
 (SIGNATURE |reduce|
  (|#3| (|Mapping| |#3| |#2| |#3|) (|DirectProduct| |#1| |#2|) |#3|))
 (SIGNATURE |map|
  ((|DirectProduct| |#1| |#3|) (|Mapping| |#3| |#2|)
   (|DirectProduct| |#1| |#2|))))
"/git/fricas/src/algebra/DIRPROD2.spad"
((|map| (*1 *2 *3 *4)
  (AND (|isDomain| *3 (|Mapping| *7 *6))
       (|isDomain| *4 (|DirectProduct| *5 *6))
       (|ofType| *5 (|NonNegativeInteger|)) (|ofCategory| *6 (|Type|))
       (|ofCategory| *7 (|Type|)) (|isDomain| *2 (|DirectProduct| *5 *7))
       (|isDomain| *1 (|DirectProductFunctions2| *5 *6 *7))))
 (|reduce| (*1 *2 *3 *4 *2)
  (AND (|isDomain| *3 (|Mapping| *2 *6 *2))
       (|isDomain| *4 (|DirectProduct| *5 *6))
       (|ofType| *5 (|NonNegativeInteger|)) (|ofCategory| *6 (|Type|))
       (|ofCategory| *2 (|Type|))
       (|isDomain| *1 (|DirectProductFunctions2| *5 *6 *2))))
 (|scan| (*1 *2 *3 *4 *5)
  (AND (|isDomain| *3 (|Mapping| *5 *7 *5))
       (|isDomain| *4 (|DirectProduct| *6 *7))
       (|ofType| *6 (|NonNegativeInteger|)) (|ofCategory| *7 (|Type|))
       (|ofCategory| *5 (|Type|)) (|isDomain| *2 (|DirectProduct| *6 *5))
       (|isDomain| *1 (|DirectProductFunctions2| *6 *7 *5)))))
((|scan|
  (((|DirectProduct| |#1| |#3|) (|Mapping| |#3| |#2| |#3|)
    (|DirectProduct| |#1| |#2|) |#3|)
   21))
 (|reduce|
  ((|#3| (|Mapping| |#3| |#2| |#3|) (|DirectProduct| |#1| |#2|) |#3|) 23))
 (|map|
  (((|DirectProduct| |#1| |#3|) (|Mapping| |#3| |#2|)
    (|DirectProduct| |#1| |#2|))
   18)))
DIRPROD2
((|constructor|
  (NIL
   "\\indented{2}{This package provides operations which all take as arguments} direct products of elements of some type \\spad{A} and functions from \\spad{A} to another type \\spad{B}. The operations all iterate over their vector argument and either return a value of type \\spad{B} or a direct product over \\spad{B}."))
 (|map|
  (((|DirectProduct| |#1| |#3|) (|Mapping| |#3| |#2|)
    (|DirectProduct| |#1| |#2|))
   "\\spad{map(f,{} v)} applies the function \\spad{f} to every element of the vector \\spad{v} producing a new vector containing the values."))
 (|reduce|
  ((|#3| (|Mapping| |#3| |#2| |#3|) (|DirectProduct| |#1| |#2|) |#3|)
   "\\spad{reduce(func,{} vec,{} ident)} combines the elements in \\spad{vec} using the binary function \\spad{func}. Argument ident is returned if the vector is empty."))
 (|scan|
  (((|DirectProduct| |#1| |#3|) (|Mapping| |#3| |#2| |#3|)
    (|DirectProduct| |#1| |#2|) |#3|)
   "\\spad{scan(func,{} vec,{} ident)} creates a new vector whose elements are the result of applying reduce to the binary function \\spad{func},{} increasing initial subsequences of the vector \\spad{vec},{} and the element ident.")))
(("documentation" 0 2150) ("ancestors" 0 NIL) ("parents" 0 NIL)
 ("abbreviation" 0 2141) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 1837) ("modemaps" 0 909) ("sourceFile" 0 869)
 ("constructorCategory" 0 538) ("constructorModemap" 0 68)
 ("constructorKind" 0 58) ("constructorForm" 0 20))