18191               (|PolynomialSetCategory| R E |VarSet| P)
|category|
(((|PolynomialSetCategory| |#1| |#2| |#3| |#4|) (|Category|) (|Ring|)
  (|OrderedAbelianMonoidSup|) (|OrderedSet|)
  (|RecursivePolynomialCategory| |t#1| |t#2| |t#3|))
 (T |PolynomialSetCategory|))
(|Join| (|SetCategory|) (|Collection| |t#4|) (|CoercibleTo| (|List| |t#4|))
        (|RetractableFrom| (|List| |t#4|)) (|finiteAggregate|)
        (CATEGORY |domain| (SIGNATURE |mvar| (|t#3| $))
         (SIGNATURE |variables| ((|List| |t#3|) $))
         (SIGNATURE |mainVariables| ((|List| |t#3|) $))
         (SIGNATURE |mainVariable?| ((|Boolean|) |t#3| $))
         (SIGNATURE |collectUnder| ($ $ |t#3|))
         (SIGNATURE |collect| ($ $ |t#3|))
         (SIGNATURE |collectUpper| ($ $ |t#3|))
         (SIGNATURE |sort|
          ((|Record| (|:| |under| $) (|:| |floor| $) (|:| |upper| $)) $ |t#3|))
         (SIGNATURE |trivialIdeal?| ((|Boolean|) $))
         (IF (|has| |t#1| (|IntegralDomain|))
             (PROGN
              (SIGNATURE |roughBase?| ((|Boolean|) $))
              (SIGNATURE |roughSubIdeal?| ((|Boolean|) $ $))
              (SIGNATURE |roughEqualIdeals?| ((|Boolean|) $ $))
              (SIGNATURE |roughUnitIdeal?| ((|Boolean|) $))
              (SIGNATURE |headRemainder|
               ((|Record| (|:| |num| |t#4|) (|:| |den| |t#1|)) |t#4| $))
              (SIGNATURE |remainder|
               ((|Record| (|:| |rnum| |t#1|) (|:| |polnum| |t#4|)
                          (|:| |den| |t#1|))
                |t#4| $))
              (SIGNATURE |rewriteIdealWithHeadRemainder|
               ((|List| |t#4|) (|List| |t#4|) $))
              (SIGNATURE |rewriteIdealWithRemainder|
               ((|List| |t#4|) (|List| |t#4|) $))
              (SIGNATURE |triangular?| ((|Boolean|) $))
              (SIGNATURE |iexactQuo| (|t#1| |t#1| |t#1|)))
             |noBranch|)))
"/git/fricas/src/algebra/PSETCAT.spad"
((|mvar| (*1 *2 *1)
  (AND (|ofCategory| *1 (|PolynomialSetCategory| *3 *4 *2 *5))
       (|ofCategory| *3 (|Ring|)) (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *5 (|RecursivePolynomialCategory| *3 *4 *2))
       (|ofCategory| *2 (|OrderedSet|))))
 (|variables| (*1 *2 *1)
  (AND (|ofCategory| *1 (|PolynomialSetCategory| *3 *4 *5 *6))
       (|ofCategory| *3 (|Ring|)) (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *5 (|OrderedSet|))
       (|ofCategory| *6 (|RecursivePolynomialCategory| *3 *4 *5))
       (|isDomain| *2 (|List| *5))))
 (|mainVariables| (*1 *2 *1)
  (AND (|ofCategory| *1 (|PolynomialSetCategory| *3 *4 *5 *6))
       (|ofCategory| *3 (|Ring|)) (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *5 (|OrderedSet|))
       (|ofCategory| *6 (|RecursivePolynomialCategory| *3 *4 *5))
       (|isDomain| *2 (|List| *5))))
 (|mainVariable?| (*1 *2 *3 *1)
  (AND (|ofCategory| *1 (|PolynomialSetCategory| *4 *5 *3 *6))
       (|ofCategory| *4 (|Ring|)) (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *3 (|OrderedSet|))
       (|ofCategory| *6 (|RecursivePolynomialCategory| *4 *5 *3))
       (|isDomain| *2 (|Boolean|))))
 (|collectUnder| (*1 *1 *1 *2)
  (AND (|ofCategory| *1 (|PolynomialSetCategory| *3 *4 *2 *5))
       (|ofCategory| *3 (|Ring|)) (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *2 (|OrderedSet|))
       (|ofCategory| *5 (|RecursivePolynomialCategory| *3 *4 *2))))
 (|collect| (*1 *1 *1 *2)
  (AND (|ofCategory| *1 (|PolynomialSetCategory| *3 *4 *2 *5))
       (|ofCategory| *3 (|Ring|)) (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *2 (|OrderedSet|))
       (|ofCategory| *5 (|RecursivePolynomialCategory| *3 *4 *2))))
 (|collectUpper| (*1 *1 *1 *2)
  (AND (|ofCategory| *1 (|PolynomialSetCategory| *3 *4 *2 *5))
       (|ofCategory| *3 (|Ring|)) (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *2 (|OrderedSet|))
       (|ofCategory| *5 (|RecursivePolynomialCategory| *3 *4 *2))))
 (|sort| (*1 *2 *1 *3)
  (AND (|ofCategory| *4 (|Ring|)) (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *3 (|OrderedSet|))
       (|ofCategory| *6 (|RecursivePolynomialCategory| *4 *5 *3))
       (|isDomain| *2
                   (|Record| (|:| |under| *1) (|:| |floor| *1)
                             (|:| |upper| *1)))
       (|ofCategory| *1 (|PolynomialSetCategory| *4 *5 *3 *6))))
 (|trivialIdeal?| (*1 *2 *1)
  (AND (|ofCategory| *1 (|PolynomialSetCategory| *3 *4 *5 *6))
       (|ofCategory| *3 (|Ring|)) (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *5 (|OrderedSet|))
       (|ofCategory| *6 (|RecursivePolynomialCategory| *3 *4 *5))
       (|isDomain| *2 (|Boolean|))))
 (|roughBase?| (*1 *2 *1)
  (AND (|ofCategory| *1 (|PolynomialSetCategory| *3 *4 *5 *6))
       (|ofCategory| *3 (|Ring|)) (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *5 (|OrderedSet|))
       (|ofCategory| *6 (|RecursivePolynomialCategory| *3 *4 *5))
       (|ofCategory| *3 (|IntegralDomain|)) (|isDomain| *2 (|Boolean|))))
 (|roughSubIdeal?| (*1 *2 *1 *1)
  (AND (|ofCategory| *1 (|PolynomialSetCategory| *3 *4 *5 *6))
       (|ofCategory| *3 (|Ring|)) (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *5 (|OrderedSet|))
       (|ofCategory| *6 (|RecursivePolynomialCategory| *3 *4 *5))
       (|ofCategory| *3 (|IntegralDomain|)) (|isDomain| *2 (|Boolean|))))
 (|roughEqualIdeals?| (*1 *2 *1 *1)
  (AND (|ofCategory| *1 (|PolynomialSetCategory| *3 *4 *5 *6))
       (|ofCategory| *3 (|Ring|)) (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *5 (|OrderedSet|))
       (|ofCategory| *6 (|RecursivePolynomialCategory| *3 *4 *5))
       (|ofCategory| *3 (|IntegralDomain|)) (|isDomain| *2 (|Boolean|))))
 (|roughUnitIdeal?| (*1 *2 *1)
  (AND (|ofCategory| *1 (|PolynomialSetCategory| *3 *4 *5 *6))
       (|ofCategory| *3 (|Ring|)) (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *5 (|OrderedSet|))
       (|ofCategory| *6 (|RecursivePolynomialCategory| *3 *4 *5))
       (|ofCategory| *3 (|IntegralDomain|)) (|isDomain| *2 (|Boolean|))))
 (|headRemainder| (*1 *2 *3 *1)
  (AND (|ofCategory| *1 (|PolynomialSetCategory| *4 *5 *6 *3))
       (|ofCategory| *4 (|Ring|)) (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *6 (|OrderedSet|))
       (|ofCategory| *3 (|RecursivePolynomialCategory| *4 *5 *6))
       (|ofCategory| *4 (|IntegralDomain|))
       (|isDomain| *2 (|Record| (|:| |num| *3) (|:| |den| *4)))))
 (|remainder| (*1 *2 *3 *1)
  (AND (|ofCategory| *1 (|PolynomialSetCategory| *4 *5 *6 *3))
       (|ofCategory| *4 (|Ring|)) (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *6 (|OrderedSet|))
       (|ofCategory| *3 (|RecursivePolynomialCategory| *4 *5 *6))
       (|ofCategory| *4 (|IntegralDomain|))
       (|isDomain| *2
                   (|Record| (|:| |rnum| *4) (|:| |polnum| *3)
                             (|:| |den| *4)))))
 (|rewriteIdealWithHeadRemainder| (*1 *2 *2 *1)
  (AND (|isDomain| *2 (|List| *6))
       (|ofCategory| *1 (|PolynomialSetCategory| *3 *4 *5 *6))
       (|ofCategory| *3 (|Ring|)) (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *5 (|OrderedSet|))
       (|ofCategory| *6 (|RecursivePolynomialCategory| *3 *4 *5))
       (|ofCategory| *3 (|IntegralDomain|))))
 (|rewriteIdealWithRemainder| (*1 *2 *2 *1)
  (AND (|isDomain| *2 (|List| *6))
       (|ofCategory| *1 (|PolynomialSetCategory| *3 *4 *5 *6))
       (|ofCategory| *3 (|Ring|)) (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *5 (|OrderedSet|))
       (|ofCategory| *6 (|RecursivePolynomialCategory| *3 *4 *5))
       (|ofCategory| *3 (|IntegralDomain|))))
 (|triangular?| (*1 *2 *1)
  (AND (|ofCategory| *1 (|PolynomialSetCategory| *3 *4 *5 *6))
       (|ofCategory| *3 (|Ring|)) (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *5 (|OrderedSet|))
       (|ofCategory| *6 (|RecursivePolynomialCategory| *3 *4 *5))
       (|ofCategory| *3 (|IntegralDomain|)) (|isDomain| *2 (|Boolean|))))
 (|iexactQuo| (*1 *2 *2 *2)
  (AND (|ofCategory| *1 (|PolynomialSetCategory| *2 *3 *4 *5))
       (|ofCategory| *2 (|Ring|)) (|ofCategory| *3 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *4 (|OrderedSet|))
       (|ofCategory| *5 (|RecursivePolynomialCategory| *2 *3 *4))
       (|ofCategory| *2 (|IntegralDomain|)))))
((~= (((|Boolean|) $ $) 6)) (|variables| (((|List| |#3|) $) 6))
 (|trivialIdeal?| (((|Boolean|) $) 6))
 (|triangular?| (((|Boolean|) $) 6 (|has| |#1| (|IntegralDomain|))))
 (|sort|
  (((|Record| (|:| |under| $) (|:| |floor| $) (|:| |upper| $)) $ |#3|) 6))
 (|size?| (((|Boolean|) $ (|NonNegativeInteger|)) 6))
 (|select|
  (($ (|Mapping| (|Boolean|) |#4|) $) 6 (|has| $ (|finiteAggregate|))))
 (|sample| (($) 6 T CONST))
 (|roughUnitIdeal?| (((|Boolean|) $) 6 (|has| |#1| (|IntegralDomain|))))
 (|roughSubIdeal?| (((|Boolean|) $ $) 6 (|has| |#1| (|IntegralDomain|))))
 (|roughEqualIdeals?| (((|Boolean|) $ $) 6 (|has| |#1| (|IntegralDomain|))))
 (|roughBase?| (((|Boolean|) $) 6 (|has| |#1| (|IntegralDomain|))))
 (|rewriteIdealWithRemainder|
  (((|List| |#4|) (|List| |#4|) $) 6 (|has| |#1| (|IntegralDomain|))))
 (|rewriteIdealWithHeadRemainder|
  (((|List| |#4|) (|List| |#4|) $) 6 (|has| |#1| (|IntegralDomain|))))
 (|retractIfCan| (((|Union| $ "failed") (|List| |#4|)) 6))
 (|retract| (($ (|List| |#4|)) 6))
 (|removeDuplicates|
  (($ $) 6 (AND (|has| |#4| (|BasicType|)) (|has| $ (|finiteAggregate|)))))
 (|remove|
  (($ |#4| $) 6 (AND (|has| |#4| (|BasicType|)) (|has| $ (|finiteAggregate|))))
  (($ (|Mapping| (|Boolean|) |#4|) $) 6 (|has| $ (|finiteAggregate|))))
 (|remainder|
  (((|Record| (|:| |rnum| |#1|) (|:| |polnum| |#4|) (|:| |den| |#1|)) |#4| $) 6
   (|has| |#1| (|IntegralDomain|))))
 (|reduce|
  ((|#4| (|Mapping| |#4| |#4| |#4|) $ |#4| |#4|) 6
   (AND (|has| |#4| (|BasicType|)) (|has| $ (|finiteAggregate|))))
  ((|#4| (|Mapping| |#4| |#4| |#4|) $ |#4|) 6 (|has| $ (|finiteAggregate|)))
  ((|#4| (|Mapping| |#4| |#4| |#4|) $) 6 (|has| $ (|finiteAggregate|))))
 (|parts| (((|List| |#4|) $) 6 (|has| $ (|finiteAggregate|))))
 (|mvar| ((|#3| $) 6)) (|more?| (((|Boolean|) $ (|NonNegativeInteger|)) 6))
 (|min|
  ((|#4| $) 6 (AND (|has| |#4| (|OrderedSet|)) (|has| $ (|finiteAggregate|)))))
 (|members| (((|List| |#4|) $) 6 (|has| $ (|finiteAggregate|))))
 (|member?|
  (((|Boolean|) |#4| $) 6
   (AND (|has| |#4| (|BasicType|)) (|has| $ (|finiteAggregate|)))))
 (|max|
  ((|#4| $) 6 (AND (|has| |#4| (|OrderedSet|)) (|has| $ (|finiteAggregate|))))
  ((|#4| (|Mapping| (|Boolean|) |#4| |#4|) $) 6 (|has| $ (|finiteAggregate|))))
 (|map!| (($ (|Mapping| |#4| |#4|) $) 6 (|has| $ (|shallowlyMutable|))))
 (|map| (($ (|Mapping| |#4| |#4|) $) 6))
 (|mainVariables| (((|List| |#3|) $) 6))
 (|mainVariable?| (((|Boolean|) |#3| $) 6))
 (|less?| (((|Boolean|) $ (|NonNegativeInteger|)) 6))
 (|latex| (((|String|) $) 6))
 (|iexactQuo| ((|#1| |#1| |#1|) 6 (|has| |#1| (|IntegralDomain|))))
 (|headRemainder|
  (((|Record| (|:| |num| |#4|) (|:| |den| |#1|)) |#4| $) 6
   (|has| |#1| (|IntegralDomain|))))
 (|hashUpdate!| (((|HashState|) (|HashState|) $) 6))
 (|hash| (((|SingleInteger|) $) 6))
 (|find| (((|Union| |#4| "failed") (|Mapping| (|Boolean|) |#4|) $) 6))
 (|every?|
  (((|Boolean|) (|Mapping| (|Boolean|) |#4|) $) 6
   (|has| $ (|finiteAggregate|))))
 (|eval|
  (($ $ (|List| |#4|) (|List| |#4|)) 6
   (AND (|has| |#4| (|Evalable| |#4|)) (|has| |#4| (|SetCategory|))))
  (($ $ |#4| |#4|) 6
   (AND (|has| |#4| (|Evalable| |#4|)) (|has| |#4| (|SetCategory|))))
  (($ $ (|Equation| |#4|)) 6
   (AND (|has| |#4| (|Evalable| |#4|)) (|has| |#4| (|SetCategory|))))
  (($ $ (|List| (|Equation| |#4|))) 6
   (AND (|has| |#4| (|Evalable| |#4|)) (|has| |#4| (|SetCategory|)))))
 (|eq?| (((|Boolean|) $ $) 6)) (|empty?| (((|Boolean|) $) 6)) (|empty| (($) 6))
 (|count|
  (((|NonNegativeInteger|) |#4| $) 6
   (AND (|has| |#4| (|BasicType|)) (|has| $ (|finiteAggregate|))))
  (((|NonNegativeInteger|) (|Mapping| (|Boolean|) |#4|) $) 6
   (|has| $ (|finiteAggregate|))))
 (|copy| (($ $) 6))
 (|convert| (((|InputForm|) $) 6 (|has| |#4| (|ConvertibleTo| (|InputForm|)))))
 (|construct| (($ (|List| |#4|)) 6)) (|collectUpper| (($ $ |#3|) 6))
 (|collectUnder| (($ $ |#3|) 6)) (|collect| (($ $ |#3|) 6))
 (|coerce| (((|OutputForm|) $) 6) (((|List| |#4|) $) 6))
 (|any?|
  (((|Boolean|) (|Mapping| (|Boolean|) |#4|) $) 6
   (|has| $ (|finiteAggregate|))))
 (= (((|Boolean|) $ $) 6))
 (|#| (((|NonNegativeInteger|) $) 6 (|has| $ (|finiteAggregate|)))))
PSETCAT
(((|SetCategory|) . T) ((|Collection| |#4|) . T)
 ((|CoercibleTo| (|List| |#4|)) . T) ((|RetractableFrom| (|List| |#4|)) . T)
 ((|finiteAggregate|) . T))
(((|Aggregate|) . T) ((|BasicType|) . T) ((|CoercibleTo| (|List| |#4|)) . T)
 ((|CoercibleTo| (|OutputForm|)) . T) ((|Collection| |#4|) . T)
 ((|ConvertibleTo| (|InputForm|)) |has| |t#1| (|ConvertibleTo| (|InputForm|)))
 ((|Evalable| |t#1|) AND (|has| |t#1| (|Evalable| |t#1|))
  (|has| |t#1| (|SetCategory|)))
 ((|HomogeneousAggregate| |t#1|) . T)
 ((|InnerEvalable| |t#1| |t#1|) AND (|has| |t#1| (|Evalable| |t#1|))
  (|has| |t#1| (|SetCategory|)))
 ((|RetractableFrom| (|List| |#4|)) . T) ((|SetCategory|) . T) ((|Type|) . T)
 ((|finiteAggregate|) . T))
((|constructor|
  (NIL
   "A category for finite subsets of a polynomial ring. Such a set is only regarded as a set of polynomials and not identified to the ideal it generates. So two distinct sets may generate the same the ideal. Furthermore,{} for \\spad{R} being an integral domain,{} a set of polynomials may be viewed as a representation of the ideal it generates in the polynomial ring \\spad{(R)^(-1) P},{} or the set of its zeros (described for instance by the radical of the previous ideal,{} or a split of the associated affine variety) and so on. So this category provides operations about those different notions."))
 (|iexactQuo|
  ((|#1| |#1| |#1|)
   "\\spad{iexactQuo(x,{} y)} should be local but conditional"))
 (|triangular?|
  (((|Boolean|) $)
   "\\spad{triangular?(ps)} returns \\spad{true} iff \\spad{ps} is a triangular set,{} \\spadignore{i.e.} two distinct polynomials have distinct main variables and no constant lies in \\spad{ps}."))
 (|rewriteIdealWithRemainder|
  (((|List| |#4|) (|List| |#4|) $)
   "\\spad{rewriteIdealWithRemainder(lp,{} cs)} returns \\spad{lr} such that every polynomial in \\spad{lr} is fully reduced in the sense of Groebner bases \\spad{w}.\\spad{r}.\\spad{t}. \\spad{cs} and \\spad{(lp,{} cs)} and \\spad{(lr,{} cs)} generate the same ideal in \\spad{(R)^(-1) P}."))
 (|rewriteIdealWithHeadRemainder|
  (((|List| |#4|) (|List| |#4|) $)
   "\\spad{rewriteIdealWithHeadRemainder(lp,{} cs)} returns \\spad{lr} such that the leading monomial of every polynomial in \\spad{lr} is reduced in the sense of Groebner bases \\spad{w}.\\spad{r}.\\spad{t}. \\spad{cs} and \\spad{(lp,{} cs)} and \\spad{(lr,{} cs)} generate the same ideal in \\spad{(R)^(-1) P}."))
 (|remainder|
  (((|Record| (|:| |rnum| |#1|) (|:| |polnum| |#4|) (|:| |den| |#1|)) |#4| $)
   "\\spad{remainder(a,{} ps)} returns \\spad{[c,{} b,{} r]} such that \\spad{b} is fully reduced in the sense of Groebner bases \\spad{w}.\\spad{r}.\\spad{t}. \\spad{ps},{} \\spad{r*a - c*b} lies in the ideal generated by \\spad{ps}. Furthermore,{} if \\spad{R} is a \\spad{gcd}-domain,{} \\spad{b} is primitive."))
 (|headRemainder|
  (((|Record| (|:| |num| |#4|) (|:| |den| |#1|)) |#4| $)
   "\\spad{headRemainder(a,{} ps)} returns \\spad{[b,{} r]} such that the leading monomial of \\spad{b} is reduced in the sense of Groebner bases \\spad{w}.\\spad{r}.\\spad{t}. \\spad{ps} and \\spad{r*a - b} lies in the ideal generated by \\spad{ps}."))
 (|roughUnitIdeal?|
  (((|Boolean|) $)
   "\\spad{roughUnitIdeal?(ps)} returns \\spad{true} iff \\spad{ps} contains some non null element lying in the base ring \\spad{R}."))
 (|roughEqualIdeals?|
  (((|Boolean|) $ $)
   "\\spad{roughEqualIdeals?(ps1,{} ps2)} returns \\spad{true} iff it can proved that \\spad{ps1} and \\spad{ps2} generate the same ideal in \\spad{(R)^(-1) P} without computing Groebner bases."))
 (|roughSubIdeal?|
  (((|Boolean|) $ $)
   "\\spad{roughSubIdeal?(ps1,{} ps2)} returns \\spad{true} iff it can proved that all polynomials in \\spad{ps1} lie in the ideal generated by \\spad{ps2} in \\spad{\\spad{(R)^(-1) P}} without computing Groebner bases."))
 (|roughBase?|
  (((|Boolean|) $)
   "\\spad{roughBase?(ps)} returns \\spad{true} iff for every pair \\spad{{p,{} q}} of polynomials in \\spad{ps} their leading monomials are relatively prime."))
 (|trivialIdeal?|
  (((|Boolean|) $)
   "\\spad{trivialIdeal?(ps)} returns \\spad{true} iff \\spad{ps} does not contain non-zero elements."))
 (|sort|
  (((|Record| (|:| |under| $) (|:| |floor| $) (|:| |upper| $)) $ |#3|)
   "\\spad{sort(v,{} ps)} returns \\spad{us,{} vs,{} ws} such that \\spad{us} is \\spad{collectUnder(ps,{} v)},{} \\spad{vs} is \\spad{collect(ps,{} v)} and \\spad{ws} is \\spad{collectUpper(ps,{} v)}."))
 (|collectUpper|
  (($ $ |#3|)
   "\\spad{collectUpper(ps,{} v)} returns the set consisting of the polynomials of \\spad{ps} with main variable greater than \\spad{v}."))
 (|collect|
  (($ $ |#3|)
   "\\spad{collect(ps,{} v)} returns the set consisting of the polynomials of \\spad{ps} with \\spad{v} as main variable."))
 (|collectUnder|
  (($ $ |#3|)
   "\\spad{collectUnder(ps,{} v)} returns the set consisting of the polynomials of \\spad{ps} with main variable less than \\spad{v}."))
 (|mainVariable?|
  (((|Boolean|) |#3| $)
   "\\spad{mainVariable?(v,{} ps)} returns \\spad{true} iff \\spad{v} is the main variable of some polynomial in \\spad{ps}."))
 (|mainVariables|
  (((|List| |#3|) $)
   "\\spad{mainVariables(ps)} returns the decreasingly sorted list of the variables which are main variables of some polynomial in \\spad{ps}."))
 (|variables|
  (((|List| |#3|) $)
   "\\spad{variables(ps)} returns the decreasingly sorted list of the variables which are variables of some polynomial in \\spad{ps}."))
 (|mvar|
  ((|#3| $)
   "\\spad{mvar(ps)} returns the main variable of the non constant polynomial with the greatest main variable,{} if any,{} else an error is returned.")))
(("documentation" 0 13254) ("ancestors" 0 12697) ("parents" 0 12543)
 ("abbreviation" 0 12535) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 8383) ("modemaps" 0 1916) ("sourceFile" 0 1877)
 ("constructorCategory" 0 270) ("constructorModemap" 0 72)
 ("constructorKind" 0 61) ("constructorForm" 0 20))