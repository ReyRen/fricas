6266                (MAKEPROP '|CubicalFacet| 'NILADIC T)
(|CubicalFacet|)
|domain|
(((|CubicalFacet|)
  (|Join| (|FacetCategory|)
          (CATEGORY |domain|
           (SIGNATURE |cubicalFacet|
            ($ (|Integer|) (|List| (|Segment| (|Integer|)))))
           (SIGNATURE |cubicalFacet|
            ($ (|Integer|) (|List| (|List| (|Integer|)))))
           (SIGNATURE |cubicalFacet| ($ (|Integer|) (|CubicalFacet|)))
           (SIGNATURE |getIntervals| ((|List| (|Segment| (|Integer|))) $))
           (SIGNATURE |setMult| ($ $ (|Integer|)))
           (SIGNATURE |position| ((|Integer|) $ (|List| $)))
           (SIGNATURE |product| ($ $ $)) (SIGNATURE |boundary| ((|List| $) $))
           (SIGNATURE |sameFace?| ((|Boolean|) $ $))
           (SIGNATURE |allSubsets| ((|List| $) $ (|NonNegativeInteger|)))
           (SIGNATURE |allSubsets|
            ((|List| $) $ (|NonNegativeInteger|) (|NonNegativeInteger|))))))
 (T |CubicalFacet|))
(|Join| (|FacetCategory|)
        (CATEGORY |domain|
         (SIGNATURE |cubicalFacet|
          ($ (|Integer|) (|List| (|Segment| (|Integer|)))))
         (SIGNATURE |cubicalFacet|
          ($ (|Integer|) (|List| (|List| (|Integer|)))))
         (SIGNATURE |cubicalFacet| ($ (|Integer|) (|CubicalFacet|)))
         (SIGNATURE |getIntervals| ((|List| (|Segment| (|Integer|))) $))
         (SIGNATURE |setMult| ($ $ (|Integer|)))
         (SIGNATURE |position| ((|Integer|) $ (|List| $)))
         (SIGNATURE |product| ($ $ $)) (SIGNATURE |boundary| ((|List| $) $))
         (SIGNATURE |sameFace?| ((|Boolean|) $ $))
         (SIGNATURE |allSubsets| ((|List| $) $ (|NonNegativeInteger|)))
         (SIGNATURE |allSubsets|
          ((|List| $) $ (|NonNegativeInteger|) (|NonNegativeInteger|)))))
"/git/fricas/src/algebra/CFACET.spad"
((|cubicalFacet| (*1 *1 *2 *3)
  (AND (|isDomain| *3 (|List| (|Segment| (|Integer|))))
       (|isDomain| *2 (|Integer|)) (|isDomain| *1 (|CubicalFacet|))))
 (|cubicalFacet| (*1 *1 *2 *3)
  (AND (|isDomain| *3 (|List| (|List| (|Integer|))))
       (|isDomain| *2 (|Integer|)) (|isDomain| *1 (|CubicalFacet|))))
 (|cubicalFacet| (*1 *1 *2 *1)
  (AND (|isDomain| *2 (|Integer|)) (|isDomain| *1 (|CubicalFacet|))))
 (|getIntervals| (*1 *2 *1)
  (AND (|isDomain| *2 (|List| (|Segment| (|Integer|))))
       (|isDomain| *1 (|CubicalFacet|))))
 (|setMult| (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|Integer|)) (|isDomain| *1 (|CubicalFacet|))))
 (|position| (*1 *2 *1 *3)
             (AND (|isDomain| *3 (|List| (|CubicalFacet|)))
                  (|isDomain| *2 (|Integer|))
                  (|isDomain| *1 (|CubicalFacet|))))
 (|product| (*1 *1 *1 *1) (|isDomain| *1 (|CubicalFacet|)))
 (|boundary| (*1 *2 *1)
  (AND (|isDomain| *2 (|List| (|CubicalFacet|)))
       (|isDomain| *1 (|CubicalFacet|))))
 (|sameFace?| (*1 *2 *1 *1)
  (AND (|isDomain| *2 (|Boolean|)) (|isDomain| *1 (|CubicalFacet|))))
 (|allSubsets| (*1 *2 *1 *3)
  (AND (|isDomain| *3 (|NonNegativeInteger|))
       (|isDomain| *2 (|List| (|CubicalFacet|)))
       (|isDomain| *1 (|CubicalFacet|))))
 (|allSubsets| (*1 *2 *1 *3 *3)
  (AND (|isDomain| *3 (|NonNegativeInteger|))
       (|isDomain| *2 (|List| (|CubicalFacet|)))
       (|isDomain| *1 (|CubicalFacet|)))))
((~= (((|Boolean|) $ $) NIL)) (|smaller?| (((|Boolean|) $ $) NIL))
 (|setMult| (($ $ (|Integer|)) 29)) (|sameFace?| (((|Boolean|) $ $) 52))
 (|product| (($ $ $) 34)) (|position| (((|Integer|) $ (|List| $)) 32))
 (|order| (((|NonNegativeInteger|) $) 27)) (|min| (($ $ $) NIL))
 (|max| (($ $ $) NIL)) (|latex| (((|String|) $) NIL))
 (|hashUpdate!| (((|HashState|) (|HashState|) $) NIL))
 (|hash| (((|SingleInteger|) $) NIL)) (|getMult| (((|Integer|) $) 28))
 (|getIntervals| (((|List| (|Segment| (|Integer|))) $) 25))
 (|empty?| (((|Boolean|) $) 41))
 (|cubicalFacet| (($ (|Integer|) (|List| (|Segment| (|Integer|)))) 16)
  (($ (|Integer|) (|List| (|List| (|Integer|)))) 21)
  (($ (|Integer|) (|CubicalFacet|)) 24))
 (|coerce| (((|OutputForm|) $) 63)) (|boundary| (((|List| $) $) 40))
 (|allSubsets| (((|List| $) $ (|NonNegativeInteger|)) 49)
  (((|List| $) $ (|NonNegativeInteger|) (|NonNegativeInteger|)) 50))
 (>= (((|Boolean|) $ $) NIL)) (> (((|Boolean|) $ $) NIL))
 (= (((|Boolean|) $ $) 55)) (<= (((|Boolean|) $ $) 54))
 (< (((|Boolean|) $ $) 53)))
CFACET
(((|FacetCategory|) . T))
(((|BasicType|) . T) ((|CoercibleTo| (|OutputForm|)) . T) ((|Comparable|) . T)
 ((|FacetCategory|) . T) ((|OrderedSet|) . T) ((|PartialOrder|) . T)
 ((|SetCategory|) . T))
((|constructor|
  (NIL
   "\\indented{2}{A single vertex,{} edge,{} square,{} cube...} \\indented{2}{for more documentation see:} \\indented{2}{http://www.euclideanspace.com/prog/scratchpad/mycode/topology/cubical/} Date Created: April 2016 Basic Operations: Related packages: Related categories: FacetCategory Related Domains: Also See: AMS Classifications:"))
 (|allSubsets|
  (((|List| $) $ (|NonNegativeInteger|) (|NonNegativeInteger|))
   "\\spad{allSubsets of} a given length returned in reverse order subsets returned are not oriented")
  (((|List| $) $ (|NonNegativeInteger|))
   "\\spad{allSubsets of} a given facet returned in reverse order subsets returned are not oriented"))
 (|sameFace?|
  (((|Boolean|) $ $)
   "\\spad{true} if this is the same face although the orientation may be different."))
 (|boundary|
  (((|List| $) $)
   "construct the boundary. This is like hollowing out the facet."))
 (|product|
  (($ $ $)
   "This function returns the product of two cubical facets. Unlike the simplex case,{} the product is a sinle facet"))
 (|position|
  (((|Integer|) $ (|List| $))
   "return index of \\spad{e} in \\spad{lst}. Index will be negative if \\spad{e} has negative multiplier."))
 (|setMult| (($ $ (|Integer|)) "sets multiplier of face"))
 (|getIntervals|
  (((|List| (|Segment| (|Integer|))) $)
   "returns intervals in face one for each dimension"))
 (|cubicalFacet|
  (($ (|Integer|) (|CubicalFacet|)) "Copy constructor which can change mul")
  (($ (|Integer|) (|List| (|List| (|Integer|))))
   "Constructor for cubical facet")
  (($ (|Integer|) (|List| (|Segment| (|Integer|))))
   "Constructor for cubical facet intervals are always stored in low..high order orientation is calculated by the number of intervals that have to be flipped to put it in order.")))
(("documentation" 0 4474) ("ancestors" 0 4302) ("parents" 0 4276)
 ("abbreviation" 0 4269) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 3216) ("modemaps" 0 1787) ("sourceFile" 0 1749)
 ("constructorCategory" 0 952) ("constructorModemap" 0 84)
 ("constructorKind" 0 75) ("constructorForm" 0 58) ("NILADIC" 0 20))