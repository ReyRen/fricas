)abbrev category STAGG StreamAggregate
++ Author: Michael Monagan; revised by Manuel Bronstein and Richard Jenks
++ Date Created: August 87 through August 88
++ Basic Operations:
++ Related Constructors:
++ Also See:
++ AMS Classifications:
++ Keywords:
++ References:
++ Description:
++ A stream aggregate is a linear aggregate which possibly has an infinite
++ number of elements. A basic domain constructor which builds stream
++ aggregates is \spadtype{Stream}. From streams, a number of infinite
++ structures such as power series can be built.
StreamAggregate(S : Type) : Category ==
   Join(UnaryRecursiveAggregate S, LinearAggregate S) with
      explicitlyFinite? : % -> Boolean
        ++ explicitlyFinite?(s) tests if the stream has a finite
        ++ number of elements, and false otherwise.
        ++ Note: for many datatypes, \spad{explicitlyFinite?(s) = not possiblyInfinite?(s)}.
      possiblyInfinite? : % -> Boolean
        ++ possiblyInfinite?(s) tests if the stream s could possibly
        ++ have an infinite number of elements.
        ++ Note: for many datatypes, \spad{possiblyInfinite?(s) = not explictlyFinite?(s)}.
 add

   import from Integer

   c2 : (%, %) -> S

   explicitlyFinite? x == not cyclic? x
   possiblyInfinite? x == cyclic? x
   first(x, n)         == construct [c2(x, x := rest x) for i in 1..n]

   c2(x, r) ==
       empty? x => error "Index out of range"
       first x

   elt(x : %, i : Integer) ==
       i := i - minIndex x
       (i < 0) or empty?(x := rest(x, i::NonNegativeInteger)) =>
           error "index out of range"
       first x

   elt(x : %, i : UniversalSegment(Integer)) ==
       l := low(i) - minIndex x
       l < 0 => error "index out of range"
       not hasHi i => copy(rest(x, l::NonNegativeInteger))
       (h := high(i) - minIndex x) < l => empty()
       first(rest(x, l::NonNegativeInteger), (h - l + 1)::NonNegativeInteger)

   if % has shallowlyMutable then

       concat(x : %, y : %) == concat!(copy x, y)

       concat l ==
           empty? l => empty()
           l1 := reverse l
           res := empty()
           for x in l1 repeat
               res := concat!(copy x, res)
           res

       fill!(x, s) ==
           y := x
           while not empty? y repeat (setfirst!(y, s); y := rest y)
           x

       setelt!(x : %, i : Integer, s : S) ==
           i := i - minIndex x
           (i < 0) or empty?(x := rest(x,i::NonNegativeInteger)) =>
               error "index out of range"
           setfirst!(x, s)

       setelt!(x : %, i : UniversalSegment(Integer), s : S) ==
           (l := low(i) - minIndex x) < 0 => error "index out of range"
           h := if hasHi i then high(i) - minIndex x else maxIndex x
           h < l => s
           y := rest(x, l::NonNegativeInteger)
           z := rest(y, (h - l + 1)::NonNegativeInteger)
           while not eq?(y, z) repeat (setfirst!(y, s); y := rest y)
           s

       concat!(x : %, y : %) ==
           empty? x => y
           setrest!(tail x, y)
           x


