5521                (MAKEPROP '|FortranScalarType| 'NILADIC T)
(|FortranScalarType|)
|domain|
(((|FortranScalarType|)
  (|Join| (|CoercibleTo| (|OutputForm|))
          (CATEGORY |domain| (SIGNATURE |coerce| ($ (|String|)))
           (SIGNATURE |coerce| ((|String|) $))
           (SIGNATURE |coerce| ($ (|Symbol|)))
           (SIGNATURE |coerce| ((|Symbol|) $))
           (SIGNATURE |coerce| ((|SExpression|) $))
           (SIGNATURE |real?| ((|Boolean|) $))
           (SIGNATURE |double?| ((|Boolean|) $))
           (SIGNATURE |integer?| ((|Boolean|) $))
           (SIGNATURE |complex?| ((|Boolean|) $))
           (SIGNATURE |doubleComplex?| ((|Boolean|) $))
           (SIGNATURE |character?| ((|Boolean|) $))
           (SIGNATURE |logical?| ((|Boolean|) $))
           (SIGNATURE = ((|Boolean|) $ $)))))
 (T |FortranScalarType|))
(|Join| (|CoercibleTo| (|OutputForm|))
        (CATEGORY |domain| (SIGNATURE |coerce| ($ (|String|)))
         (SIGNATURE |coerce| ((|String|) $))
         (SIGNATURE |coerce| ($ (|Symbol|)))
         (SIGNATURE |coerce| ((|Symbol|) $))
         (SIGNATURE |coerce| ((|SExpression|) $))
         (SIGNATURE |real?| ((|Boolean|) $))
         (SIGNATURE |double?| ((|Boolean|) $))
         (SIGNATURE |integer?| ((|Boolean|) $))
         (SIGNATURE |complex?| ((|Boolean|) $))
         (SIGNATURE |doubleComplex?| ((|Boolean|) $))
         (SIGNATURE |character?| ((|Boolean|) $))
         (SIGNATURE |logical?| ((|Boolean|) $))
         (SIGNATURE = ((|Boolean|) $ $))))
"/git/fricas/src/algebra/FST.spad"
((|coerce| (*1 *1 *2)
           (AND (|isDomain| *2 (|String|))
                (|isDomain| *1 (|FortranScalarType|))))
 (|coerce| (*1 *2 *1)
           (AND (|isDomain| *2 (|String|))
                (|isDomain| *1 (|FortranScalarType|))))
 (|coerce| (*1 *1 *2)
           (AND (|isDomain| *2 (|Symbol|))
                (|isDomain| *1 (|FortranScalarType|))))
 (|coerce| (*1 *2 *1)
           (AND (|isDomain| *2 (|Symbol|))
                (|isDomain| *1 (|FortranScalarType|))))
 (|coerce| (*1 *2 *1)
           (AND (|isDomain| *2 (|SExpression|))
                (|isDomain| *1 (|FortranScalarType|))))
 (|real?| (*1 *2 *1)
  (AND (|isDomain| *2 (|Boolean|)) (|isDomain| *1 (|FortranScalarType|))))
 (|double?| (*1 *2 *1)
  (AND (|isDomain| *2 (|Boolean|)) (|isDomain| *1 (|FortranScalarType|))))
 (|integer?| (*1 *2 *1)
  (AND (|isDomain| *2 (|Boolean|)) (|isDomain| *1 (|FortranScalarType|))))
 (|complex?| (*1 *2 *1)
  (AND (|isDomain| *2 (|Boolean|)) (|isDomain| *1 (|FortranScalarType|))))
 (|doubleComplex?| (*1 *2 *1)
  (AND (|isDomain| *2 (|Boolean|)) (|isDomain| *1 (|FortranScalarType|))))
 (|character?| (*1 *2 *1)
  (AND (|isDomain| *2 (|Boolean|)) (|isDomain| *1 (|FortranScalarType|))))
 (|logical?| (*1 *2 *1)
  (AND (|isDomain| *2 (|Boolean|)) (|isDomain| *1 (|FortranScalarType|))))
 (= (*1 *2 *1 *1)
    (AND (|isDomain| *2 (|Boolean|)) (|isDomain| *1 (|FortranScalarType|)))))
((|real?| (((|Boolean|) $) 29)) (|logical?| (((|Boolean|) $) 31))
 (|integer?| (((|Boolean|) $) 32)) (|doubleComplex?| (((|Boolean|) $) 35))
 (|double?| (((|Boolean|) $) 30)) (|complex?| (((|Boolean|) $) 34))
 (|coerce| (((|OutputForm|) $) 16) (($ (|String|)) 25) (((|String|) $) 28)
           (($ (|Symbol|)) 21) (((|Symbol|) $) 17) (((|SExpression|) $) 20))
 (|character?| (((|Boolean|) $) 33)) (= (((|Boolean|) $ $) 12)))
FST
(((|CoercibleTo| (|OutputForm|)) . T))
(((|CoercibleTo| (|OutputForm|)) . T))
((|constructor|
  (NIL
   "Creates and manipulates objects which correspond to the basic FORTRAN data types: REAL,{} INTEGER,{} COMPLEX,{} LOGICAL and CHARACTER"))
 (= (((|Boolean|) $ $) "\\spad{x=y} tests for equality"))
 (|logical?|
  (((|Boolean|) $)
   "\\spad{logical?(t)} tests whether \\spad{t} is equivalent to the FORTRAN type LOGICAL."))
 (|character?|
  (((|Boolean|) $)
   "\\spad{character?(t)} tests whether \\spad{t} is equivalent to the FORTRAN type CHARACTER."))
 (|doubleComplex?|
  (((|Boolean|) $)
   "\\spad{doubleComplex?(t)} tests whether \\spad{t} is equivalent to the (non-standard) FORTRAN type DOUBLE COMPLEX."))
 (|complex?|
  (((|Boolean|) $)
   "\\spad{complex?(t)} tests whether \\spad{t} is equivalent to the FORTRAN type COMPLEX."))
 (|integer?|
  (((|Boolean|) $)
   "\\spad{integer?(t)} tests whether \\spad{t} is equivalent to the FORTRAN type INTEGER."))
 (|double?|
  (((|Boolean|) $)
   "\\spad{double?(t)} tests whether \\spad{t} is equivalent to the FORTRAN type DOUBLE PRECISION"))
 (|real?|
  (((|Boolean|) $)
   "\\spad{real?(t)} tests whether \\spad{t} is equivalent to the FORTRAN type REAL."))
 (|coerce|
  (((|SExpression|) $)
   "\\spad{coerce(x)} returns the \\spad{s}-expression associated with \\spad{x}")
  (((|Symbol|) $)
   "\\spad{coerce(x)} returns the symbol associated with \\spad{x}")
  (($ (|Symbol|))
   "\\spad{coerce(s)} transforms the symbol \\spad{s} into an element of FortranScalarType provided \\spad{s} is one of real,{} complex,{} double precision,{} logical,{} integer,{} character,{} REAL,{} COMPLEX,{} LOGICAL,{} INTEGER,{} CHARACTER,{} DOUBLE PRECISION")
  (((|String|) $)
   "\\spad{coerce(x)} returns the uppercase string associated with \\spad{x}")
  (($ (|String|))
   "\\spad{coerce(s)} transforms the string \\spad{s} into an element of FortranScalarType provided \\spad{s} is one of \"real\",{} \"double precision\",{} \"complex\",{} \"logical\",{} \"integer\",{} \"character\",{} \"REAL\",{} \"COMPLEX\",{} \"LOGICAL\",{} \"INTEGER\",{} \"CHARACTER\",{} \"DOUBLE PRECISION\"")))
(("documentation" 0 3459) ("ancestors" 0 3420) ("parents" 0 3381)
 ("abbreviation" 0 3377) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 2951) ("modemaps" 0 1548) ("sourceFile" 0 1513)
 ("constructorCategory" 0 843) ("constructorModemap" 0 94)
 ("constructorKind" 0 85) ("constructorForm" 0 63) ("NILADIC" 0 20))