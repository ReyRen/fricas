7460                (MAKEPROP '|EuclideanDomain| 'NILADIC T)
(|EuclideanDomain|)
|category|
(((|EuclideanDomain|) (|Category|)) (T |EuclideanDomain|))
(|Join| (|PrincipalIdealDomain|)
        (CATEGORY |domain| (SIGNATURE |sizeLess?| ((|Boolean|) $ $))
         (SIGNATURE |euclideanSize| ((|NonNegativeInteger|) $))
         (SIGNATURE |divide|
          ((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $))
         (SIGNATURE |quo| ($ $ $)) (SIGNATURE |rem| ($ $ $))
         (SIGNATURE |extendedEuclidean|
          ((|Record| (|:| |coef1| $) (|:| |coef2| $) (|:| |generator| $)) $ $))
         (SIGNATURE |extendedEuclidean|
          ((|Union| (|Record| (|:| |coef1| $) (|:| |coef2| $)) "failed") $ $
           $))
         (SIGNATURE |multiEuclidean|
          ((|Union| (|List| $) "failed") (|List| $) $))))
"/git/fricas/src/algebra/EUCDOM.spad"
((|sizeLess?| (*1 *2 *1 *1)
  (AND (|ofCategory| *1 (|EuclideanDomain|)) (|isDomain| *2 (|Boolean|))))
 (|euclideanSize| (*1 *2 *1)
  (AND (|ofCategory| *1 (|EuclideanDomain|))
       (|isDomain| *2 (|NonNegativeInteger|))))
 (|divide| (*1 *2 *1 *1)
  (AND (|isDomain| *2 (|Record| (|:| |quotient| *1) (|:| |remainder| *1)))
       (|ofCategory| *1 (|EuclideanDomain|))))
 (|quo| (*1 *1 *1 *1) (|ofCategory| *1 (|EuclideanDomain|)))
 (|rem| (*1 *1 *1 *1) (|ofCategory| *1 (|EuclideanDomain|)))
 (|extendedEuclidean| (*1 *2 *1 *1)
  (AND
   (|isDomain| *2
               (|Record| (|:| |coef1| *1) (|:| |coef2| *1)
                         (|:| |generator| *1)))
   (|ofCategory| *1 (|EuclideanDomain|))))
 (|extendedEuclidean| (*1 *2 *1 *1 *1)
  (|partial| AND (|isDomain| *2 (|Record| (|:| |coef1| *1) (|:| |coef2| *1)))
   (|ofCategory| *1 (|EuclideanDomain|))))
 (|multiEuclidean| (*1 *2 *2 *1)
  (|partial| AND (|isDomain| *2 (|List| *1))
   (|ofCategory| *1 (|EuclideanDomain|)))))
((~= (((|Boolean|) $ $) 6)) (|zero?| (((|Boolean|) $) 6))
 (|unitNormal|
  (((|Record| (|:| |unit| $) (|:| |canonical| $) (|:| |associate| $)) $) 6))
 (|unitCanonical| (($ $) 6)) (|unit?| (((|Boolean|) $) 6))
 (|subtractIfCan| (((|Union| $ "failed") $ $) 6))
 (|sizeLess?| (((|Boolean|) $ $) 6)) (|sample| (($) 6 T CONST))
 (|rightRecip| (((|Union| $ #1="failed") $) 6))
 (|rightPower| (($ $ (|PositiveInteger|)) 6) (($ $ (|NonNegativeInteger|)) 6))
 (|rem| (($ $ $) 6)) (|recip| (((|Union| $ #1#) $) 6)) (|quo| (($ $ $) 6))
 (|principalIdeal|
  (((|Record| (|:| |coef| (|List| $)) (|:| |generator| $)) (|List| $)) 6))
 (|opposite?| (((|Boolean|) $ $) 6)) (|one?| (((|Boolean|) $) 6))
 (|multiEuclidean| (((|Union| (|List| $) "failed") (|List| $) $) 6))
 (|leftRecip| (((|Union| $ #1#) $) 6))
 (|leftPower| (($ $ (|PositiveInteger|)) 6) (($ $ (|NonNegativeInteger|)) 6))
 (|lcmCoef|
  (((|Record| (|:| |llcm_res| $) (|:| |coeff1| $) (|:| |coeff2| $)) $ $) 6))
 (|lcm| (($ $ $) 6) (($ (|List| $)) 6)) (|latex| (((|String|) $) 6))
 (|hashUpdate!| (((|HashState|) (|HashState|) $) 6))
 (|hash| (((|SingleInteger|) $) 6))
 (|gcdPolynomial|
  (((|SparseUnivariatePolynomial| $) (|SparseUnivariatePolynomial| $)
    (|SparseUnivariatePolynomial| $))
   6))
 (|gcd| (($ $ $) 6) (($ (|List| $)) 6))
 (|extendedEuclidean|
  (((|Record| (|:| |coef1| $) (|:| |coef2| $) (|:| |generator| $)) $ $) 6)
  (((|Union| (|Record| (|:| |coef1| $) (|:| |coef2| $)) "failed") $ $ $) 6))
 (|exquo| (((|Union| $ "failed") $ $) 6))
 (|expressIdealMember| (((|Union| (|List| $) "failed") (|List| $) $) 6))
 (|euclideanSize| (((|NonNegativeInteger|) $) 6))
 (|divide| (((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $) 6))
 (|commutator| (($ $ $) 6))
 (|coerce| (((|OutputForm|) $) 6) (($ (|Integer|)) 6) (($ $) 6))
 (|characteristic| (((|NonNegativeInteger|)) 6)) (|associator| (($ $ $ $) 6))
 (|associates?| (((|Boolean|) $ $) 6)) (|antiCommutator| (($ $ $) 6))
 (|annihilate?| (((|Boolean|) $ $) 6))
 (^ (($ $ (|PositiveInteger|)) 6) (($ $ (|NonNegativeInteger|)) 6))
 (|Zero| (($) 6 T CONST)) (|One| (($) 6 T CONST)) (= (((|Boolean|) $ $) 6))
 (- (($ $ $) 6) (($ $) 6)) (+ (($ $ $) 6))
 (* (($ (|PositiveInteger|) $) 6) (($ $ $) 6) (($ (|Integer|) $) 6)
    (($ (|NonNegativeInteger|) $) 6)))
EUCDOM
(((|PrincipalIdealDomain|) . T))
(((|AbelianGroup|) . T) ((|AbelianMonoid|) . T) ((|AbelianSemiGroup|) . T)
 ((|Algebra| $) . T) ((|BasicType|) . T) ((|BiModule| |t#1| |t#1|) . T)
 ((|BiModule| $ $) . T) ((|CancellationAbelianMonoid|) . T)
 ((|CoercibleTo| (|OutputForm|)) . T) ((|CommutativeRing|) . T)
 ((|CommutativeStar|) . T) ((|EntireRing|) . T) ((|GcdDomain|) . T)
 ((|IntegralDomain|) . T) ((|LeftModule| |t#1|) . T) ((|LeftOreRing|) . T)
 ((|Magma|) . T) ((|MagmaWithUnit|) . T) ((|Module| |t#1|) . T)
 ((|Monoid|) . T) ((|NonAssociativeRing|) . T) ((|NonAssociativeRng|) . T)
 ((|NonAssociativeSemiRing|) . T) ((|NonAssociativeSemiRng|) . T)
 ((|PrincipalIdealDomain|) . T) ((|RightModule| |t#2|) . T) ((|Ring|) . T)
 ((|Rng|) . T) ((|SemiGroup|) . T) ((|SemiRing|) . T) ((|SemiRng|) . T)
 ((|SetCategory|) . T) ((|TwoSidedRecip|) . T) ((|noZeroDivisors|) . T)
 ((|unitsKnown|) . T))
((|constructor|
  (NIL
   "A constructive euclidean domain,{} \\spadignore{i.e.} one can divide producing a quotient and a remainder where the remainder is either zero or is smaller (\\spadfun{euclideanSize}) than the divisor. \\blankline Conditional attributes: \\indented{2}{multiplicativeValuation\\tab{25}\\spad{Size(a*b)=Size(a)*Size(b)}} \\indented{2}{additiveValuation\\tab{25}\\spad{Size(a*b)=Size(a)+Size(b)}}"))
 (|multiEuclidean|
  (((|Union| (|List| $) "failed") (|List| $) $)
   "\\spad{multiEuclidean([f1,{} ...,{} fn],{} z)} returns a list of coefficients \\spad{[a1,{} ...,{} an]} such that \\spad{ z / prod \\spad{fi} = sum aj/fj}. If no such list of coefficients exists,{} \"failed\" is returned."))
 (|extendedEuclidean|
  (((|Union| (|Record| (|:| |coef1| $) (|:| |coef2| $)) "failed") $ $ $)
   "\\spad{extendedEuclidean(x,{} y,{} z)} either returns a record rec where \\spad{rec.coef1*x+rec.coef2*y=z} or returns \"failed\" if \\spad{z} cannot be expressed as a linear combination of \\spad{x} and \\spad{y}.")
  (((|Record| (|:| |coef1| $) (|:| |coef2| $) (|:| |generator| $)) $ $)
   "\\spad{extendedEuclidean(x,{} y)} returns a record rec where \\spad{rec.coef1*x+rec.coef2*y = rec.generator} and rec.generator is a \\spad{gcd} of \\spad{x} and \\spad{y}. The \\spad{gcd} is unique only up to associates if \\spadatt{canonicalUnitNormal} is not asserted. \\spadfun{principalIdeal} provides a version of this operation which accepts an arbitrary length list of arguments."))
 (|rem|
  (($ $ $)
   "\\spad{x rem y} is the same as \\spad{divide(x,{} y).remainder}. See \\spadfunFrom{divide}{EuclideanDomain}."))
 (|quo|
  (($ $ $)
   "\\spad{x quo y} is the same as \\spad{divide(x,{} y).quotient}. See \\spadfunFrom{divide}{EuclideanDomain}."))
 (|divide|
  (((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $)
   "\\spad{divide(x,{} y)} divides \\spad{x} by \\spad{y} producing a record containing a \\spad{quotient} and \\spad{remainder},{} where the remainder is smaller (see \\spadfunFrom{sizeLess?}{EuclideanDomain}) than the divisor \\spad{y}."))
 (|euclideanSize|
  (((|NonNegativeInteger|) $)
   "\\spad{euclideanSize(x)} returns the euclidean size of the element \\spad{x}. Error: if \\spad{x} is zero."))
 (|sizeLess?|
  (((|Boolean|) $ $)
   "\\spad{sizeLess?(x,{} y)} tests whether \\spad{x} is strictly smaller than \\spad{y} with respect to the \\spadfunFrom{euclideanSize}{EuclideanDomain}.")))
(("documentation" 0 5023) ("ancestors" 0 4162) ("parents" 0 4129)
 ("abbreviation" 0 4122) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 1846) ("modemaps" 0 859) ("sourceFile" 0 821)
 ("constructorCategory" 0 151) ("constructorModemap" 0 92)
 ("constructorKind" 0 81) ("constructorForm" 0 61) ("NILADIC" 0 20))