)abbrev domain NNI NonNegativeInteger
++ Author:
++ Basic Operations:
++ Related Constructors:
++ Keywords: integer
++ Description: \spadtype{NonNegativeInteger} provides functions for non
++   negative integers.
NonNegativeInteger : Join(OrderedAbelianMonoidSup, SemiRing,
                          CommutativeStar, ConvertibleTo InputForm) with
            _quo : (%, %) -> %
              ++ a quo b returns the quotient of \spad{a} and b, forgetting
              ++ the remainder.
            _rem : (%, %) -> %
              ++ a rem b returns the remainder of \spad{a} and b.
            gcd  : (%, %) -> %
              ++ gcd(a, b) computes the greatest common divisor of two
              ++ non negative integers \spad{a} and b.
            divide : (%, %) -> Record(quotient : %, remainder : %)
              ++ divide(a, b) returns a record containing both
              ++ remainder and quotient.
            _exquo: (%,%) -> Union(%,"failed")
              ++ exquo(a,b) returns the quotient of \spad{a} and b, or "failed"
              ++ if b is zero or \spad{a} rem b is zero.
            shift : (%, Integer) -> %
              ++ shift(a, i) shift \spad{a} by i bits.
            random   : % -> %
              ++ random(n) returns a random integer from 0 to \spad{n-1}.
            qcoerce : Integer -> %
              ++ qcoerce(n) coerces \spad{n} to \spad{%} trusting that
              ++ \spad{n} is nonnegative

  == SubDomain(Integer, #1 >= 0) add
      x, y : %
      sup(x, y) == MAX(x, y)$Lisp
      shift(x : %, n : Integer) : % == ASH(x, n)$Lisp

      qcoerce(n) == n pretend %

      subtractIfCan(x, y) ==
        c : Integer := (x pretend Integer) - (y pretend Integer)
        c < 0 => "failed"
        c pretend %


