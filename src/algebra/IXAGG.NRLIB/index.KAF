8193                (|IndexedAggregate| |Index| |Entry|)
|category|
(((|IndexedAggregate| |#1| |#2|) (|Category|) (|Type|) (|Type|))
 (T |IndexedAggregate|))
(|Join| (|HomogeneousAggregate| |t#2|) (|EltableAggregate| |t#1| |t#2|)
        (CATEGORY |domain| (SIGNATURE |entries| ((|List| |t#2|) $))
         (SIGNATURE |index?| ((|Boolean|) |t#1| $))
         (SIGNATURE |indices| ((|List| |t#1|) $))
         (IF (|has| |t#2| (|BasicType|))
             (IF (|has| $ (|finiteAggregate|))
                 (SIGNATURE |entry?| ((|Boolean|) |t#2| $))
                 |noBranch|)
             |noBranch|)
         (IF (|has| |t#1| (|OrderedSet|))
             (PROGN
              (SIGNATURE |maxIndex| (|t#1| $))
              (SIGNATURE |minIndex| (|t#1| $))
              (SIGNATURE |first| (|t#2| $)))
             |noBranch|)
         (IF (|has| $ (|shallowlyMutable|))
             (PROGN
              (SIGNATURE |fill!| ($ $ |t#2|))
              (SIGNATURE |swap!| ((|Void|) $ |t#1| |t#1|)))
             |noBranch|)))
"/git/fricas/src/algebra/IXAGG.spad"
((|entries| (*1 *2 *1)
  (AND (|ofCategory| *1 (|IndexedAggregate| *3 *4)) (|ofCategory| *3 (|Type|))
       (|ofCategory| *4 (|Type|)) (|isDomain| *2 (|List| *4))))
 (|index?| (*1 *2 *3 *1)
  (AND (|ofCategory| *1 (|IndexedAggregate| *3 *4)) (|ofCategory| *3 (|Type|))
       (|ofCategory| *4 (|Type|)) (|isDomain| *2 (|Boolean|))))
 (|indices| (*1 *2 *1)
  (AND (|ofCategory| *1 (|IndexedAggregate| *3 *4)) (|ofCategory| *3 (|Type|))
       (|ofCategory| *4 (|Type|)) (|isDomain| *2 (|List| *3))))
 (|entry?| (*1 *2 *3 *1)
  (AND (|ofCategory| *1 (|finiteAggregate|))
       (|ofCategory| *1 (|IndexedAggregate| *4 *3)) (|ofCategory| *4 (|Type|))
       (|ofCategory| *3 (|Type|)) (|ofCategory| *3 (|BasicType|))
       (|isDomain| *2 (|Boolean|))))
 (|maxIndex| (*1 *2 *1)
  (AND (|ofCategory| *1 (|IndexedAggregate| *2 *3)) (|ofCategory| *3 (|Type|))
       (|ofCategory| *2 (|Type|)) (|ofCategory| *2 (|OrderedSet|))))
 (|minIndex| (*1 *2 *1)
  (AND (|ofCategory| *1 (|IndexedAggregate| *2 *3)) (|ofCategory| *3 (|Type|))
       (|ofCategory| *2 (|Type|)) (|ofCategory| *2 (|OrderedSet|))))
 (|first| (*1 *2 *1)
  (AND (|ofCategory| *1 (|IndexedAggregate| *3 *2)) (|ofCategory| *3 (|Type|))
       (|ofCategory| *3 (|OrderedSet|)) (|ofCategory| *2 (|Type|))))
 (|fill!| (*1 *1 *1 *2)
  (AND (|ofCategory| *1 (|shallowlyMutable|))
       (|ofCategory| *1 (|IndexedAggregate| *3 *2)) (|ofCategory| *3 (|Type|))
       (|ofCategory| *2 (|Type|))))
 (|swap!| (*1 *2 *1 *3 *3)
  (AND (|ofCategory| *1 (|shallowlyMutable|))
       (|ofCategory| *1 (|IndexedAggregate| *3 *4)) (|ofCategory| *3 (|Type|))
       (|ofCategory| *4 (|Type|)) (|isDomain| *2 (|Void|)))))
((~=
  (((|Boolean|) $ $) 6
   (OR (|has| |#2| (|SetCategory|))
       (AND (|has| |#2| (|BasicType|)) (|has| $ (|finiteAggregate|))))))
 (|swap!| (((|Void|) $ |#1| |#1|) 6 (|has| $ (|shallowlyMutable|))))
 (|size?| (((|Boolean|) $ (|NonNegativeInteger|)) 6))
 (|setelt!| ((|#2| $ |#1| |#2|) 6 (|has| $ (|shallowlyMutable|))))
 (|sample| (($) 6 T CONST))
 (|qsetelt!| ((|#2| $ |#1| |#2|) 6 (|has| $ (|shallowlyMutable|))))
 (|qelt| ((|#2| $ |#1|) 6))
 (|parts| (((|List| |#2|) $) 6 (|has| $ (|finiteAggregate|))))
 (|more?| (((|Boolean|) $ (|NonNegativeInteger|)) 6))
 (|minIndex| ((|#1| $) 6 (|has| |#1| (|OrderedSet|))))
 (|min|
  ((|#2| $) 6 (AND (|has| |#2| (|OrderedSet|)) (|has| $ (|finiteAggregate|)))))
 (|members| (((|List| |#2|) $) 6 (|has| $ (|finiteAggregate|))))
 (|member?|
  (((|Boolean|) |#2| $) 6
   (AND (|has| |#2| (|BasicType|)) (|has| $ (|finiteAggregate|)))))
 (|maxIndex| ((|#1| $) 6 (|has| |#1| (|OrderedSet|))))
 (|max|
  ((|#2| (|Mapping| (|Boolean|) |#2| |#2|) $) 6 (|has| $ (|finiteAggregate|)))
  ((|#2| $) 6 (AND (|has| |#2| (|OrderedSet|)) (|has| $ (|finiteAggregate|)))))
 (|map!| (($ (|Mapping| |#2| |#2|) $) 6 (|has| $ (|shallowlyMutable|))))
 (|map| (($ (|Mapping| |#2| |#2|) $) 6))
 (|less?| (((|Boolean|) $ (|NonNegativeInteger|)) 6))
 (|latex| (((|String|) $) 6 (|has| |#2| (|SetCategory|))))
 (|indices| (((|List| |#1|) $) 6)) (|index?| (((|Boolean|) |#1| $) 6))
 (|hashUpdate!|
  (((|HashState|) (|HashState|) $) 6 (|has| |#2| (|SetCategory|))))
 (|hash| (((|SingleInteger|) $) 6 (|has| |#2| (|SetCategory|))))
 (|first| ((|#2| $) 6 (|has| |#1| (|OrderedSet|))))
 (|fill!| (($ $ |#2|) 6 (|has| $ (|shallowlyMutable|))))
 (|every?|
  (((|Boolean|) (|Mapping| (|Boolean|) |#2|) $) 6
   (|has| $ (|finiteAggregate|))))
 (|eval|
  (($ $ (|List| (|Equation| |#2|))) 6
   (AND (|has| |#2| (|Evalable| |#2|)) (|has| |#2| (|SetCategory|))))
  (($ $ (|Equation| |#2|)) 6
   (AND (|has| |#2| (|Evalable| |#2|)) (|has| |#2| (|SetCategory|))))
  (($ $ |#2| |#2|) 6
   (AND (|has| |#2| (|Evalable| |#2|)) (|has| |#2| (|SetCategory|))))
  (($ $ (|List| |#2|) (|List| |#2|)) 6
   (AND (|has| |#2| (|Evalable| |#2|)) (|has| |#2| (|SetCategory|)))))
 (|eq?| (((|Boolean|) $ $) 6))
 (|entry?|
  (((|Boolean|) |#2| $) 6
   (AND (|has| $ (|finiteAggregate|)) (|has| |#2| (|BasicType|)))))
 (|entries| (((|List| |#2|) $) 6)) (|empty?| (((|Boolean|) $) 6))
 (|empty| (($) 6)) (|elt| ((|#2| $ |#1| |#2|) 6) ((|#2| $ |#1|) 6))
 (|count|
  (((|NonNegativeInteger|) (|Mapping| (|Boolean|) |#2|) $) 6
   (|has| $ (|finiteAggregate|)))
  (((|NonNegativeInteger|) |#2| $) 6
   (AND (|has| |#2| (|BasicType|)) (|has| $ (|finiteAggregate|)))))
 (|copy| (($ $) 6))
 (|coerce| (((|OutputForm|) $) 6 (|has| |#2| (|CoercibleTo| (|OutputForm|)))))
 (|any?|
  (((|Boolean|) (|Mapping| (|Boolean|) |#2|) $) 6
   (|has| $ (|finiteAggregate|))))
 (=
  (((|Boolean|) $ $) 6
   (OR (|has| |#2| (|SetCategory|))
       (AND (|has| |#2| (|BasicType|)) (|has| $ (|finiteAggregate|))))))
 (|#| (((|NonNegativeInteger|) $) 6 (|has| $ (|finiteAggregate|)))))
IXAGG
(((|HomogeneousAggregate| |#2|) . T) ((|EltableAggregate| |#1| |#2|) . T))
(((|Aggregate|) . T)
 ((|BasicType|) OR (|has| |t#1| (|SetCategory|))
  (AND (|has| $ (|finiteAggregate|)) (|has| |t#1| (|BasicType|))))
 ((|CoercibleTo| (|OutputForm|)) |has| |t#1| (|CoercibleTo| (|OutputForm|)))
 ((|Eltable| |t#1| |t#2|) . T) ((|EltableAggregate| |#1| |#2|) . T)
 ((|Evalable| |t#1|) AND (|has| |t#1| (|Evalable| |t#1|))
  (|has| |t#1| (|SetCategory|)))
 ((|HomogeneousAggregate| |#2|) . T)
 ((|InnerEvalable| |t#1| |t#1|) AND (|has| |t#1| (|Evalable| |t#1|))
  (|has| |t#1| (|SetCategory|)))
 ((|SetCategory|) |has| |t#1| (|SetCategory|)) ((|Type|) . T))
((|constructor|
  (NIL
   "An indexed aggregate is a many-to-one mapping of indices to entries. For example,{} a one-dimensional-array is an indexed aggregate where the index is an integer. Also,{} a table is an indexed aggregate where the indices and entries may have any type."))
 (|swap!|
  (((|Void|) $ |#1| |#1|)
   "\\spad{swap!(u,{} i,{} j)} interchanges elements \\spad{i} and \\spad{j} of aggregate \\spad{u}. No meaningful value is returned."))
 (|fill!|
  (($ $ |#2|)
   "\\spad{fill!(u,{} x)} replaces each entry in aggregate \\spad{u} by \\spad{x}. The modified \\spad{u} is returned as value."))
 (|first|
  ((|#2| $)
   "\\spad{first(u)} returns the first element \\spad{x} of \\spad{u}. Note: for collections,{} \\spad{first([x,{} y,{} ...,{} z]) = x}. Error: if \\spad{u} is empty."))
 (|minIndex|
  ((|#1| $)
   "\\spad{minIndex(u)} returns the minimum index \\spad{i} of aggregate \\spad{u}. Note: in general,{} \\spad{minIndex(a) = reduce(min,{} indices a)}; for List,{} \\spad{minIndex(a) = 1}."))
 (|maxIndex|
  ((|#1| $)
   "\\spad{maxIndex(u)} returns the maximum index \\spad{i} of aggregate \\spad{u}. Note: in general,{} \\spad{maxIndex(u) = reduce(max,{} indices u)}; for List,{} \\spad{maxIndex(u) = \\#u}."))
 (|entry?|
  (((|Boolean|) |#2| $)
   "\\spad{entry?(x,{} u)} tests if \\spad{x} equals \\spad{u . i} for some index \\spad{i}."))
 (|indices|
  (((|List| |#1|) $)
   "\\spad{indices(u)} returns a list of indices of aggregate \\spad{u} in no particular order."))
 (|index?|
  (((|Boolean|) |#1| $)
   "\\spad{index?(i,{} u)} tests if \\spad{i} is an index of aggregate \\spad{u}."))
 (|entries|
  (((|List| |#2|) $)
   "\\spad{entries(u)} returns a list of all the entries of aggregate \\spad{u} in no assumed order.")))
(("documentation" 0 6433) ("ancestors" 0 5858) ("parents" 0 5783)
 ("abbreviation" 0 5777) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 2726) ("modemaps" 0 1062) ("sourceFile" 0 1025)
 ("constructorCategory" 0 158) ("constructorModemap" 0 68)
 ("constructorKind" 0 57) ("constructorForm" 0 20))