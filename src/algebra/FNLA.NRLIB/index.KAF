3889                (|FreeNilpotentLie| |n| |class| R)
|domain|
(((|FreeNilpotentLie| |#1| |#2| |#3|)
  (|Join| (|NonAssociativeAlgebra| |#3|)
          (CATEGORY |domain| (SIGNATURE |dimension| ((|NonNegativeInteger|)))
           (SIGNATURE |deepExpand| ((|OutputForm|) $))
           (SIGNATURE |shallowExpand| ((|OutputForm|) $))
           (SIGNATURE |generator| ($ (|NonNegativeInteger|)))))
  (|NonNegativeInteger|) (|NonNegativeInteger|) (|CommutativeRing|))
 (T |FreeNilpotentLie|))
(|Join| (|NonAssociativeAlgebra| |#3|)
        (CATEGORY |domain| (SIGNATURE |dimension| ((|NonNegativeInteger|)))
         (SIGNATURE |deepExpand| ((|OutputForm|) $))
         (SIGNATURE |shallowExpand| ((|OutputForm|) $))
         (SIGNATURE |generator| ($ (|NonNegativeInteger|)))))
"/git/fricas/src/algebra/FNLA.spad"
((|dimension| (*1 *2)
  (AND (|isDomain| *2 (|NonNegativeInteger|))
       (|isDomain| *1 (|FreeNilpotentLie| *3 *4 *5)) (|ofType| *3 *2)
       (|ofType| *4 *2) (|ofCategory| *5 (|CommutativeRing|))))
 (|deepExpand| (*1 *2 *1)
  (AND (|isDomain| *2 (|OutputForm|))
       (|isDomain| *1 (|FreeNilpotentLie| *3 *4 *5))
       (|ofType| *3 (|NonNegativeInteger|))
       (|ofType| *4 (|NonNegativeInteger|))
       (|ofCategory| *5 (|CommutativeRing|))))
 (|shallowExpand| (*1 *2 *1)
  (AND (|isDomain| *2 (|OutputForm|))
       (|isDomain| *1 (|FreeNilpotentLie| *3 *4 *5))
       (|ofType| *3 (|NonNegativeInteger|))
       (|ofType| *4 (|NonNegativeInteger|))
       (|ofCategory| *5 (|CommutativeRing|))))
 (|generator| (*1 *1 *2)
  (AND (|isDomain| *2 (|NonNegativeInteger|))
       (|isDomain| *1 (|FreeNilpotentLie| *3 *4 *5)) (|ofType| *3 *2)
       (|ofType| *4 *2) (|ofCategory| *5 (|CommutativeRing|)))))
((~= (((|Boolean|) $ $) NIL)) (|zero?| (((|Boolean|) $) NIL))
 (|subtractIfCan| (((|Union| $ "failed") $ $) NIL))
 (|shallowExpand| (((|OutputForm|) $) 52)) (|sample| (($) NIL T CONST))
 (|rightPower| (($ $ (|PositiveInteger|)) NIL))
 (|plenaryPower| (($ $ (|PositiveInteger|)) NIL))
 (|opposite?| (((|Boolean|) $ $) NIL))
 (|leftPower| (($ $ (|PositiveInteger|)) NIL)) (|latex| (((|String|) $) NIL))
 (|hashUpdate!| (((|HashState|) (|HashState|) $) NIL))
 (|hash| (((|SingleInteger|) $) NIL))
 (|generator| (($ (|NonNegativeInteger|)) 29))
 (|dimension| (((|NonNegativeInteger|)) 15))
 (|deepExpand| (((|OutputForm|) $) 54)) (|commutator| (($ $ $) NIL))
 (|coerce| (((|OutputForm|) $) NIL)) (|associator| (($ $ $ $) NIL))
 (|antiCommutator| (($ $ $) NIL)) (^ (($ $ (|PositiveInteger|)) NIL))
 (|Zero| (($) 22 T CONST)) (= (((|Boolean|) $ $) 30))
 (- (($ $ $) 38) (($ $) 36)) (+ (($ $ $) 39))
 (* (($ (|PositiveInteger|) $) NIL) (($ $ $) 40) (($ (|Integer|) $) NIL)
    (($ (|NonNegativeInteger|) $) NIL) (($ $ |#3|) NIL) (($ |#3| $) 35)))
FNLA
(((|NonAssociativeAlgebra| |#3|) . T))
(((|AbelianGroup|) . T) ((|AbelianMonoid|) . T) ((|AbelianSemiGroup|) . T)
 ((|BasicType|) . T) ((|BiModule| |t#1| |t#1|) . T)
 ((|CancellationAbelianMonoid|) . T) ((|CoercibleTo| (|OutputForm|)) . T)
 ((|LeftModule| |t#1|) . T) ((|Magma|) . T) ((|Module| |t#1|) . T)
 ((|NonAssociativeAlgebra| |#3|) . T) ((|NonAssociativeRng|) . T)
 ((|NonAssociativeSemiRng|) . T) ((|RightModule| |t#2|) . T)
 ((|SetCategory|) . T))
((|constructor|
  (NIL
   "Generate the Free Lie Algebra over a ring \\spad{R} with identity; A \\spad{P}. Hall basis is generated by a package call to HallBasis."))
 (|generator|
  (($ (|NonNegativeInteger|))
   "\\spad{generator(i)} is the \\spad{i}th Hall Basis element"))
 (|shallowExpand|
  (((|OutputForm|) $)
   "\\spad{shallowExpand(x)} replaces elements of basis by commutators of other basis elements if possible."))
 (|deepExpand|
  (((|OutputForm|) $)
   "\\spad{deepExpand(x)} rewrites all terms of \\spad{x} as commutators of generators."))
 (|dimension|
  (((|NonNegativeInteger|))
   "\\spad{dimension()} is the rank of this Lie algebra")))
(("documentation" 0 3232) ("ancestors" 0 2813) ("parents" 0 2774)
 ("abbreviation" 0 2769) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 1729) ("modemaps" 0 814) ("sourceFile" 0 778)
 ("constructorCategory" 0 492) ("constructorModemap" 0 64)
 ("constructorKind" 0 55) ("constructorForm" 0 20))