9162                (|QuasiAlgebraicSet| R |Var| |Expon| |Dpoly|)
|domain|
(((|QuasiAlgebraicSet| |#1| |#2| |#3| |#4|)
  (|Join| (|SetCategory|)
          (CATEGORY |domain| (SIGNATURE |empty| ($))
           (SIGNATURE |quasiAlgebraicSet| ($ (|List| |#4|) |#4|))
           (SIGNATURE |status| ((|Union| (|Boolean|) #1="failed") $))
           (SIGNATURE |setStatus| ($ $ (|Union| (|Boolean|) #1#)))
           (SIGNATURE |empty?| ((|Boolean|) $))
           (SIGNATURE |definingEquations| ((|List| |#4|) $))
           (SIGNATURE |definingInequation| (|#4| $))
           (SIGNATURE |idealSimplify| ($ $))
           (IF (|has| |#1| (|PolynomialFactorizationExplicit|))
               (IF (|has| |#1| (|CharacteristicZero|))
                   (SIGNATURE |simplify| ($ $))
                   |noBranch|)
               |noBranch|)))
  (|GcdDomain|) (|OrderedSet|) (|OrderedAbelianMonoidSup|)
  (|PolynomialCategory| |#1| |#3| |#2|))
 (T |QuasiAlgebraicSet|))
(|Join| (|SetCategory|)
        (CATEGORY |domain| (SIGNATURE |empty| ($))
         (SIGNATURE |quasiAlgebraicSet| ($ (|List| |#4|) |#4|))
         (SIGNATURE |status| ((|Union| (|Boolean|) #1="failed") $))
         (SIGNATURE |setStatus| ($ $ (|Union| (|Boolean|) #1#)))
         (SIGNATURE |empty?| ((|Boolean|) $))
         (SIGNATURE |definingEquations| ((|List| |#4|) $))
         (SIGNATURE |definingInequation| (|#4| $))
         (SIGNATURE |idealSimplify| ($ $))
         (IF (|has| |#1| (|PolynomialFactorizationExplicit|))
             (IF (|has| |#1| (|CharacteristicZero|))
                 (SIGNATURE |simplify| ($ $))
                 |noBranch|)
             |noBranch|)))
"/git/fricas/src/algebra/QALGSET.spad"
((|empty| (*1 *1)
  (AND (|ofCategory| *2 (|GcdDomain|)) (|ofCategory| *3 (|OrderedSet|))
       (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|isDomain| *1 (|QuasiAlgebraicSet| *2 *3 *4 *5))
       (|ofCategory| *5 (|PolynomialCategory| *2 *4 *3))))
 (|quasiAlgebraicSet| (*1 *1 *2 *3)
  (AND (|isDomain| *2 (|List| *3))
       (|ofCategory| *3 (|PolynomialCategory| *4 *6 *5))
       (|ofCategory| *4 (|GcdDomain|)) (|ofCategory| *5 (|OrderedSet|))
       (|ofCategory| *6 (|OrderedAbelianMonoidSup|))
       (|isDomain| *1 (|QuasiAlgebraicSet| *4 *5 *6 *3))))
 (|status| (*1 *2 *1)
  (|partial| AND (|ofCategory| *3 (|GcdDomain|))
   (|ofCategory| *4 (|OrderedSet|))
   (|ofCategory| *5 (|OrderedAbelianMonoidSup|)) (|isDomain| *2 (|Boolean|))
   (|isDomain| *1 (|QuasiAlgebraicSet| *3 *4 *5 *6))
   (|ofCategory| *6 (|PolynomialCategory| *3 *5 *4))))
 (|setStatus| (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|Union| (|Boolean|) "failed"))
       (|ofCategory| *3 (|GcdDomain|)) (|ofCategory| *4 (|OrderedSet|))
       (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|isDomain| *1 (|QuasiAlgebraicSet| *3 *4 *5 *6))
       (|ofCategory| *6 (|PolynomialCategory| *3 *5 *4))))
 (|empty?| (*1 *2 *1)
  (AND (|ofCategory| *3 (|GcdDomain|)) (|ofCategory| *4 (|OrderedSet|))
       (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|isDomain| *2 (|Boolean|))
       (|isDomain| *1 (|QuasiAlgebraicSet| *3 *4 *5 *6))
       (|ofCategory| *6 (|PolynomialCategory| *3 *5 *4))))
 (|definingEquations| (*1 *2 *1)
  (AND (|ofCategory| *3 (|GcdDomain|)) (|ofCategory| *4 (|OrderedSet|))
       (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|isDomain| *2 (|List| *6))
       (|isDomain| *1 (|QuasiAlgebraicSet| *3 *4 *5 *6))
       (|ofCategory| *6 (|PolynomialCategory| *3 *5 *4))))
 (|definingInequation| (*1 *2 *1)
  (AND (|ofCategory| *2 (|PolynomialCategory| *3 *5 *4))
       (|isDomain| *1 (|QuasiAlgebraicSet| *3 *4 *5 *2))
       (|ofCategory| *3 (|GcdDomain|)) (|ofCategory| *4 (|OrderedSet|))
       (|ofCategory| *5 (|OrderedAbelianMonoidSup|))))
 (|idealSimplify| (*1 *1 *1)
  (AND (|ofCategory| *2 (|GcdDomain|)) (|ofCategory| *3 (|OrderedSet|))
       (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|isDomain| *1 (|QuasiAlgebraicSet| *2 *3 *4 *5))
       (|ofCategory| *5 (|PolynomialCategory| *2 *4 *3))))
 (|simplify| (*1 *1 *1)
  (AND (|ofCategory| *2 (|CharacteristicZero|))
       (|ofCategory| *2 (|PolynomialFactorizationExplicit|))
       (|ofCategory| *2 (|GcdDomain|)) (|ofCategory| *3 (|OrderedSet|))
       (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|isDomain| *1 (|QuasiAlgebraicSet| *2 *3 *4 *5))
       (|ofCategory| *5 (|PolynomialCategory| *2 *4 *3)))))
((~= (((|Boolean|) $ $) NIL))
 (|status| (((|Union| (|Boolean|) #1="failed") $) 71))
 (|simplify|
  (($ $) 36
   (AND (|has| |#1| (|CharacteristicZero|))
        (|has| |#1| (|PolynomialFactorizationExplicit|)))))
 (|setStatus| (($ $ (|Union| (|Boolean|) #1#)) 72))
 (|quasiAlgebraicSet| (($ (|List| |#4|) |#4|) 25))
 (|latex| (((|String|) $) NIL)) (|idealSimplify| (($ $) 69))
 (|hashUpdate!| (((|HashState|) (|HashState|) $) NIL))
 (|hash| (((|SingleInteger|) $) NIL)) (|empty?| (((|Boolean|) $) 70))
 (|empty| (($) 30)) (|definingInequation| ((|#4| $) 74))
 (|definingEquations| (((|List| |#4|) $) 73))
 (|coerce| (((|OutputForm|) $) 68)) (= (((|Boolean|) $ $) NIL)))
((AND (|HasCategory| |#1| '(|CharacteristicZero|))
      (|HasCategory| |#1| '(|PolynomialFactorizationExplicit|))))
QALGSET
(((|SetCategory|) . T))
(((|BasicType|) . T) ((|CoercibleTo| (|OutputForm|)) . T) ((|SetCategory|) . T))
((|constructor|
  (NIL
   "\\spadtype{QuasiAlgebraicSet} constructs a domain representing quasi-algebraic sets,{} which is the intersection of a Zariski closed set,{} defined as the common zeros of a given list of polynomials (the defining polynomials for equations),{} and a principal Zariski open set,{} defined as the complement of the common zeros of a polynomial \\spad{f} (the defining polynomial for the inequation). This domain provides simplification of a user-given representation using groebner basis computations. There are two simplification routines: the first function \\spadfun{idealSimplify} uses groebner basis of ideals alone,{} while the second,{} \\spadfun{simplify} uses both groebner basis and factorization. The resulting defining equations \\spad{L} always form a groebner basis,{} and the resulting defining inequation \\spad{f} is always reduced. The function \\spadfun{simplify} may be applied several times if desired. A third simplification routine \\spadfun{radicalSimplify} is provided in \\spadtype{QuasiAlgebraicSet2} for comparison study only,{} as it is inefficient compared to the other two,{} as well as is restricted to only certain coefficient domains. For detail analysis and a comparison of the three methods,{} please consult the reference cited. \\blankline A polynomial function \\spad{q} defined on the quasi-algebraic set is equivalent to its reduced form with respect to \\spad{L}. While this may be obtained using the usual normal form algorithm,{} there is no canonical form for \\spad{q}. \\blankline The ordering in groebner basis computation is determined by the data type of the input polynomials. If it is possible we suggest to use refinements of total degree orderings."))
 (|simplify|
  (($ $)
   "\\spad{simplify(s)} returns a different and presumably simpler representation of \\spad{s} with the defining polynomials for the equations forming a groebner basis,{} and the defining polynomial for the inequation reduced with respect to the basis,{} using a heuristic algorithm based on factoring."))
 (|idealSimplify|
  (($ $)
   "\\spad{idealSimplify(s)} returns a different and presumably simpler representation of \\spad{s} with the defining polynomials for the equations forming a groebner basis,{} and the defining polynomial for the inequation reduced with respect to the basis,{} using Buchberger\\spad{'s} algorithm."))
 (|definingInequation|
  ((|#4| $)
   "\\spad{definingInequation(s)} returns a single defining polynomial for the inequation,{} that is,{} the Zariski open part of \\spad{s}."))
 (|definingEquations|
  (((|List| |#4|) $)
   "\\spad{definingEquations(s)} returns a list of defining polynomials for equations,{} that is,{} for the Zariski closed part of \\spad{s}."))
 (|empty?|
  (((|Boolean|) $)
   "\\spad{empty?(s)} returns \\spad{true} if the quasialgebraic set \\spad{s} has no points,{} and \\spad{false} otherwise."))
 (|setStatus|
  (($ $ (|Union| (|Boolean|) #1="failed"))
   "\\spad{setStatus(s,{} t)} returns the same representation for \\spad{s},{} but asserts the following: if \\spad{t} is \\spad{true},{} then \\spad{s} is empty,{} if \\spad{t} is \\spad{false},{} then \\spad{s} is non-empty,{} and if \\spad{t} = \"failed\",{} then no assertion is made (that is,{} \"don\\spad{'t} know\"). Note: for internal use only,{} with care."))
 (|status|
  (((|Union| (|Boolean|) #1#) $)
   "\\spad{status(s)} returns \\spad{true} if the quasi-algebraic set is empty,{} \\spad{false} if it is not,{} and \"failed\" if not yet known"))
 (|quasiAlgebraicSet|
  (($ (|List| |#4|) |#4|)
   "\\spad{quasiAlgebraicSet(pl,{} q)} returns the quasi-algebraic set with defining equations \\spad{p} = 0 for \\spad{p} belonging to the list \\spad{pl},{} and defining inequation \\spad{q} \\spad{~=} 0."))
 (|empty| (($) "\\spad{empty()} returns the empty quasi-algebraic set")))
(("documentation" 0 5302) ("ancestors" 0 5221) ("parents" 0 5197)
 ("abbreviation" 0 5189) ("predicates" 0 5072) ("superDomain" 0 NIL)
 ("operationAlist" 0 4401) ("modemaps" 0 1688) ("sourceFile" 0 1649)
 ("constructorCategory" 0 961) ("constructorModemap" 0 75)
 ("constructorKind" 0 66) ("constructorForm" 0 20))