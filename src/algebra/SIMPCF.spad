)abbrev package SIMPCF SimplicialComplexFactory
++ Author: Martin Baker
++ Date Created: Jan 2016
++ Description:
++  Provides functions to construct various simplicial complexes.
PI ==> PositiveInteger
NNI==> NonNegativeInteger
x<<y ==> hconcat(x::OutputForm, y::OutputForm)

SimplicialComplexFactory(VS : AbelianGroup) : with
  sphereSolid : (dim : NNI) -> FiniteSimplicialComplex(VS)
    ++ Generate a simplicial complex equivalent to a solid hyper-sphere.
    ++ That is, a solid volume with no holes in it, so we use a single
    ++ n-dimensional simplex.
  sphereSurface : (dim : NNI) -> FiniteSimplicialComplex(VS)
    ++ Generate a simplicial complex equivalent to the surface of a
    ++ hyper-sphere. That is, the surface of a volume with no holes
    ++ in it, so we use a minimal triangulation of the faces of a
    ++ single simplex.
  line : () -> FiniteSimplicialComplex(VS)
    ++ create a simplicial complex containing a line.
  torusSurface : () -> FiniteSimplicialComplex(VS)
    ++ generate a minimal triangulation of the surface of a
    ++ 3-dimensional torus.
  band : () -> FiniteSimplicialComplex(VS)
    ++ Generate a minimal triangulation of the surface of a cylinder
    ++ without ends
  moebiusBand : () -> FiniteSimplicialComplex(VS)
    ++ Generate a minimal triangulation of the surface of a Moebius band.
    ++ A one sided surface with a single external boundary line.
  projectiveSpace : (n : Integer) -> FiniteSimplicialComplex(VS)
    ++ Generate a minimal triangulation of the surface of a projective plane.
    ++ A one sided surface which cannot be embedded in 3D space without
    ++ intersecting itself. There are no external boundaries, every edge
    ++ connects two faces.
    ++ (A punctured projective plane is equivalent to a Moebius band)
  kleinBottle : () -> FiniteSimplicialComplex(VS)
    ++ generate a minimal triangulation of the surface of a Klein bottle.
  dunceHat : () -> FiniteSimplicialComplex(VS)
    ++ Generate a minimal triangulation of dunce hat.

 == add

  ASIMP ==> FiniteSimplicialComplex(VS)

  -- generate a simplicial complex equivalent to a solid hyper-sphere.
  -- That is, a solid volume with no holes in it, so we use a single
  -- n-dimensional simplex.
  sphereSolid(dim : NNI) : ASIMP ==
      v1 : List(List(NNI)) := [[n for n in 1..(dim + 1)]]
      vs1 : List(VS) := []
      simplicialComplex(vs1, v1)$ASIMP

  -- generate a simplicial complex equivalent to the surface of a
  -- hyper-sphere. That is, the surface of a volume with no holes in
  -- it, so we use a minimal triangulation of the faces of a single
  -- simplex.
  sphereSurface(dim : NNI) : ASIMP ==
      s := sphereSolid(dim)
      boundary(s)

  -- create a simplicial complex containing a line
  line() : ASIMP ==
      v1 : List(List(NNI)) := ([[1, 2]])
      vs1 : List(VS) := []
      simplicialComplex(vs1, v1)$ASIMP

  -- generate a minimal triangulation of the surface of a
  -- 3-dimensional torus.
  torusSurface() : ASIMP ==
      v1 : List(List(NNI)) := ([[1, 2, 3], [2, 3, 5], [2, 4, 5], [2, 4, 7],
         [1, 2, 6], [2, 6, 7], [3, 4, 6], [3, 5, 6], [3, 4, 7], [1, 3, 7],
         [1, 4, 5], [1, 4, 6], [5, 6, 7], [1, 5, 7]])
      vs1 : List(VS) := [] --  7
      simplicialComplex(vs1, v1)$ASIMP

  -- generate a minimal triangulation of the surface of a cylinder
  -- without ends
  band() : ASIMP ==
      v1 : List(List(NNI)) := ([[1, 2, 3], [1, 2, 6], [1, 5, 6],
                               [2, 3, 4], [3, 4, 5], [4, 5, 6]])
      vs1 : List(VS) := [] -- = 6
      simplicialComplex(vs1, v1)$ASIMP

  -- generate a minimal triangulation of the surface of a Moebius band.
  moebiusBand() : ASIMP ==
      v1 : List(List(NNI)) := ([[1, 2, 3], [2, 3, 4], [3, 4, 5],
                               [1, 4, 5], [1, 2, 5]])
      vs1 : List(VS) := [] -- 5
      simplicialComplex(vs1, v1)$ASIMP

  -- generate a minimal triangulation of the surface of a projective plane.
  -- (A punctured projective plane is equivalent to a Moebius band)
  projectiveSpace(n : Integer) : ASIMP ==
      v1 : List(List(NNI)) := ([[1, 2, 3], [1, 3, 4], [1, 2, 6], [1, 5, 6],
         [1, 4, 5], [2, 3, 5], [2, 4, 5], [2, 4, 6], [3, 4, 6], [3, 5, 6]])
      vs1 : List(VS) := [] -- 6
      simplicialComplex(vs1, v1)$ASIMP

  -- generate a minimal triangulation of the surface of a Klein bottle.
  kleinBottle() : ASIMP ==
      v1 : List(List(NNI)) := ([[3, 4, 8], [2, 3, 4], [2, 4, 6], [2, 6, 8],
         [2, 5, 8], [3, 5, 7], [2, 3, 7], [2, 7, 1], [2, 5, 1], [3, 5, 1],
         [4, 5, 8], [4, 5, 7], [4, 6, 7], [6, 7, 1], [3, 6, 1], [3, 6, 8]])
      vs1 : List(VS) := [] -- 8
      simplicialComplex(vs1, v1)$ASIMP

  dunceHat() : ASIMP ==
      v1 : List(List(NNI)) := ([[1, 2, 8], [2, 3, 8], [3, 7, 8], [1 ,3, 7],
         [1, 2, 7], [1, 6, 8], [1, 2, 6], [6, 7, 8], [2, 4, 6], [5, 6, 7],
         [2, 5, 7], [4, 5, 6], [2, 3, 4], [2, 3, 5], [1, 3, 4], [1, 4, 5],
         [1, 3, 5]])
      vs1 : List(VS) := [] -- 8
      simplicialComplex(vs1, v1)$ASIMP

)if false
\section{DeltaComplex Factory}

DeltaComplexFactory constructs example delta complexes for us.

These can be smaller than DeltaComplexes constructed from SimplicialComplexes.
)endif

