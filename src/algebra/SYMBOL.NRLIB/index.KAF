10649               (MAKEPROP '|Symbol| 'NILADIC T)
(|Symbol|)
|domain|
(((|Symbol|)
  (|Join| (|OrderedSet|) (|ConvertibleTo| (|InputForm|)) (|OpenMath|)
          (|ConvertibleTo| (|Symbol|))
          (|ConvertibleTo| (|Pattern| (|Integer|)))
          (|ConvertibleTo| (|Pattern| (|Float|)))
          (|PatternMatchable| (|Integer|)) (|PatternMatchable| (|Float|))
          (CATEGORY |domain| (SIGNATURE |new| ($)) (SIGNATURE |new| ($ $))
           (SIGNATURE |resetNew| ((|Void|)))
           (SIGNATURE |coerce| ($ (|String|))) (SIGNATURE |name| ($ $))
           (SIGNATURE |scripted?| ((|Boolean|) $))
           (SIGNATURE |scripts|
            ((|Record| (|:| |sub| (|List| (|OutputForm|)))
                       (|:| |sup| (|List| (|OutputForm|)))
                       (|:| |presup| (|List| (|OutputForm|)))
                       (|:| |presub| (|List| (|OutputForm|)))
                       (|:| |args| (|List| (|OutputForm|))))
             $))
           (SIGNATURE |script| ($ $ (|List| (|List| (|OutputForm|)))))
           (SIGNATURE |script|
            ($ $
             (|Record| (|:| |sub| (|List| (|OutputForm|)))
                       (|:| |sup| (|List| (|OutputForm|)))
                       (|:| |presup| (|List| (|OutputForm|)))
                       (|:| |presub| (|List| (|OutputForm|)))
                       (|:| |args| (|List| (|OutputForm|))))))
           (SIGNATURE |subscript| ($ $ (|List| (|OutputForm|))))
           (SIGNATURE |superscript| ($ $ (|List| (|OutputForm|))))
           (SIGNATURE |argscript| ($ $ (|List| (|OutputForm|))))
           (SIGNATURE |elt| ($ $ (|List| (|OutputForm|))))
           (SIGNATURE |string| ((|String|) $))
           (SIGNATURE |sample| ($) |constant|))))
 (T |Symbol|))
(|Join| (|OrderedSet|) (|ConvertibleTo| (|InputForm|)) (|OpenMath|)
        (|ConvertibleTo| (|Symbol|)) (|ConvertibleTo| (|Pattern| (|Integer|)))
        (|ConvertibleTo| (|Pattern| (|Float|)))
        (|PatternMatchable| (|Integer|)) (|PatternMatchable| (|Float|))
        (CATEGORY |domain| (SIGNATURE |new| ($)) (SIGNATURE |new| ($ $))
         (SIGNATURE |resetNew| ((|Void|))) (SIGNATURE |coerce| ($ (|String|)))
         (SIGNATURE |name| ($ $)) (SIGNATURE |scripted?| ((|Boolean|) $))
         (SIGNATURE |scripts|
          ((|Record| (|:| |sub| (|List| (|OutputForm|)))
                     (|:| |sup| (|List| (|OutputForm|)))
                     (|:| |presup| (|List| (|OutputForm|)))
                     (|:| |presub| (|List| (|OutputForm|)))
                     (|:| |args| (|List| (|OutputForm|))))
           $))
         (SIGNATURE |script| ($ $ (|List| (|List| (|OutputForm|)))))
         (SIGNATURE |script|
          ($ $
           (|Record| (|:| |sub| (|List| (|OutputForm|)))
                     (|:| |sup| (|List| (|OutputForm|)))
                     (|:| |presup| (|List| (|OutputForm|)))
                     (|:| |presub| (|List| (|OutputForm|)))
                     (|:| |args| (|List| (|OutputForm|))))))
         (SIGNATURE |subscript| ($ $ (|List| (|OutputForm|))))
         (SIGNATURE |superscript| ($ $ (|List| (|OutputForm|))))
         (SIGNATURE |argscript| ($ $ (|List| (|OutputForm|))))
         (SIGNATURE |elt| ($ $ (|List| (|OutputForm|))))
         (SIGNATURE |string| ((|String|) $))
         (SIGNATURE |sample| ($) |constant|)))
"/git/fricas/src/algebra/SYMBOL.spad"
((|new| (*1 *1) (|isDomain| *1 (|Symbol|)))
 (|new| (*1 *1 *1) (|isDomain| *1 (|Symbol|)))
 (|resetNew| (*1 *2) (AND (|isDomain| *2 (|Void|)) (|isDomain| *1 (|Symbol|))))
 (|coerce| (*1 *1 *2)
           (AND (|isDomain| *2 (|String|)) (|isDomain| *1 (|Symbol|))))
 (|name| (*1 *1 *1) (|isDomain| *1 (|Symbol|)))
 (|scripted?| (*1 *2 *1)
  (AND (|isDomain| *2 (|Boolean|)) (|isDomain| *1 (|Symbol|))))
 (|scripts| (*1 *2 *1)
  (AND
   (|isDomain| *2
               (|Record| (|:| |sub| (|List| (|OutputForm|)))
                         (|:| |sup| (|List| (|OutputForm|)))
                         (|:| |presup| (|List| (|OutputForm|)))
                         (|:| |presub| (|List| (|OutputForm|)))
                         (|:| |args| (|List| (|OutputForm|)))))
   (|isDomain| *1 (|Symbol|))))
 (|script| (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|List| (|List| (|OutputForm|))))
       (|isDomain| *1 (|Symbol|))))
 (|script| (*1 *1 *1 *2)
  (AND
   (|isDomain| *2
               (|Record| (|:| |sub| (|List| (|OutputForm|)))
                         (|:| |sup| (|List| (|OutputForm|)))
                         (|:| |presup| (|List| (|OutputForm|)))
                         (|:| |presub| (|List| (|OutputForm|)))
                         (|:| |args| (|List| (|OutputForm|)))))
   (|isDomain| *1 (|Symbol|))))
 (|subscript| (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|List| (|OutputForm|))) (|isDomain| *1 (|Symbol|))))
 (|superscript| (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|List| (|OutputForm|))) (|isDomain| *1 (|Symbol|))))
 (|argscript| (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|List| (|OutputForm|))) (|isDomain| *1 (|Symbol|))))
 (|elt| (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|List| (|OutputForm|))) (|isDomain| *1 (|Symbol|))))
 (|string| (*1 *2 *1)
  (AND (|isDomain| *2 (|String|)) (|isDomain| *1 (|Symbol|))))
 (|sample| (*1 *1) (|isDomain| *1 (|Symbol|))))
((~= (((|Boolean|) $ $) NIL))
 (|superscript| (($ $ (|List| (|OutputForm|))) 57))
 (|subscript| (($ $ (|List| (|OutputForm|))) 55))
 (|string| (((|String|) $) 78)) (|smaller?| (((|Boolean|) $ $) NIL))
 (|scripts|
  (((|Record| (|:| |sub| (|List| (|OutputForm|)))
              (|:| |sup| (|List| (|OutputForm|)))
              (|:| |presup| (|List| (|OutputForm|)))
              (|:| |presub| (|List| (|OutputForm|)))
              (|:| |args| (|List| (|OutputForm|))))
    $)
   45))
 (|scripted?| (((|Boolean|) $) 21))
 (|script| (($ $ (|List| (|List| (|OutputForm|)))) 53)
  (($ $
    (|Record| (|:| |sub| (|List| (|OutputForm|)))
              (|:| |sup| (|List| (|OutputForm|)))
              (|:| |presup| (|List| (|OutputForm|)))
              (|:| |presub| (|List| (|OutputForm|)))
              (|:| |args| (|List| (|OutputForm|)))))
   77))
 (|sample| (($) 115 T CONST)) (|resetNew| (((|Void|)) 101))
 (|patternMatch|
  (((|PatternMatchResult| (|Integer|) $) $ (|Pattern| (|Integer|))
    (|PatternMatchResult| (|Integer|) $))
   64)
  (((|PatternMatchResult| (|Float|) $) $ (|Pattern| (|Float|))
    (|PatternMatchResult| (|Float|) $))
   70))
 (|new| (($) 90) (($ $) 96)) (|name| (($ $) 48)) (|min| (($ $ $) NIL))
 (|max| (($ $ $) NIL)) (|latex| (((|String|) $) 85))
 (|hashUpdate!| (((|HashState|) (|HashState|) $) 40))
 (|hash| (((|SingleInteger|) $) NIL))
 (|elt| (($ $ (|List| (|OutputForm|))) 56))
 (|convert| (((|InputForm|) $) 34) (((|Symbol|) $) 35)
            (((|Pattern| (|Integer|)) $) 74) (((|Pattern| (|Float|)) $) 72))
 (|coerce| (((|OutputForm|) $) 51) (($ (|String|)) 37))
 (|argscript| (($ $ (|List| (|OutputForm|))) 58))
 (|OMwrite| (((|String|) $) NIL) (((|String|) $ (|Boolean|)) NIL)
  (((|Void|) (|OpenMathDevice|) $) NIL)
  (((|Void|) (|OpenMathDevice|) $ (|Boolean|)) 28))
 (>= (((|Boolean|) $ $) NIL)) (> (((|Boolean|) $ $) NIL))
 (= (((|Boolean|) $ $) 38)) (<= (((|Boolean|) $ $) NIL))
 (< (((|Boolean|) $ $) 41)))
SYMBOL
(((|OrderedSet|) . T) ((|ConvertibleTo| (|InputForm|)) . T) ((|OpenMath|) . T)
 ((|ConvertibleTo| (|Symbol|)) . T)
 ((|ConvertibleTo| (|Pattern| (|Integer|))) . T)
 ((|ConvertibleTo| (|Pattern| (|Float|))) . T)
 ((|PatternMatchable| (|Integer|)) . T) ((|PatternMatchable| (|Float|)) . T))
(((|BasicType|) . T) ((|CoercibleTo| (|OutputForm|)) . T) ((|Comparable|) . T)
 ((|ConvertibleTo| (|Pattern| (|Float|))) . T)
 ((|ConvertibleTo| (|Pattern| (|Integer|))) . T)
 ((|ConvertibleTo| (|Symbol|)) . T) ((|ConvertibleTo| (|InputForm|)) . T)
 ((|OpenMath|) . T) ((|OrderedSet|) . T) ((|PartialOrder|) . T)
 ((|PatternMatchable| (|Float|)) . T) ((|PatternMatchable| (|Integer|)) . T)
 ((|SetCategory|) . T))
((|constructor| (NIL "Basic and scripted symbols."))
 (|sample| (($) "\\spad{sample()} returns a sample of \\%"))
 (|string|
  (((|String|) $)
   "\\spad{string(s)} converts the symbol \\spad{s} to a string. Error: if the symbol is subscripted."))
 (|elt|
  (($ $ (|List| (|OutputForm|)))
   "\\spad{elt(s,{} [a1,{} ...,{} an])} or \\spad{s}([\\spad{a1},{} ...,{} an]) returns \\spad{s} subscripted by \\spad{[a1,{} ...,{} an]}."))
 (|argscript|
  (($ $ (|List| (|OutputForm|)))
   "\\spad{argscript(s,{} [a1,{} ...,{} an])} returns \\spad{s} arg-scripted by \\spad{[a1,{} ...,{} an]}."))
 (|superscript|
  (($ $ (|List| (|OutputForm|)))
   "\\spad{superscript(s,{} [a1,{} ...,{} an])} returns \\spad{s} superscripted by \\spad{[a1,{} ...,{} an]}."))
 (|subscript|
  (($ $ (|List| (|OutputForm|)))
   "\\spad{subscript(s,{} [a1,{} ...,{} an])} returns \\spad{s} subscripted by \\spad{[a1,{} ...,{} an]}."))
 (|script|
  (($ $
    (|Record| (|:| |sub| (|List| (|OutputForm|)))
              (|:| |sup| (|List| (|OutputForm|)))
              (|:| |presup| (|List| (|OutputForm|)))
              (|:| |presub| (|List| (|OutputForm|)))
              (|:| |args| (|List| (|OutputForm|)))))
   "\\spad{script(s,{} [a,{} b,{} c,{} d,{} e])} returns \\spad{s} with subscripts a,{} superscripts \\spad{b},{} pre-superscripts \\spad{c},{} pre-subscripts \\spad{d},{} and argument-scripts \\spad{e}.")
  (($ $ (|List| (|List| (|OutputForm|))))
   "\\spad{script(s,{} [a,{} b,{} c,{} d,{} e])} returns \\spad{s} with subscripts a,{} superscripts \\spad{b},{} pre-superscripts \\spad{c},{} pre-subscripts \\spad{d},{} and argument-scripts \\spad{e}. Omitted components are taken to be empty. For example,{} \\spad{script(s,{} [a,{} b,{} c])} is equivalent to \\spad{script(s,{} [a,{} b,{} c,{} [],{} []])}."))
 (|scripts|
  (((|Record| (|:| |sub| (|List| (|OutputForm|)))
              (|:| |sup| (|List| (|OutputForm|)))
              (|:| |presup| (|List| (|OutputForm|)))
              (|:| |presub| (|List| (|OutputForm|)))
              (|:| |args| (|List| (|OutputForm|))))
    $)
   "\\spad{scripts(s)} returns all the scripts of \\spad{s}."))
 (|scripted?|
  (((|Boolean|) $)
   "\\spad{scripted?(s)} is \\spad{true} if \\spad{s} has been given any scripts."))
 (|name| (($ $) "\\spad{name(s)} returns \\spad{s} without its scripts."))
 (|coerce|
  (($ (|String|))
   "\\spad{coerce(s)} converts the string \\spad{s} to a symbol."))
 (|resetNew|
  (((|Void|))
   "\\spad{resetNew()} resets the internals counters that new() and new(\\spad{s}) use to return distinct symbols every time."))
 (|new|
  (($ $)
   "\\spad{new(s)} returns a new symbol whose name starts with \\%\\spad{s}.")
  (($) "\\spad{new()} returns a new symbol whose name starts with \\%.")))
(("documentation" 0 7894) ("ancestors" 0 7480) ("parents" 0 7191)
 ("abbreviation" 0 7184) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 5228) ("modemaps" 0 3374) ("sourceFile" 0 3336)
 ("constructorCategory" 0 1757) ("constructorModemap" 0 72)
 ("constructorKind" 0 63) ("constructorForm" 0 52) ("NILADIC" 0 20))