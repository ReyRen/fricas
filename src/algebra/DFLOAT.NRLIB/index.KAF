15805               (MAKEPROP '|DoubleFloat| 'NILADIC T)
(|DoubleFloat|)
|domain|
(((|DoubleFloat|)
  (|Join| (|FloatingPointSystem|) (|DifferentialRing|) (|OpenMath|)
          (|TranscendentalFunctionCategory|) (|SpecialFunctionCategory|)
          (|ConvertibleTo| (|InputForm|))
          (CATEGORY |domain| (SIGNATURE |exp1| ($)) (SIGNATURE |log2| ($ $))
           (SIGNATURE |log10| ($ $)) (SIGNATURE |atan| ($ $ $))
           (SIGNATURE |qlog| ($ $)) (SIGNATURE |qsqrt| ($ $))
           (SIGNATURE |doubleFloatFormat| ((|String|) (|String|)))
           (SIGNATURE |rationalApproximation|
            ((|Fraction| (|Integer|)) $ (|NonNegativeInteger|)))
           (SIGNATURE |rationalApproximation|
            ((|Fraction| (|Integer|)) $ (|NonNegativeInteger|)
             (|NonNegativeInteger|))))))
 (T |DoubleFloat|))
(|Join| (|FloatingPointSystem|) (|DifferentialRing|) (|OpenMath|)
        (|TranscendentalFunctionCategory|) (|SpecialFunctionCategory|)
        (|ConvertibleTo| (|InputForm|))
        (CATEGORY |domain| (SIGNATURE |exp1| ($)) (SIGNATURE |log2| ($ $))
         (SIGNATURE |log10| ($ $)) (SIGNATURE |atan| ($ $ $))
         (SIGNATURE |qlog| ($ $)) (SIGNATURE |qsqrt| ($ $))
         (SIGNATURE |doubleFloatFormat| ((|String|) (|String|)))
         (SIGNATURE |rationalApproximation|
          ((|Fraction| (|Integer|)) $ (|NonNegativeInteger|)))
         (SIGNATURE |rationalApproximation|
          ((|Fraction| (|Integer|)) $ (|NonNegativeInteger|)
           (|NonNegativeInteger|)))))
"/git/fricas/src/algebra/DFLOAT.spad"
((|exp1| (*1 *1) (|isDomain| *1 (|DoubleFloat|)))
 (|log2| (*1 *1 *1) (|isDomain| *1 (|DoubleFloat|)))
 (|log10| (*1 *1 *1) (|isDomain| *1 (|DoubleFloat|)))
 (|atan| (*1 *1 *1 *1) (|isDomain| *1 (|DoubleFloat|)))
 (|qlog| (*1 *1 *1) (|isDomain| *1 (|DoubleFloat|)))
 (|qsqrt| (*1 *1 *1) (|isDomain| *1 (|DoubleFloat|)))
 (|doubleFloatFormat| (*1 *2 *2)
  (AND (|isDomain| *2 (|String|)) (|isDomain| *1 (|DoubleFloat|))))
 (|rationalApproximation| (*1 *2 *1 *3)
  (AND (|isDomain| *3 (|NonNegativeInteger|))
       (|isDomain| *2 (|Fraction| (|Integer|)))
       (|isDomain| *1 (|DoubleFloat|))))
 (|rationalApproximation| (*1 *2 *1 *3 *3)
  (AND (|isDomain| *3 (|NonNegativeInteger|))
       (|isDomain| *2 (|Fraction| (|Integer|)))
       (|isDomain| *1 (|DoubleFloat|)))))
((~= (((|Boolean|) $ $) NIL)) (|zero?| (((|Boolean|) $) 88))
 (|wholePart| (((|Integer|) $) 148)) (|whittakerW| (($ $ $ $) NIL))
 (|whittakerM| (($ $ $ $) NIL)) (|weierstrassZeta| (($ $ $ $) NIL))
 (|weierstrassSigma| (($ $ $ $) NIL)) (|weierstrassPPrime| (($ $ $ $) 147))
 (|weierstrassPInverse| (($ $ $ $) NIL)) (|weierstrassP| (($ $ $ $) 145))
 (|weberE| (($ $ $) NIL))
 (|unitNormal|
  (((|Record| (|:| |unit| $) (|:| |canonical| $) (|:| |associate| $)) $) NIL))
 (|unitCanonical| (($ $) NIL)) (|unit?| (((|Boolean|) $) NIL))
 (|truncate| (($ $) NIL))
 (|toString| (((|String|) $) NIL) (((|String|) $ (|NonNegativeInteger|)) NIL))
 (|tanh| (($ $) 76)) (|tan| (($ $) 63))
 (|subtractIfCan| (((|Union| $ "failed") $ $) NIL)) (|struveL| (($ $ $) NIL))
 (|struveH| (($ $ $) NIL)) (|squareFreePart| (($ $) NIL))
 (|squareFree| (((|Factored| $) $) NIL)) (|sqrt| (($ $) 52))
 (|smaller?| (((|Boolean|) $ $) NIL)) (|sizeLess?| (((|Boolean|) $ $) NIL))
 (|sinh| (($ $) 74)) (|sin| (($ $) 61)) (|sign| (((|Integer|) $) 163))
 (|sech| (($ $) 79)) (|sec| (($ $) 65)) (|sample| (($) NIL T CONST))
 (|round| (($ $) NIL)) (|rightRecip| (((|Union| $ #1="failed") $) NIL))
 (|rightPower| (($ $ (|PositiveInteger|)) NIL)
  (($ $ (|NonNegativeInteger|)) NIL))
 (|riemannZeta| (($ $) NIL))
 (|retractIfCan| (((|Union| (|Integer|) #2="failed") $) 162)
  (((|Union| (|Fraction| (|Integer|)) #2#) $) 160))
 (|retract| (((|Integer|) $) 161) (((|Fraction| (|Integer|)) $) 158))
 (|rem| (($ $ $) NIL)) (|recip| (((|Union| $ #1#) $) 92))
 (|rationalApproximation|
  (((|Fraction| (|Integer|)) $ (|NonNegativeInteger|)) 154)
  (((|Fraction| (|Integer|)) $ (|NonNegativeInteger|) (|NonNegativeInteger|))
   153))
 (|quo| (($ $ $) NIL)) (|qsqrt| (($ $) 53)) (|qlog| (($ $) 60))
 (|principalIdeal|
  (((|Record| (|:| |coef| (|List| $)) (|:| |generator| $)) (|List| $)) NIL))
 (|prime?| (((|Boolean|) $) NIL))
 (|precision| (((|PositiveInteger|)) 22)
  (((|PositiveInteger|) (|PositiveInteger|)) NIL
   (|has| $ (|arbitraryPrecision|))))
 (|positive?| (((|Boolean|) $) NIL)) (|polylog| (($ $ $) NIL))
 (|polygamma| (($ $ $) 117)) (|pi| (($) 32))
 (|patternMatch|
  (((|PatternMatchResult| (|Float|) $) $ (|Pattern| (|Float|))
    (|PatternMatchResult| (|Float|) $))
   NIL))
 (|order| (((|Integer|) $) 28)) (|opposite?| (((|Boolean|) $ $) NIL))
 (|one?| (((|Boolean|) $) NIL)) (|nthRoot| (($ $ (|Integer|)) NIL))
 (|norm| (($ $) NIL)) (|negative?| (((|Boolean|) $) 87))
 (|multiEuclidean| (((|Union| (|List| $) #3="failed") (|List| $) $) NIL))
 (|min| (($ $ $) 49)
  (($) 27
   (AND (|not| (|has| $ (|arbitraryExponent|)))
        (|not| (|has| $ (|arbitraryPrecision|))))))
 (|meixnerM| (($ $ $ $ $) NIL))
 (|meijerG|
  (($ (|List| $) (|List| $) (|List| $) (|List| $) $) NIL
   (|has| $ (|RetractableTo| (|Integer|)))))
 (|max| (($ $ $) 48)
  (($) 26
   (AND (|not| (|has| $ (|arbitraryExponent|)))
        (|not| (|has| $ (|arbitraryPrecision|))))))
 (|mantissa| (((|Integer|) $) 20)) (|lommelS2| (($ $ $ $) NIL))
 (|lommelS1| (($ $ $ $) NIL)) (|log2| (($ $) 23)) (|log10| (($ $) 54))
 (|log| (($ $) 59)) (|lerchPhi| (($ $ $ $) NIL)) (|legendreQ| (($ $ $ $) NIL))
 (|legendreP| (($ $ $ $) NIL)) (|leftRecip| (((|Union| $ #1#) $) NIL))
 (|leftPower| (($ $ (|PositiveInteger|)) NIL)
  (($ $ (|NonNegativeInteger|)) NIL))
 (|lcmCoef|
  (((|Record| (|:| |llcm_res| $) (|:| |coeff1| $) (|:| |coeff2| $)) $ $) NIL))
 (|lcm| (($ $ $) NIL) (($ (|List| $)) NIL)) (|latex| (((|String|) $) NIL))
 (|lambertW| (($ $) 120)) (|laguerreL| (($ $ $ $) NIL))
 (|kummerU| (($ $ $ $) NIL)) (|kummerM| (($ $ $ $) NIL))
 (|kelvinKer| (($ $ $) NIL)) (|kelvinKei| (($ $ $) NIL))
 (|kelvinBer| (($ $ $) NIL)) (|kelvinBei| (($ $ $) NIL))
 (|jacobiZeta| (($ $ $) NIL)) (|jacobiTheta| (($ $ $) NIL))
 (|jacobiSn| (($ $ $) 139)) (|jacobiP| (($ $ $ $ $) NIL))
 (|jacobiDn| (($ $ $) 143)) (|jacobiCn| (($ $ $) 141)) (|inv| (($ $) NIL))
 (|increasePrecision|
  (((|PositiveInteger|) (|Integer|)) NIL (|has| $ (|arbitraryPrecision|))))
 (|hypergeometricF|
  (($ (|List| $) (|List| $) $) NIL (|has| $ (|RetractableTo| (|Integer|)))))
 (|hermiteH| (($ $ $) NIL))
 (|hashUpdate!| (((|HashState|) (|HashState|) $) 90))
 (|hash| (((|SingleInteger|) $) NIL)) (|hankelH2| (($ $ $) NIL))
 (|hankelH1| (($ $ $) NIL))
 (|gcdPolynomial|
  (((|SparseUnivariatePolynomial| $) (|SparseUnivariatePolynomial| $)
    (|SparseUnivariatePolynomial| $))
   NIL))
 (|gcd| (($ $ $) NIL) (($ (|List| $)) NIL)) (|fractionPart| (($ $) NIL))
 (|floor| (($ $) NIL))
 (|float| (($ (|Integer|) (|Integer|)) NIL)
          (($ (|Integer|) (|Integer|) (|PositiveInteger|)) 149))
 (|factor| (((|Factored| $) $) NIL))
 (|extendedEuclidean|
  (((|Record| (|:| |coef1| $) (|:| |coef2| $) (|:| |generator| $)) $ $) NIL)
  (((|Union| (|Record| (|:| |coef1| $) (|:| |coef2| $)) #3#) $ $ $) NIL))
 (|exquo| (((|Union| $ "failed") $ $) NIL))
 (|expressIdealMember| (((|Union| (|List| $) "failed") (|List| $) $) NIL))
 (|exponent| (((|Integer|) $) 21)) (|exp1| (($) 31)) (|exp| (($ $) 58))
 (|euclideanSize| (((|NonNegativeInteger|) $) NIL))
 (|ellipticPi| (($ $ $ $) 131)) (|ellipticK| (($ $) 125))
 (|ellipticF| (($ $ $) 123)) (|ellipticE| (($ $) 129) (($ $ $) 127))
 (|doubleFloatFormat| (((|String|) (|String|)) 8))
 (|divide| (((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $) NIL))
 (|digits| (((|PositiveInteger|)) NIL)
  (((|PositiveInteger|) (|PositiveInteger|)) NIL
   (|has| $ (|arbitraryPrecision|))))
 (|digamma| (($ $) 110))
 (|differentiate| (($ $ (|NonNegativeInteger|)) NIL) (($ $) 93))
 (|decreasePrecision|
  (((|PositiveInteger|) (|Integer|)) NIL (|has| $ (|arbitraryPrecision|))))
 (|csch| (($ $) 77)) (|csc| (($ $) 66)) (|coth| (($ $) 78)) (|cot| (($ $) 64))
 (|cosh| (($ $) 75)) (|cos| (($ $) 62))
 (|convert| (((|Float|) $) 151) (((|DoubleFloat|) $) 150)
            (((|Pattern| (|Float|)) $) NIL) (((|String|) $) 33)
            (((|InputForm|) $) 41))
 (|conjugate| (($ $) 165)) (|commutator| (($ $ $) NIL))
 (|coerce| (((|OutputForm|) $) 37) (($ $) NIL) (($ (|Integer|)) 57)
           (($ (|Fraction| (|Integer|))) NIL))
 (|charlierC| (($ $ $ $) NIL))
 (|characteristic| (((|NonNegativeInteger|)) NIL)) (|ceiling| (($ $) NIL))
 (|bits| (((|PositiveInteger|)) 25)
  (((|PositiveInteger|) (|PositiveInteger|)) NIL
   (|has| $ (|arbitraryPrecision|))))
 (|besselY| (($ $ $) 106)) (|besselK| (($ $ $) 104)) (|besselJ| (($ $ $) 102))
 (|besselI| (($ $ $) 100)) (|base| (((|PositiveInteger|)) 18))
 (|atanh| (($ $) 82)) (|atan| (($ $) 69) (($ $ $) 156))
 (|associator| (($ $ $ $) NIL)) (|associates?| (((|Boolean|) $ $) NIL))
 (|asinh| (($ $) 80)) (|asin| (($ $) 67)) (|asech| (($ $) 85))
 (|asec| (($ $) 73)) (|antiCommutator| (($ $ $) NIL))
 (|annihilate?| (((|Boolean|) $ $) NIL)) (|angerJ| (($ $ $) NIL))
 (|airyBiPrime| (($ $) NIL)) (|airyBi| (($ $) 98)) (|airyAiPrime| (($ $) NIL))
 (|airyAi| (($ $) 96)) (|acsch| (($ $) 83)) (|acsc| (($ $) 70))
 (|acoth| (($ $) 84)) (|acot| (($ $) 72)) (|acosh| (($ $) 81))
 (|acos| (($ $) 68)) (|abs| (($ $) 164))
 (^ (($ $ (|PositiveInteger|)) NIL) (($ $ (|NonNegativeInteger|)) NIL)
  (($ $ (|Integer|)) 55) (($ $ (|Fraction| (|Integer|))) 177) (($ $ $) 56))
 (|Zero| (($) 29 T CONST)) (|One| (($) 30 T CONST))
 (|OMwrite| (((|String|) $) NIL) (((|String|) $ (|Boolean|)) NIL)
  (((|Void|) (|OpenMathDevice|) $) NIL)
  (((|Void|) (|OpenMathDevice|) $ (|Boolean|)) 16))
 (|Gamma| (($ $) 112) (($ $ $) NIL))
 (D (($ $ (|NonNegativeInteger|)) NIL) (($ $) NIL)) (|Beta| (($ $ $) 108))
 (>= (((|Boolean|) $ $) 34)) (> (((|Boolean|) $ $) 155))
 (= (((|Boolean|) $ $) 50)) (<= (((|Boolean|) $ $) NIL))
 (< (((|Boolean|) $ $) 42)) (/ (($ $ $) 86) (($ $ (|Integer|)) 51))
 (- (($ $ $) 45) (($ $) 43)) (+ (($ $ $) 44))
 (* (($ (|PositiveInteger|) $) 24) (($ $ $) 46) (($ (|Integer|) $) 47)
    (($ (|NonNegativeInteger|) $) NIL) (($ $ (|Fraction| (|Integer|))) NIL)
    (($ (|Fraction| (|Integer|)) $) NIL)))
((|HasCategory| $ '(|arbitraryPrecision|))
 (AND (|not| (|HasCategory| $ '(|arbitraryExponent|)))
      (|not| (|HasCategory| $ '(|arbitraryPrecision|))))
 (|HasCategory| $ (LIST '|RetractableTo| '(|Integer|))))
DFLOAT
(((|FloatingPointSystem|) . T) ((|DifferentialRing|) . T) ((|OpenMath|) . T)
 ((|TranscendentalFunctionCategory|) . T) ((|SpecialFunctionCategory|) . T)
 ((|ConvertibleTo| (|InputForm|)) . T))
(((|AbelianGroup|) . T) ((|AbelianMonoid|) . T) ((|AbelianSemiGroup|) . T)
 ((|Algebra| (|Fraction| (|Integer|))) . T) ((|Algebra| $) . T)
 ((|Approximate|) . T) ((|ArcHyperbolicFunctionCategory|) . T)
 ((|ArcTrigonometricFunctionCategory|) . T) ((|BasicType|) . T)
 ((|BiModule| |t#1| |t#1|) . T) ((|BiModule| $ $) . T)
 ((|CancellationAbelianMonoid|) . T) ((|CharacteristicZero|) . T)
 ((|CoercibleTo| (|OutputForm|)) . T) ((|CommutativeRing|) . T)
 ((|CommutativeStar|) . T) ((|Comparable|) . T)
 ((|ConvertibleTo| (|InputForm|)) . T) ((|ConvertibleTo| (|String|)) . T)
 ((|ConvertibleTo| (|Pattern| (|Float|))) . T)
 ((|ConvertibleTo| (|Float|)) . T) ((|ConvertibleTo| (|DoubleFloat|)) . T)
 ((|DifferentialRing|) . T) ((|DivisionRing|) . T)
 ((|ElementaryFunctionCategory|) . T) ((|EntireRing|) . T)
 ((|EuclideanDomain|) . T) ((|Field|) . T) ((|FloatingPointSystem|) . T)
 ((|GcdDomain|) . T) ((|HyperbolicFunctionCategory|) . T)
 ((|IntegralDomain|) . T) ((|LeftModule| |t#1|) . T) ((|LeftOreRing|) . T)
 ((|Magma|) . T) ((|MagmaWithUnit|) . T) ((|Module| |t#1|) . T)
 ((|Monoid|) . T) ((|NonAssociativeRing|) . T) ((|NonAssociativeRng|) . T)
 ((|NonAssociativeSemiRing|) . T) ((|NonAssociativeSemiRng|) . T)
 ((|OpenMath|) . T) ((|OrderedAbelianGroup|) . T)
 ((|OrderedAbelianMonoid|) . T) ((|OrderedAbelianSemiGroup|) . T)
 ((|OrderedCancellationAbelianMonoid|) . T) ((|OrderedRing|) . T)
 ((|OrderedSet|) . T) ((|PartialOrder|) . T)
 ((|PatternMatchable| (|Float|)) . T) ((|PrincipalIdealDomain|) . T)
 ((|RadicalCategory|) . T) ((|RealConstant|) . T) ((|RealNumberSystem|) . T)
 ((|RetractableTo| (|Fraction| (|Integer|))) . T)
 ((|RetractableTo| (|Integer|)) . T) ((|RightModule| |t#2|) . T) ((|Ring|) . T)
 ((|Rng|) . T) ((|SemiGroup|) . T) ((|SemiRing|) . T) ((|SemiRng|) . T)
 ((|SetCategory|) . T) ((|SpecialFunctionCategory|) . T)
 ((|TranscendentalFunctionCategory|) . T)
 ((|TrigonometricFunctionCategory|) . T) ((|TwoSidedRecip|) . T)
 ((|UniqueFactorizationDomain|) . T) ((|canonicalUnitNormal|) . T)
 ((|canonicalsClosed|) . T) ((|noZeroDivisors|) . T) ((|unitsKnown|) . T))
((|constructor|
  (NIL
   "\\indented{1}{\\spadtype{DoubleFloat} is intended to make accessible} hardware floating point arithmetic in \\Language{},{} either native double precision,{} or IEEE. On most machines,{} there will be hardware support for the arithmetic operations: \\spadfunFrom{+}{DoubleFloat},{} \\spadfunFrom{*}{DoubleFloat},{} \\spadfunFrom{/}{DoubleFloat} and possibly also the \\spadfunFrom{sqrt}{DoubleFloat} operation. The operations \\spadfunFrom{exp}{DoubleFloat},{} \\spadfunFrom{log}{DoubleFloat},{} \\spadfunFrom{sin}{DoubleFloat},{} \\spadfunFrom{cos}{DoubleFloat},{} \\spadfunFrom{atan}{DoubleFloat} are normally coded in software based on minimax polynomial/rational approximations. Some general comments about the accuracy of the operations: the operations \\spadfunFrom{+}{DoubleFloat},{} \\spadfunFrom{*}{DoubleFloat},{} \\spadfunFrom{/}{DoubleFloat} and \\spadfunFrom{sqrt}{DoubleFloat} are expected to be fully accurate. The operations \\spadfunFrom{exp}{DoubleFloat},{} \\spadfunFrom{log}{DoubleFloat},{} \\spadfunFrom{sin}{DoubleFloat},{} \\spadfunFrom{cos}{DoubleFloat} and \\spadfunFrom{atan}{DoubleFloat} are not expected to be fully accurate. In particular,{} \\spadfunFrom{sin}{DoubleFloat} and \\spadfunFrom{cos}{DoubleFloat} will lose all precision for large arguments. \\blankline The \\spadtype{Float} domain provides an alternative to the \\spad{DoubleFloat} domain. It provides an arbitrary precision model of floating point arithmetic. This means that accuracy problems like those above are eliminated by increasing the working precision where necessary. \\spadtype{Float} provides some special functions such as \\spadfunFrom{erf}{DoubleFloat},{} the error function in addition to the elementary functions. The disadvantage of \\spadtype{Float} is that it is much more expensive than small floats when the latter can be used."))
 (|rationalApproximation|
  (((|Fraction| (|Integer|)) $ (|NonNegativeInteger|) (|NonNegativeInteger|))
   "\\spad{rationalApproximation(f,{} n,{} b)} computes a rational approximation \\spad{r} to \\spad{f} with relative error \\spad{< b^(-n)} (that is,{} \\spad{|(r-f)/f| < b^(-n)}).")
  (((|Fraction| (|Integer|)) $ (|NonNegativeInteger|))
   "\\spad{rationalApproximation(f,{} n)} computes a rational approximation \\spad{r} to \\spad{f} with relative error \\spad{< 10^(-n)}."))
 (|doubleFloatFormat|
  (((|String|) (|String|))
   "change the output format for doublefloats using lisp format strings"))
 (|qsqrt|
  (($ $)
   "\\spad{qsqrt(x)} computes square root of \\spad{x}. It assumes that \\spad{x >= 0}."))
 (|qlog|
  (($ $)
   "\\spad{qlog(x)} computes natural logarithm of \\spad{x}. It assumes that \\spad{x > 0}."))
 (|atan|
  (($ $ $)
   "\\spad{atan(x,{} y)} computes the arc tangent from \\spad{x} with phase \\spad{y}."))
 (|log10|
  (($ $)
   "\\spad{log10(x)} computes the logarithm with base 10 for \\spad{x}."))
 (|log2|
  (($ $) "\\spad{log2(x)} computes the logarithm with base 2 for \\spad{x}."))
 (|exp1|
  (($) "\\spad{exp1()} returns the natural log base \\spad{2.718281828...}.")))
(("documentation" 0 12717) ("ancestors" 0 10620) ("parents" 0 10427)
 ("abbreviation" 0 10420) ("predicates" 0 10208) ("superDomain" 0 NIL)
 ("operationAlist" 0 2336) ("modemaps" 0 1561) ("sourceFile" 0 1523)
 ("constructorCategory" 0 834) ("constructorModemap" 0 82)
 ("constructorKind" 0 73) ("constructorForm" 0 57) ("NILADIC" 0 20))