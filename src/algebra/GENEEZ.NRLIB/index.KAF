4687                (|GenExEuclid| R BP)
|package|
(((|GenExEuclid| |#1| |#2|)
  (CATEGORY |package| (SIGNATURE |reduction| (|#2| |#2| |#1|))
   (SIGNATURE |compBound| ((|NonNegativeInteger|) |#2| (|List| |#2|)))
   (SIGNATURE |tablePow|
    ((|Union| (|Vector| (|List| |#2|)) "failed") (|NonNegativeInteger|) |#1|
     (|List| |#2|)))
   (SIGNATURE |solveid|
    ((|Union| (|List| |#2|) "failed") |#2| |#1| (|Vector| (|List| |#2|))))
   (SIGNATURE |testModulus| ((|Boolean|) |#1| (|List| |#2|))))
  (|EuclideanDomain|) (|UnivariatePolynomialCategory| |#1|))
 (T |GenExEuclid|))
(CATEGORY |package| (SIGNATURE |reduction| (|#2| |#2| |#1|))
 (SIGNATURE |compBound| ((|NonNegativeInteger|) |#2| (|List| |#2|)))
 (SIGNATURE |tablePow|
  ((|Union| (|Vector| (|List| |#2|)) "failed") (|NonNegativeInteger|) |#1|
   (|List| |#2|)))
 (SIGNATURE |solveid|
  ((|Union| (|List| |#2|) "failed") |#2| |#1| (|Vector| (|List| |#2|))))
 (SIGNATURE |testModulus| ((|Boolean|) |#1| (|List| |#2|))))
"/git/fricas/src/algebra/GENEEZ.spad"
((|testModulus| (*1 *2 *3 *4)
  (AND (|isDomain| *4 (|List| *5))
       (|ofCategory| *5 (|UnivariatePolynomialCategory| *3))
       (|ofCategory| *3 (|EuclideanDomain|)) (|isDomain| *2 (|Boolean|))
       (|isDomain| *1 (|GenExEuclid| *3 *5))))
 (|solveid| (*1 *2 *3 *4 *5)
  (|partial| AND (|isDomain| *5 (|Vector| (|List| *3)))
   (|ofCategory| *4 (|EuclideanDomain|)) (|isDomain| *2 (|List| *3))
   (|isDomain| *1 (|GenExEuclid| *4 *3))
   (|ofCategory| *3 (|UnivariatePolynomialCategory| *4))))
 (|tablePow| (*1 *2 *3 *4 *5)
  (|partial| AND (|isDomain| *3 (|NonNegativeInteger|))
   (|isDomain| *5 (|List| *6))
   (|ofCategory| *6 (|UnivariatePolynomialCategory| *4))
   (|ofCategory| *4 (|EuclideanDomain|)) (|isDomain| *2 (|Vector| (|List| *6)))
   (|isDomain| *1 (|GenExEuclid| *4 *6))))
 (|compBound| (*1 *2 *3 *4)
  (AND (|isDomain| *4 (|List| *3))
       (|ofCategory| *3 (|UnivariatePolynomialCategory| *5))
       (|ofCategory| *5 (|EuclideanDomain|))
       (|isDomain| *2 (|NonNegativeInteger|))
       (|isDomain| *1 (|GenExEuclid| *5 *3))))
 (|reduction| (*1 *2 *2 *3)
  (AND (|ofCategory| *3 (|EuclideanDomain|))
       (|isDomain| *1 (|GenExEuclid| *3 *2))
       (|ofCategory| *2 (|UnivariatePolynomialCategory| *3)))))
((|testModulus| (((|Boolean|) |#1| (|List| |#2|)) 64))
 (|tablePow|
  (((|Union| (|Vector| (|List| |#2|)) "failed") (|NonNegativeInteger|) |#1|
    (|List| |#2|))
   74))
 (|solveid|
  (((|Union| (|List| |#2|) "failed") |#2| |#1| (|Vector| (|List| |#2|))) 76))
 (|reduction| ((|#2| |#2| |#1|) 28))
 (|compBound| (((|NonNegativeInteger|) |#2| (|List| |#2|)) 20)))
GENEEZ
((|constructor|
  (NIL
   "\\indented{1}{Author : \\spad{P}.Gianni.} January 1990 The equation \\spad{Af+Bg=h} and its generalization to \\spad{n} polynomials is solved for solutions over the \\spad{R},{} euclidean domain. A table containing the solutions of \\spad{Af+Bg=x^k} is used. The operations are performed modulus a prime which are in principle big enough,{} but the solutions are tested and,{} in case of failure,{} a hensel lifting process is used to get to the right solutions. It will be used in the factorization of multivariate polynomials over finite field,{} with \\spad{R=F[x]}."))
 (|testModulus|
  (((|Boolean|) |#1| (|List| |#2|))
   "\\spad{testModulus(p,{} lp)} returns \\spad{true} if the the prime \\spad{p} is valid for the list of polynomials \\spad{lp},{} \\spadignore{i.e.} preserves the degree and they remain relatively prime."))
 (|solveid|
  (((|Union| (|List| |#2|) "failed") |#2| |#1| (|Vector| (|List| |#2|)))
   "\\spad{solveid(h,{} prime,{} table)} computes the coefficients of the extended euclidean algorithm for a list of polynomials whose tablePow is table and with right side \\spad{h}."))
 (|tablePow|
  (((|Union| (|Vector| (|List| |#2|)) "failed") (|NonNegativeInteger|) |#1|
    (|List| |#2|))
   "\\spad{tablePow(maxdeg,{} prime,{} lpol)} constructs the table with the coefficients of the Extended Euclidean Algorithm for lpol. Here the right side is \\spad{x^k},{} for \\spad{k} less to \\spad{maxdeg}. The operation returns \"failed\" when the elements are not coprime modulo \\spad{prime}."))
 (|compBound|
  (((|NonNegativeInteger|) |#2| (|List| |#2|))
   "\\spad{compBound(p,{} lp)} computes a bound for the coefficients of the solution polynomials. Given a polynomial right hand side \\spad{p},{} and a list \\spad{lp} of left hand side polynomials. Exported because it depends on the valuation."))
 (|reduction|
  ((|#2| |#2| |#1|)
   "\\spad{reduction(p,{} prime)} reduces the polynomial \\spad{p} modulo prime of \\spad{R}. Note: this function is exported only because it\\spad{'s} conditional.")))
(("documentation" 0 2631) ("ancestors" 0 NIL) ("parents" 0 NIL)
 ("abbreviation" 0 2624) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 2261) ("modemaps" 0 1020) ("sourceFile" 0 982)
 ("constructorCategory" 0 579) ("constructorModemap" 0 51)
 ("constructorKind" 0 41) ("constructorForm" 0 20))