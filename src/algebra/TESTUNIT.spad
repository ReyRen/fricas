)abbrev package TESTUNIT Unittest
++ Author: Martin Rubey
++ Description: Unittest is a package that provides functions for regression
++              testing.  Note that it calls the interpreter, thus, all
++              functions require that their arguments be passed as strings.
Unittest : with

     testEquals : (String, String) -> Void
       ++ testEquals(ex1, ex2) states that ex1 and ex2 should be equal.  To
       ++ sidestep the possibility that the equality function of the domain R
       ++ performs some simplifications, we convert ex1 and ex2 to
       ++ \spad{InputForm}, if possible.

     xftestEquals : (String, String) -> Void
       ++ like testEquals, but expects failure.

     testRealEquals : (String, String) -> Void
       ++ testRealEquals(ex1, ex2) states that ex1 and ex2 should be
       ++ approximately equal as real numbers, taking into acount
       ++ \spadfun{testAbsolutePrecision} and \spadfun{testRelativePrecision}.

     xftestRealEquals : (String, String) -> Void
       ++ like testRealEquals, but expects failure.

     testComplexEquals : (String, String) -> Void
       ++ testComplexEquals(ex1, ex2) states that ex1 and ex2 should be
       ++ approximately equal as complex numbers, taking into acount
       ++ \spadfun{testAbsolutePrecision} and \spadfun{testRelativePrecision}.

     xftestComplexEquals : (String, String) -> Void
       ++ like testComplexEquals, but expects failure.

     testNotEquals : (String, String) -> Void
       ++ testNotEquals(ex1, ex2) states that ex1 and ex2 should be
       ++ different.

     xftestNotEquals : (String, String) -> Void
       ++ like testNotEquals, but expects failure.

     testTrue : String -> Void
       ++ testTrue ex states that ex should be true.

     xftestTrue : String -> Void
       ++ like testTrue, but expects failure.

     testLibraryError : String -> Void
       ++ testLibraryError ex states that ex should throw an error. Such a test
       ++ will never count as a fatal error.

     xftestLibraryError : String -> Void
       ++ like testLibraryError, but expects failure.

  == add

     interpretFunction1(f : Symbol, info : String, arg : String) : Any ==
         if1 := parse(arg)$InputForm
         ff := convert(f)@InputForm
         info_f := convert(info)@InputForm
         interpret(convert([ff, info_f, if1])@InputForm)$InputForm

     interpretFunction2(f : Symbol, info : String, arg1 : String,
                       arg2 : String) : Any ==
         if1 := parse(arg1)$InputForm
         if2 := parse(arg2)$InputForm
         ff := convert(f)@InputForm
         info_f := convert(info)@InputForm
         interpret(convert([ff, info_f, if1, if2])@InputForm)$InputForm

     testEquals(s1, s2) ==
         inp := "EQUL: (" s1 ", " s2 ")"
         incFatal(inp)$UnittestCount
         interpretFunction2('testEqualsAux, inp, s1, s2)
         decFatal()$UnittestCount

     xftestEquals(s1, s2) ==
         inp := "EQUL: (" s1 ", " s2 ")"
         incXfFatal(inp)$UnittestCount
         interpretFunction2('xftestEqualsAux, inp, s1, s2)
         decXfFatal()$UnittestCount

     testRealEquals(s1, s2) ==
         inp := "EQLR: (" s1 ", " s2 ")"
         incFatal(inp)$UnittestCount
         interpretFunction2('testRealEqualsAux, inp, s1, s2)
         decFatal()$UnittestCount

     xftestRealEquals(s1, s2) ==
         inp := "EQLR: (" s1 ", " s2 ")"
         incXfFatal(inp)$UnittestCount
         interpretFunction2('xftestRealEqualsAux, inp, s1, s2)
         decXfFatal()$UnittestCount

     testComplexEquals(s1, s2) ==
         inp := "EQLC: (" s1 ", " s2 ")"
         incFatal(inp)$UnittestCount
         interpretFunction2('testComplexEqualsAux, inp, s1, s2)
         decFatal()$UnittestCount

     xftestComplexEquals(s1, s2) ==
         inp := "EQLC: (" s1 ", " s2 ")"
         incXfFatal(inp)$UnittestCount
         interpretFunction2('xftestComplexEqualsAux, inp, s1, s2)
         decXfFatal()$UnittestCount

     testNotEquals(s1, s2) ==
         inp := "DIFF: (" s1 ", " s2 ")"
         incFatal(inp)$UnittestCount
         interpretFunction2('testNotEqualsAux, inp, s1, s2)
         decFatal()$UnittestCount

     xftestNotEquals(s1, s2) ==
         inp := "DIFF: (" s1 ", " s2 ")"
         incXfFatal(inp)$UnittestCount
         interpretFunction2('xftestNotEqualsAux, inp, s1, s2)
         decXfFatal()$UnittestCount

     testTrue(s) ==
         inp := "TRUE: (" s ")"
         incFatal(inp)$UnittestCount
         interpretFunction1('testTrueAux, inp, s)
         decFatal()$UnittestCount

     xftestTrue(s) ==
         inp := "TRUE: (" s ")"
         incXfFatal(inp)$UnittestCount
         interpretFunction1('xftestTrueAux, inp, s)
         decXfFatal()$UnittestCount

     testLibraryError(s) ==
         chkLibraryError()$UnittestCount
         inp := "ERROR: (" s ")"
         interpretFunction1('testLibraryErrorAux, inp, s)

     xftestLibraryError(s) ==
         inp := "ERROR: (" s ")"
         incXfPass(inp, empty()$List(OutputForm))$UnittestCount
         interpretFunction1('xftestLibraryErrorAux, inp, s)
         decXfPass()$UnittestCount
-- when there was as expected no fatal error, we need only step the
-- counter for the number of tests
         chkLibraryError()$UnittestCount


--Copyright (c) 2006-2007, Martin Rubey <Martin.Rubey@univie.ac.at>
--
--Redistribution and use in source and binary forms, with or without
--modification, are permitted provided that the following conditions are
--met:
--
--    - Redistributions of source code must retain the above copyright
--      notice, this list of conditions and the following disclaimer.
--
--    - Redistributions in binary form must reproduce the above copyright
--      notice, this list of conditions and the following disclaimer in
--      the documentation and/or other materials provided with the
--      distribution.
--
--THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
--IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
--TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
--PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
--OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
--EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
--PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
--PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
--LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
--NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
--SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
