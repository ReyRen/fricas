5695                (|PatternFunctions1| R D)
|package|
(((|PatternFunctions1| |#1| |#2|)
  (CATEGORY |package|
   (SIGNATURE |suchThat|
    ((|Pattern| |#1|) (|Pattern| |#1|) (|Mapping| (|Boolean|) |#2|)))
   (SIGNATURE |suchThat|
    ((|Pattern| |#1|) (|Pattern| |#1|) (|List| (|Mapping| (|Boolean|) |#2|))))
   (SIGNATURE |suchThat|
    ((|Pattern| |#1|) (|Pattern| |#1|) (|List| (|Symbol|))
     (|Mapping| (|Boolean|) (|List| |#2|))))
   (SIGNATURE |predicate| ((|Mapping| (|Boolean|) |#2|) (|Pattern| |#1|)))
   (SIGNATURE |satisfy?| ((|Boolean|) |#2| (|Pattern| |#1|)))
   (SIGNATURE |satisfy?| ((|Boolean|) (|List| |#2|) (|Pattern| |#1|)))
   (SIGNATURE |addBadValue| ((|Pattern| |#1|) (|Pattern| |#1|) |#2|))
   (SIGNATURE |badValues| ((|List| |#2|) (|Pattern| |#1|))))
  (|SetCategory|) (|Type|))
 (T |PatternFunctions1|))
(CATEGORY |package|
 (SIGNATURE |suchThat|
  ((|Pattern| |#1|) (|Pattern| |#1|) (|Mapping| (|Boolean|) |#2|)))
 (SIGNATURE |suchThat|
  ((|Pattern| |#1|) (|Pattern| |#1|) (|List| (|Mapping| (|Boolean|) |#2|))))
 (SIGNATURE |suchThat|
  ((|Pattern| |#1|) (|Pattern| |#1|) (|List| (|Symbol|))
   (|Mapping| (|Boolean|) (|List| |#2|))))
 (SIGNATURE |predicate| ((|Mapping| (|Boolean|) |#2|) (|Pattern| |#1|)))
 (SIGNATURE |satisfy?| ((|Boolean|) |#2| (|Pattern| |#1|)))
 (SIGNATURE |satisfy?| ((|Boolean|) (|List| |#2|) (|Pattern| |#1|)))
 (SIGNATURE |addBadValue| ((|Pattern| |#1|) (|Pattern| |#1|) |#2|))
 (SIGNATURE |badValues| ((|List| |#2|) (|Pattern| |#1|))))
"/git/fricas/src/algebra/PATTERN1.spad"
((|badValues| (*1 *2 *3)
  (AND (|isDomain| *3 (|Pattern| *4)) (|ofCategory| *4 (|SetCategory|))
       (|isDomain| *2 (|List| *5)) (|isDomain| *1 (|PatternFunctions1| *4 *5))
       (|ofCategory| *5 (|Type|))))
 (|addBadValue| (*1 *2 *2 *3)
  (AND (|isDomain| *2 (|Pattern| *4)) (|ofCategory| *4 (|SetCategory|))
       (|isDomain| *1 (|PatternFunctions1| *4 *3)) (|ofCategory| *3 (|Type|))))
 (|satisfy?| (*1 *2 *3 *4)
  (AND (|isDomain| *3 (|List| *6)) (|isDomain| *4 (|Pattern| *5))
       (|ofCategory| *5 (|SetCategory|)) (|ofCategory| *6 (|Type|))
       (|isDomain| *2 (|Boolean|))
       (|isDomain| *1 (|PatternFunctions1| *5 *6))))
 (|satisfy?| (*1 *2 *3 *4)
  (AND (|isDomain| *4 (|Pattern| *5)) (|ofCategory| *5 (|SetCategory|))
       (|isDomain| *2 (|Boolean|)) (|isDomain| *1 (|PatternFunctions1| *5 *3))
       (|ofCategory| *3 (|Type|))))
 (|predicate| (*1 *2 *3)
  (AND (|isDomain| *3 (|Pattern| *4)) (|ofCategory| *4 (|SetCategory|))
       (|isDomain| *2 (|Mapping| (|Boolean|) *5))
       (|isDomain| *1 (|PatternFunctions1| *4 *5)) (|ofCategory| *5 (|Type|))))
 (|suchThat| (*1 *2 *2 *3 *4)
  (AND (|isDomain| *2 (|Pattern| *5)) (|isDomain| *3 (|List| (|Symbol|)))
       (|isDomain| *4 (|Mapping| (|Boolean|) (|List| *6)))
       (|ofCategory| *5 (|SetCategory|)) (|ofCategory| *6 (|Type|))
       (|isDomain| *1 (|PatternFunctions1| *5 *6))))
 (|suchThat| (*1 *2 *2 *3)
  (AND (|isDomain| *2 (|Pattern| *4))
       (|isDomain| *3 (|List| (|Mapping| (|Boolean|) *5)))
       (|ofCategory| *4 (|SetCategory|)) (|ofCategory| *5 (|Type|))
       (|isDomain| *1 (|PatternFunctions1| *4 *5))))
 (|suchThat| (*1 *2 *2 *3)
  (AND (|isDomain| *2 (|Pattern| *4))
       (|isDomain| *3 (|Mapping| (|Boolean|) *5))
       (|ofCategory| *4 (|SetCategory|)) (|ofCategory| *5 (|Type|))
       (|isDomain| *1 (|PatternFunctions1| *4 *5)))))
((|suchThat|
  (((|Pattern| |#1|) (|Pattern| |#1|) (|List| (|Symbol|))
    (|Mapping| (|Boolean|) (|List| |#2|)))
   30)
  (((|Pattern| |#1|) (|Pattern| |#1|) (|List| (|Mapping| (|Boolean|) |#2|)))
   42)
  (((|Pattern| |#1|) (|Pattern| |#1|) (|Mapping| (|Boolean|) |#2|)) 33))
 (|satisfy?| (((|Boolean|) (|List| |#2|) (|Pattern| |#1|)) 39)
  (((|Boolean|) |#2| (|Pattern| |#1|)) 35))
 (|predicate| (((|Mapping| (|Boolean|) |#2|) (|Pattern| |#1|)) 14))
 (|badValues| (((|List| |#2|) (|Pattern| |#1|)) 23))
 (|addBadValue| (((|Pattern| |#1|) (|Pattern| |#1|) |#2|) 19)))
PATTERN1
((|constructor| (NIL "Tools for patterns."))
 (|badValues|
  (((|List| |#2|) (|Pattern| |#1|))
   "\\spad{badValues(p)} returns the list of \"bad values\" for \\spad{p}; \\spad{p} is not allowed to match any of its \"bad values\"."))
 (|addBadValue|
  (((|Pattern| |#1|) (|Pattern| |#1|) |#2|)
   "\\spad{addBadValue(p,{} v)} adds \\spad{v} to the list of \"bad values\" for \\spad{p}; \\spad{p} is not allowed to match any of its \"bad values\"."))
 (|satisfy?|
  (((|Boolean|) (|List| |#2|) (|Pattern| |#1|))
   "\\spad{satisfy?([v1,{} ...,{} vn],{} p)} returns \\spad{f(v1,{} ...,{} vn)} where \\spad{f} is the top-level predicate attached to \\spad{p}.")
  (((|Boolean|) |#2| (|Pattern| |#1|))
   "\\spad{satisfy?(v,{} p)} returns \\spad{f}(\\spad{v}) where \\spad{f} is the predicate attached to \\spad{p}."))
 (|predicate|
  (((|Mapping| (|Boolean|) |#2|) (|Pattern| |#1|))
   "\\spad{predicate(p)} returns the predicate attached to \\spad{p},{} the constant function \\spad{true} if \\spad{p} has no predicates attached to it."))
 (|suchThat|
  (((|Pattern| |#1|) (|Pattern| |#1|) (|List| (|Symbol|))
    (|Mapping| (|Boolean|) (|List| |#2|)))
   "\\spad{suchThat(p,{} [a1,{} ...,{} an],{} f)} returns a copy of \\spad{p} with the top-level predicate set to \\spad{f(a1,{} ...,{} an)}.")
  (((|Pattern| |#1|) (|Pattern| |#1|) (|List| (|Mapping| (|Boolean|) |#2|)))
   "\\spad{suchThat(p,{} [f1,{} ...,{} fn])} makes a copy of \\spad{p} and adds the predicate \\spad{f1} and ... and \\spad{fn} to the copy,{} which is returned.")
  (((|Pattern| |#1|) (|Pattern| |#1|) (|Mapping| (|Boolean|) |#2|))
   "\\spad{suchThat(p,{} f)} makes a copy of \\spad{p} and adds the predicate \\spad{f} to the copy,{} which is returned.")))
(("documentation" 0 3965) ("ancestors" 0 NIL) ("parents" 0 NIL)
 ("abbreviation" 0 3956) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 3386) ("modemaps" 0 1536) ("sourceFile" 0 1496)
 ("constructorCategory" 0 833) ("constructorModemap" 0 56)
 ("constructorKind" 0 46) ("constructorForm" 0 20))