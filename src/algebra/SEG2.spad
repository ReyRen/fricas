)abbrev package SEG2 SegmentFunctions2
++ Author:
++ Basic Operations:
++ Related Domains: Segment, UniversalSegment
++ Also See:
++ AMS Classifications:
++ Keywords: equation
++ Examples:
++ References:
++ Description:
++   This package provides operations for mapping functions onto segments.

SegmentFunctions2(R : Type, S : Type) : public == private where
  public ==> with
    map : (R -> S, Segment R) -> Segment S
        ++ map(f, l..h) returns a new segment \spad{f(l)..f(h)}.

    if R has OrderedRing then
      map : (R -> S, Segment R) -> List S
        ++ map(f, s) expands the segment s, applying \spad{f} to each
        ++ value.  For example, if \spad{s = l..h by k}, then the list
        ++ \spad{[f(l), f(l+k), ..., f(lN)]} is computed, where
        ++ \spad{lN <= h < lN+k}.


  private ==> add
    map(f : R->S, r : Segment R) : Segment S ==
      SEGMENT(f(low(r)), f(high(r)))$Segment(S)

    if R has OrderedRing then
     map(f : R->S, r : Segment R) : List S ==
       lr := []$List(S)
       l := low(r)
       h := high(r)
       inc := (incr r)::R
       if inc > 0 then
         while l <= h repeat
           lr := concat(f(l), lr)
           l := l + inc
       else
         while l >= h repeat
           lr := concat(f(l), lr)
           l := l + inc
       reverse! lr

