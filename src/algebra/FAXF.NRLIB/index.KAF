22239               (|FiniteAlgebraicExtensionField| F)
|category|
(((|FiniteAlgebraicExtensionField| |#1|) (|Category|) (|Field|))
 (T |FiniteAlgebraicExtensionField|))
(|Join| (|ExtensionField| |t#1|) (|RetractableTo| |t#1|)
        (CATEGORY |domain| (SIGNATURE |basis| ((|Vector| $)))
         (SIGNATURE |basis| ((|Vector| $) (|PositiveInteger|)))
         (SIGNATURE |coordinates| ((|Vector| |t#1|) $))
         (SIGNATURE |coordinates| ((|Matrix| |t#1|) (|Vector| $)))
         (SIGNATURE |represents| ($ (|Vector| |t#1|)))
         (SIGNATURE |minimalPolynomial|
          ((|SparseUnivariatePolynomial| |t#1|) $))
         (SIGNATURE |definingPolynomial|
          ((|SparseUnivariatePolynomial| |t#1|)))
         (SIGNATURE |extensionDegree| ((|PositiveInteger|)))
         (SIGNATURE |degree| ((|PositiveInteger|) $))
         (SIGNATURE |norm| (|t#1| $)) (SIGNATURE |trace| (|t#1| $))
         (IF (|has| |t#1| (|Finite|))
             (PROGN
              (ATTRIBUTE (|FiniteFieldCategory|))
              (SIGNATURE |minimalPolynomial|
               ((|SparseUnivariatePolynomial| $) $ (|PositiveInteger|)))
              (SIGNATURE |norm| ($ $ (|PositiveInteger|)))
              (SIGNATURE |trace| ($ $ (|PositiveInteger|)))
              (SIGNATURE |createNormalElement| ($))
              (SIGNATURE |normalElement| ($))
              (SIGNATURE |normal?| ((|Boolean|) $))
              (SIGNATURE |generator| ($))
              (SIGNATURE |linearAssociatedExp|
               ($ $ (|SparseUnivariatePolynomial| |t#1|)))
              (SIGNATURE |linearAssociatedOrder|
               ((|SparseUnivariatePolynomial| |t#1|) $))
              (SIGNATURE |linearAssociatedLog|
               ((|SparseUnivariatePolynomial| |t#1|) $))
              (SIGNATURE |linearAssociatedLog|
               ((|Union| (|SparseUnivariatePolynomial| |t#1|) "failed") $ $)))
             |noBranch|)))
"/git/fricas/src/algebra/FAXF.spad"
((|basis| (*1 *2)
  (AND (|ofCategory| *3 (|Field|)) (|isDomain| *2 (|Vector| *1))
       (|ofCategory| *1 (|FiniteAlgebraicExtensionField| *3))))
 (|basis| (*1 *2 *3)
  (AND (|isDomain| *3 (|PositiveInteger|)) (|ofCategory| *4 (|Field|))
       (|isDomain| *2 (|Vector| *1))
       (|ofCategory| *1 (|FiniteAlgebraicExtensionField| *4))))
 (|coordinates| (*1 *2 *1)
  (AND (|ofCategory| *1 (|FiniteAlgebraicExtensionField| *3))
       (|ofCategory| *3 (|Field|)) (|isDomain| *2 (|Vector| *3))))
 (|coordinates| (*1 *2 *3)
  (AND (|isDomain| *3 (|Vector| *1))
       (|ofCategory| *1 (|FiniteAlgebraicExtensionField| *4))
       (|ofCategory| *4 (|Field|)) (|isDomain| *2 (|Matrix| *4))))
 (|represents| (*1 *1 *2)
  (AND (|isDomain| *2 (|Vector| *3)) (|ofCategory| *3 (|Field|))
       (|ofCategory| *1 (|FiniteAlgebraicExtensionField| *3))))
 (|minimalPolynomial| (*1 *2 *1)
  (AND (|ofCategory| *1 (|FiniteAlgebraicExtensionField| *3))
       (|ofCategory| *3 (|Field|))
       (|isDomain| *2 (|SparseUnivariatePolynomial| *3))))
 (|definingPolynomial| (*1 *2)
  (AND (|ofCategory| *1 (|FiniteAlgebraicExtensionField| *3))
       (|ofCategory| *3 (|Field|))
       (|isDomain| *2 (|SparseUnivariatePolynomial| *3))))
 (|extensionDegree| (*1 *2)
  (AND (|ofCategory| *1 (|FiniteAlgebraicExtensionField| *3))
       (|ofCategory| *3 (|Field|)) (|isDomain| *2 (|PositiveInteger|))))
 (|degree| (*1 *2 *1)
  (AND (|ofCategory| *1 (|FiniteAlgebraicExtensionField| *3))
       (|ofCategory| *3 (|Field|)) (|isDomain| *2 (|PositiveInteger|))))
 (|norm| (*1 *2 *1)
  (AND (|ofCategory| *1 (|FiniteAlgebraicExtensionField| *2))
       (|ofCategory| *2 (|Field|))))
 (|trace| (*1 *2 *1)
          (AND (|ofCategory| *1 (|FiniteAlgebraicExtensionField| *2))
               (|ofCategory| *2 (|Field|))))
 (|minimalPolynomial| (*1 *2 *1 *3)
  (AND (|isDomain| *3 (|PositiveInteger|)) (|ofCategory| *4 (|Finite|))
       (|ofCategory| *4 (|Field|))
       (|isDomain| *2 (|SparseUnivariatePolynomial| *1))
       (|ofCategory| *1 (|FiniteAlgebraicExtensionField| *4))))
 (|norm| (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|PositiveInteger|))
       (|ofCategory| *1 (|FiniteAlgebraicExtensionField| *3))
       (|ofCategory| *3 (|Field|)) (|ofCategory| *3 (|Finite|))))
 (|trace| (*1 *1 *1 *2)
          (AND (|isDomain| *2 (|PositiveInteger|))
               (|ofCategory| *1 (|FiniteAlgebraicExtensionField| *3))
               (|ofCategory| *3 (|Field|)) (|ofCategory| *3 (|Finite|))))
 (|createNormalElement| (*1 *1)
  (AND (|ofCategory| *1 (|FiniteAlgebraicExtensionField| *2))
       (|ofCategory| *2 (|Finite|)) (|ofCategory| *2 (|Field|))))
 (|normalElement| (*1 *1)
  (AND (|ofCategory| *1 (|FiniteAlgebraicExtensionField| *2))
       (|ofCategory| *2 (|Finite|)) (|ofCategory| *2 (|Field|))))
 (|normal?| (*1 *2 *1)
  (AND (|ofCategory| *1 (|FiniteAlgebraicExtensionField| *3))
       (|ofCategory| *3 (|Field|)) (|ofCategory| *3 (|Finite|))
       (|isDomain| *2 (|Boolean|))))
 (|generator| (*1 *1)
  (AND (|ofCategory| *1 (|FiniteAlgebraicExtensionField| *2))
       (|ofCategory| *2 (|Finite|)) (|ofCategory| *2 (|Field|))))
 (|linearAssociatedExp| (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|SparseUnivariatePolynomial| *3))
       (|ofCategory| *3 (|Finite|))
       (|ofCategory| *1 (|FiniteAlgebraicExtensionField| *3))
       (|ofCategory| *3 (|Field|))))
 (|linearAssociatedOrder| (*1 *2 *1)
  (AND (|ofCategory| *1 (|FiniteAlgebraicExtensionField| *3))
       (|ofCategory| *3 (|Field|)) (|ofCategory| *3 (|Finite|))
       (|isDomain| *2 (|SparseUnivariatePolynomial| *3))))
 (|linearAssociatedLog| (*1 *2 *1)
  (AND (|ofCategory| *1 (|FiniteAlgebraicExtensionField| *3))
       (|ofCategory| *3 (|Field|)) (|ofCategory| *3 (|Finite|))
       (|isDomain| *2 (|SparseUnivariatePolynomial| *3))))
 (|linearAssociatedLog| (*1 *2 *1 *1)
  (|partial| AND (|ofCategory| *1 (|FiniteAlgebraicExtensionField| *3))
   (|ofCategory| *3 (|Field|)) (|ofCategory| *3 (|Finite|))
   (|isDomain| *2 (|SparseUnivariatePolynomial| *3)))))
((~= (((|Boolean|) $ $) 6)) (|zero?| (((|Boolean|) $) 6))
 (|unitNormal|
  (((|Record| (|:| |unit| $) (|:| |canonical| $) (|:| |associate| $)) $) 6))
 (|unitCanonical| (($ $) 6)) (|unit?| (((|Boolean|) $) 6))
 (|transcendent?| (((|Boolean|) $) 6))
 (|transcendenceDegree| (((|NonNegativeInteger|)) 6))
 (|trace| ((|#1| $) 6) (($ $ (|PositiveInteger|)) 6 (|has| |#1| (|Finite|))))
 (|tableForDiscreteLogarithm|
  (((|Table| (|PositiveInteger|) (|NonNegativeInteger|)) (|Integer|)) 6
   (|has| |#1| (|Finite|))))
 (|subtractIfCan| (((|Union| $ "failed") $ $) 6))
 (|squareFreePolynomial|
  (((|Factored| (|SparseUnivariatePolynomial| $))
    (|SparseUnivariatePolynomial| $))
   6 (|has| |#1| (|Finite|))))
 (|squareFreePart| (($ $) 6)) (|squareFree| (((|Factored| $) $) 6))
 (|solveLinearPolynomialEquation|
  (((|Union| (|List| (|SparseUnivariatePolynomial| $)) #1="failed")
    (|List| (|SparseUnivariatePolynomial| $)) (|SparseUnivariatePolynomial| $))
   6 (|has| |#1| (|Finite|))))
 (|smaller?| (((|Boolean|) $ $) 6 (|has| |#1| (|Finite|))))
 (|sizeLess?| (((|Boolean|) $ $) 6))
 (|size| (((|NonNegativeInteger|)) 6 (|has| |#1| (|Finite|))))
 (|sample| (($) 6 T CONST)) (|rightRecip| (((|Union| $ #2="failed") $) 6))
 (|rightPower| (($ $ (|PositiveInteger|)) 6) (($ $ (|NonNegativeInteger|)) 6))
 (|retractIfCan| (((|Union| |#1| "failed") $) 6)) (|retract| ((|#1| $) 6))
 (|represents| (($ (|Vector| |#1|)) 6))
 (|representationType|
  (((|Union| "prime" "polynomial" "normal" "cyclic")) 6
   (|has| |#1| (|Finite|))))
 (|rem| (($ $ $) 6)) (|recip| (((|Union| $ #2#) $) 6))
 (|random| (($) 6 (|has| |#1| (|Finite|)))) (|quo| (($ $ $) 6))
 (|principalIdeal|
  (((|Record| (|:| |coef| (|List| $)) (|:| |generator| $)) (|List| $)) 6))
 (|primitiveElement| (($) 6 (|has| |#1| (|Finite|))))
 (|primitive?| (((|Boolean|) $) 6 (|has| |#1| (|Finite|))))
 (|primeFrobenius|
  (($ $ (|NonNegativeInteger|)) 6
   (OR (|has| |#1| (|CharacteristicNonZero|)) (|has| |#1| (|Finite|))))
  (($ $) 6
   (OR (|has| |#1| (|CharacteristicNonZero|)) (|has| |#1| (|Finite|)))))
 (|prime?| (((|Boolean|) $) 6))
 (|order| (((|PositiveInteger|) $) 6 (|has| |#1| (|Finite|)))
  (((|OnePointCompletion| (|PositiveInteger|)) $) 6
   (OR (|has| |#1| (|CharacteristicNonZero|)) (|has| |#1| (|Finite|)))))
 (|opposite?| (((|Boolean|) $ $) 6)) (|one?| (((|Boolean|) $) 6))
 (|normalElement| (($) 6 (|has| |#1| (|Finite|))))
 (|normal?| (((|Boolean|) $) 6 (|has| |#1| (|Finite|))))
 (|norm| ((|#1| $) 6) (($ $ (|PositiveInteger|)) 6 (|has| |#1| (|Finite|))))
 (|nextItem| (((|Union| $ "failed") $) 6 (|has| |#1| (|Finite|))))
 (|multiEuclidean| (((|Union| (|List| $) #3="failed") (|List| $) $) 6))
 (|minimalPolynomial| (((|SparseUnivariatePolynomial| |#1|) $) 6)
  (((|SparseUnivariatePolynomial| $) $ (|PositiveInteger|)) 6
   (|has| |#1| (|Finite|))))
 (|lookup| (((|PositiveInteger|) $) 6 (|has| |#1| (|Finite|))))
 (|linearAssociatedOrder|
  (((|SparseUnivariatePolynomial| |#1|) $) 6 (|has| |#1| (|Finite|))))
 (|linearAssociatedLog|
  (((|SparseUnivariatePolynomial| |#1|) $) 6 (|has| |#1| (|Finite|)))
  (((|Union| (|SparseUnivariatePolynomial| |#1|) "failed") $ $) 6
   (|has| |#1| (|Finite|))))
 (|linearAssociatedExp|
  (($ $ (|SparseUnivariatePolynomial| |#1|)) 6 (|has| |#1| (|Finite|))))
 (|leftRecip| (((|Union| $ #2#) $) 6))
 (|leftPower| (($ $ (|PositiveInteger|)) 6) (($ $ (|NonNegativeInteger|)) 6))
 (|lcmCoef|
  (((|Record| (|:| |llcm_res| $) (|:| |coeff1| $) (|:| |coeff2| $)) $ $) 6))
 (|lcm| (($ $ $) 6) (($ (|List| $)) 6)) (|latex| (((|String|) $) 6))
 (|inv| (($ $) 6)) (|init| (($) 6 (|has| |#1| (|Finite|)) CONST))
 (|index| (($ (|PositiveInteger|)) 6 (|has| |#1| (|Finite|))))
 (|inGroundField?| (((|Boolean|) $) 6))
 (|hashUpdate!| (((|HashState|) (|HashState|) $) 6))
 (|hash| (((|SingleInteger|) $) 6))
 (|generator| (($) 6 (|has| |#1| (|Finite|))))
 (|gcdPolynomial|
  (((|SparseUnivariatePolynomial| $) (|SparseUnivariatePolynomial| $)
    (|SparseUnivariatePolynomial| $))
   6))
 (|gcd| (($ $ $) 6) (($ (|List| $)) 6))
 (|factorsOfCyclicGroupSize|
  (((|List|
     (|Record| (|:| |factor| (|Integer|))
               (|:| |exponent| (|NonNegativeInteger|)))))
   6 (|has| |#1| (|Finite|))))
 (|factorSquareFreePolynomial|
  (((|Factored| (|SparseUnivariatePolynomial| $))
    (|SparseUnivariatePolynomial| $))
   6 (|has| |#1| (|Finite|))))
 (|factorPolynomial|
  (((|Factored| (|SparseUnivariatePolynomial| $))
    (|SparseUnivariatePolynomial| $))
   6 (|has| |#1| (|Finite|))))
 (|factor| (((|Factored| $) $) 6))
 (|extensionDegree| (((|OnePointCompletion| (|PositiveInteger|))) 6)
  (((|PositiveInteger|)) 6))
 (|extendedEuclidean|
  (((|Record| (|:| |coef1| $) (|:| |coef2| $) (|:| |generator| $)) $ $) 6)
  (((|Union| (|Record| (|:| |coef1| $) (|:| |coef2| $)) #3#) $ $ $) 6))
 (|exquo| (((|Union| $ "failed") $ $) 6))
 (|expressIdealMember| (((|Union| (|List| $) "failed") (|List| $) $) 6))
 (|euclideanSize| (((|NonNegativeInteger|) $) 6))
 (|enumerate| (((|List| $)) 6 (|has| |#1| (|Finite|))))
 (|divide| (((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $) 6))
 (|discreteLog| (((|NonNegativeInteger|) $) 6 (|has| |#1| (|Finite|)))
  (((|Union| (|NonNegativeInteger|) "failed") $ $) 6
   (OR (|has| |#1| (|CharacteristicNonZero|)) (|has| |#1| (|Finite|)))))
 (|dimension| (((|CardinalNumber|)) 6))
 (|differentiate| (($ $) 6 (|has| |#1| (|Finite|)))
  (($ $ (|NonNegativeInteger|)) 6 (|has| |#1| (|Finite|))))
 (|degree| (((|OnePointCompletion| (|PositiveInteger|)) $) 6)
  (((|PositiveInteger|) $) 6))
 (|definingPolynomial| (((|SparseUnivariatePolynomial| |#1|)) 6))
 (|createPrimitiveElement| (($) 6 (|has| |#1| (|Finite|))))
 (|createNormalElement| (($) 6 (|has| |#1| (|Finite|))))
 (|coordinates| (((|Vector| |#1|) $) 6) (((|Matrix| |#1|) (|Vector| $)) 6))
 (|convert| (((|InputForm|) $) 6 (|has| |#1| (|Finite|))))
 (|conditionP|
  (((|Union| (|Vector| $) #1#) (|Matrix| $)) 6
   (|and| (|has| $ (|CharacteristicNonZero|)) (|has| |#1| (|Finite|)))))
 (|commutator| (($ $ $) 6))
 (|coerce| (((|OutputForm|) $) 6) (($ (|Integer|)) 6) (($ $) 6)
           (($ (|Fraction| (|Integer|))) 6) (($ |#1|) 6))
 (|charthRoot| (($ $) 6 (|has| |#1| (|Finite|)))
  (((|Union| $ "failed") $) 6
   (OR (|has| |#1| (|CharacteristicNonZero|)) (|has| |#1| (|Finite|)))))
 (|characteristic| (((|NonNegativeInteger|)) 6))
 (|basis| (((|Vector| $)) 6) (((|Vector| $) (|PositiveInteger|)) 6))
 (|associator| (($ $ $ $) 6)) (|associates?| (((|Boolean|) $ $) 6))
 (|antiCommutator| (($ $ $) 6)) (|annihilate?| (((|Boolean|) $ $) 6))
 (|algebraic?| (((|Boolean|) $) 6))
 (^ (($ $ (|PositiveInteger|)) 6) (($ $ (|NonNegativeInteger|)) 6)
  (($ $ (|Integer|)) 6))
 (|Zero| (($) 6 T CONST)) (|One| (($) 6 T CONST))
 (|Frobenius| (($ $) 6 (|has| |#1| (|Finite|)))
  (($ $ (|NonNegativeInteger|)) 6 (|has| |#1| (|Finite|))))
 (D (($ $) 6 (|has| |#1| (|Finite|)))
  (($ $ (|NonNegativeInteger|)) 6 (|has| |#1| (|Finite|))))
 (= (((|Boolean|) $ $) 6)) (/ (($ $ $) 6) (($ $ |#1|) 6))
 (- (($ $ $) 6) (($ $) 6)) (+ (($ $ $) 6))
 (* (($ (|PositiveInteger|) $) 6) (($ $ $) 6) (($ (|Integer|) $) 6)
    (($ (|NonNegativeInteger|) $) 6) (($ $ (|Fraction| (|Integer|))) 6)
    (($ (|Fraction| (|Integer|)) $) 6) (($ $ |#1|) 6) (($ |#1| $) 6)))
FAXF
(((|ExtensionField| |#1|) . T) ((|RetractableTo| |#1|) . T)
 ((|FiniteFieldCategory|) |has| |#1| (|Finite|)))
(((|AbelianGroup|) . T) ((|AbelianMonoid|) . T) ((|AbelianSemiGroup|) . T)
 ((|Algebra| (|Fraction| (|Integer|))) . T) ((|Algebra| $) . T)
 ((|BasicType|) . T) ((|BiModule| |t#1| |t#1|) . T) ((|BiModule| $ $) . T)
 ((|CancellationAbelianMonoid|) . T)
 ((|CharacteristicNonZero|) OR (|has| |t#1| (|Finite|))
  (|has| |t#1| (|CharacteristicNonZero|)) (|has| |#1| (|Finite|)))
 ((|CharacteristicZero|) |has| |t#1| (|CharacteristicZero|))
 ((|CoercibleTo| (|OutputForm|)) . T) ((|CommutativeRing|) . T)
 ((|CommutativeStar|) . T) ((|Comparable|) |has| |#1| (|Finite|))
 ((|ConvertibleTo| (|InputForm|)) |has| |#1| (|Finite|))
 ((|DifferentialRing|) |has| |#1| (|Finite|)) ((|DivisionRing|) . T)
 ((|EntireRing|) . T) ((|EuclideanDomain|) . T) ((|ExtensionField| |#1|) . T)
 ((|Field|) . T)
 ((|FieldOfPrimeCharacteristic|) OR (|has| |t#1| (|Finite|))
  (|has| |t#1| (|CharacteristicNonZero|)) (|has| |#1| (|Finite|)))
 ((|Finite|) |has| |#1| (|Finite|))
 ((|FiniteFieldCategory|) |has| |#1| (|Finite|)) ((|GcdDomain|) . T)
 ((|IntegralDomain|) . T) ((|LeftModule| |t#1|) . T) ((|LeftOreRing|) . T)
 ((|Magma|) . T) ((|MagmaWithUnit|) . T) ((|Module| |t#1|) . T)
 ((|Monoid|) . T) ((|NonAssociativeRing|) . T) ((|NonAssociativeRng|) . T)
 ((|NonAssociativeSemiRing|) . T) ((|NonAssociativeSemiRng|) . T)
 ((|PolynomialFactorizationExplicit|) |has| |#1| (|Finite|))
 ((|PrincipalIdealDomain|) . T) ((|RetractableTo| |#1|) . T)
 ((|RetractableTo| |t#1|) . T) ((|RightModule| |t#2|) . T) ((|Ring|) . T)
 ((|Rng|) . T) ((|SemiGroup|) . T) ((|SemiRing|) . T) ((|SemiRng|) . T)
 ((|SetCategory|) . T) ((|StepThrough|) |has| |#1| (|Finite|))
 ((|TwoSidedRecip|) . T) ((|UniqueFactorizationDomain|) . T)
 ((|VectorSpace| |t#1|) . T) ((|canonicalUnitNormal|) . T)
 ((|canonicalsClosed|) . T) ((|noZeroDivisors|) . T) ((|unitsKnown|) . T))
((|constructor|
  (NIL
   "FiniteAlgebraicExtensionField {\\em F} is the category of fields which are finite algebraic extensions of the field {\\em F}. If {\\em F} is finite then any finite algebraic extension of {\\em F} is finite,{} too. Let {\\em K} be a finite algebraic extension of the finite field {\\em F}. The exponentiation of elements of {\\em K} defines a \\spad{Z}-module structure on the multiplicative group of {\\em K}. The additive group of {\\em K} becomes a module over the ring of polynomials over {\\em F} via the operation \\spadfun{linearAssociatedExp}(a: \\spad{K},{} \\spad{f:} SparseUnivariatePolynomial \\spad{F}) which is linear over {\\em F},{} \\spadignore{i.e.} for elements {\\em a} from {\\em K},{} {\\em c,{} d} from {\\em F} and {\\em f,{} g} univariate polynomials over {\\em F} we have \\spadfun{linearAssociatedExp}(a,{} cf+dg) equals {\\em c} times \\spadfun{linearAssociatedExp}(a,{} \\spad{f}) plus {\\em d} times \\spadfun{linearAssociatedExp}(a,{} \\spad{g}). Therefore \\spadfun{linearAssociatedExp} is defined completely by its action on monomials from {\\em F[X]}: \\spadfun{linearAssociatedExp}(a,{} monomial(1,{} \\spad{k})\\spad{\\$}SUP(\\spad{F})) is defined to be \\spadfun{Frobenius}(a,{} \\spad{k}) which is {\\em a^(q^k)} where {\\em q=size()\\$F}. The operations order and discreteLog associated with the multiplicative exponentiation have additive analogues associated to the operation \\spadfun{linearAssociatedExp}. These are the functions \\spadfun{linearAssociatedOrder} and \\spadfun{linearAssociatedLog},{} respectively."))
 (|linearAssociatedLog|
  (((|Union| (|SparseUnivariatePolynomial| |#1|) "failed") $ $)
   "\\spad{linearAssociatedLog(b,{} a)} returns a polynomial {\\em g},{} such that the \\spadfun{linearAssociatedExp}(\\spad{b},{} \\spad{g}) equals {\\em a}. If there is no such polynomial {\\em g},{} then \\spadfun{linearAssociatedLog} fails.")
  (((|SparseUnivariatePolynomial| |#1|) $)
   "\\spad{linearAssociatedLog(a)} returns a polynomial {\\em g},{} such that \\spadfun{linearAssociatedExp}(normalElement(),{} \\spad{g}) equals {\\em a}."))
 (|linearAssociatedOrder|
  (((|SparseUnivariatePolynomial| |#1|) $)
   "\\spad{linearAssociatedOrder(a)} retruns the monic polynomial {\\em g} of least degree,{} such that \\spadfun{linearAssociatedExp}(a,{} \\spad{g}) is 0."))
 (|linearAssociatedExp|
  (($ $ (|SparseUnivariatePolynomial| |#1|))
   "\\spad{linearAssociatedExp(a,{} f)} is linear over {\\em F},{} \\spadignore{i.e.} for elements {\\em a} from {\\em \\$},{} {\\em c,{} d} form {\\em F} and {\\em f,{} g} univariate polynomials over {\\em F} we have \\spadfun{linearAssociatedExp}(a,{} cf+dg) equals {\\em c} times \\spadfun{linearAssociatedExp}(a,{} \\spad{f}) plus {\\em d} times \\spadfun{linearAssociatedExp}(a,{} \\spad{g}). Therefore \\spadfun{linearAssociatedExp} is defined completely by its action on monomials from {\\em F[X]}: \\spadfun{linearAssociatedExp}(a,{} monomial(1,{} \\spad{k})\\spad{\\$}SUP(\\spad{F})) is defined to be \\spadfun{Frobenius}(a,{} \\spad{k}) which is {\\em a^(q^k)},{} where {\\em q=size()\\$F}."))
 (|generator|
  (($)
   "\\spad{generator()} returns a root of the defining polynomial. This element generates the field as an algebra over the ground field."))
 (|normal?|
  (((|Boolean|) $)
   "\\spad{normal?(a)} tests whether the element \\spad{a} is normal over the ground field \\spad{F},{} \\spadignore{i.e.} \\spad{a^(q^i),{} 0 <= i <= extensionDegree()-1} is an \\spad{F}-basis,{} where \\spad{q = size()\\$F}. Implementation according to Lidl/Niederreiter: Theorem 2.39."))
 (|normalElement|
  (($)
   "\\spad{normalElement()} returns a element,{} normal over the ground field \\spad{F},{} \\spadignore{i.e.} \\spad{a^(q^i),{} 0 <= i < extensionDegree()} is an \\spad{F}-basis,{} where \\spad{q = size()\\$F}. At the first call,{} the element is computed by \\spadfunFrom{createNormalElement}{FiniteAlgebraicExtensionField} then cached in a global variable. On subsequent calls,{} the element is retrieved by referencing the global variable."))
 (|createNormalElement|
  (($)
   "\\spad{createNormalElement()} computes a normal element over the ground field \\spad{F},{} that is,{} \\spad{a^(q^i),{} 0 <= i < extensionDegree()} is an \\spad{F}-basis,{} where \\spad{q = size()\\$F}. Reference: Such an element exists Lidl/Niederreiter: Theorem 2.35."))
 (|trace|
  (($ $ (|PositiveInteger|))
   "\\spad{trace(a,{} d)} computes the trace of \\spad{a} with respect to the field of extension degree \\spad{d} over the ground field of size \\spad{q}. Error: if \\spad{d} does not divide the extension degree of \\spad{a}. Note: \\spad{trace(a,{} d) = reduce(+,{} [a^(q^(d*i)) for i in 0..n/d])}.")
  ((|#1| $)
   "\\spad{trace(a)} computes the trace of \\spad{a} with respect to the field considered as an algebra with 1 over the ground field \\spad{F}."))
 (|norm|
  (($ $ (|PositiveInteger|))
   "\\spad{norm(a,{} d)} computes the norm of \\spad{a} with respect to the field of extension degree \\spad{d} over the ground field of size. Error: if \\spad{d} does not divide the extension degree of \\spad{a}. Note: norm(a,{} \\spad{d}) = reduce(*,{} [a^(\\spad{q^}(d*i)) for \\spad{i} in 0..\\spad{n/d}])")
  ((|#1| $)
   "\\spad{norm(a)} computes the norm of \\spad{a} with respect to the field considered as an algebra with 1 over the ground field \\spad{F}."))
 (|degree|
  (((|PositiveInteger|) $)
   "\\spad{degree(a)} returns the degree of the minimal polynomial of an element \\spad{a} over the ground field \\spad{F}."))
 (|extensionDegree|
  (((|PositiveInteger|))
   "\\spad{extensionDegree()} returns the degree of field extension."))
 (|definingPolynomial|
  (((|SparseUnivariatePolynomial| |#1|))
   "\\spad{definingPolynomial()} returns the polynomial used to define the field extension."))
 (|minimalPolynomial|
  (((|SparseUnivariatePolynomial| $) $ (|PositiveInteger|))
   "\\spad{minimalPolynomial(x,{} n)} computes the minimal polynomial of \\spad{x} over the field of extension degree \\spad{n} over the ground field \\spad{F}.")
  (((|SparseUnivariatePolynomial| |#1|) $)
   "\\spad{minimalPolynomial(a)} returns the minimal polynomial of an element \\spad{a} over the ground field \\spad{F}."))
 (|represents|
  (($ (|Vector| |#1|))
   "\\spad{represents([a1,{} ..,{} an])} returns \\spad{a1*v1 + ... + an*vn},{} where \\spad{v1},{} ...,{} \\spad{vn} are the elements of the fixed basis."))
 (|coordinates|
  (((|Matrix| |#1|) (|Vector| $))
   "\\spad{coordinates([v1,{} ...,{} vm])} returns the coordinates of the \\spad{vi}\\spad{'s} with to the fixed basis. The coordinates of \\spad{vi} are contained in the \\spad{i}th row of the matrix returned by this function.")
  (((|Vector| |#1|) $)
   "\\spad{coordinates(a)} returns the coordinates of \\spad{a} with respect to the fixed \\spad{F}-vector space basis."))
 (|basis|
  (((|Vector| $) (|PositiveInteger|))
   "\\spad{basis(n)} returns a fixed basis of a subfield of \\% as \\spad{F}-vector space.")
  (((|Vector| $))
   "\\spad{basis()} returns a fixed basis of \\% as \\spad{F}-vector space.")))
(("documentation" 0 15130) ("ancestors" 0 13305) ("parents" 0 13195)
 ("abbreviation" 0 13190) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 5959) ("modemaps" 0 1939) ("sourceFile" 0 1903)
 ("constructorCategory" 0 170) ("constructorModemap" 0 67)
 ("constructorKind" 0 56) ("constructorForm" 0 20))