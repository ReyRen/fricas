8574                (MAKEPROP '|FortranMatrixFunctionCategory| 'NILADIC T)
(|FortranMatrixFunctionCategory|)
|category|
(((|FortranMatrixFunctionCategory|) (|Category|))
 (T |FortranMatrixFunctionCategory|))
(|Join| (|FortranProgramCategory|)
        (CATEGORY |domain| (SIGNATURE |coerce| ($ (|List| (|FortranCode|))))
         (SIGNATURE |coerce| ($ (|FortranCode|)))
         (SIGNATURE |coerce|
          ($
           (|Record| (|:| |localSymbols| (|SymbolTable|))
                     (|:| |code| (|List| (|FortranCode|))))))
         (SIGNATURE |retract| ($ (|Matrix| (|Expression| (|Float|)))))
         (SIGNATURE |retractIfCan|
          ((|Union| $ "failed") (|Matrix| (|Expression| (|Float|)))))
         (SIGNATURE |retract| ($ (|Matrix| (|Expression| (|Integer|)))))
         (SIGNATURE |retractIfCan|
          ((|Union| $ "failed") (|Matrix| (|Expression| (|Integer|)))))
         (SIGNATURE |retract| ($ (|Matrix| (|Polynomial| (|Float|)))))
         (SIGNATURE |retractIfCan|
          ((|Union| $ "failed") (|Matrix| (|Polynomial| (|Float|)))))
         (SIGNATURE |retract| ($ (|Matrix| (|Polynomial| (|Integer|)))))
         (SIGNATURE |retractIfCan|
          ((|Union| $ "failed") (|Matrix| (|Polynomial| (|Integer|)))))
         (SIGNATURE |retract|
          ($ (|Matrix| (|Fraction| (|Polynomial| (|Float|))))))
         (SIGNATURE |retractIfCan|
          ((|Union| $ "failed")
           (|Matrix| (|Fraction| (|Polynomial| (|Float|))))))
         (SIGNATURE |retract|
          ($ (|Matrix| (|Fraction| (|Polynomial| (|Integer|))))))
         (SIGNATURE |retractIfCan|
          ((|Union| $ "failed")
           (|Matrix| (|Fraction| (|Polynomial| (|Integer|))))))))
"/git/fricas/src/algebra/FMFUN.spad"
((|coerce| (*1 *1 *2)
           (AND (|isDomain| *2 (|List| (|FortranCode|)))
                (|ofCategory| *1 (|FortranMatrixFunctionCategory|))))
 (|coerce| (*1 *1 *2)
           (AND (|isDomain| *2 (|FortranCode|))
                (|ofCategory| *1 (|FortranMatrixFunctionCategory|))))
 (|coerce| (*1 *1 *2)
           (AND
            (|isDomain| *2
                        (|Record| (|:| |localSymbols| (|SymbolTable|))
                                  (|:| |code| (|List| (|FortranCode|)))))
            (|ofCategory| *1 (|FortranMatrixFunctionCategory|))))
 (|retract| (*1 *1 *2)
            (AND (|isDomain| *2 (|Matrix| (|Expression| (|Float|))))
                 (|ofCategory| *1 (|FortranMatrixFunctionCategory|))))
 (|retractIfCan| (*1 *1 *2)
  (|partial| AND (|isDomain| *2 (|Matrix| (|Expression| (|Float|))))
   (|ofCategory| *1 (|FortranMatrixFunctionCategory|))))
 (|retract| (*1 *1 *2)
            (AND (|isDomain| *2 (|Matrix| (|Expression| (|Integer|))))
                 (|ofCategory| *1 (|FortranMatrixFunctionCategory|))))
 (|retractIfCan| (*1 *1 *2)
  (|partial| AND (|isDomain| *2 (|Matrix| (|Expression| (|Integer|))))
   (|ofCategory| *1 (|FortranMatrixFunctionCategory|))))
 (|retract| (*1 *1 *2)
            (AND (|isDomain| *2 (|Matrix| (|Polynomial| (|Float|))))
                 (|ofCategory| *1 (|FortranMatrixFunctionCategory|))))
 (|retractIfCan| (*1 *1 *2)
  (|partial| AND (|isDomain| *2 (|Matrix| (|Polynomial| (|Float|))))
   (|ofCategory| *1 (|FortranMatrixFunctionCategory|))))
 (|retract| (*1 *1 *2)
            (AND (|isDomain| *2 (|Matrix| (|Polynomial| (|Integer|))))
                 (|ofCategory| *1 (|FortranMatrixFunctionCategory|))))
 (|retractIfCan| (*1 *1 *2)
  (|partial| AND (|isDomain| *2 (|Matrix| (|Polynomial| (|Integer|))))
   (|ofCategory| *1 (|FortranMatrixFunctionCategory|))))
 (|retract| (*1 *1 *2)
            (AND
             (|isDomain| *2 (|Matrix| (|Fraction| (|Polynomial| (|Float|)))))
             (|ofCategory| *1 (|FortranMatrixFunctionCategory|))))
 (|retractIfCan| (*1 *1 *2)
  (|partial| AND
   (|isDomain| *2 (|Matrix| (|Fraction| (|Polynomial| (|Float|)))))
   (|ofCategory| *1 (|FortranMatrixFunctionCategory|))))
 (|retract| (*1 *1 *2)
            (AND
             (|isDomain| *2 (|Matrix| (|Fraction| (|Polynomial| (|Integer|)))))
             (|ofCategory| *1 (|FortranMatrixFunctionCategory|))))
 (|retractIfCan| (*1 *1 *2)
  (|partial| AND
   (|isDomain| *2 (|Matrix| (|Fraction| (|Polynomial| (|Integer|)))))
   (|ofCategory| *1 (|FortranMatrixFunctionCategory|)))))
((|retractIfCan| (((|Union| $ "failed") (|Matrix| (|Expression| (|Float|)))) 6)
  (((|Union| $ "failed") (|Matrix| (|Expression| (|Integer|)))) 6)
  (((|Union| $ "failed") (|Matrix| (|Polynomial| (|Float|)))) 6)
  (((|Union| $ "failed") (|Matrix| (|Polynomial| (|Integer|)))) 6)
  (((|Union| $ "failed") (|Matrix| (|Fraction| (|Polynomial| (|Float|))))) 6)
  (((|Union| $ "failed") (|Matrix| (|Fraction| (|Polynomial| (|Integer|)))))
   6))
 (|retract| (($ (|Matrix| (|Expression| (|Float|)))) 6)
            (($ (|Matrix| (|Expression| (|Integer|)))) 6)
            (($ (|Matrix| (|Polynomial| (|Float|)))) 6)
            (($ (|Matrix| (|Polynomial| (|Integer|)))) 6)
            (($ (|Matrix| (|Fraction| (|Polynomial| (|Float|))))) 6)
            (($ (|Matrix| (|Fraction| (|Polynomial| (|Integer|))))) 6))
 (|outputAsFortran| (((|Void|) $) 6))
 (|coerce| (((|OutputForm|) $) 6) (($ (|List| (|FortranCode|))) 6)
           (($ (|FortranCode|)) 6)
           (($
             (|Record| (|:| |localSymbols| (|SymbolTable|))
                       (|:| |code| (|List| (|FortranCode|)))))
            6)))
FMFUN
(((|FortranProgramCategory|) . T))
(((|CoercibleTo| (|OutputForm|)) . T) ((|FortranProgramCategory|) . T)
 ((|Type|) . T))
((|constructor|
  (NIL
   "\\spadtype{FortranMatrixFunctionCategory} provides support for producing Functions and Subroutines representing matrices of expressions."))
 (|retractIfCan|
  (((|Union| $ "failed") (|Matrix| (|Fraction| (|Polynomial| (|Integer|)))))
   "\\spad{retractIfCan(e)} tries to convert \\spad{e} into an ASP,{} checking that \\indented{1}{legal Fortran-77 is produced.}")
  (((|Union| $ "failed") (|Matrix| (|Fraction| (|Polynomial| (|Float|)))))
   "\\spad{retractIfCan(e)} tries to convert \\spad{e} into an ASP,{} checking that \\indented{1}{legal Fortran-77 is produced.}")
  (((|Union| $ "failed") (|Matrix| (|Polynomial| (|Integer|))))
   "\\spad{retractIfCan(e)} tries to convert \\spad{e} into an ASP,{} checking that \\indented{1}{legal Fortran-77 is produced.}")
  (((|Union| $ "failed") (|Matrix| (|Polynomial| (|Float|))))
   "\\spad{retractIfCan(e)} tries to convert \\spad{e} into an ASP,{} checking that \\indented{1}{legal Fortran-77 is produced.}")
  (((|Union| $ "failed") (|Matrix| (|Expression| (|Integer|))))
   "\\spad{retractIfCan(e)} tries to convert \\spad{e} into an ASP,{} checking that \\indented{1}{legal Fortran-77 is produced.}")
  (((|Union| $ "failed") (|Matrix| (|Expression| (|Float|))))
   "\\spad{retractIfCan(e)} tries to convert \\spad{e} into an ASP,{} checking that \\indented{1}{legal Fortran-77 is produced.}"))
 (|retract|
  (($ (|Matrix| (|Fraction| (|Polynomial| (|Integer|)))))
   "\\spad{retract(e)} tries to convert \\spad{e} into an ASP,{} checking that \\indented{1}{legal Fortran-77 is produced.}")
  (($ (|Matrix| (|Fraction| (|Polynomial| (|Float|)))))
   "\\spad{retract(e)} tries to convert \\spad{e} into an ASP,{} checking that \\indented{1}{legal Fortran-77 is produced.}")
  (($ (|Matrix| (|Polynomial| (|Integer|))))
   "\\spad{retract(e)} tries to convert \\spad{e} into an ASP,{} checking that \\indented{1}{legal Fortran-77 is produced.}")
  (($ (|Matrix| (|Polynomial| (|Float|))))
   "\\spad{retract(e)} tries to convert \\spad{e} into an ASP,{} checking that \\indented{1}{legal Fortran-77 is produced.}")
  (($ (|Matrix| (|Expression| (|Integer|))))
   "\\spad{retract(e)} tries to convert \\spad{e} into an ASP,{} checking that \\indented{1}{legal Fortran-77 is produced.}")
  (($ (|Matrix| (|Expression| (|Float|))))
   "\\spad{retract(e)} tries to convert \\spad{e} into an ASP,{} checking that \\indented{1}{legal Fortran-77 is produced.}"))
 (|coerce|
  (($
    (|Record| (|:| |localSymbols| (|SymbolTable|))
              (|:| |code| (|List| (|FortranCode|)))))
   "\\spad{coerce(e)} takes the component of \\spad{e} from \\spadtype{List FortranCode} and uses it as the body of the ASP,{} making the declarations in the \\spadtype{SymbolTable} component.")
  (($ (|FortranCode|))
   "\\spad{coerce(e)} takes an object from \\spadtype{FortranCode} and \\indented{1}{uses it as the body of an ASP.}")
  (($ (|List| (|FortranCode|)))
   "\\spad{coerce(e)} takes an object from \\spadtype{List FortranCode} and \\indented{1}{uses it as the body of an ASP.}")))
(("documentation" 0 5523) ("ancestors" 0 5435) ("parents" 0 5400)
 ("abbreviation" 0 5394) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 4289) ("modemaps" 0 1733) ("sourceFile" 0 1696)
 ("constructorCategory" 0 208) ("constructorModemap" 0 120)
 ("constructorKind" 0 109) ("constructorForm" 0 75) ("NILADIC" 0 20))