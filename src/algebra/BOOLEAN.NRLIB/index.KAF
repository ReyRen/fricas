3789                (MAKEPROP '|Boolean| 'NILADIC T)
(|Boolean|)
|domain|
(((|Boolean|)
  (|Join| (|OrderedSet|) (|Finite|) (|Logic|) (|ConvertibleTo| (|InputForm|))
          (CATEGORY |domain| (SIGNATURE |not| ($ $)) (SIGNATURE |and| ($ $ $))
           (SIGNATURE |or| ($ $ $)) (SIGNATURE |xor| ($ $ $))
           (SIGNATURE |nand| ($ $ $)) (SIGNATURE |nor| ($ $ $))
           (SIGNATURE |implies| ($ $ $)) (SIGNATURE |test| ((|Boolean|) $)))))
 (T |Boolean|))
(|Join| (|OrderedSet|) (|Finite|) (|Logic|) (|ConvertibleTo| (|InputForm|))
        (CATEGORY |domain| (SIGNATURE |not| ($ $)) (SIGNATURE |and| ($ $ $))
         (SIGNATURE |or| ($ $ $)) (SIGNATURE |xor| ($ $ $))
         (SIGNATURE |nand| ($ $ $)) (SIGNATURE |nor| ($ $ $))
         (SIGNATURE |implies| ($ $ $)) (SIGNATURE |test| ((|Boolean|) $))))
"/git/fricas/src/algebra/BOOLEAN.spad"
((|not| (*1 *1 *1) (|isDomain| *1 (|Boolean|)))
 (|and| (*1 *1 *1 *1) (|isDomain| *1 (|Boolean|)))
 (|or| (*1 *1 *1 *1) (|isDomain| *1 (|Boolean|)))
 (|xor| (*1 *1 *1 *1) (|isDomain| *1 (|Boolean|)))
 (|nand| (*1 *1 *1 *1) (|isDomain| *1 (|Boolean|)))
 (|nor| (*1 *1 *1 *1) (|isDomain| *1 (|Boolean|)))
 (|implies| (*1 *1 *1 *1) (|isDomain| *1 (|Boolean|)))
 (|test| (*1 *1 *1) (|isDomain| *1 (|Boolean|))))
((~= (((|Boolean|) $ $) NIL)) (~ (($ $) 11)) (|xor| (($ $ $) 16))
 (|true| (($) 8 T CONST)) (|test| (((|Boolean|) $) 7))
 (|smaller?| (((|Boolean|) $ $) NIL)) (|size| (((|NonNegativeInteger|)) 23))
 (|random| (($) 29)) (|or| (($ $ $) 14)) (|not| (($ $) 10))
 (|nor| (($ $ $) 17)) (|nand| (($ $ $) 18)) (|min| (($ $ $) NIL))
 (|max| (($ $ $) NIL)) (|lookup| (((|PositiveInteger|) $) 28))
 (|latex| (((|String|) $) NIL)) (|index| (($ (|PositiveInteger|)) 27))
 (|implies| (($ $ $) 20)) (|hashUpdate!| (((|HashState|) (|HashState|) $) NIL))
 (|hash| (((|SingleInteger|) $) NIL)) (|false| (($) 9 T CONST))
 (|enumerate| (((|List| $)) NIL)) (|convert| (((|InputForm|) $) 33))
 (|coerce| (((|OutputForm|) $) 37)) (|and| (($ $ $) 12))
 (|_\|_| (($) NIL T CONST)) (|\\/| (($ $ $) 15)) (T$ (($) NIL T CONST))
 (>= (((|Boolean|) $ $) NIL)) (> (((|Boolean|) $ $) NIL))
 (= (((|Boolean|) $ $) 19)) (<= (((|Boolean|) $ $) NIL))
 (< (((|Boolean|) $ $) 21)) (|/\\| (($ $ $) 13)))
BOOLEAN
(((|OrderedSet|) . T) ((|Finite|) . T) ((|Logic|) . T)
 ((|ConvertibleTo| (|InputForm|)) . T))
(((|BasicType|) . T) ((|BoundedDistributiveLattice|) . T)
 ((|BoundedJoinSemilattice|) . T) ((|BoundedLattice|) . T)
 ((|BoundedMeetSemilattice|) . T) ((|CoercibleTo| (|OutputForm|)) . T)
 ((|Comparable|) . T) ((|ConvertibleTo| (|InputForm|)) . T)
 ((|DistributiveLattice|) . T) ((|Finite|) . T) ((|JoinSemilattice|) . T)
 ((|Lattice|) . T) ((|Logic|) . T) ((|MeetSemilattice|) . T)
 ((|OrderedSet|) . T) ((|PartialOrder|) . T) ((|SetCategory|) . T))
((|constructor|
  (NIL
   "\\indented{1}{\\spadtype{Boolean} is the elementary logic with 2 values:} \\spad{true} and \\spad{false}"))
 (|test|
  (((|Boolean|) $)
   "\\spad{test(b)} returns \\spad{b} and is provided for compatibility with the new compiler."))
 (|implies|
  (($ $ $)
   "\\spad{implies(a,{} b)} returns the logical implication of Boolean \\spad{a} and \\spad{b}."))
 (|nor|
  (($ $ $)
   "\\spad{nor(a,{} b)} returns the logical negation of \\spad{a} or \\spad{b}."))
 (|nand|
  (($ $ $)
   "\\spad{nand(a,{} b)} returns the logical negation of \\spad{a} and \\spad{b}."))
 (|xor|
  (($ $ $)
   "\\spad{xor(a,{} b)} returns the logical exclusive {\\em or} of Boolean \\spad{a} and \\spad{b}."))
 (|or|
  (($ $ $)
   "\\spad{a or b} returns the logical inclusive {\\em or} of Boolean \\spad{a} and \\spad{b}."))
 (|and|
  (($ $ $)
   "\\spad{a and b} returns the logical {\\em and} of Boolean \\spad{a} and \\spad{b}."))
 (|not| (($ $) "\\spad{not n} returns the negation of \\spad{n}.")))
(("documentation" 0 2783) ("ancestors" 0 2332) ("parents" 0 2237)
 ("abbreviation" 0 2229) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 1264) ("modemaps" 0 856) ("sourceFile" 0 817)
 ("constructorCategory" 0 466) ("constructorModemap" 0 74)
 ("constructorKind" 0 65) ("constructorForm" 0 53) ("NILADIC" 0 20))