12797               (MAKEPROP '|GuessOption| 'NILADIC T)
(|GuessOption|)
|domain|
(((|GuessOption|)
  (|Join| (|SetCategory|)
          (CATEGORY |domain|
           (SIGNATURE |maxDerivative|
            ($ (|Union| (|NonNegativeInteger|) "arbitrary")))
           (SIGNATURE |maxShift|
            ($ (|Union| (|NonNegativeInteger|) "arbitrary")))
           (SIGNATURE |maxSubst| ($ (|Union| (|PositiveInteger|) "arbitrary")))
           (SIGNATURE |maxPower| ($ (|Union| (|PositiveInteger|) "arbitrary")))
           (SIGNATURE |homogeneous|
            ($ (|Union| (|PositiveInteger|) (|Boolean|))))
           (SIGNATURE |Somos| ($ (|Union| (|PositiveInteger|) (|Boolean|))))
           (SIGNATURE |maxLevel|
            ($ (|Union| (|NonNegativeInteger|) "arbitrary")))
           (SIGNATURE |maxDegree|
            ($ (|Union| (|NonNegativeInteger|) "arbitrary")))
           (SIGNATURE |maxMixedDegree| ($ (|NonNegativeInteger|)))
           (SIGNATURE |allDegrees| ($ (|Boolean|)))
           (SIGNATURE |safety| ($ (|NonNegativeInteger|)))
           (SIGNATURE |check|
            ($ (|Union| "skip" "MonteCarlo" "deterministic")))
           (SIGNATURE |checkExtraValues| ($ (|Boolean|)))
           (SIGNATURE |one| ($ (|Boolean|)))
           (SIGNATURE |debug| ($ (|Boolean|)))
           (SIGNATURE |functionName| ($ (|Symbol|)))
           (SIGNATURE |functionNames| ($ (|List| (|Symbol|))))
           (SIGNATURE |variableName| ($ (|Symbol|)))
           (SIGNATURE |indexName| ($ (|Symbol|)))
           (SIGNATURE |displayKind| ($ (|Symbol|)))
           (SIGNATURE |option|
            ((|Union| (|Any|) "failed") (|List| $) (|Symbol|))))))
 (T |GuessOption|))
(|Join| (|SetCategory|)
        (CATEGORY |domain|
         (SIGNATURE |maxDerivative|
          ($ (|Union| (|NonNegativeInteger|) "arbitrary")))
         (SIGNATURE |maxShift|
          ($ (|Union| (|NonNegativeInteger|) "arbitrary")))
         (SIGNATURE |maxSubst| ($ (|Union| (|PositiveInteger|) "arbitrary")))
         (SIGNATURE |maxPower| ($ (|Union| (|PositiveInteger|) "arbitrary")))
         (SIGNATURE |homogeneous|
          ($ (|Union| (|PositiveInteger|) (|Boolean|))))
         (SIGNATURE |Somos| ($ (|Union| (|PositiveInteger|) (|Boolean|))))
         (SIGNATURE |maxLevel|
          ($ (|Union| (|NonNegativeInteger|) "arbitrary")))
         (SIGNATURE |maxDegree|
          ($ (|Union| (|NonNegativeInteger|) "arbitrary")))
         (SIGNATURE |maxMixedDegree| ($ (|NonNegativeInteger|)))
         (SIGNATURE |allDegrees| ($ (|Boolean|)))
         (SIGNATURE |safety| ($ (|NonNegativeInteger|)))
         (SIGNATURE |check| ($ (|Union| "skip" "MonteCarlo" "deterministic")))
         (SIGNATURE |checkExtraValues| ($ (|Boolean|)))
         (SIGNATURE |one| ($ (|Boolean|))) (SIGNATURE |debug| ($ (|Boolean|)))
         (SIGNATURE |functionName| ($ (|Symbol|)))
         (SIGNATURE |functionNames| ($ (|List| (|Symbol|))))
         (SIGNATURE |variableName| ($ (|Symbol|)))
         (SIGNATURE |indexName| ($ (|Symbol|)))
         (SIGNATURE |displayKind| ($ (|Symbol|)))
         (SIGNATURE |option|
          ((|Union| (|Any|) "failed") (|List| $) (|Symbol|)))))
"/git/fricas/src/algebra/GOPT.spad"
((|maxDerivative| (*1 *1 *2)
  (AND (|isDomain| *2 (|Union| (|NonNegativeInteger|) "arbitrary"))
       (|isDomain| *1 (|GuessOption|))))
 (|maxShift| (*1 *1 *2)
  (AND (|isDomain| *2 (|Union| (|NonNegativeInteger|) "arbitrary"))
       (|isDomain| *1 (|GuessOption|))))
 (|maxSubst| (*1 *1 *2)
  (AND (|isDomain| *2 (|Union| (|PositiveInteger|) "arbitrary"))
       (|isDomain| *1 (|GuessOption|))))
 (|maxPower| (*1 *1 *2)
  (AND (|isDomain| *2 (|Union| (|PositiveInteger|) "arbitrary"))
       (|isDomain| *1 (|GuessOption|))))
 (|homogeneous| (*1 *1 *2)
  (AND (|isDomain| *2 (|Union| (|PositiveInteger|) (|Boolean|)))
       (|isDomain| *1 (|GuessOption|))))
 (|Somos| (*1 *1 *2)
  (AND (|isDomain| *2 (|Union| (|PositiveInteger|) (|Boolean|)))
       (|isDomain| *1 (|GuessOption|))))
 (|maxLevel| (*1 *1 *2)
  (AND (|isDomain| *2 (|Union| (|NonNegativeInteger|) "arbitrary"))
       (|isDomain| *1 (|GuessOption|))))
 (|maxDegree| (*1 *1 *2)
  (AND (|isDomain| *2 (|Union| (|NonNegativeInteger|) "arbitrary"))
       (|isDomain| *1 (|GuessOption|))))
 (|maxMixedDegree| (*1 *1 *2)
  (AND (|isDomain| *2 (|NonNegativeInteger|)) (|isDomain| *1 (|GuessOption|))))
 (|allDegrees| (*1 *1 *2)
  (AND (|isDomain| *2 (|Boolean|)) (|isDomain| *1 (|GuessOption|))))
 (|safety| (*1 *1 *2)
  (AND (|isDomain| *2 (|NonNegativeInteger|)) (|isDomain| *1 (|GuessOption|))))
 (|check| (*1 *1 *2)
  (AND (|isDomain| *2 (|Union| "skip" "MonteCarlo" "deterministic"))
       (|isDomain| *1 (|GuessOption|))))
 (|checkExtraValues| (*1 *1 *2)
  (AND (|isDomain| *2 (|Boolean|)) (|isDomain| *1 (|GuessOption|))))
 (|one| (*1 *1 *2)
  (AND (|isDomain| *2 (|Boolean|)) (|isDomain| *1 (|GuessOption|))))
 (|debug| (*1 *1 *2)
  (AND (|isDomain| *2 (|Boolean|)) (|isDomain| *1 (|GuessOption|))))
 (|functionName| (*1 *1 *2)
  (AND (|isDomain| *2 (|Symbol|)) (|isDomain| *1 (|GuessOption|))))
 (|functionNames| (*1 *1 *2)
  (AND (|isDomain| *2 (|List| (|Symbol|))) (|isDomain| *1 (|GuessOption|))))
 (|variableName| (*1 *1 *2)
  (AND (|isDomain| *2 (|Symbol|)) (|isDomain| *1 (|GuessOption|))))
 (|indexName| (*1 *1 *2)
  (AND (|isDomain| *2 (|Symbol|)) (|isDomain| *1 (|GuessOption|))))
 (|displayKind| (*1 *1 *2)
  (AND (|isDomain| *2 (|Symbol|)) (|isDomain| *1 (|GuessOption|))))
 (|option| (*1 *2 *3 *4)
  (|partial| AND (|isDomain| *3 (|List| (|GuessOption|)))
   (|isDomain| *4 (|Symbol|)) (|isDomain| *2 (|Any|))
   (|isDomain| *1 (|GuessOption|)))))
((~= (((|Boolean|) $ $) NIL)) (|variableName| (($ (|Symbol|)) 49))
 (|safety| (($ (|NonNegativeInteger|)) 28))
 (|option| (((|Union| (|Any|) "failed") (|List| $) (|Symbol|)) 61))
 (|one| (($ (|Boolean|)) 40))
 (|maxSubst| (($ (|Union| (|PositiveInteger|) "arbitrary")) 15))
 (|maxShift| (($ (|Union| (|NonNegativeInteger|) "arbitrary")) 13))
 (|maxPower| (($ (|Union| (|PositiveInteger|) "arbitrary")) 27))
 (|maxMixedDegree| (($ (|NonNegativeInteger|)) 20))
 (|maxLevel| (($ (|Union| (|NonNegativeInteger|) "arbitrary")) 11))
 (|maxDerivative| (($ (|Union| (|NonNegativeInteger|) "arbitrary")) 12))
 (|maxDegree| (($ (|Union| (|NonNegativeInteger|) "arbitrary")) 16))
 (|latex| (((|String|) $) NIL)) (|indexName| (($ (|Symbol|)) 50))
 (|homogeneous| (($ (|Union| (|PositiveInteger|) (|Boolean|))) 32))
 (|hashUpdate!| (((|HashState|) (|HashState|) $) NIL))
 (|hash| (((|SingleInteger|) $) NIL))
 (|functionNames| (($ (|List| (|Symbol|))) 48))
 (|functionName| (($ (|Symbol|)) 44)) (|displayKind| (($ (|Symbol|)) 51))
 (|debug| (($ (|Boolean|)) 34)) (|coerce| (((|OutputForm|) $) 56))
 (|checkExtraValues| (($ (|Boolean|)) 39))
 (|check| (($ (|Union| "skip" "MonteCarlo" "deterministic")) 38))
 (|allDegrees| (($ (|Boolean|)) 24))
 (|Somos| (($ (|Union| (|PositiveInteger|) (|Boolean|))) 33))
 (= (((|Boolean|) $ $) 58)))
GOPT
(((|SetCategory|) . T))
(((|BasicType|) . T) ((|CoercibleTo| (|OutputForm|)) . T) ((|SetCategory|) . T))
((|constructor|
  (NIL
   "GuessOption is a domain whose elements are various options used by \\spadtype{Guess}."))
 (|option|
  (((|Union| (|Any|) "failed") (|List| $) (|Symbol|))
   "\\spad{option(l,{} option)} returns which options are given."))
 (|displayKind|
  (($ (|Symbol|))
   "\\spad{displayKind(d)} specifies kind of the result: generating function,{} recurrence or equation. This option should not be set by the user,{} but rather by the \\spad{HP}-specification."))
 (|indexName|
  (($ (|Symbol|))
   "\\spad{indexName(d)} specifies the index variable used for the formulas. This option is expressed in the form \\spad{indexName == d}."))
 (|variableName|
  (($ (|Symbol|))
   "\\spad{variableName(d)} specifies the variable used in by the algebraic differential equation. This option is expressed in the form \\spad{variableName == d}."))
 (|functionNames|
  (($ (|List| (|Symbol|)))
   "\\spad{functionNames(d)} specifies the names for the function in algebraic dependence. This option is expressed in the form \\spad{functionNames == d}."))
 (|functionName|
  (($ (|Symbol|))
   "\\spad{functionName(d)} specifies the name of the function given by the algebraic differential equation or recurrence. This option is expressed in the form \\spad{functionName == d}."))
 (|debug|
  (($ (|Boolean|))
   "\\spad{debug(d)} specifies whether we want additional output on the progress. This option is expressed in the form \\spad{debug == d}."))
 (|one|
  (($ (|Boolean|))
   "\\spad{one(d)} specifies whether we are happy with one solution. This option is expressed in the form \\spad{one == d}."))
 (|checkExtraValues|
  (($ (|Boolean|))
   "\\spad{checkExtraValues(d)} specifies whether we want to check the solution beyond the order given by the degree bounds. This option is expressed in the form \\spad{checkExtraValues == d}"))
 (|check|
  (($ (|Union| "skip" "MonteCarlo" "deterministic"))
   "\\spad{check(d)} specifies how we want to check the solution. If the value is \"skip\",{} we return the solutions found by the interpolation routine without checking. If the value is \"MonteCarlo\",{} we use a probabilistic check. This option is expressed in the form \\spad{check == d}"))
 (|safety|
  (($ (|NonNegativeInteger|))
   "\\spad{safety(d)} specifies the number of values reserved for testing any solutions found. This option is expressed in the form \\spad{safety == d}."))
 (|allDegrees|
  (($ (|Boolean|))
   "\\spad{allDegrees(d)} specifies whether all possibilities of the degree vector - taking into account maxDegree - should be tried. This is mainly interesting for rational interpolation. This option is expressed in the form \\spad{allDegrees == d}."))
 (|maxMixedDegree|
  (($ (|NonNegativeInteger|))
   "\\spad{maxMixedDegree(d)} specifies the maximum \\spad{q}-degree of the coefficient polynomials in a recurrence with polynomial coefficients,{} in the case of mixed shifts. Although slightly inconsistent,{} maxMixedDegree(0) specifies that no mixed shifts are allowed. This option is expressed in the form \\spad{maxMixedDegree == d}."))
 (|maxDegree|
  (($ (|Union| (|NonNegativeInteger|) "arbitrary"))
   "\\spad{maxDegree(d)} specifies the maximum degree of the coefficient polynomials in an algebraic differential equation or a recursion with polynomial coefficients. For rational functions with an exponential term,{} \\spad{maxDegree} bounds the degree of the denominator polynomial. This option is expressed in the form \\spad{maxDegree == d}."))
 (|maxLevel|
  (($ (|Union| (|NonNegativeInteger|) "arbitrary"))
   "\\spad{maxLevel(d)} specifies the maximum number of recursion levels operators guessProduct and guessSum will be applied. This option is expressed in the form spad{maxLevel \\spad{==} \\spad{d}}."))
 (|Somos|
  (($ (|Union| (|PositiveInteger|) (|Boolean|)))
   "\\spad{Somos(d)} specifies whether we want that the total degree of the differential operators is constant,{} and equal to \\spad{d},{} or maxDerivative if \\spad{true}. If \\spad{true},{} maxDerivative must be set,{} too."))
 (|homogeneous|
  (($ (|Union| (|PositiveInteger|) (|Boolean|)))
   "\\spad{homogeneous(d)} specifies whether we allow only homogeneous algebraic differential equations. This option is expressed in the form \\spad{homogeneous == d}. If \\spad{true},{} then maxPower must be set,{} too,{} and ADEs with constant total degree are allowed. If a PositiveInteger is given,{} only ADE\\spad{'s} with this total degree are allowed."))
 (|maxPower|
  (($ (|Union| (|PositiveInteger|) "arbitrary"))
   "\\spad{maxPower(d)} specifies the maximum degree in an algebraic differential equation. For example,{} the degree of (\\spad{f}\\spad{''})\\spad{^3} \\spad{f'} is 4. maxPower(\\spad{-1}) specifies that the maximum exponent can be arbitrary. This option is expressed in the form \\spad{maxPower == d}."))
 (|maxSubst|
  (($ (|Union| (|PositiveInteger|) "arbitrary"))
   "\\spad{maxSubst(d)} specifies the maximum degree of the monomial substituted into the function we are looking for. That is,{} if \\spad{maxSubst == d},{} we look for polynomials such that \\$\\spad{p}(\\spad{f}(\\spad{x}),{} \\spad{f}(\\spad{x^2}),{} ...,{} \\spad{f}(\\spad{x^d}))\\spad{=0}\\$. equation. This option is expressed in the form \\spad{maxSubst == d}."))
 (|maxShift|
  (($ (|Union| (|NonNegativeInteger|) "arbitrary"))
   "\\spad{maxShift(d)} specifies the maximum shift in a recurrence equation. This option is expressed in the form \\spad{maxShift == d}."))
 (|maxDerivative|
  (($ (|Union| (|NonNegativeInteger|) "arbitrary"))
   "\\spad{maxDerivative(d)} specifies the maximum derivative in an algebraic differential equation. This option is expressed in the form \\spad{maxDerivative == d}.")))
(("documentation" 0 7070) ("ancestors" 0 6989) ("parents" 0 6965)
 ("abbreviation" 0 6960) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 5638) ("modemaps" 0 3202) ("sourceFile" 0 3166)
 ("constructorCategory" 0 1683) ("constructorModemap" 0 82)
 ("constructorKind" 0 73) ("constructorForm" 0 57) ("NILADIC" 0 20))