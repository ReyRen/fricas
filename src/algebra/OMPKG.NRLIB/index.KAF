3949                (MAKEPROP '|OpenMathPackage| 'NILADIC T)
(|OpenMathPackage|)
|package|
(((|OpenMathPackage|)
  (CATEGORY |package| (SIGNATURE |OMread| ((|Any|) (|OpenMathDevice|)))
   (SIGNATURE |OMreadFile| ((|Any|) (|String|)))
   (SIGNATURE |OMreadStr| ((|Any|) (|String|)))
   (SIGNATURE |OMlistCDs| ((|List| (|String|))))
   (SIGNATURE |OMlistSymbols| ((|List| (|String|)) (|String|)))
   (SIGNATURE |OMsupportsCD?| ((|Boolean|) (|String|)))
   (SIGNATURE |OMsupportsSymbol?| ((|Boolean|) (|String|) (|String|)))
   (SIGNATURE |OMunhandledSymbol| ((|Exit|) (|String|) (|String|)))))
 (T |OpenMathPackage|))
(CATEGORY |package| (SIGNATURE |OMread| ((|Any|) (|OpenMathDevice|)))
 (SIGNATURE |OMreadFile| ((|Any|) (|String|)))
 (SIGNATURE |OMreadStr| ((|Any|) (|String|)))
 (SIGNATURE |OMlistCDs| ((|List| (|String|))))
 (SIGNATURE |OMlistSymbols| ((|List| (|String|)) (|String|)))
 (SIGNATURE |OMsupportsCD?| ((|Boolean|) (|String|)))
 (SIGNATURE |OMsupportsSymbol?| ((|Boolean|) (|String|) (|String|)))
 (SIGNATURE |OMunhandledSymbol| ((|Exit|) (|String|) (|String|))))
"/git/fricas/src/algebra/OMPKG.spad"
((|OMunhandledSymbol| (*1 *2 *3 *3)
  (AND (|isDomain| *3 (|String|)) (|isDomain| *2 (|Exit|))
       (|isDomain| *1 (|OpenMathPackage|))))
 (|OMsupportsSymbol?| (*1 *2 *3 *3)
  (AND (|isDomain| *3 (|String|)) (|isDomain| *2 (|Boolean|))
       (|isDomain| *1 (|OpenMathPackage|))))
 (|OMsupportsCD?| (*1 *2 *3)
  (AND (|isDomain| *3 (|String|)) (|isDomain| *2 (|Boolean|))
       (|isDomain| *1 (|OpenMathPackage|))))
 (|OMlistSymbols| (*1 *2 *3)
  (AND (|isDomain| *3 (|String|)) (|isDomain| *2 (|List| (|String|)))
       (|isDomain| *1 (|OpenMathPackage|))))
 (|OMlistCDs| (*1 *2)
  (AND (|isDomain| *2 (|List| (|String|)))
       (|isDomain| *1 (|OpenMathPackage|))))
 (|OMreadStr| (*1 *2 *3)
  (AND (|isDomain| *3 (|String|)) (|isDomain| *2 (|Any|))
       (|isDomain| *1 (|OpenMathPackage|))))
 (|OMreadFile| (*1 *2 *3)
  (AND (|isDomain| *3 (|String|)) (|isDomain| *2 (|Any|))
       (|isDomain| *1 (|OpenMathPackage|))))
 (|OMread| (*1 *2 *3)
  (AND (|isDomain| *3 (|OpenMathDevice|)) (|isDomain| *2 (|Any|))
       (|isDomain| *1 (|OpenMathPackage|)))))
((|OMunhandledSymbol| (((|Exit|) (|String|) (|String|)) 10))
 (|OMsupportsSymbol?| (((|Boolean|) (|String|) (|String|)) 31))
 (|OMsupportsCD?| (((|Boolean|) (|String|)) 30))
 (|OMreadStr| (((|Any|) (|String|)) 23))
 (|OMreadFile| (((|Any|) (|String|)) 21))
 (|OMread| (((|Any|) (|OpenMathDevice|)) 15))
 (|OMlistSymbols| (((|List| (|String|)) (|String|)) 26))
 (|OMlistCDs| (((|List| (|String|))) 25)))
OMPKG
((|constructor|
  (NIL
   "\\spadtype{OpenMathPackage} provides some simple utilities to make reading OpenMath objects easier."))
 (|OMunhandledSymbol|
  (((|Exit|) (|String|) (|String|))
   "\\spad{OMunhandledSymbol(s,{} cd)} raises an error if AXIOM reads a symbol which it is unable to handle. Note that this is different from an unexpected symbol."))
 (|OMsupportsSymbol?|
  (((|Boolean|) (|String|) (|String|))
   "\\spad{OMsupportsSymbol?(s,{} cd)} returns \\spad{true} if AXIOM supports symbol \\spad{s} from \\spad{CD} \\spad{cd},{} \\spad{false} otherwise."))
 (|OMsupportsCD?|
  (((|Boolean|) (|String|))
   "\\spad{OMsupportsCD?(cd)} returns \\spad{true} if AXIOM supports \\spad{cd},{} \\spad{false} otherwise."))
 (|OMlistSymbols|
  (((|List| (|String|)) (|String|))
   "\\spad{OMlistSymbols(cd)} lists all the symbols in \\spad{cd}."))
 (|OMlistCDs|
  (((|List| (|String|)))
   "\\spad{OMlistCDs()} lists all the \\spad{CDs} supported by AXIOM."))
 (|OMreadStr|
  (((|Any|) (|String|))
   "\\spad{OMreadStr(f)} reads an OpenMath object from \\spad{f} and passes it to AXIOM."))
 (|OMreadFile|
  (((|Any|) (|String|))
   "\\spad{OMreadFile(f)} reads an OpenMath object from \\spad{f} and passes it to AXIOM."))
 (|OMread|
  (((|Any|) (|OpenMathDevice|))
   "\\spad{OMread(dev)} reads an OpenMath object from \\spad{dev} and passes it to AXIOM.")))
(("documentation" 0 2588) ("ancestors" 0 NIL) ("parents" 0 NIL)
 ("abbreviation" 0 2582) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 2179) ("modemaps" 0 1115) ("sourceFile" 0 1078)
 ("constructorCategory" 0 616) ("constructorModemap" 0 91)
 ("constructorKind" 0 81) ("constructorForm" 0 61) ("NILADIC" 0 20))