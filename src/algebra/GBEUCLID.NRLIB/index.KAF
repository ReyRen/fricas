4751                (|EuclideanGroebnerBasisPackage| |Dom| |Expon| |VarSet|
                                                     |Dpol|)
|package|
(((|EuclideanGroebnerBasisPackage| |#1| |#2| |#3| |#4|)
  (CATEGORY |package|
   (SIGNATURE |euclideanNormalForm| (|#4| |#4| (|List| |#4|)))
   (SIGNATURE |euclideanGroebner| ((|List| |#4|) (|List| |#4|)))
   (SIGNATURE |euclideanGroebner| ((|List| |#4|) (|List| |#4|) (|String|)))
   (SIGNATURE |euclideanGroebner|
    ((|List| |#4|) (|List| |#4|) (|String|) (|String|))))
  (|EuclideanDomain|) (|OrderedAbelianMonoidSup|) (|OrderedSet|)
  (|PolynomialCategory| |#1| |#2| |#3|))
 (T |EuclideanGroebnerBasisPackage|))
(CATEGORY |package| (SIGNATURE |euclideanNormalForm| (|#4| |#4| (|List| |#4|)))
 (SIGNATURE |euclideanGroebner| ((|List| |#4|) (|List| |#4|)))
 (SIGNATURE |euclideanGroebner| ((|List| |#4|) (|List| |#4|) (|String|)))
 (SIGNATURE |euclideanGroebner|
  ((|List| |#4|) (|List| |#4|) (|String|) (|String|))))
"/git/fricas/src/algebra/GBEUCLID.spad"
((|euclideanGroebner| (*1 *2 *2 *3 *3)
  (AND (|isDomain| *2 (|List| *7)) (|isDomain| *3 (|String|))
       (|ofCategory| *7 (|PolynomialCategory| *4 *5 *6))
       (|ofCategory| *4 (|EuclideanDomain|))
       (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *6 (|OrderedSet|))
       (|isDomain| *1 (|EuclideanGroebnerBasisPackage| *4 *5 *6 *7))))
 (|euclideanGroebner| (*1 *2 *2 *3)
  (AND (|isDomain| *2 (|List| *7)) (|isDomain| *3 (|String|))
       (|ofCategory| *7 (|PolynomialCategory| *4 *5 *6))
       (|ofCategory| *4 (|EuclideanDomain|))
       (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *6 (|OrderedSet|))
       (|isDomain| *1 (|EuclideanGroebnerBasisPackage| *4 *5 *6 *7))))
 (|euclideanGroebner| (*1 *2 *2)
  (AND (|isDomain| *2 (|List| *6))
       (|ofCategory| *6 (|PolynomialCategory| *3 *4 *5))
       (|ofCategory| *3 (|EuclideanDomain|))
       (|ofCategory| *4 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *5 (|OrderedSet|))
       (|isDomain| *1 (|EuclideanGroebnerBasisPackage| *3 *4 *5 *6))))
 (|euclideanNormalForm| (*1 *2 *2 *3)
  (AND (|isDomain| *3 (|List| *2))
       (|ofCategory| *2 (|PolynomialCategory| *4 *5 *6))
       (|ofCategory| *4 (|EuclideanDomain|))
       (|ofCategory| *5 (|OrderedAbelianMonoidSup|))
       (|ofCategory| *6 (|OrderedSet|))
       (|isDomain| *1 (|EuclideanGroebnerBasisPackage| *4 *5 *6 *2)))))
((|euclideanNormalForm| ((|#4| |#4| (|List| |#4|)) 62))
 (|euclideanGroebner| (((|List| |#4|) (|List| |#4|) (|String|) (|String|)) 18)
  (((|List| |#4|) (|List| |#4|) (|String|)) 17)
  (((|List| |#4|) (|List| |#4|)) 11)))
GBEUCLID
((|constructor|
  (NIL
   "\\spadtype{EuclideanGroebnerBasisPackage} computes groebner bases for polynomial ideals over euclidean domains. The basic computation provides a distinguished set of generators for these ideals. This basis allows an easy test for membership: the operation \\spadfun{euclideanNormalForm} returns zero on ideal members. The string \"info\" and \"redcrit\" can be given as additional args to provide incremental information during the computation. If \"info\" is given,{} \\indented{1}{a computational summary is given for each \\spad{s}-polynomial. If \"redcrit\"} is given,{} the reduced critical pairs are printed. The term ordering is determined by the polynomial type used. Suggested types include \\spadtype{DistributedMultivariatePolynomial},{} \\spadtype{HomogeneousDistributedMultivariatePolynomial},{} \\spadtype{GeneralDistributedMultivariatePolynomial}."))
 (|euclideanGroebner|
  (((|List| |#4|) (|List| |#4|) (|String|) (|String|))
   "\\spad{euclideanGroebner(lp,{} \"info\",{} \"redcrit\")} computes a groebner basis for a polynomial ideal generated by the list of polynomials \\spad{lp}. If the second argument is \\spad{\"info\"},{} a summary is given of the critical pairs. If the third argument is \"redcrit\",{} critical pairs are printed.")
  (((|List| |#4|) (|List| |#4|) (|String|))
   "\\spad{euclideanGroebner(lp,{} infoflag)} computes a groebner basis for a polynomial ideal over a euclidean domain generated by the list of polynomials \\spad{lp}. During computation,{} additional information is printed out if infoflag is given as either \"info\" (for summary information) or \"redcrit\" (for reduced critical pairs)")
  (((|List| |#4|) (|List| |#4|))
   "\\spad{euclideanGroebner(lp)} computes a groebner basis for a polynomial ideal over a euclidean domain generated by the list of polynomials \\spad{lp}."))
 (|euclideanNormalForm|
  ((|#4| |#4| (|List| |#4|))
   "\\spad{euclideanNormalForm(poly,{} gb)} reduces the polynomial \\spad{poly} modulo the precomputed groebner basis \\spad{gb} giving a canonical representative of the residue class.")))
(("documentation" 0 2646) ("ancestors" 0 NIL) ("parents" 0 NIL)
 ("abbreviation" 0 2637) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 2415) ("modemaps" 0 1010) ("sourceFile" 0 970)
 ("constructorCategory" 0 665) ("constructorModemap" 0 147)
 ("constructorKind" 0 137) ("constructorForm" 0 20))