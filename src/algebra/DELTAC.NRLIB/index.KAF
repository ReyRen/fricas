9104                (|DeltaComplex| VS)
|domain|
(((|DeltaComplex| |#1|)
  (|Join| (|SetCategory|)
          (CATEGORY |domain|
           (SIGNATURE |deltaComplex|
            ($ (|List| |#1|) (|NonNegativeInteger|)
             (|List| (|List| (|List| (|Integer|))))))
           (SIGNATURE |deltaComplex| ($ (|FiniteSimplicialComplex| |#1|)))
           (SIGNATURE |deltaComplex|
            ($ (|FiniteSimplicialComplex| |#1|) (|Boolean|)))
           (SIGNATURE |deltaComplex| ($ (|FiniteCubicalComplex| |#1|)))
           (SIGNATURE |link| ($ (|NonNegativeInteger|) (|NonNegativeInteger|)))
           (SIGNATURE |triangle|
            ($ (|NonNegativeInteger|) (|NonNegativeInteger|)
             (|NonNegativeInteger|)))
           (SIGNATURE |faceMap|
            ((|List| (|List| (|Integer|))) $ (|NonNegativeInteger|)))
           (SIGNATURE |chain| ((|ChainComplex|) $))
           (SIGNATURE |coChain| ((|CoChainComplex| |#1|) $))
           (SIGNATURE |oneSkeleton|
            ((|UndirectedGraph| (|NonNegativeInteger|)) $))
           (SIGNATURE |fundamentalGroup| ((|GroupPresentation|) $))
           (SIGNATURE |fundamentalGroup|
            ((|GroupPresentation|) $ (|Boolean|) (|Boolean|)))
           (SIGNATURE |homology| ((|List| (|Homology|)) $))
           (SIGNATURE |coHomology| ((|List| (|Homology|)) $))
           (SIGNATURE |coerce| ((|FiniteSimplicialComplex| |#1|) $))))
  (|AbelianGroup|))
 (T |DeltaComplex|))
(|Join| (|SetCategory|)
        (CATEGORY |domain|
         (SIGNATURE |deltaComplex|
          ($ (|List| |#1|) (|NonNegativeInteger|)
           (|List| (|List| (|List| (|Integer|))))))
         (SIGNATURE |deltaComplex| ($ (|FiniteSimplicialComplex| |#1|)))
         (SIGNATURE |deltaComplex|
          ($ (|FiniteSimplicialComplex| |#1|) (|Boolean|)))
         (SIGNATURE |deltaComplex| ($ (|FiniteCubicalComplex| |#1|)))
         (SIGNATURE |link| ($ (|NonNegativeInteger|) (|NonNegativeInteger|)))
         (SIGNATURE |triangle|
          ($ (|NonNegativeInteger|) (|NonNegativeInteger|)
           (|NonNegativeInteger|)))
         (SIGNATURE |faceMap|
          ((|List| (|List| (|Integer|))) $ (|NonNegativeInteger|)))
         (SIGNATURE |chain| ((|ChainComplex|) $))
         (SIGNATURE |coChain| ((|CoChainComplex| |#1|) $))
         (SIGNATURE |oneSkeleton|
          ((|UndirectedGraph| (|NonNegativeInteger|)) $))
         (SIGNATURE |fundamentalGroup| ((|GroupPresentation|) $))
         (SIGNATURE |fundamentalGroup|
          ((|GroupPresentation|) $ (|Boolean|) (|Boolean|)))
         (SIGNATURE |homology| ((|List| (|Homology|)) $))
         (SIGNATURE |coHomology| ((|List| (|Homology|)) $))
         (SIGNATURE |coerce| ((|FiniteSimplicialComplex| |#1|) $))))
"/git/fricas/src/algebra/DELTAC.spad"
((|deltaComplex| (*1 *1 *2 *3 *4)
  (AND (|isDomain| *2 (|List| *5)) (|isDomain| *3 (|NonNegativeInteger|))
       (|isDomain| *4 (|List| (|List| (|List| (|Integer|)))))
       (|ofCategory| *5 (|AbelianGroup|)) (|isDomain| *1 (|DeltaComplex| *5))))
 (|deltaComplex| (*1 *1 *2)
  (AND (|isDomain| *2 (|FiniteSimplicialComplex| *3))
       (|ofCategory| *3 (|AbelianGroup|)) (|isDomain| *1 (|DeltaComplex| *3))))
 (|deltaComplex| (*1 *1 *2 *3)
  (AND (|isDomain| *2 (|FiniteSimplicialComplex| *4))
       (|isDomain| *3 (|Boolean|)) (|ofCategory| *4 (|AbelianGroup|))
       (|isDomain| *1 (|DeltaComplex| *4))))
 (|deltaComplex| (*1 *1 *2)
  (AND (|isDomain| *2 (|FiniteCubicalComplex| *3))
       (|ofCategory| *3 (|AbelianGroup|)) (|isDomain| *1 (|DeltaComplex| *3))))
 (|link| (*1 *1 *2 *2)
  (AND (|isDomain| *2 (|NonNegativeInteger|))
       (|isDomain| *1 (|DeltaComplex| *3)) (|ofCategory| *3 (|AbelianGroup|))))
 (|triangle| (*1 *1 *2 *2 *2)
  (AND (|isDomain| *2 (|NonNegativeInteger|))
       (|isDomain| *1 (|DeltaComplex| *3)) (|ofCategory| *3 (|AbelianGroup|))))
 (|faceMap| (*1 *2 *1 *3)
  (AND (|isDomain| *3 (|NonNegativeInteger|))
       (|isDomain| *2 (|List| (|List| (|Integer|))))
       (|isDomain| *1 (|DeltaComplex| *4)) (|ofCategory| *4 (|AbelianGroup|))))
 (|chain| (*1 *2 *1)
  (AND (|isDomain| *2 (|ChainComplex|)) (|isDomain| *1 (|DeltaComplex| *3))
       (|ofCategory| *3 (|AbelianGroup|))))
 (|coChain| (*1 *2 *1)
  (AND (|isDomain| *2 (|CoChainComplex| *3))
       (|isDomain| *1 (|DeltaComplex| *3)) (|ofCategory| *3 (|AbelianGroup|))))
 (|oneSkeleton| (*1 *2 *1)
  (AND (|isDomain| *2 (|UndirectedGraph| (|NonNegativeInteger|)))
       (|isDomain| *1 (|DeltaComplex| *3)) (|ofCategory| *3 (|AbelianGroup|))))
 (|fundamentalGroup| (*1 *2 *1)
  (AND (|isDomain| *2 (|GroupPresentation|))
       (|isDomain| *1 (|DeltaComplex| *3)) (|ofCategory| *3 (|AbelianGroup|))))
 (|fundamentalGroup| (*1 *2 *1 *3 *3)
  (AND (|isDomain| *3 (|Boolean|)) (|isDomain| *2 (|GroupPresentation|))
       (|isDomain| *1 (|DeltaComplex| *4)) (|ofCategory| *4 (|AbelianGroup|))))
 (|homology| (*1 *2 *1)
  (AND (|isDomain| *2 (|List| (|Homology|)))
       (|isDomain| *1 (|DeltaComplex| *3)) (|ofCategory| *3 (|AbelianGroup|))))
 (|coHomology| (*1 *2 *1)
  (AND (|isDomain| *2 (|List| (|Homology|)))
       (|isDomain| *1 (|DeltaComplex| *3)) (|ofCategory| *3 (|AbelianGroup|))))
 (|coerce| (*1 *2 *1)
           (AND (|isDomain| *2 (|FiniteSimplicialComplex| *3))
                (|isDomain| *1 (|DeltaComplex| *3))
                (|ofCategory| *3 (|AbelianGroup|)))))
((~= (((|Boolean|) $ $) NIL))
 (|triangle|
  (($ (|NonNegativeInteger|) (|NonNegativeInteger|) (|NonNegativeInteger|))
   65))
 (|oneSkeleton| (((|UndirectedGraph| (|NonNegativeInteger|)) $) 95))
 (|link| (($ (|NonNegativeInteger|) (|NonNegativeInteger|)) 64))
 (|latex| (((|String|) $) NIL)) (|homology| (((|List| (|Homology|)) $) 82))
 (|hashUpdate!| (((|HashState|) (|HashState|) $) NIL))
 (|hash| (((|SingleInteger|) $) NIL))
 (|fundamentalGroup| (((|GroupPresentation|) $) 102)
  (((|GroupPresentation|) $ (|Boolean|) (|Boolean|)) 101))
 (|faceMap| (((|List| (|List| (|Integer|))) $ (|NonNegativeInteger|)) 67))
 (|deltaComplex|
  (($ (|List| |#1|) (|NonNegativeInteger|)
    (|List| (|List| (|List| (|Integer|)))))
   21)
  (($ (|FiniteSimplicialComplex| |#1|)) 24)
  (($ (|FiniteSimplicialComplex| |#1|) (|Boolean|)) 23)
  (($ (|FiniteCubicalComplex| |#1|)) 63))
 (|coerce| (((|OutputForm|) $) 103) (((|FiniteSimplicialComplex| |#1|) $) 126))
 (|coHomology| (((|List| (|Homology|)) $) 85))
 (|coChain| (((|CoChainComplex| |#1|) $) 78))
 (|chain| (((|ChainComplex|) $) 75)) (= (((|Boolean|) $ $) 118)))
DELTAC
(((|SetCategory|) . T))
(((|BasicType|) . T) ((|CoercibleTo| (|OutputForm|)) . T) ((|SetCategory|) . T))
((|constructor|
  (NIL
   "\\indented{2}{Similar to Simplicial Complex but faces (edges,{} triangles,{} etc.)} \\indented{2}{are indexed by 'face maps' into the next lower face map until} \\indented{2}{we get down to the vertices.} \\indented{2}{for more documentation see:} \\indented{2}{http://www.euclideanspace.com/prog/scratchpad/mycode/topology/delta/} Date Created: Feb 2016 Basic Operations: Related packages: Related categories: Related Domains: FiniteSimplicialComplex is a simpler and more \\indented{3}{compact representation which can be used if edges,{} triangles,{}} \\indented{3}{etc. don\\spad{'t} need to be indexed.} Also See: AMS Classifications:"))
 (|coerce|
  (((|FiniteSimplicialComplex| |#1|) $)
   "\\spad{coerce DeltaComplex} to FiniteSimplicialComplex"))
 (|coHomology|
  (((|List| (|Homology|)) $) "calculate cohomology using SmithNormalForm"))
 (|homology|
  (((|List| (|Homology|)) $) "calculate homology using SmithNormalForm"))
 (|fundamentalGroup|
  (((|GroupPresentation|) $ (|Boolean|) (|Boolean|))
   "Generates fundamental group from this simplicial complex.")
  (((|GroupPresentation|) $)
   "Generates fundamental group from this simplicial complex."))
 (|oneSkeleton|
  (((|UndirectedGraph| (|NonNegativeInteger|)) $)
   "generates graph AKA 1-skeleton"))
 (|coChain|
  (((|CoChainComplex| |#1|) $)
   "returns a matrix sequence representing the face maps in linear algebra form"))
 (|chain|
  (((|ChainComplex|) $)
   "returns a matrix sequence representing the face maps in linear algebra form"))
 (|faceMap|
  (((|List| (|List| (|Integer|))) $ (|NonNegativeInteger|))
   "returns an individual face map specified by \\spad{n}. Where \\spad{'n'} is the dimension required,{} so \\spad{n=1} returns one dimentional faces (edges),{} \\spad{n=2} returns two dimentional faces (triamgles),{} and so on. used by fundamentalGroup."))
 (|triangle|
  (($ (|NonNegativeInteger|) (|NonNegativeInteger|) (|NonNegativeInteger|))
   "a simplical complex with one triangle"))
 (|link|
  (($ (|NonNegativeInteger|) (|NonNegativeInteger|))
   "a simplical complex with one link"))
 (|deltaComplex|
  (($ (|FiniteCubicalComplex| |#1|))
   "construct from FiniteCubicalComplex. This builds indexes of edges,{} squares and so on.")
  (($ (|FiniteSimplicialComplex| |#1|))
   "construct from FiniteSimplicialComplex. This builds indexes of edges,{} triangles and so on.")
  (($ (|List| |#1|) (|NonNegativeInteger|)
    (|List| (|List| (|List| (|Integer|)))))
   "constructor where the simplices are supplied")))
(("documentation" 0 6569) ("ancestors" 0 6488) ("parents" 0 6464)
 ("abbreviation" 0 6457) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 5348) ("modemaps" 0 2766) ("sourceFile" 0 2728)
 ("constructorCategory" 0 1446) ("constructorModemap" 0 49)
 ("constructorKind" 0 40) ("constructorForm" 0 20))