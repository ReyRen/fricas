)abbrev domain DEQUEUE Dequeue
++ Author: Michael Monagan and Stephen Watt
++ Date Created: June 86 and July 87
++ Basic Operations:
++ Related Domains:
++ Also See:
++ AMS Classifications:
++ Keywords:
++ Examples:
++ References:
++ Description:

++ Linked list implementation of a Dequeue

Dequeue(S : SetCategory) : DequeueAggregate S with
     dequeue : List S -> %
       ++ dequeue([x, y, ..., z]) creates a dequeue with first (top or front)
       ++ element x, second element y, ..., and last (bottom or back) element z.
  == Queue S add
    Rep := Reference List S
    bottom d ==
         if empty? d then error "empty dequeue" else last deref d
    dequeue d == construct(d)
    extractBottom! d ==
        if empty? d then error "empty dequeue"
        p := deref d
        n := maxIndex p
        n = 1 =>
           r := first p
           setref(d, [])
           r
        q := rest(p, (n-2)::NonNegativeInteger)
        r := first rest q
        q.rest := []
        r
    extractTop! d ==
        e := top d
        setref(d, rest deref d)
        e
    insertTop!(e, d) == (setref(d, cons(e, deref d)); e)
    lastTail==> LAST$Lisp
    insertBottom!(e, d) ==
        if empty? d then setref(d, list e)
        else lastTail.(deref d).rest := list e
        e
    top d == if empty? d then error "empty dequeue" else first deref d
    reverse! d == (setref(d, reverse deref d); d)
    pop!(d) == extractTop!(d)
    push!(e, d) == insertTop!(e, d)

