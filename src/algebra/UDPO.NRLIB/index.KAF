6383                (|UserDefinedPartialOrdering| S)
|package|
(((|UserDefinedPartialOrdering| |#1|)
  (CATEGORY |package| (SIGNATURE |setOrder| ((|Void|) (|List| |#1|)))
   (SIGNATURE |setOrder| ((|Void|) (|List| |#1|) (|List| |#1|)))
   (SIGNATURE |getOrder|
    ((|Record| (|:| |low| (|List| |#1|)) (|:| |high| (|List| |#1|)))))
   (SIGNATURE |less?| ((|Union| (|Boolean|) "failed") |#1| |#1|))
   (SIGNATURE |less?|
    ((|Boolean|) |#1| |#1| (|Mapping| (|Boolean|) |#1| |#1|)))
   (SIGNATURE |largest| (|#1| (|List| |#1|) (|Mapping| (|Boolean|) |#1| |#1|)))
   (SIGNATURE |userOrdered?| ((|Boolean|)))
   (IF (|has| |#1| (|OrderedSet|))
       (PROGN
        (SIGNATURE |largest| (|#1| (|List| |#1|)))
        (SIGNATURE |more?| ((|Boolean|) |#1| |#1|)))
       |noBranch|))
  (|SetCategory|))
 (T |UserDefinedPartialOrdering|))
(CATEGORY |package| (SIGNATURE |setOrder| ((|Void|) (|List| |#1|)))
 (SIGNATURE |setOrder| ((|Void|) (|List| |#1|) (|List| |#1|)))
 (SIGNATURE |getOrder|
  ((|Record| (|:| |low| (|List| |#1|)) (|:| |high| (|List| |#1|)))))
 (SIGNATURE |less?| ((|Union| (|Boolean|) "failed") |#1| |#1|))
 (SIGNATURE |less?| ((|Boolean|) |#1| |#1| (|Mapping| (|Boolean|) |#1| |#1|)))
 (SIGNATURE |largest| (|#1| (|List| |#1|) (|Mapping| (|Boolean|) |#1| |#1|)))
 (SIGNATURE |userOrdered?| ((|Boolean|)))
 (IF (|has| |#1| (|OrderedSet|))
     (PROGN
      (SIGNATURE |largest| (|#1| (|List| |#1|)))
      (SIGNATURE |more?| ((|Boolean|) |#1| |#1|)))
     |noBranch|))
"/git/fricas/src/algebra/UDPO.spad"
((|more?| (*1 *2 *3 *3)
  (AND (|isDomain| *2 (|Boolean|))
       (|isDomain| *1 (|UserDefinedPartialOrdering| *3))
       (|ofCategory| *3 (|OrderedSet|)) (|ofCategory| *3 (|SetCategory|))))
 (|largest| (*1 *2 *3)
  (AND (|isDomain| *3 (|List| *2)) (|ofCategory| *2 (|SetCategory|))
       (|ofCategory| *2 (|OrderedSet|))
       (|isDomain| *1 (|UserDefinedPartialOrdering| *2))))
 (|userOrdered?| (*1 *2)
  (AND (|isDomain| *2 (|Boolean|))
       (|isDomain| *1 (|UserDefinedPartialOrdering| *3))
       (|ofCategory| *3 (|SetCategory|))))
 (|largest| (*1 *2 *3 *4)
  (AND (|isDomain| *3 (|List| *2))
       (|isDomain| *4 (|Mapping| (|Boolean|) *2 *2))
       (|isDomain| *1 (|UserDefinedPartialOrdering| *2))
       (|ofCategory| *2 (|SetCategory|))))
 (|less?| (*1 *2 *3 *3 *4)
  (AND (|isDomain| *4 (|Mapping| (|Boolean|) *3 *3))
       (|ofCategory| *3 (|SetCategory|)) (|isDomain| *2 (|Boolean|))
       (|isDomain| *1 (|UserDefinedPartialOrdering| *3))))
 (|less?| (*1 *2 *3 *3)
  (|partial| AND (|isDomain| *2 (|Boolean|))
   (|isDomain| *1 (|UserDefinedPartialOrdering| *3))
   (|ofCategory| *3 (|SetCategory|))))
 (|getOrder| (*1 *2)
  (AND
   (|isDomain| *2 (|Record| (|:| |low| (|List| *3)) (|:| |high| (|List| *3))))
   (|isDomain| *1 (|UserDefinedPartialOrdering| *3))
   (|ofCategory| *3 (|SetCategory|))))
 (|setOrder| (*1 *2 *3 *3)
  (AND (|isDomain| *3 (|List| *4)) (|ofCategory| *4 (|SetCategory|))
       (|isDomain| *2 (|Void|))
       (|isDomain| *1 (|UserDefinedPartialOrdering| *4))))
 (|setOrder| (*1 *2 *3)
  (AND (|isDomain| *3 (|List| *4)) (|ofCategory| *4 (|SetCategory|))
       (|isDomain| *2 (|Void|))
       (|isDomain| *1 (|UserDefinedPartialOrdering| *4)))))
((|userOrdered?| (((|Boolean|)) 14))
 (|setOrder| (((|Void|) (|List| |#1|) (|List| |#1|)) 18)
  (((|Void|) (|List| |#1|)) 19))
 (|more?| (((|Boolean|) |#1| |#1|) 31 (|has| |#1| (|OrderedSet|))))
 (|less?| (((|Boolean|) |#1| |#1| (|Mapping| (|Boolean|) |#1| |#1|)) 26)
  (((|Union| (|Boolean|) "failed") |#1| |#1|) 24))
 (|largest| ((|#1| (|List| |#1|)) 32 (|has| |#1| (|OrderedSet|)))
  ((|#1| (|List| |#1|) (|Mapping| (|Boolean|) |#1| |#1|)) 27))
 (|getOrder|
  (((|Record| (|:| |low| (|List| |#1|)) (|:| |high| (|List| |#1|)))) 16)))
((|HasCategory| |#1| '(|OrderedSet|)))
UDPO
((|constructor|
  (NIL "Provides functions to force a partial ordering on any set."))
 (|more?|
  (((|Boolean|) |#1| |#1|)
   "\\spad{more?(a,{} b)} compares \\spad{a} and \\spad{b} in the partial ordering induced by setOrder,{} and uses the ordering on \\spad{S} if \\spad{a} and \\spad{b} are not comparable in the partial ordering."))
 (|userOrdered?|
  (((|Boolean|))
   "\\spad{userOrdered?()} tests if the partial ordering induced by \\spadfunFrom{setOrder}{UserDefinedPartialOrdering} is not empty."))
 (|largest|
  ((|#1| (|List| |#1|))
   "\\spad{largest l} returns the largest element of \\spad{l} where the partial ordering induced by setOrder is completed into a total one by the ordering on \\spad{S}.")
  ((|#1| (|List| |#1|) (|Mapping| (|Boolean|) |#1| |#1|))
   "\\spad{largest(l,{} fn)} returns the largest element of \\spad{l} where the partial ordering induced by setOrder is completed into a total one by \\spad{fn}."))
 (|less?|
  (((|Boolean|) |#1| |#1| (|Mapping| (|Boolean|) |#1| |#1|))
   "\\spad{less?(a,{} b,{} fn)} compares \\spad{a} and \\spad{b} in the partial ordering induced by setOrder,{} and returns \\spad{fn(a,{} b)} if \\spad{a} and \\spad{b} are not comparable in that ordering.")
  (((|Union| (|Boolean|) "failed") |#1| |#1|)
   "\\spad{less?(a,{} b)} compares \\spad{a} and \\spad{b} in the partial ordering induced by setOrder."))
 (|getOrder|
  (((|Record| (|:| |low| (|List| |#1|)) (|:| |high| (|List| |#1|))))
   "\\spad{getOrder()} returns \\spad{[[b1,{} ...,{} bm],{} [a1,{} ...,{} an]]} such that the partial ordering on \\spad{S} was given by \\spad{setOrder([b1,{} ...,{} bm],{} [a1,{} ...,{} an])}."))
 (|setOrder|
  (((|Void|) (|List| |#1|) (|List| |#1|))
   "\\spad{setOrder([b1,{} ...,{} bm],{} [a1,{} ...,{} an])} defines a partial ordering on \\spad{S} given \\spad{by:} \\indented{3}{(1)\\space{2}\\spad{b1 < b2 < ... < bm < a1 < a2 < ... < an}.} \\indented{3}{(2)\\space{2}\\spad{bj < c < \\spad{ai}}\\space{2}for \\spad{c} not among the \\spad{ai}\\spad{'s} and \\spad{bj}\\spad{'s}.} \\indented{3}{(3)\\space{2}undefined on \\spad{(c,{} d)} if neither is among the \\spad{ai}\\spad{'s},{} \\spad{bj}\\spad{'s}.}")
  (((|Void|) (|List| |#1|))
   "\\spad{setOrder([a1,{} ...,{} an])} defines a partial ordering on \\spad{S} given \\spad{by:} \\indented{3}{(1)\\space{2}\\spad{a1 < a2 < ... < an}.} \\indented{3}{(2)\\space{2}\\spad{b < \\spad{ai}\\space{3}for i = 1..n} and \\spad{b} not among the \\spad{ai}\\spad{'s}.} \\indented{3}{(3)\\space{2}undefined on \\spad{(b,{} c)} if neither is among the \\spad{ai}\\spad{'s}.}")))
(("documentation" 0 3796) ("ancestors" 0 NIL) ("parents" 0 NIL)
 ("abbreviation" 0 3791) ("predicates" 0 3752) ("superDomain" 0 NIL)
 ("operationAlist" 0 3216) ("modemaps" 0 1519) ("sourceFile" 0 1483)
 ("constructorCategory" 0 834) ("constructorModemap" 0 63)
 ("constructorKind" 0 53) ("constructorForm" 0 20))