)abbrev category FMCAT FreeModuleCategory
++ Author: Michel Petitot petitot@lifl.fr
++ Date Created: 91
++ Basic Functions:
++ Related Constructors:
++ Also See:
++ AMS Classifications:
++ Keywords:
++ References:
++ Description:
++   A domain of this category
++   implements formal linear combinations
++   of elements from a domain \spad{Basis} with coefficients
++   in a domain \spad{R}. The domain \spad{Basis} needs only
++   to belong to the category \spadtype{SetCategory} and \spad{R}
++   to the category \spadtype{Ring}. Thus the coefficient ring
++   may be non-commutative.
++   See the \spadtype{XDistributedPolynomial} constructor
++   for examples of domains built with the \spadtype{FreeModuleCategory}
++   category constructor.
++   Author: Michel Petitot (petitot@lifl.fr)
++
++   Note (Franz Lehner, June 2009):
++   Since \spad{leadingTerm} makes no sense for unordered base sets,
++   and at the time of this writing this domain was never used for such,
++   the base set is required to be \spad{Comparable}.
++   \spad{FreeModule} originally was not of FreeModuleCategory.
++   Some functions (like \spad{support}, \spad{coefficients},
++   \spad{monomials}, ...) from here could be moved to
++   \spad{IndexedDirectProductCategory}
++   but at the moment there is no need for this.
FreeModuleCategory(R, S) : Category == Exports where
   R : Join(SemiRng, AbelianMonoid)
   S : SetCategory

   Exports == Join(BiModule(R, R), IndexedDirectProductCategory(R, S)) with
        if R has SemiRing then RetractableTo S
        "*"                : (R, S) -> %
          ++ \spad{r*b} returns the product of \spad{r} by \spad{b}.
        "*":(S,R) -> %
          ++ \spad{s*r} returns the product \spad{r*s}
          ++ used by \spadtype{XRecursivePolynomial}
        coefficients       : % -> List R
          ++ \spad{coefficients(x)} returns the list of coefficients of \spad{x}.
        support            : % -> List S
          ++ \spad{support(x)} returns the list of basis elements with nonzero coefficients.
        monomials          : % -> List %
          ++ \spad{monomials(x)} returns the list of \spad{r_i*b_i}
          ++ whose sum is \spad{x}.
        coefficient : (%, S) -> R
          ++ \spad{coefficient(x, s)} returns the coefficient of the basis element s
        -- attributs
        if R has CommutativeRing then
             Module(R)
             linearExtend : (S->R, %)->R
          ++ \spad{linearExtend: (f, x)} returns the linear extension
          ++ of a map defined on the basis applied to a linear combination
        if R has Comparable and S has Comparable then Comparable
      add
        if R has Comparable and S has Comparable then
          smaller?(p : %, q : %) : Boolean ==
              repeat
                  zero?(q) => return false
                  zero?(p) => return true
                  if leadingSupport(p) = leadingSupport(q) then
                      if leadingCoefficient(p) = leadingCoefficient(q) then
                          p := reductum p
                          q := reductum q
                      else
                          return smaller?(leadingCoefficient(p),
                                          leadingCoefficient(q))
                  else
                      return smaller?(leadingSupport(p), leadingSupport(q))

