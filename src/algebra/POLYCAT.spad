)abbrev category POLYCAT PolynomialCategory
++ Author:
++ Basic Functions: Ring, monomial, coefficient, differentiate, eval
++ Related Constructors: Polynomial, DistributedMultivariatePolynomial
++ Also See: UnivariatePolynomialCategory
++ AMS Classifications:
++ Keywords:
++ References:
++ Description:
++  The category for general multi-variate polynomials over a ring
++  R, in variables from VarSet, with exponents from the
++  \spadtype{OrderedAbelianMonoidSup}.  Here variables commute
++  with the coefficients.

PolynomialCategory(R : Join(SemiRng, AbelianMonoid),
                   E : OrderedAbelianMonoidSup, VarSet : OrderedSet):
        Category ==
  Join(MaybeSkewPolynomialCategory(R, E, VarSet),
       InnerEvalable(VarSet, R), InnerEvalable(VarSet, %),
       VariablesCommuteWithCoefficients) with
    if R has SemiRing then
        RetractableTo VarSet
        Evalable %
    if R has Ring then
        PartialDifferentialRing VarSet
    -- operations
    univariate   : (%, VarSet) -> SparseUnivariatePolynomial(%)
      ++ univariate(p, v) converts the multivariate polynomial p
      ++ into a univariate polynomial in v, whose coefficients are still
      ++ multivariate polynomials (in all the other variables).
    univariate   : % -> SparseUnivariatePolynomial(R)
        ++ univariate(p) converts the multivariate polynomial p,
        ++ which should actually involve only one variable,
        ++ into a univariate polynomial
        ++ in that variable, whose coefficients are in the ground ring.
        ++ Error: if polynomial is genuinely multivariate
    minimumDegree : (%, VarSet) -> NonNegativeInteger
      ++ minimumDegree(p, v) gives the minimum degree of polynomial p
      ++ with respect to v, i.e. viewed a univariate polynomial in v
    minimumDegree : (%, List(VarSet)) -> List(NonNegativeInteger)
      ++ minimumDegree(p, lv) gives the list of minimum degrees of the
      ++ polynomial p with respect to each of the variables in the list lv
    if R has Ring then
      monicDivide : (%, %, VarSet) -> Record(quotient : %, remainder : %)
       ++ monicDivide(a, b, v) divides the polynomial a by the polynomial b,
       ++ with each viewed as a univariate polynomial in v returning
       ++ both the quotient and remainder.
       ++ Error: if b is not monic with respect to v.
    multivariate : (SparseUnivariatePolynomial(R), VarSet) -> %
        ++ multivariate(sup, v) converts an anonymous univariable
        ++ polynomial sup to a polynomial in the variable v.
    multivariate : (SparseUnivariatePolynomial(%), VarSet) -> %
        ++ multivariate(sup, v) converts an anonymous univariable
        ++ polynomial sup to a polynomial in the variable v.
    isPlus : % -> Union(List %, "failed")
        ++ isPlus(p) returns \spad{[m1, ..., mn]} if polynomial \spad{p = m1 + ... + mn} and
        ++ \spad{n >= 2} and each mi is a nonzero monomial.
    if R has SemiRing then
      isTimes : % -> Union(List %, "failed")
        ++ isTimes(p) returns \spad{[a1, ..., an]} if polynomial
        ++ \spad{p = a1 ... an} and \spad{n >= 2}, and, for each i,
        ++ ai is either a nontrivial constant in R or else of the
        ++ form \spad{x^e}, where \spad{e > 0} is an integer and
        ++ x is a member of VarSet.
      isExpt : % -> Union(Record(var : VarSet, exponent : NonNegativeInteger),
                       "failed")
        ++ isExpt(p) returns \spad{[x, n]} if polynomial p has the form
        ++ \spad{x^n} and \spad{n > 0}.
    -- OrderedRing view removed to allow EXPR to define abs
    --if R has OrderedRing then OrderedRing
    if (R has ConvertibleTo InputForm) and
       (VarSet has ConvertibleTo InputForm) then
         ConvertibleTo InputForm
    if R has Ring then
      if (R has ConvertibleTo Pattern Integer) and
       (VarSet has ConvertibleTo Pattern Integer) then
         ConvertibleTo Pattern Integer
      if (R has ConvertibleTo Pattern Float) and
       (VarSet has ConvertibleTo Pattern Float) then
         ConvertibleTo Pattern Float
      if (R has PatternMatchable Integer) and
       (VarSet has PatternMatchable Integer) then
         PatternMatchable Integer
      if (R has PatternMatchable Float) and
       (VarSet has PatternMatchable Float) then
         PatternMatchable Float
    if R has CommutativeRing then
      resultant : (%, %, VarSet) -> %
         ++ resultant(p, q, v) returns the resultant of the polynomials
         ++ p and q with respect to the variable v.
      discriminant : (%, VarSet) -> %
         ++ discriminant(p, v) returns the disriminant of the polynomial p
         ++ with respect to the variable v.
    if R has GcdDomain then
      GcdDomain
      content : (%, VarSet) -> %
        ++ content(p, v) is the gcd of the coefficients of the polynomial p
        ++ when p is viewed as a univariate polynomial with respect to the
        ++ variable v.
        ++ Thus, for polynomial 7*x^2*y + 14*x*y^2, the gcd of the
        ++ coefficients with respect to x is 7*y.
      primitivePart : % -> %
        ++ primitivePart(p) returns the unitCanonical associate of the
        ++ polynomial p with its content divided out.
      primitivePart : (%, VarSet) -> %
        ++ primitivePart(p, v) returns the unitCanonical associate of the
        ++ polynomial p with its content with respect to the variable v
        ++ divided out.
      squareFree : % -> Factored %
        ++ squareFree(p) returns the square free factorization of the
        ++ polynomial p.
      squareFreePart : % -> %
        ++ squareFreePart(p) returns product of all the irreducible factors
        ++ of polynomial p each taken with multiplicity one.

    -- assertions
    if R has PolynomialFactorizationExplicit then
       PolynomialFactorizationExplicit
 add

    import from Factored(%)

    p : %
    v : VarSet
    ln : List NonNegativeInteger
    lv : List VarSet
    n : NonNegativeInteger
    pp, qq : SparseUnivariatePolynomial %
    if R has SemiRing then
        eval(p : %, l : List Equation %) ==
            empty? l => p
            for e in l repeat
                retractIfCan(lhs e)@Union(VarSet,"failed") case "failed" =>
                    error "cannot find a variable to evaluate"
            lvar := [retract(lhs e)@VarSet for e in l]
            eval(p, lvar, [rhs e for e in l]$List(%))

    isPlus p ==
      empty? rest(l := monomials p) => "failed"
      l
    if R has SemiRing then
        isTimes p ==
            empty?(lv := variables p) or not monomial? p => "failed"
            l := [monomial(1, v, degree(p, v)) for v in lv]
            ((r := leadingCoefficient p) = 1) =>
                empty? rest lv => "failed"
                l
            concat(r::%, l)
        isExpt p ==
            (u := mainVariable p) case "failed" => "failed"
            p = monomial(1, u::VarSet, d := degree(p, u::VarSet)) =>
                [u::VarSet, d]
            "failed"
    coefficient(p, v, n) == coefficient(univariate(p, v), n)
    coefficient(p, lv, ln) ==
       empty? lv =>
         empty? ln => p
         error "mismatched lists in coefficient"
       empty? ln  => error "mismatched lists in coefficient"
       coefficient(coefficient(univariate(p, first lv), first ln),
                   rest lv, rest ln)

    retract(p : %) : VarSet ==
      q := mainVariable(p)::VarSet
      q::% = p => q
      error "Polynomial is not a single variable"
    retractIfCan(p:%):Union(VarSet, "failed") ==
      ((q := mainVariable p) case VarSet) and (q::VarSet::% = p) => q
      "failed"

    totalDegree p ==
        ground? p => 0
        u := univariate(p, mainVariable(p)::VarSet)
        d : NonNegativeInteger := 0
        while u ~= 0 repeat
          d := max(d, degree u + totalDegree leadingCoefficient u)
          u := reductum u
        d

    totalDegreeSorted(p : %, lv : List VarSet) : NonNegativeInteger ==
        ground? p => 0
        empty?(lv) => 0
        u := univariate(p, v := (mainVariable(p)::VarSet))
        d : NonNegativeInteger := 0
        w : NonNegativeInteger := 0
        v0 := first(lv)
        while v < v0 repeat
            lv := rest(lv)
            empty?(lv) => return 0
            v0 := first(lv)
        if v0 = v then
            w := 1
            lv := rest(lv)
        while u ~= 0 repeat
          d := max(d, w*(degree u) +
                 totalDegreeSorted(leadingCoefficient u, lv))
          u := reductum u
        d

    totalDegree(p, lv) ==
        lv1 := sort((v1 : VarSet, v2 : VarSet) : Boolean +-> v2 < v1, lv)
        totalDegreeSorted(p, lv1)

    -- Condition on % is redundant, but compiler can not infer it
    if % has CommutativeRing and R has CommutativeRing then
        resultant(p1, p2, mvar) ==
          resultant(univariate(p1, mvar), univariate(p2, mvar))
        discriminant(p, var) ==
          discriminant(univariate(p, var))

    if R has IntegralDomain then
      allMonoms(l : List %) : List(%) ==
        removeDuplicates! concat [primitiveMonomials p for p in l]
      P2R(p : %, b : List E, n : NonNegativeInteger) : Vector(R) ==
        w := new(n, 0)$Vector(R)
        for i in minIndex w .. maxIndex w for bj in b repeat
          qsetelt!(w, i, coefficient(p, bj))
        w
      eq2R(l : List %, b : List E) : Matrix(R) ==
        matrix [[coefficient(p, bj) for p in l] for bj in b]
      reducedSystem(m : Matrix %) : Matrix(R) ==
        l := listOfLists m
        b := removeDuplicates!
                           concat [allMonoms r for r in l]$List(List(%))
        empty?(b) => new(0, ncols(m), 0)$Matrix(R)
        d := [degree bj for bj in b]
        mm := eq2R(first l, d)
        l := rest l
        while not empty? l repeat
          mm := vertConcat(mm, eq2R(first l, d))
          l := rest l
        mm
      reducedSystem(m : Matrix %, v : Vector %):
       Record(mat : Matrix R, vec : Vector R) ==
        l := listOfLists m
        r := entries v
        b : List % := removeDuplicates! concat(allMonoms r,
                          concat [allMonoms s for s in l]$List(List(%)))
        empty?(b) =>
            [new(0, ncols(m), 0)$Matrix(R), new(0, 0)$Vector(R)]
        d := [degree bj for bj in b]
        n := #d
        mm := eq2R(first l, d)
        w := P2R(first r, d, n)
        l := rest l
        r := rest r
        while not empty? l repeat
          mm := vertConcat(mm, eq2R(first l, d))
          w := concat(w, P2R(first r, d, n))
          l := rest l
          r := rest r
        [mm, w]

    if R has PolynomialFactorizationExplicit then
       -- we might be in trouble if its actually only
       -- a univariate polynomial category - have to remember to
       -- over-ride these in UnivariatePolynomialCategory
       PFBR ==>PolynomialFactorizationByRecursion(R, E, VarSet, %)
       solveLinearPolynomialEquation(lpp, pp) ==
           solveLinearPolynomialEquationByRecursion(lpp, pp)$PFBR
       if R has FiniteFieldCategory then
           MFFACT ==> MultFiniteFactorize(VarSet, E, R, %)
           factorPolynomial(pp) == factor(pp)$MFFACT
           factorSquareFreePolynomial(pp) == factor(pp)$MFFACT
           factor(p) == factor(p)$MFFACT
       else
           if R has CharacteristicZero and R has EuclideanDomain then
               MF ==> InnerMultFact(VarSet, E, R, %)
               factorPolynomial(pp) ==
                   factor(pp, factorPolynomial$R)$MF
               factor(p) == factor(p, factorPolynomial$R)$MF
               factorSquareFreePolynomial(pp) ==
                   factor(pp, factorPolynomial$R)$MF
           else
               gcdPolynomial(pp, qq) ==
                   gcdPolynomial(pp, qq
                                )$GeneralPolynomialGcdPackage(E, VarSet, R, %)
               factorPolynomial(pp) == factorByRecursion(pp)$PFBR
               factorSquareFreePolynomial(pp) ==
                   factorSquareFreeByRecursion(pp)$PFBR
               factor p ==
                   v : Union(VarSet, "failed") := mainVariable p
                   v case "failed" =>
                       ansR := factor leadingCoefficient p
                       makeFR(unit(ansR)::%,
                         [[w.flag, w.factor::%, w.exponent] for w in factorList ansR])
                   up : SparseUnivariatePolynomial % := univariate(p, v)
                   ansSUP := factorByRecursion(up)$PFBR
                   makeFR(multivariate(unit(ansSUP), v),
                     [[ww.flag, multivariate(ww.factor, v), ww.exponent]
                       for ww in factorList ansSUP])

       if R has CharacteristicNonZero then
          mat : Matrix %
          conditionP mat ==
            ll := listOfLists transpose mat   -- hence each list corresponds to a
                                            -- column, i.e. to one variable
            llR : List List R := [ empty() for z in first ll]
            monslist : List List % := empty()
            ch : Integer := characteristic()$%
            for l in ll repeat
                mons := "setUnion"/[primitiveMonomials u for u in l]
                redmons : List % := []
                for m in mons repeat
                    vars := variables m
                    degs := degree(m, vars)
                    deg1 : List NonNegativeInteger
                    deg1 := [ ((nd := (d::Integer) exquo ch)
                               case "failed" => return "failed" ;
                                nd::Integer::NonNegativeInteger)
                           for d in degs ]
                    redmons := cons(monomial(1, vars, deg1), redmons)
                    llR := [cons(ground coefficient(u, vars, degs), v)
                              for u in l for v in llR]
                monslist := cons(redmons, monslist)
            ans := conditionP transpose matrix llR
            ans case "failed" => "failed"
            i : NonNegativeInteger := 0
            [ +/[m*(ans.(i := i+1))::% for m in mons ]
              for mons in monslist]

    if R has CharacteristicNonZero then
          charthRootlv : (%,List VarSet,NonNegativeInteger) -> Union(%,"failed")
          charthRoot p ==
            vars := variables p
            empty? vars =>
              ans := charthRoot ground p
              ans case "failed" => "failed"
              ans::R::%
            ch := characteristic()$%
            charthRootlv(p, vars, ch)
          charthRootlv(p, vars, ch) ==
            empty? vars =>
              ans := charthRoot ground p
              ans case "failed" => "failed"
              ans::R::%
            v := first vars
            vars := rest vars
            d := degree(p, v)
            ans : % := 0
            while (d>0) repeat
               (dd := (d::Integer exquo ch::Integer)) case "failed" =>
                      return "failed"
               cp := coefficient(p, v, d)
               p := p-monomial(cp, v, d)
               ansx := charthRootlv(cp, vars, ch)
               ansx case "failed" => return "failed"
               d := degree(p, v)
               ans := ans+monomial(ansx, v, dd::Integer::NonNegativeInteger)
            ansx := charthRootlv(p, vars, ch)
            ansx case "failed" => return "failed"
            return ans+ansx

    if R has Ring then
        monicDivide(p1, p2, mvar) ==
            result := monicDivide(univariate(p1, mvar), univariate(p2, mvar))
            [multivariate(result.quotient, mvar),
              multivariate(result.remainder, mvar)]


    if R has GcdDomain then
      if R has EuclideanDomain and R has CharacteristicZero then
       squareFree p == squareFree(p)$MultivariateSquareFree(E, VarSet, R, %)
      else
        squareFree p == squareFree(p)$PolynomialSquareFree(VarSet, E, R, %)
      squareFreePart p ==
        unit(s := squareFree p) * */[f.factor for f in factorList s]
      content(p, v) == content univariate(p, v)
      primitivePart p ==
        zero? p => p
        unitNormal((p exquo content p) ::%).canonical
      primitivePart(p, v) ==
        zero? p => p
        unitNormal((p exquo content(p, v)) ::%).canonical
    if R has Comparable then
        smaller?(p : %, q : %) ==
            while p ~= 0 and q ~= 0 repeat
                (dp := degree p) < (dq := degree q) =>
                    return smaller?(0, leadingCoefficient q)
                dq < dp => return smaller?(leadingCoefficient p, 0)
                lp := leadingCoefficient(p)
                lq := leadingCoefficient(q)
                lp ~= lq => return smaller?(lp, lq)
                p := reductum p
                q := reductum q
            p = 0 => smaller?(0, leadingCoefficient q)
            smaller?(leadingCoefficient p, 0)

        if R has Ring then
          if (R has PatternMatchable Integer) and
                (VarSet has PatternMatchable Integer) then
              patternMatch(p : %, pat : Pattern Integer,
                           l : PatternMatchResult(Integer, %)) ==
                  patternMatch(p, pat, l
                    )$PatternMatchPolynomialCategory(Integer, E, VarSet, R, %)
          if (R has PatternMatchable Float) and
                (VarSet has PatternMatchable Float) then
              patternMatch(p : %, pat : Pattern Float,
                           l : PatternMatchResult(Float, %)) ==
                  patternMatch(p, pat, l
                    )$PatternMatchPolynomialCategory(Float, E, VarSet, R, %)

    if R has Ring then
      if (R has ConvertibleTo Pattern Integer) and
            (VarSet has ConvertibleTo Pattern Integer) then
          convert(x : %) : Pattern(Integer) ==
              map(convert, convert, x
                )$PolynomialCategoryLifting(E, VarSet, R, %, Pattern Integer)
      if (R has ConvertibleTo Pattern Float) and
            (VarSet has ConvertibleTo Pattern Float) then
          convert(x : %) : Pattern(Float) ==
              map(convert, convert, x
                )$PolynomialCategoryLifting(E, VarSet, R, %, Pattern Float)
    if (R has ConvertibleTo InputForm) and
       (VarSet has ConvertibleTo InputForm) then
         convert(p : %) : InputForm ==
           map(convert, convert,
                    p)$PolynomialCategoryLifting(E, VarSet, R, %, InputForm)



