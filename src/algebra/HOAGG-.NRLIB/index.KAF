6134                (|HomogeneousAggregate&| A S)
|domain|
(((|HomogeneousAggregate&| |#1| |#2|)
  (CATEGORY |domain| (SIGNATURE |coerce| ((|OutputForm|) |#1|))
   (SIGNATURE = ((|Boolean|) |#1| |#1|))
   (SIGNATURE |eval| (|#1| |#1| (|List| |#2|) (|List| |#2|)))
   (SIGNATURE |eval| (|#1| |#1| |#2| |#2|))
   (SIGNATURE |eval| (|#1| |#1| (|Equation| |#2|)))
   (SIGNATURE |eval| (|#1| |#1| (|List| (|Equation| |#2|))))
   (SIGNATURE |member?| ((|Boolean|) |#2| |#1|))
   (SIGNATURE |count| ((|NonNegativeInteger|) |#2| |#1|))
   (SIGNATURE |max| (|#2| |#1|)) (SIGNATURE |min| (|#2| |#1|))
   (SIGNATURE |max| (|#2| (|Mapping| (|Boolean|) |#2| |#2|) |#1|))
   (SIGNATURE |members| ((|List| |#2|) |#1|))
   (SIGNATURE |count|
    ((|NonNegativeInteger|) (|Mapping| (|Boolean|) |#2|) |#1|))
   (SIGNATURE |every?| ((|Boolean|) (|Mapping| (|Boolean|) |#2|) |#1|))
   (SIGNATURE |any?| ((|Boolean|) (|Mapping| (|Boolean|) |#2|) |#1|))
   (SIGNATURE |#| ((|NonNegativeInteger|) |#1|)))
  (|HomogeneousAggregate| |#2|) (|Type|))
 (T |HomogeneousAggregate&|))
(CATEGORY |domain| (SIGNATURE |coerce| ((|OutputForm|) |#1|))
 (SIGNATURE = ((|Boolean|) |#1| |#1|))
 (SIGNATURE |eval| (|#1| |#1| (|List| |#2|) (|List| |#2|)))
 (SIGNATURE |eval| (|#1| |#1| |#2| |#2|))
 (SIGNATURE |eval| (|#1| |#1| (|Equation| |#2|)))
 (SIGNATURE |eval| (|#1| |#1| (|List| (|Equation| |#2|))))
 (SIGNATURE |member?| ((|Boolean|) |#2| |#1|))
 (SIGNATURE |count| ((|NonNegativeInteger|) |#2| |#1|))
 (SIGNATURE |max| (|#2| |#1|)) (SIGNATURE |min| (|#2| |#1|))
 (SIGNATURE |max| (|#2| (|Mapping| (|Boolean|) |#2| |#2|) |#1|))
 (SIGNATURE |members| ((|List| |#2|) |#1|))
 (SIGNATURE |count| ((|NonNegativeInteger|) (|Mapping| (|Boolean|) |#2|) |#1|))
 (SIGNATURE |every?| ((|Boolean|) (|Mapping| (|Boolean|) |#2|) |#1|))
 (SIGNATURE |any?| ((|Boolean|) (|Mapping| (|Boolean|) |#2|) |#1|))
 (SIGNATURE |#| ((|NonNegativeInteger|) |#1|)))
"/git/fricas/src/algebra/HOAGG.spad"
((|min| ((|#2| $) 28)) (|members| (((|List| |#2|) $) 22))
 (|member?| (((|Boolean|) |#2| $) 34))
 (|max| ((|#2| (|Mapping| (|Boolean|) |#2| |#2|) $) 25) ((|#2| $) 29))
 (|every?| (((|Boolean|) (|Mapping| (|Boolean|) |#2|) $) 20))
 (|eval| (($ $ (|List| (|Equation| |#2|))) 12) (($ $ (|Equation| |#2|)) NIL)
         (($ $ |#2| |#2|) NIL) (($ $ (|List| |#2|) (|List| |#2|)) NIL))
 (|count| (((|NonNegativeInteger|) (|Mapping| (|Boolean|) |#2|) $) 21)
  (((|NonNegativeInteger|) |#2| $) 32))
 (|coerce| (((|OutputForm|) $) 43))
 (|any?| (((|Boolean|) (|Mapping| (|Boolean|) |#2|) $) 19))
 (= (((|Boolean|) $ $) 38)) (|#| (((|NonNegativeInteger|) $) 16)))
((|HasCategory| |#2| '(|OrderedSet|)) (|HasCategory| |#2| '(|BasicType|))
 (|HasCategory| |#1| '(|finiteAggregate|))
 (|HasCategory| |#1| '(|shallowlyMutable|))
 (|HasCategory| |#2| (LIST '|Evalable| (|devaluate| |#2|)))
 (|HasCategory| |#2| '(|SetCategory|))
 (|HasCategory| |#2| (LIST '|CoercibleTo| '(|OutputForm|))))
HOAGG-
((|constructor|
  (NIL
   "A homogeneous aggregate is an aggregate of elements all of the same type. In the current system,{} all aggregates are homogeneous. Two attributes characterize classes of aggregates. Aggregates from domains with attribute \\spadatt{finiteAggregate} have a finite number of members. Of course,{} such a domain may have an infinite number of elements,{} like,{} for example \\spadtype{List}. Those domains with attribute \\spadatt{shallowlyMutable} allow an element to be modified or updated without changing its overall value."))
 (|member?|
  (((|Boolean|) |#2| $)
   "\\spad{member?(x,{} u)} tests if \\spad{x} is a member of \\spad{u}. For collections,{} \\spad{member?(x,{} u) = reduce(or,{} [x=y for y in u],{} false)}. However,{} \\spad{member?(x,{} u)} returns as soon as it finds a member."))
 (|min|
  ((|#2| $)
   "\\spad{min(u)} returns minimal element of \\spad{u}. Error if \\spad{u} is empty."))
 (|max|
  ((|#2| $)
   "\\spad{max(u)} returns maximal element of \\spad{u}. Error if \\spad{u} is empty.")
  ((|#2| (|Mapping| (|Boolean|) |#2| |#2|) $)
   "\\spad{max(p,{} u)} returns maximal element of \\spad{u} with respect to total ordering predicate \\spad{p}. Error if \\spad{u} is empty."))
 (|members|
  (((|List| |#2|) $)
   "\\spad{members(u)} returns a list of the consecutive elements of \\spad{u}. For multisets \\spadfun{members} gives result with no repetition. See also \\spadfun{parts}."))
 (|parts|
  (((|List| |#2|) $)
   "\\spad{parts(u)} returns a list of the consecutive elements of \\spad{u}. For finite collections,{} \\spad{construct(parts(u)) = u}."))
 (|count|
  (((|NonNegativeInteger|) |#2| $)
   "\\spad{count(x,{} u)} returns the number of occurrences of \\spad{x} in \\spad{u}. For collections,{} \\spad{count(x,{} u) = reduce(+,{} [1 for y in u | x = y],{} 0)}.")
  (((|NonNegativeInteger|) (|Mapping| (|Boolean|) |#2|) $)
   "\\spad{count(p,{} u)} returns the number of elements \\spad{x} in \\spad{u} such that \\spad{p(x)} is \\spad{true}. For collections,{} \\spad{count(p,{} u) = reduce(+,{} [1 for x in u | p(x)],{} 0)}."))
 (|every?|
  (((|Boolean|) (|Mapping| (|Boolean|) |#2|) $)
   "\\spad{every?(p,{} u)} tests if \\spad{p}(\\spad{x}) is \\spad{true} for all elements \\spad{x} of \\spad{u}. Note: for collections,{} \\spad{every?(p,{} u) = reduce(and,{} map(p,{} u),{} true,{} false)}. However,{} \\spad{every?(p,{} u)} returns as soon as it finds an element for which \\spad{p} gives \\spad{false}."))
 (|any?|
  (((|Boolean|) (|Mapping| (|Boolean|) |#2|) $)
   "\\spad{any?(p,{} u)} tests if \\spad{p(x)} is \\spad{true} for any element \\spad{x} of \\spad{u}. Note: for collections,{} \\spad{any?(p,{} u) = reduce(or,{} map(p,{} u),{} false,{} true)}. However,{} \\spad{any?(p,{} u)} returns as soon as it finds an element for which \\spad{p} gives \\spad{true}."))
 (|map!|
  (($ (|Mapping| |#2| |#2|) $)
   "\\spad{map!(f,{} u)} destructively replaces each element \\spad{x} of \\spad{u} by \\spad{f(x)}."))
 (|map|
  (($ (|Mapping| |#2| |#2|) $)
   "\\spad{map(f,{} u)} returns a copy of \\spad{u} with each element \\spad{x} replaced by \\spad{f}(\\spad{x}). For collections,{} \\spad{map(f,{} u) = [f(x) for x in u]}.")))
(("documentation" 0 2923) ("ancestors" 0 NIL) ("parents" 0 NIL)
 ("abbreviation" 0 2916) ("predicates" 0 2595) ("superDomain" 0 NIL)
 ("operationAlist" 0 1942) ("modemaps" 0 NIL) ("sourceFile" 0 1905)
 ("constructorCategory" 0 1054) ("constructorModemap" 0 59)
 ("constructorKind" 0 50) ("constructorForm" 0 20))