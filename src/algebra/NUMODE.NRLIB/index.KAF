16640               (MAKEPROP '|NumericalOrdinaryDifferentialEquations|
                              'NILADIC T)
(|NumericalOrdinaryDifferentialEquations|)
|package|
(((|NumericalOrdinaryDifferentialEquations|)
  (CATEGORY |package|
   (SIGNATURE |rk4|
    ((|Void|) (|Vector| (|Float|)) (|Integer|) (|Float|) (|Float|)
     (|Mapping| (|Void|) (|Vector| (|Float|)) (|Vector| (|Float|)) (|Float|))))
   (SIGNATURE |rk4|
    ((|Void|) (|Vector| (|Float|)) (|Integer|) (|Float|) (|Float|)
     (|Mapping| (|Void|) (|Vector| (|Float|)) (|Vector| (|Float|)) (|Float|))
     (|Vector| (|Float|)) (|Vector| (|Float|)) (|Vector| (|Float|))
     (|Vector| (|Float|))))
   (SIGNATURE |rk4a|
    ((|Void|) (|Vector| (|Float|)) (|Integer|) (|Float|) (|Float|) (|Float|)
     (|Float|) (|Integer|)
     (|Mapping| (|Void|) (|Vector| (|Float|)) (|Vector| (|Float|)) (|Float|))))
   (SIGNATURE |rk4qc|
    ((|Void|) (|Vector| (|Float|)) (|Integer|) (|Float|)
     (|Record| (|:| |to_try| (|Float|)) (|:| |did| (|Float|))
               (|:| |next| (|Float|)))
     (|Float|) (|Vector| (|Float|))
     (|Mapping| (|Void|) (|Vector| (|Float|)) (|Vector| (|Float|)) (|Float|))))
   (SIGNATURE |rk4qc|
    ((|Void|) (|Vector| (|Float|)) (|Integer|) (|Float|)
     (|Record| (|:| |to_try| (|Float|)) (|:| |did| (|Float|))
               (|:| |next| (|Float|)))
     (|Float|) (|Vector| (|Float|))
     (|Mapping| (|Void|) (|Vector| (|Float|)) (|Vector| (|Float|)) (|Float|))
     (|Vector| (|Float|)) (|Vector| (|Float|)) (|Vector| (|Float|))
     (|Vector| (|Float|)) (|Vector| (|Float|)) (|Vector| (|Float|))
     (|Vector| (|Float|))))
   (SIGNATURE |rk4f|
    ((|Void|) (|Vector| (|Float|)) (|Integer|) (|Float|) (|Float|) (|Integer|)
     (|Mapping| (|Void|) (|Vector| (|Float|)) (|Vector| (|Float|))
                (|Float|))))))
 (T |NumericalOrdinaryDifferentialEquations|))
(CATEGORY |package|
 (SIGNATURE |rk4|
  ((|Void|) (|Vector| (|Float|)) (|Integer|) (|Float|) (|Float|)
   (|Mapping| (|Void|) (|Vector| (|Float|)) (|Vector| (|Float|)) (|Float|))))
 (SIGNATURE |rk4|
  ((|Void|) (|Vector| (|Float|)) (|Integer|) (|Float|) (|Float|)
   (|Mapping| (|Void|) (|Vector| (|Float|)) (|Vector| (|Float|)) (|Float|))
   (|Vector| (|Float|)) (|Vector| (|Float|)) (|Vector| (|Float|))
   (|Vector| (|Float|))))
 (SIGNATURE |rk4a|
  ((|Void|) (|Vector| (|Float|)) (|Integer|) (|Float|) (|Float|) (|Float|)
   (|Float|) (|Integer|)
   (|Mapping| (|Void|) (|Vector| (|Float|)) (|Vector| (|Float|)) (|Float|))))
 (SIGNATURE |rk4qc|
  ((|Void|) (|Vector| (|Float|)) (|Integer|) (|Float|)
   (|Record| (|:| |to_try| (|Float|)) (|:| |did| (|Float|))
             (|:| |next| (|Float|)))
   (|Float|) (|Vector| (|Float|))
   (|Mapping| (|Void|) (|Vector| (|Float|)) (|Vector| (|Float|)) (|Float|))))
 (SIGNATURE |rk4qc|
  ((|Void|) (|Vector| (|Float|)) (|Integer|) (|Float|)
   (|Record| (|:| |to_try| (|Float|)) (|:| |did| (|Float|))
             (|:| |next| (|Float|)))
   (|Float|) (|Vector| (|Float|))
   (|Mapping| (|Void|) (|Vector| (|Float|)) (|Vector| (|Float|)) (|Float|))
   (|Vector| (|Float|)) (|Vector| (|Float|)) (|Vector| (|Float|))
   (|Vector| (|Float|)) (|Vector| (|Float|)) (|Vector| (|Float|))
   (|Vector| (|Float|))))
 (SIGNATURE |rk4f|
  ((|Void|) (|Vector| (|Float|)) (|Integer|) (|Float|) (|Float|) (|Integer|)
   (|Mapping| (|Void|) (|Vector| (|Float|)) (|Vector| (|Float|)) (|Float|)))))
"/git/fricas/src/algebra/NUMODE.spad"
((|rk4f| (*1 *2 *3 *4 *5 *5 *4 *6)
  (AND (|isDomain| *3 (|Vector| (|Float|))) (|isDomain| *4 (|Integer|))
       (|isDomain| *6
                   (|Mapping| (|Void|) (|Vector| (|Float|))
                              (|Vector| (|Float|)) (|Float|)))
       (|isDomain| *5 (|Float|)) (|isDomain| *2 (|Void|))
       (|isDomain| *1 (|NumericalOrdinaryDifferentialEquations|))))
 (|rk4qc| (*1 *2 *3 *4 *5 *6 *5 *3 *7 *3 *3 *3 *3 *3 *3 *3)
  (AND (|isDomain| *3 (|Vector| (|Float|))) (|isDomain| *4 (|Integer|))
       (|isDomain| *6
                   (|Record| (|:| |to_try| (|Float|)) (|:| |did| (|Float|))
                             (|:| |next| (|Float|))))
       (|isDomain| *7
                   (|Mapping| (|Void|) (|Vector| (|Float|))
                              (|Vector| (|Float|)) (|Float|)))
       (|isDomain| *5 (|Float|)) (|isDomain| *2 (|Void|))
       (|isDomain| *1 (|NumericalOrdinaryDifferentialEquations|))))
 (|rk4qc| (*1 *2 *3 *4 *5 *6 *5 *3 *7)
  (AND (|isDomain| *3 (|Vector| (|Float|))) (|isDomain| *4 (|Integer|))
       (|isDomain| *6
                   (|Record| (|:| |to_try| (|Float|)) (|:| |did| (|Float|))
                             (|:| |next| (|Float|))))
       (|isDomain| *7
                   (|Mapping| (|Void|) (|Vector| (|Float|))
                              (|Vector| (|Float|)) (|Float|)))
       (|isDomain| *5 (|Float|)) (|isDomain| *2 (|Void|))
       (|isDomain| *1 (|NumericalOrdinaryDifferentialEquations|))))
 (|rk4a| (*1 *2 *3 *4 *5 *5 *5 *5 *4 *6)
  (AND (|isDomain| *3 (|Vector| (|Float|))) (|isDomain| *4 (|Integer|))
       (|isDomain| *6
                   (|Mapping| (|Void|) (|Vector| (|Float|))
                              (|Vector| (|Float|)) (|Float|)))
       (|isDomain| *5 (|Float|)) (|isDomain| *2 (|Void|))
       (|isDomain| *1 (|NumericalOrdinaryDifferentialEquations|))))
 (|rk4| (*1 *2 *3 *4 *5 *5 *6 *3 *3 *3 *3)
  (AND (|isDomain| *3 (|Vector| (|Float|))) (|isDomain| *4 (|Integer|))
       (|isDomain| *6
                   (|Mapping| (|Void|) (|Vector| (|Float|))
                              (|Vector| (|Float|)) (|Float|)))
       (|isDomain| *5 (|Float|)) (|isDomain| *2 (|Void|))
       (|isDomain| *1 (|NumericalOrdinaryDifferentialEquations|))))
 (|rk4| (*1 *2 *3 *4 *5 *5 *6)
  (AND (|isDomain| *3 (|Vector| (|Float|))) (|isDomain| *4 (|Integer|))
       (|isDomain| *6
                   (|Mapping| (|Void|) (|Vector| (|Float|))
                              (|Vector| (|Float|)) (|Float|)))
       (|isDomain| *5 (|Float|)) (|isDomain| *2 (|Void|))
       (|isDomain| *1 (|NumericalOrdinaryDifferentialEquations|)))))
((|rk4qc|
  (((|Void|) (|Vector| (|Float|)) (|Integer|) (|Float|)
    (|Record| (|:| |to_try| (|Float|)) (|:| |did| (|Float|))
              (|:| |next| (|Float|)))
    (|Float|) (|Vector| (|Float|))
    (|Mapping| (|Void|) (|Vector| (|Float|)) (|Vector| (|Float|)) (|Float|))
    (|Vector| (|Float|)) (|Vector| (|Float|)) (|Vector| (|Float|))
    (|Vector| (|Float|)) (|Vector| (|Float|)) (|Vector| (|Float|))
    (|Vector| (|Float|)))
   44)
  (((|Void|) (|Vector| (|Float|)) (|Integer|) (|Float|)
    (|Record| (|:| |to_try| (|Float|)) (|:| |did| (|Float|))
              (|:| |next| (|Float|)))
    (|Float|) (|Vector| (|Float|))
    (|Mapping| (|Void|) (|Vector| (|Float|)) (|Vector| (|Float|)) (|Float|)))
   43))
 (|rk4f|
  (((|Void|) (|Vector| (|Float|)) (|Integer|) (|Float|) (|Float|) (|Integer|)
    (|Mapping| (|Void|) (|Vector| (|Float|)) (|Vector| (|Float|)) (|Float|)))
   50))
 (|rk4a|
  (((|Void|) (|Vector| (|Float|)) (|Integer|) (|Float|) (|Float|) (|Float|)
    (|Float|) (|Integer|)
    (|Mapping| (|Void|) (|Vector| (|Float|)) (|Vector| (|Float|)) (|Float|)))
   41))
 (|rk4|
  (((|Void|) (|Vector| (|Float|)) (|Integer|) (|Float|) (|Float|)
    (|Mapping| (|Void|) (|Vector| (|Float|)) (|Vector| (|Float|)) (|Float|))
    (|Vector| (|Float|)) (|Vector| (|Float|)) (|Vector| (|Float|))
    (|Vector| (|Float|)))
   52)
  (((|Void|) (|Vector| (|Float|)) (|Integer|) (|Float|) (|Float|)
    (|Mapping| (|Void|) (|Vector| (|Float|)) (|Vector| (|Float|)) (|Float|)))
   51)))
NUMODE
((|constructor|
  (NIL
   "This package is a suite of functions for the numerical integration of an ordinary differential equation of \\spad{n} variables: \\blankline \\indented{8}{\\center{dy/dx = \\spad{f}(\\spad{y},{} \\spad{x})\\space{5}\\spad{y} is an \\spad{n}-vector}} \\blankline \\par All the routines are based on a 4-th order Runge-Kutta kernel. These routines generally have as arguments: \\spad{n},{} the number of dependent variables; \\spad{x1},{} the initial point; \\spad{h},{} the step size; \\spad{y},{} a vector of initial conditions of length \\spad{n} which upon exit contains the solution at \\spad{x1 + h}; \\spad{derivs},{} a function which computes the right hand side of the ordinary differential equation: \\spad{derivs(dydx,{} y,{} x)} computes \\spad{dydx},{} a vector which contains the derivative information. \\blankline \\par In order of increasing complexity: \\begin{items} \\blankline \\item \\spad{rk4(y,{} n,{} x1,{} h,{} derivs)} advances the solution vector to \\spad{x1 + h} and return the values in \\spad{y}. \\blankline \\item \\spad{rk4(y,{} n,{} x1,{} h,{} derivs,{} t1,{} t2,{} t3,{} t4)} is the same as \\spad{rk4(y,{} n,{} x1,{} h,{} derivs)} except that you must provide 4 scratch arrays \\spad{t1}-\\spad{t4} of size \\spad{n}. \\blankline \\item Starting with \\spad{y} at \\spad{x1},{} \\spad{rk4f(y,{} n,{} x1,{} x2,{} ns,{} derivs)} uses \\spad{ns} fixed steps of a 4-th order Runge-Kutta integrator to advance the solution vector to \\spad{x2} and return the values in \\spad{y}. Argument \\spad{x2},{} is the final point,{} and \\spad{ns},{} the number of steps to take. \\blankline \\item \\spad{rk4qc(y,{} n,{} x1,{} step,{} eps,{} yscal,{} derivs)} takes a 5-th order Runge-Kutta step with monitoring of local truncation to ensure accuracy and adjust stepsize. The function takes two half steps and one full step and scales the difference in solutions at the final point. If the error is within \\spad{eps},{} the step is taken and the result is returned. If the error is not within \\spad{eps},{} the stepsize if decreased and the procedure is tried again until the desired accuracy is reached. Upon input,{} an trial step size must be given and upon return,{} an estimate of the next step size to use is returned as well as the step size which produced the desired accuracy. The scaled error is computed as \\center{\\spad{error = MAX(ABS((y2steps(i) - y1step(i))/yscal(i)))}} and this is compared against \\spad{eps}. If this is greater than \\spad{eps},{} the step size is reduced accordingly to \\center{\\spad{hnew = 0.9 * hdid * (error/eps)^(-1/4)}} If the error criterion is satisfied,{} then we check if the step size was too fine and return a more efficient one. If \\spad{error > \\spad{eps} * (6.0E-04)} then the next step size should be \\center{\\spad{hnext = 0.9 * hdid * (error/\\spad{eps})^(\\spad{-1/5})}} Otherwise \\spad{hnext = 4.0 * hdid} is returned. A more detailed discussion of this and related topics can be found in the book \"Numerical Recipies\" by \\spad{W}.Press,{} \\spad{B}.\\spad{P}. Flannery,{} \\spad{S}.A. Teukolsky,{} \\spad{W}.\\spad{T}. Vetterling published by Cambridge University Press. Argument \\spad{step} is a record of 3 floating point numbers \\spad{(to_try ,{} did ,{} next)},{} \\spad{eps} is the required accuracy,{} \\spad{yscal} is the scaling vector for the difference in solutions. On input,{} \\spad{step.to_try} should be the guess at a step size to achieve the accuracy. On output,{} \\spad{step.did} contains the step size which achieved the accuracy and \\spad{step.next} is the next step size to use. \\blankline \\item \\spad{rk4qc(y,{} n,{} x1,{} step,{} eps,{} yscal,{} derivs,{} t1,{} t2,{} t3,{} t4,{} t5,{} t6,{} t7)} is the same as \\spad{rk4qc(y,{} n,{} x1,{} step,{} eps,{} yscal,{} derivs)} except that the user must provide the 7 scratch arrays \\spad{t1-t7} of size \\spad{n}. \\blankline \\item \\spad{rk4a(y,{} n,{} x1,{} x2,{} eps,{} h,{} ns,{} derivs)} is a driver program which uses \\spad{rk4qc} to integrate \\spad{n} ordinary differential equations starting at \\spad{x1} to \\spad{x2},{} keeping the local truncation error to within \\spad{eps} by changing the local step size. The scaling vector is defined as \\center{\\spad{yscal(i) = abs(y(i)) + abs(h*dydx(i)) + tiny}} where \\spad{y(i)} is the solution at location \\spad{x},{} \\spad{dydx} is the ordinary differential equation\\spad{'s} right hand side,{} \\spad{h} is the current step size and \\spad{tiny} is 10 times the smallest positive number representable. The user must supply an estimate for a trial step size and the maximum number of calls to \\spad{rk4qc} to use. Argument \\spad{x2} is the final point,{} \\spad{eps} is local truncation,{} \\spad{ns} is the maximum number of call to \\spad{rk4qc} to use. \\end{items}"))
 (|rk4f|
  (((|Void|) (|Vector| (|Float|)) (|Integer|) (|Float|) (|Float|) (|Integer|)
    (|Mapping| (|Void|) (|Vector| (|Float|)) (|Vector| (|Float|)) (|Float|)))
   "\\spad{rk4f(y,{} n,{} x1,{} x2,{} ns,{} derivs)} uses a 4-th order Runge-Kutta method to numerically integrate the ordinary differential equation {\\em dy/dx = f(y,{} x)} of \\spad{n} variables,{} where \\spad{y} is an \\spad{n}-vector. Starting with \\spad{y} at \\spad{x1},{} this function uses \\spad{ns} fixed steps of a 4-th order Runge-Kutta integrator to advance the solution vector to \\spad{x2} and return the values in \\spad{y}. For details,{} see \\con{NumericalOrdinaryDifferentialEquations}."))
 (|rk4qc|
  (((|Void|) (|Vector| (|Float|)) (|Integer|) (|Float|)
    (|Record| (|:| |to_try| (|Float|)) (|:| |did| (|Float|))
              (|:| |next| (|Float|)))
    (|Float|) (|Vector| (|Float|))
    (|Mapping| (|Void|) (|Vector| (|Float|)) (|Vector| (|Float|)) (|Float|))
    (|Vector| (|Float|)) (|Vector| (|Float|)) (|Vector| (|Float|))
    (|Vector| (|Float|)) (|Vector| (|Float|)) (|Vector| (|Float|))
    (|Vector| (|Float|)))
   "\\spad{rk4qc(y,{} n,{} x1,{} step,{} eps,{} yscal,{} derivs,{} t1,{} t2,{} t3,{} t4,{} t5,{} t6,{} t7)} is a subfunction for the numerical integration of an ordinary differential equation {\\em dy/dx = f(y,{} x)} of \\spad{n} variables,{} where \\spad{y} is an \\spad{n}-vector using a 4-th order Runge-Kutta method. This function takes a 5-th order Runge-Kutta \\spad{step} with monitoring of local truncation to ensure accuracy and adjust stepsize. For details,{} see \\con{NumericalOrdinaryDifferentialEquations}.")
  (((|Void|) (|Vector| (|Float|)) (|Integer|) (|Float|)
    (|Record| (|:| |to_try| (|Float|)) (|:| |did| (|Float|))
              (|:| |next| (|Float|)))
    (|Float|) (|Vector| (|Float|))
    (|Mapping| (|Void|) (|Vector| (|Float|)) (|Vector| (|Float|)) (|Float|)))
   "\\spad{rk4qc(y,{} n,{} x1,{} step,{} eps,{} yscal,{} derivs)} is a subfunction for the numerical integration of an ordinary differential equation {\\em dy/dx = f(y,{} x)} of \\spad{n} variables,{} where \\spad{y} is an \\spad{n}-vector using a 4-th order Runge-Kutta method. This function takes a 5-th order Runge-Kutta \\spad{step} with monitoring of local truncation to ensure accuracy and adjust stepsize. For details,{} see \\con{NumericalOrdinaryDifferentialEquations}."))
 (|rk4a|
  (((|Void|) (|Vector| (|Float|)) (|Integer|) (|Float|) (|Float|) (|Float|)
    (|Float|) (|Integer|)
    (|Mapping| (|Void|) (|Vector| (|Float|)) (|Vector| (|Float|)) (|Float|)))
   "\\spad{rk4a(y,{} n,{} x1,{} x2,{} eps,{} h,{} ns,{} derivs)} is a driver function for the numerical integration of an ordinary differential equation {\\em dy/dx = f(y,{} x)} of \\spad{n} variables,{} where \\spad{y} is an \\spad{n}-vector using a 4-th order Runge-Kutta method. For details,{} see \\con{NumericalOrdinaryDifferentialEquations}."))
 (|rk4|
  (((|Void|) (|Vector| (|Float|)) (|Integer|) (|Float|) (|Float|)
    (|Mapping| (|Void|) (|Vector| (|Float|)) (|Vector| (|Float|)) (|Float|))
    (|Vector| (|Float|)) (|Vector| (|Float|)) (|Vector| (|Float|))
    (|Vector| (|Float|)))
   "\\spad{rk4(y,{} n,{} x1,{} h,{} derivs,{} t1,{} t2,{} t3,{} t4)} is the same as \\spad{rk4(y,{} n,{} x1,{} h,{} derivs)} except that you must provide 4 scratch arrays \\spad{t1}-\\spad{t4} of size \\spad{n}. For details,{} see \\con{NumericalOrdinaryDifferentialEquations}.")
  (((|Void|) (|Vector| (|Float|)) (|Integer|) (|Float|) (|Float|)
    (|Mapping| (|Void|) (|Vector| (|Float|)) (|Vector| (|Float|)) (|Float|)))
   "\\spad{rk4(y,{} n,{} x1,{} h,{} derivs)} uses a 4-th order Runge-Kutta method to numerically integrate the ordinary differential equation {\\em dy/dx = f(y,{} x)} of \\spad{n} variables,{} where \\spad{y} is an \\spad{n}-vector. Argument \\spad{y} is a vector of initial conditions of length \\spad{n} which upon exit contains the solution at \\spad{x1 + h},{} \\spad{n} is the number of dependent variables,{} \\spad{x1} is the initial point,{} \\spad{h} is the step size,{} and \\spad{derivs} is a function which computes the right hand side of the ordinary differential equation. For details,{} see \\spadtype{NumericalOrdinaryDifferentialEquations}.")))
(("documentation" 0 7545) ("ancestors" 0 NIL) ("parents" 0 NIL)
 ("abbreviation" 0 7538) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 6044) ("modemaps" 0 3432) ("sourceFile" 0 3394)
 ("constructorCategory" 0 1866) ("constructorModemap" 0 167)
 ("constructorKind" 0 157) ("constructorForm" 0 114) ("NILADIC" 0 20))