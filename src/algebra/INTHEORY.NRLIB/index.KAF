8638                (MAKEPROP '|IntegerNumberTheoryFunctions| 'NILADIC T)
(|IntegerNumberTheoryFunctions|)
|package|
(((|IntegerNumberTheoryFunctions|)
  (CATEGORY |package|
   (SIGNATURE |bernoulli| ((|Fraction| (|Integer|)) (|Integer|)))
   (SIGNATURE |carmichaelLambda| ((|Integer|) (|Integer|)))
   (SIGNATURE |chineseRemainder|
    ((|Integer|) (|Integer|) (|Integer|) (|Integer|) (|Integer|)))
   (SIGNATURE |divisors| ((|List| (|Integer|)) (|Integer|)))
   (SIGNATURE |euler| ((|Integer|) (|Integer|)))
   (SIGNATURE |eulerPhi| ((|Integer|) (|Integer|)))
   (SIGNATURE |fibonacci| ((|Integer|) (|Integer|)))
   (SIGNATURE |harmonic| ((|Fraction| (|Integer|)) (|Integer|)))
   (SIGNATURE |jacobi| ((|Integer|) (|Integer|) (|Integer|)))
   (SIGNATURE |legendre| ((|Integer|) (|Integer|) (|Integer|)))
   (SIGNATURE |moebiusMu| ((|Integer|) (|Integer|)))
   (SIGNATURE |numberOfDivisors| ((|Integer|) (|Integer|)))
   (SIGNATURE |sumOfDivisors| ((|Integer|) (|Integer|)))
   (SIGNATURE |sumOfKthPowerDivisors|
    ((|Integer|) (|Integer|) (|NonNegativeInteger|)))))
 (T |IntegerNumberTheoryFunctions|))
(CATEGORY |package|
 (SIGNATURE |bernoulli| ((|Fraction| (|Integer|)) (|Integer|)))
 (SIGNATURE |carmichaelLambda| ((|Integer|) (|Integer|)))
 (SIGNATURE |chineseRemainder|
  ((|Integer|) (|Integer|) (|Integer|) (|Integer|) (|Integer|)))
 (SIGNATURE |divisors| ((|List| (|Integer|)) (|Integer|)))
 (SIGNATURE |euler| ((|Integer|) (|Integer|)))
 (SIGNATURE |eulerPhi| ((|Integer|) (|Integer|)))
 (SIGNATURE |fibonacci| ((|Integer|) (|Integer|)))
 (SIGNATURE |harmonic| ((|Fraction| (|Integer|)) (|Integer|)))
 (SIGNATURE |jacobi| ((|Integer|) (|Integer|) (|Integer|)))
 (SIGNATURE |legendre| ((|Integer|) (|Integer|) (|Integer|)))
 (SIGNATURE |moebiusMu| ((|Integer|) (|Integer|)))
 (SIGNATURE |numberOfDivisors| ((|Integer|) (|Integer|)))
 (SIGNATURE |sumOfDivisors| ((|Integer|) (|Integer|)))
 (SIGNATURE |sumOfKthPowerDivisors|
  ((|Integer|) (|Integer|) (|NonNegativeInteger|))))
"/git/fricas/src/algebra/INTHEORY.spad"
((|sumOfKthPowerDivisors| (*1 *2 *2 *3)
  (AND (|isDomain| *2 (|Integer|)) (|isDomain| *3 (|NonNegativeInteger|))
       (|isDomain| *1 (|IntegerNumberTheoryFunctions|))))
 (|sumOfDivisors| (*1 *2 *2)
  (AND (|isDomain| *2 (|Integer|))
       (|isDomain| *1 (|IntegerNumberTheoryFunctions|))))
 (|numberOfDivisors| (*1 *2 *2)
  (AND (|isDomain| *2 (|Integer|))
       (|isDomain| *1 (|IntegerNumberTheoryFunctions|))))
 (|moebiusMu| (*1 *2 *2)
  (AND (|isDomain| *2 (|Integer|))
       (|isDomain| *1 (|IntegerNumberTheoryFunctions|))))
 (|legendre| (*1 *2 *2 *2)
  (AND (|isDomain| *2 (|Integer|))
       (|isDomain| *1 (|IntegerNumberTheoryFunctions|))))
 (|jacobi| (*1 *2 *2 *2)
  (AND (|isDomain| *2 (|Integer|))
       (|isDomain| *1 (|IntegerNumberTheoryFunctions|))))
 (|harmonic| (*1 *2 *3)
  (AND (|isDomain| *3 (|Integer|)) (|isDomain| *2 (|Fraction| (|Integer|)))
       (|isDomain| *1 (|IntegerNumberTheoryFunctions|))))
 (|fibonacci| (*1 *2 *2)
  (AND (|isDomain| *2 (|Integer|))
       (|isDomain| *1 (|IntegerNumberTheoryFunctions|))))
 (|eulerPhi| (*1 *2 *2)
  (AND (|isDomain| *2 (|Integer|))
       (|isDomain| *1 (|IntegerNumberTheoryFunctions|))))
 (|euler| (*1 *2 *2)
  (AND (|isDomain| *2 (|Integer|))
       (|isDomain| *1 (|IntegerNumberTheoryFunctions|))))
 (|divisors| (*1 *2 *3)
  (AND (|isDomain| *3 (|Integer|)) (|isDomain| *2 (|List| (|Integer|)))
       (|isDomain| *1 (|IntegerNumberTheoryFunctions|))))
 (|chineseRemainder| (*1 *2 *2 *2 *2 *2)
  (AND (|isDomain| *2 (|Integer|))
       (|isDomain| *1 (|IntegerNumberTheoryFunctions|))))
 (|carmichaelLambda| (*1 *2 *2)
  (AND (|isDomain| *2 (|Integer|))
       (|isDomain| *1 (|IntegerNumberTheoryFunctions|))))
 (|bernoulli| (*1 *2 *3)
  (AND (|isDomain| *3 (|Integer|)) (|isDomain| *2 (|Fraction| (|Integer|)))
       (|isDomain| *1 (|IntegerNumberTheoryFunctions|)))))
((|sumOfKthPowerDivisors|
  (((|Integer|) (|Integer|) (|NonNegativeInteger|)) 73))
 (|sumOfDivisors| (((|Integer|) (|Integer|)) 72))
 (|numberOfDivisors| (((|Integer|) (|Integer|)) 71))
 (|moebiusMu| (((|Integer|) (|Integer|)) 76))
 (|legendre| (((|Integer|) (|Integer|) (|Integer|)) 62))
 (|jacobi| (((|Integer|) (|Integer|) (|Integer|)) 59))
 (|harmonic| (((|Fraction| (|Integer|)) (|Integer|)) 20))
 (|fibonacci| (((|Integer|) (|Integer|)) 21))
 (|eulerPhi| (((|Integer|) (|Integer|)) 65))
 (|euler| (((|Integer|) (|Integer|)) 44))
 (|divisors| (((|List| (|Integer|)) (|Integer|)) 70))
 (|chineseRemainder|
  (((|Integer|) (|Integer|) (|Integer|) (|Integer|) (|Integer|)) 56))
 (|carmichaelLambda| (((|Integer|) (|Integer|)) 38))
 (|bernoulli| (((|Fraction| (|Integer|)) (|Integer|)) 53)))
INTHEORY
((|constructor|
  (NIL
   "This package provides various number theoretic functions on the integers."))
 (|sumOfKthPowerDivisors|
  (((|Integer|) (|Integer|) (|NonNegativeInteger|))
   "\\spad{sumOfKthPowerDivisors(n,{} k)} returns the sum of the \\spad{k}th powers of the integers between 1 and \\spad{n} (inclusive) which divide \\spad{n}. the sum of the \\spad{k}th powers of the divisors of \\spad{n} is often denoted by \\spad{sigma_k(n)}."))
 (|sumOfDivisors|
  (((|Integer|) (|Integer|))
   "\\spad{sumOfDivisors(n)} returns the sum of the integers between 1 and \\spad{n} (inclusive) which divide \\spad{n}. The sum of the divisors of \\spad{n} is often denoted by \\spad{sigma(n)}."))
 (|numberOfDivisors|
  (((|Integer|) (|Integer|))
   "\\spad{numberOfDivisors(n)} returns the number of integers between 1 and \\spad{n} (inclusive) which divide \\spad{n}. The number of divisors of \\spad{n} is often denoted by \\spad{tau(n)}."))
 (|moebiusMu|
  (((|Integer|) (|Integer|))
   "\\spad{moebiusMu(n)} returns the Moebius function \\spad{mu(n)}. \\spad{mu(n)} is either \\spad{-1},{} 0 or 1 as follows: \\spad{mu(n) = 0} if \\spad{n} is divisible by a square > 1,{} \\spad{mu(n) = (-1)^k} if \\spad{n} is square-free and has \\spad{k} distinct prime divisors."))
 (|legendre|
  (((|Integer|) (|Integer|) (|Integer|))
   "\\spad{legendre(a,{} p)} returns the Legendre symbol \\spad{L(a/p)}. \\spad{L(a/p) = (-1)^((p-1)/2) mod p} (\\spad{p} prime),{} which is 0 if \\spad{a} is 0,{} 1 if \\spad{a} is a quadratic residue \\spad{mod p} and \\spad{-1} otherwise. Note: because the primality test is expensive,{} if it is known that \\spad{p} is prime then use \\spad{jacobi(a,{} p)}."))
 (|jacobi|
  (((|Integer|) (|Integer|) (|Integer|))
   "\\spad{jacobi(a,{} b)} returns the Jacobi symbol \\spad{J(a/b)}. When \\spad{b} is odd,{} \\spad{J(a/b) = product(L(a/p) for p in factor b )}. Note: by convention,{} 0 is returned if \\spad{gcd(a,{} b) ~= 1}. Iterative \\spad{O(log(b)^2)} version coded by Michael Monagan June 1987."))
 (|harmonic|
  (((|Fraction| (|Integer|)) (|Integer|))
   "\\spad{harmonic(n)} returns the \\spad{n}th harmonic number. This is \\spad{H[n] = sum(1/k,{} k=1..n)}."))
 (|fibonacci|
  (((|Integer|) (|Integer|))
   "\\spad{fibonacci(n)} returns the \\spad{n}th Fibonacci number. the Fibonacci numbers \\spad{F[n]} are defined by \\spad{F[0] = F[1] = 1} and \\spad{F[n] = F[n-1] + F[n-2]}. The algorithm has running time \\spad{O(log(n)^3)}. Reference: Knuth,{} The Art of Computer Programming Vol 2,{} Semi-Numerical Algorithms."))
 (|eulerPhi|
  (((|Integer|) (|Integer|))
   "\\spad{eulerPhi(n)} returns the number of integers between 1 and \\spad{n} (including 1) which are relatively prime to \\spad{n}. This is the Euler phi function \\spad{\\phi(n)} is also called the totient function."))
 (|euler|
  (((|Integer|) (|Integer|))
   "\\spad{euler(n)} returns the \\spad{n}th Euler number. This is \\spad{2^n E(n,{} 1/2)},{} where \\spad{E(n,{} x)} is the \\spad{n}th Euler polynomial."))
 (|divisors|
  (((|List| (|Integer|)) (|Integer|))
   "\\spad{divisors(n)} returns a list of the divisors of \\spad{n}."))
 (|chineseRemainder|
  (((|Integer|) (|Integer|) (|Integer|) (|Integer|) (|Integer|))
   "\\spad{chineseRemainder(x1,{} m1,{} x2,{} m2)} returns \\spad{w},{} where \\spad{w} is such that \\spad{w = x1 mod m1} and \\spad{w = x2 mod m2}. Note: \\spad{m1} and \\spad{m2} must be relatively prime."))
 (|carmichaelLambda|
  (((|Integer|) (|Integer|))
   "\\spad{carmichaelLambda(n)} returns exponent of the multiplicative group of integers modulo \\spad{n},{} that is smallest positive integer \\spad{k} such that \\spad{i^k rem n = 1} for all \\spad{i} relatively prime to \\spad{n}."))
 (|bernoulli|
  (((|Fraction| (|Integer|)) (|Integer|))
   "\\spad{bernoulli(n)} returns the \\spad{n}th Bernoulli number. this is \\spad{B(n,{} 0)},{} where \\spad{B(n,{} x)} is the \\spad{n}th Bernoulli polynomial.")))
(("documentation" 0 4687) ("ancestors" 0 NIL) ("parents" 0 NIL)
 ("abbreviation" 0 4678) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 3885) ("modemaps" 0 2030) ("sourceFile" 0 1990)
 ("constructorCategory" 0 1107) ("constructorModemap" 0 117)
 ("constructorKind" 0 107) ("constructorForm" 0 74) ("NILADIC" 0 20))