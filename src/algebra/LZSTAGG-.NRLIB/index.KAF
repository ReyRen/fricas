9114                (|LazyStreamAggregate&| A S)
|domain|
(((|LazyStreamAggregate&| |#1| |#2|)
  (CATEGORY |domain| (SIGNATURE |complete| (|#1| |#1|))
   (SIGNATURE |extend| (|#1| |#1| (|Integer|)))
   (SIGNATURE |possiblyInfinite?| ((|Boolean|) |#1|))
   (SIGNATURE |explicitlyFinite?| ((|Boolean|) |#1|))
   (SIGNATURE |elt| (|#2| |#1| (|Integer|) |#2|))
   (SIGNATURE |elt| (|#2| |#1| (|Integer|)))
   (SIGNATURE |entries| ((|List| |#2|) |#1|))
   (SIGNATURE |index?| ((|Boolean|) (|Integer|) |#1|))
   (SIGNATURE |indices| ((|List| (|Integer|)) |#1|))
   (SIGNATURE |maxIndex| ((|Integer|) |#1|))
   (SIGNATURE |minIndex| ((|Integer|) |#1|))
   (SIGNATURE |construct| (|#1| (|List| |#2|)))
   (SIGNATURE |elt| (|#1| |#1| (|UniversalSegment| (|Integer|))))
   (SIGNATURE |delete| (|#1| |#1| (|Integer|)))
   (SIGNATURE |delete| (|#1| |#1| (|UniversalSegment| (|Integer|))))
   (SIGNATURE |insert| (|#1| |#2| |#1| (|Integer|)))
   (SIGNATURE |insert| (|#1| |#1| |#1| (|Integer|)))
   (SIGNATURE = ((|Boolean|) |#1| |#1|)) (SIGNATURE |cycleTail| (|#1| |#1|))
   (SIGNATURE |cycleLength| ((|NonNegativeInteger|) |#1|))
   (SIGNATURE |cycleEntry| (|#1| |#1|)) (SIGNATURE |tail| (|#1| |#1|))
   (SIGNATURE |last| (|#1| |#1| (|NonNegativeInteger|)))
   (SIGNATURE |elt| (|#2| |#1| "last")) (SIGNATURE |last| (|#2| |#1|))
   (SIGNATURE |rest| (|#1| |#1| (|NonNegativeInteger|)))
   (SIGNATURE |elt| (|#1| |#1| "rest")) (SIGNATURE |rest| (|#1| |#1|))
   (SIGNATURE |first| (|#1| |#1| (|NonNegativeInteger|)))
   (SIGNATURE |elt| (|#2| |#1| "first")) (SIGNATURE |first| (|#2| |#1|))
   (SIGNATURE |node?| ((|Boolean|) |#1| |#1|))
   (SIGNATURE |child?| ((|Boolean|) |#1| |#1|))
   (SIGNATURE |distance| ((|Integer|) |#1| |#1|))
   (SIGNATURE |leaves| ((|List| |#2|) |#1|))
   (SIGNATURE |cyclic?| ((|Boolean|) |#1|))
   (SIGNATURE |elt| (|#2| |#1| "value")) (SIGNATURE |value| (|#2| |#1|))
   (SIGNATURE |nodes| ((|List| |#1|) |#1|))
   (SIGNATURE |children| ((|List| |#1|) |#1|))
   (SIGNATURE |every?| ((|Boolean|) (|Mapping| (|Boolean|) |#2|) |#1|))
   (SIGNATURE |any?| ((|Boolean|) (|Mapping| (|Boolean|) |#2|) |#1|))
   (SIGNATURE |#| ((|NonNegativeInteger|) |#1|))
   (SIGNATURE |size?| ((|Boolean|) |#1| (|NonNegativeInteger|)))
   (SIGNATURE |more?| ((|Boolean|) |#1| (|NonNegativeInteger|)))
   (SIGNATURE |less?| ((|Boolean|) |#1| (|NonNegativeInteger|))))
  (|LazyStreamAggregate| |#2|) (|Type|))
 (T |LazyStreamAggregate&|))
(CATEGORY |domain| (SIGNATURE |complete| (|#1| |#1|))
 (SIGNATURE |extend| (|#1| |#1| (|Integer|)))
 (SIGNATURE |possiblyInfinite?| ((|Boolean|) |#1|))
 (SIGNATURE |explicitlyFinite?| ((|Boolean|) |#1|))
 (SIGNATURE |elt| (|#2| |#1| (|Integer|) |#2|))
 (SIGNATURE |elt| (|#2| |#1| (|Integer|)))
 (SIGNATURE |entries| ((|List| |#2|) |#1|))
 (SIGNATURE |index?| ((|Boolean|) (|Integer|) |#1|))
 (SIGNATURE |indices| ((|List| (|Integer|)) |#1|))
 (SIGNATURE |maxIndex| ((|Integer|) |#1|))
 (SIGNATURE |minIndex| ((|Integer|) |#1|))
 (SIGNATURE |construct| (|#1| (|List| |#2|)))
 (SIGNATURE |elt| (|#1| |#1| (|UniversalSegment| (|Integer|))))
 (SIGNATURE |delete| (|#1| |#1| (|Integer|)))
 (SIGNATURE |delete| (|#1| |#1| (|UniversalSegment| (|Integer|))))
 (SIGNATURE |insert| (|#1| |#2| |#1| (|Integer|)))
 (SIGNATURE |insert| (|#1| |#1| |#1| (|Integer|)))
 (SIGNATURE = ((|Boolean|) |#1| |#1|)) (SIGNATURE |cycleTail| (|#1| |#1|))
 (SIGNATURE |cycleLength| ((|NonNegativeInteger|) |#1|))
 (SIGNATURE |cycleEntry| (|#1| |#1|)) (SIGNATURE |tail| (|#1| |#1|))
 (SIGNATURE |last| (|#1| |#1| (|NonNegativeInteger|)))
 (SIGNATURE |elt| (|#2| |#1| "last")) (SIGNATURE |last| (|#2| |#1|))
 (SIGNATURE |rest| (|#1| |#1| (|NonNegativeInteger|)))
 (SIGNATURE |elt| (|#1| |#1| "rest")) (SIGNATURE |rest| (|#1| |#1|))
 (SIGNATURE |first| (|#1| |#1| (|NonNegativeInteger|)))
 (SIGNATURE |elt| (|#2| |#1| "first")) (SIGNATURE |first| (|#2| |#1|))
 (SIGNATURE |node?| ((|Boolean|) |#1| |#1|))
 (SIGNATURE |child?| ((|Boolean|) |#1| |#1|))
 (SIGNATURE |distance| ((|Integer|) |#1| |#1|))
 (SIGNATURE |leaves| ((|List| |#2|) |#1|))
 (SIGNATURE |cyclic?| ((|Boolean|) |#1|)) (SIGNATURE |elt| (|#2| |#1| "value"))
 (SIGNATURE |value| (|#2| |#1|)) (SIGNATURE |nodes| ((|List| |#1|) |#1|))
 (SIGNATURE |children| ((|List| |#1|) |#1|))
 (SIGNATURE |every?| ((|Boolean|) (|Mapping| (|Boolean|) |#2|) |#1|))
 (SIGNATURE |any?| ((|Boolean|) (|Mapping| (|Boolean|) |#2|) |#1|))
 (SIGNATURE |#| ((|NonNegativeInteger|) |#1|))
 (SIGNATURE |size?| ((|Boolean|) |#1| (|NonNegativeInteger|)))
 (SIGNATURE |more?| ((|Boolean|) |#1| (|NonNegativeInteger|)))
 (SIGNATURE |less?| ((|Boolean|) |#1| (|NonNegativeInteger|))))
"/git/fricas/src/algebra/LZSTAGG.spad"
((|value| ((|#2| $) 76)) (|tail| (($ $) 97))
 (|size?| (((|Boolean|) $ (|NonNegativeInteger|)) 26))
 (|rest| (($ $) 85) (($ $ (|NonNegativeInteger|)) 89))
 (|possiblyInfinite?| (((|Boolean|) $) 98)) (|nodes| (((|List| $) $) 71))
 (|node?| (((|Boolean|) $ $) 70))
 (|more?| (((|Boolean|) $ (|NonNegativeInteger|)) 24))
 (|minIndex| (((|Integer|) $) 45)) (|maxIndex| (((|Integer|) $) 44))
 (|less?| (((|Boolean|) $ (|NonNegativeInteger|)) 22))
 (|leaves| (((|List| |#2|) $) 74))
 (|last| ((|#2| $) 90) (($ $ (|NonNegativeInteger|)) 93))
 (|insert| (($ $ $ (|Integer|)) 61) (($ |#2| $ (|Integer|)) 60))
 (|indices| (((|List| (|Integer|)) $) 43))
 (|index?| (((|Boolean|) (|Integer|) $) 41))
 (|first| ((|#2| $) NIL) (($ $ (|NonNegativeInteger|)) 84))
 (|extend| (($ $ (|Integer|)) 100)) (|explicitlyFinite?| (((|Boolean|) $) 99))
 (|every?| (((|Boolean|) (|Mapping| (|Boolean|) |#2|) $) 32))
 (|entries| (((|List| |#2|) $) 33))
 (|elt| ((|#2| $ "value") NIL) ((|#2| $ "first") 83) (($ $ "rest") 88)
  ((|#2| $ "last") 96) (($ $ (|UniversalSegment| (|Integer|))) 57)
  ((|#2| $ (|Integer|)) 39) ((|#2| $ (|Integer|) |#2|) 40))
 (|distance| (((|Integer|) $ $) 69))
 (|delete| (($ $ (|UniversalSegment| (|Integer|))) 56) (($ $ (|Integer|)) 50))
 (|cyclic?| (((|Boolean|) $) 65)) (|cycleTail| (($ $) 81))
 (|cycleLength| (((|NonNegativeInteger|) $) 80)) (|cycleEntry| (($ $) 79))
 (|construct| (($ (|List| |#2|)) 36)) (|complete| (($ $) 101))
 (|children| (((|List| $) $) 68)) (|child?| (((|Boolean|) $ $) 67))
 (|any?| (((|Boolean|) (|Mapping| (|Boolean|) |#2|) $) 31))
 (= (((|Boolean|) $ $) 18)) (|#| (((|NonNegativeInteger|) $) 29)))
LZSTAGG-
((|constructor|
  (NIL
   "LazyStreamAggregate is the category of streams with lazy evaluation. It is understood that the function 'empty?' will cause lazy evaluation if necessary to determine if there are entries. Functions which call 'empty?',{} \\spadignore{e.g.} 'first' and 'rest',{} will also cause lazy evaluation if necessary."))
 (|complete|
  (($ $)
   "\\spad{complete(st)} causes all entries of 'st' to be computed. this function should only be called on streams which are known to be finite."))
 (|extend|
  (($ $ (|Integer|))
   "\\spad{extend(st,{} n)} causes entries to be computed,{} if necessary,{} so that 'st' will have at least \\spad{'n'} explicit entries or so that all entries of 'st' will be computed if 'st' is finite with length \\spad{<=} \\spad{n}."))
 (|numberOfComputedEntries|
  (((|NonNegativeInteger|) $)
   "\\spad{numberOfComputedEntries(st)} returns the number of explicitly computed entries of stream \\spad{st} which exist immediately prior to the time this function is called."))
 (|rst|
  (($ $)
   "\\spad{rst(s)} returns a pointer to the next node of stream \\spad{s}. Caution: this function should only be called after a \\spad{empty?} test has been made since there is no error check."))
 (|frst|
  ((|#2| $)
   "\\spad{frst(s)} returns the first element of stream \\spad{s}. Caution: this function should only be called after a \\spad{empty?} test has been made since there is no error check."))
 (|lazyEvaluate|
  (($ $)
   "\\spad{lazyEvaluate(s)} causes one lazy evaluation of stream \\spad{s}. Caution: the first node must be a lazy evaluation mechanism (satisfies \\spad{lazy?(s) = true}) as there is no error check. Note: a call to this function may or may not produce an explicit first entry"))
 (|lazy?|
  (((|Boolean|) $)
   "\\spad{lazy?(s)} returns \\spad{true} if the first node of the stream \\spad{s} is a lazy evaluation mechanism which could produce an additional entry to \\spad{s}."))
 (|explicitlyEmpty?|
  (((|Boolean|) $)
   "\\spad{explicitlyEmpty?(s)} returns \\spad{true} if the stream is an (explicitly) empty stream. Note: this is a null test which will not cause lazy evaluation."))
 (|explicitEntries?|
  (((|Boolean|) $)
   "\\spad{explicitEntries?(s)} returns \\spad{true} if the stream \\spad{s} has explicitly computed entries,{} and \\spad{false} otherwise."))
 (|select|
  (($ (|Mapping| (|Boolean|) |#2|) $)
   "\\spad{select(f,{} st)} returns a stream consisting of those elements of stream st satisfying the predicate \\spad{f}. Note: \\spad{select(f,{} st) = [x for x in st | f(x)]}."))
 (|remove|
  (($ (|Mapping| (|Boolean|) |#2|) $)
   "\\spad{remove(f,{} st)} returns a stream consisting of those elements of stream st which do not satisfy the predicate \\spad{f}. Note: \\spad{remove(f,{} st) = [x for x in st | not f(x)]}.")))
(("documentation" 0 6297) ("ancestors" 0 NIL) ("parents" 0 NIL)
 ("abbreviation" 0 6288) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 4657) ("modemaps" 0 NIL) ("sourceFile" 0 4618)
 ("constructorCategory" 0 2432) ("constructorModemap" 0 58)
 ("constructorKind" 0 49) ("constructorForm" 0 20))