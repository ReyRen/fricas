)abbrev domain SETLAT SubsetLattice
++ Author: Martin Baker
++ Description: Implementation of subset logic.
++    implements pseudo complement
++    subset of powerset
++    related to 'containment order'
++    REP holds a single node and complete set (representing 'top')
++ Date Created: Oct 2015
SubsetLattice(S : SetCategory, top : List(S)) : Exports == Impl where
    NNI ==> NonNegativeInteger
    Exports ==> Lattice with
      subsetLattice : (obj : List(S)) -> %
        ++ construct subset lattice element
      complement : (a : %) -> %
        ++ pseudo complement
      complement : (a : %, pseudoTop : List(S)) -> %
        ++ pseudo complement

    Impl ==> add

      -- representation of element of lattice
      -- This list represents some subset of: top : list(S)
      Rep := List(S)

      -- construct subset lattice element
      subsetLattice(obj : List(S)) : % ==
          obj

      -- returns the logical 'meet', e.g. 'and'.
      _/_\(a : %, b : %) : % ==
          setUnion(a pretend List(S), b pretend List(S))$List(S)

      -- returns the logical 'join', e.g. 'or'.
      _\_/(a : %, b : %) : % ==
          setIntersection(a pretend List(S), b pretend List(S))$List(S)

      complement(a : %) : % ==
          r : List(S) := []
          for b in top repeat
              contains : Boolean := false
              for c in (a pretend List(S)) repeat
                  if b = c then contains := true
              if not contains then r := concat(r, b)
          r

      complement(a : %, pseudoTop : List(S)) : % ==
          r : List(S) := []
          for b in pseudoTop repeat
              contains : Boolean := false
              for c in (a pretend List(S)) repeat
                  if b = c then contains := true
              if not contains then r := concat(r, b)
          r

      -- start of SetCategory definitions --

      hash(s : %) : SingleInteger == 0$SingleInteger

      -- returns true if x equals y
      -- this is equality and not isomorphism
      -- that is it returns true only if exact index values and names are used
      -- in addition to the structure(arrows) being the same.
      _=(x : %, y : %) : Boolean ==
          (x pretend NNI) = (y pretend NNI)

      -- returns true if x is not equal to y
      _~_=(x : %, y : %) : Boolean == not(x = y)

      -- output
      coerce(s : %) : OutputForm ==
          inp := s pretend List(S)
          oup : List(OutputForm) := []
          for x in inp repeat
              oup := concat(oup, x::OutputForm)
          bracket(oup)

)if false
\section{Poset Factory}
Provides functions to construct various small posets
including powerset.

Perhaps it should be called a 'powerlist' but since we do
not expect duplicates or require specific ordering it is
essentially the same.
)endif

