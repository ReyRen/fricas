3946                (|UniversalSegment| S)
|domain|
(((|UniversalSegment| |#1|)
  (|Join| (|SegmentCategory| |#1|)
          (CATEGORY |domain| (SIGNATURE SEGMENT ($ |#1|))
           (SIGNATURE |segment| ($ |#1|))
           (SIGNATURE |coerce| ($ (|Segment| |#1|)))
           (SIGNATURE |hasHi| ((|Boolean|) $))
           (IF (|has| |#1| (|OrderedRing|))
               (ATTRIBUTE (|SegmentExpansionCategory| |#1| (|Stream| |#1|)))
               |noBranch|)))
  (|Type|))
 (T |UniversalSegment|))
(|Join| (|SegmentCategory| |#1|)
        (CATEGORY |domain| (SIGNATURE SEGMENT ($ |#1|))
         (SIGNATURE |segment| ($ |#1|))
         (SIGNATURE |coerce| ($ (|Segment| |#1|)))
         (SIGNATURE |hasHi| ((|Boolean|) $))
         (IF (|has| |#1| (|OrderedRing|))
             (ATTRIBUTE (|SegmentExpansionCategory| |#1| (|Stream| |#1|)))
             |noBranch|)))
"/git/fricas/src/algebra/UNISEG.spad"
((SEGMENT (*1 *1 *2)
  (AND (|isDomain| *1 (|UniversalSegment| *2)) (|ofCategory| *2 (|Type|))))
 (|segment| (*1 *1 *2)
  (AND (|isDomain| *1 (|UniversalSegment| *2)) (|ofCategory| *2 (|Type|))))
 (|coerce| (*1 *1 *2)
           (AND (|isDomain| *2 (|Segment| *3)) (|ofCategory| *3 (|Type|))
                (|isDomain| *1 (|UniversalSegment| *3))))
 (|hasHi| (*1 *2 *1)
  (AND (|isDomain| *2 (|Boolean|)) (|isDomain| *1 (|UniversalSegment| *3))
       (|ofCategory| *3 (|Type|)))))
((~= (((|Boolean|) $ $) NIL (|has| |#1| (|SetCategory|))))
 (|segment| (($ |#1| |#1|) 11) (($ |#1|) 8))
 (|reverse| (($ $) NIL (|has| |#1| (|OrderedRing|))))
 (|map|
  (((|Stream| |#1|) (|Mapping| |#1| |#1|) $) 63 (|has| |#1| (|OrderedRing|))))
 (|low| ((|#1| $) 14))
 (|latex| (((|String|) $) NIL (|has| |#1| (|SetCategory|))))
 (|incr| (((|Integer|) $) 22)) (|high| ((|#1| $) 20))
 (|hashUpdate!|
  (((|HashState|) (|HashState|) $) NIL (|has| |#1| (|SetCategory|))))
 (|hash| (((|SingleInteger|) $) NIL (|has| |#1| (|SetCategory|))))
 (|hasHi| (((|Boolean|) $) 18))
 (|expand| (((|Stream| |#1|) (|List| $)) 59 (|has| |#1| (|OrderedRing|)))
  (((|Stream| |#1|) $) 60 (|has| |#1| (|OrderedRing|))))
 (|convert| (($ |#1|) 27)
            (((|InputForm|) $) 48
             (|has| |#1| (|ConvertibleTo| (|InputForm|)))))
 (|coerce| (((|OutputForm|) $) 39 (|has| |#1| (|SetCategory|)))
           (($ (|Segment| |#1|)) 25))
 (SEGMENT (($ |#1| |#1|) 24) (($ |#1|) 23)) (BY (($ $ (|Integer|)) 15))
 (= (((|Boolean|) $ $) 30 (|has| |#1| (|SetCategory|))))
 (- (($ $ |#1|) 56 (|has| |#1| (|AbelianGroup|))))
 (+ (($ |#1| $) 51 (|has| |#1| (|AbelianSemiGroup|)))
    (($ $ |#1|) 53 (|has| |#1| (|AbelianSemiGroup|)))))
((|HasCategory| |#1| (LIST '|ConvertibleTo| '(|InputForm|)))
 (|HasCategory| |#1| '(|OrderedRing|)) (|HasCategory| |#1| '(|SetCategory|))
 (|HasCategory| |#1| '(|AbelianSemiGroup|))
 (|HasCategory| |#1| '(|AbelianGroup|)))
UNISEG
(((|SegmentCategory| |#1|) . T)
 ((|SegmentExpansionCategory| |#1| (|Stream| |#1|)) |has| |#1| (|OrderedRing|)))
(((|BasicType|) |has| |t#1| (|SetCategory|))
 ((|CoercibleTo| (|OutputForm|)) |has| |t#1| (|SetCategory|))
 ((|ConvertibleTo| (|InputForm|)) |has| |t#1| (|ConvertibleTo| (|InputForm|)))
 ((|SegmentCategory| |t#1|) |has| |#1| (|OrderedRing|))
 ((|SegmentCategory| |#1|) . T)
 ((|SegmentExpansionCategory| |#1| (|Stream| |#1|)) |has| |#1| (|OrderedRing|))
 ((|SetCategory|) |has| |t#1| (|SetCategory|)) ((|Type|) . T))
((|constructor|
  (NIL
   "This domain provides segments which may be half open. That is,{} ranges of the form \\spad{a..} or \\spad{a..b}."))
 (|hasHi|
  (((|Boolean|) $)
   "\\spad{hasHi(s)} tests whether the segment \\spad{s} has an upper bound."))
 (|coerce|
  (($ (|Segment| |#1|))
   "\\spad{coerce(x)} allows \\spadtype{Segment} values to be used as \\%."))
 (|segment|
  (($ |#1|)
   "\\spad{segment(l)} is an alternate way to construct the segment \\spad{l..}."))
 (SEGMENT
  (($ |#1|)
   "\\spad{l..} produces a half open segment,{} that is,{} one with no upper bound.")))
(("documentation" 0 3363) ("ancestors" 0 2946) ("parents" 0 2833)
 ("abbreviation" 0 2826) ("predicates" 0 2603) ("superDomain" 0 NIL)
 ("operationAlist" 0 1392) ("modemaps" 0 909) ("sourceFile" 0 871)
 ("constructorCategory" 0 502) ("constructorModemap" 0 52)
 ("constructorKind" 0 43) ("constructorForm" 0 20))