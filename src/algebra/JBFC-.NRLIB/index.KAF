16863               (|JetBundleFunctionCategory&| S JB)
|domain|
(((|JetBundleFunctionCategory&| |#1| |#2|)
  (CATEGORY |domain| (SIGNATURE |autoReduce| ((|List| |#1|) (|List| |#1|)))
   (SIGNATURE |reduceMod| ((|List| |#1|) (|List| |#1|) (|List| |#1|)))
   (SIGNATURE |simpMod|
    ((|Record| (|:| |Sys| (|List| |#1|))
               (|:| JM (|SparseEchelonMatrix| |#2| |#1|))
               (|:| |Depend|
                    (|Union| #1="failed"
                             (|List| (|List| (|NonNegativeInteger|))))))
     (|List| |#1|) (|SparseEchelonMatrix| |#2| |#1|) (|List| |#1|)))
   (SIGNATURE |simpMod| ((|List| |#1|) (|List| |#1|) (|List| |#1|)))
   (SIGNATURE |simpOne| (|#1| |#1|))
   (SIGNATURE |simplify|
    ((|Record| (|:| |Sys| (|List| |#1|))
               (|:| JM (|SparseEchelonMatrix| |#2| |#1|))
               (|:| |Depend|
                    (|Union| #1# (|List| (|List| (|NonNegativeInteger|))))))
     (|List| |#1|) (|SparseEchelonMatrix| |#2| |#1|)))
   (SIGNATURE |dSubst| (|#1| |#1| |#2| |#1|))
   (SIGNATURE |sortLD| ((|List| |#1|) (|List| |#1|)))
   (SIGNATURE |leadingDer| (|#2| |#1|))
   (SIGNATURE |freeOf?| ((|Boolean|) |#1| |#2|))
   (SIGNATURE |orderDim|
    ((|NonNegativeInteger|) (|List| |#1|) (|SparseEchelonMatrix| |#2| |#1|)
     (|NonNegativeInteger|)))
   (SIGNATURE |dimension|
    ((|NonNegativeInteger|) (|List| |#1|) (|SparseEchelonMatrix| |#2| |#1|)
     (|NonNegativeInteger|)))
   (SIGNATURE |formalDiff2|
    ((|Record| (|:| |DSys| (|List| |#1|)) (|:| |JVars| (|List| (|List| |#2|))))
     (|List| |#1|) (|PositiveInteger|) (|SparseEchelonMatrix| |#2| |#1|)))
   (SIGNATURE |formalDiff2|
    ((|Record| (|:| |DPhi| |#1|) (|:| |JVars| (|List| |#2|))) |#1|
     (|PositiveInteger|) (|SparseEchelonMatrix| |#2| |#1|)))
   (SIGNATURE |formalDiff| ((|List| |#1|) (|List| |#1|) (|PositiveInteger|)))
   (SIGNATURE |formalDiff| (|#1| |#1| (|List| (|NonNegativeInteger|))))
   (SIGNATURE |formalDiff| (|#1| |#1| (|PositiveInteger|)))
   (SIGNATURE |symbol| ((|SparseEchelonMatrix| |#2| |#1|) (|List| |#1|)))
   (SIGNATURE |extractSymbol|
    ((|SparseEchelonMatrix| |#2| |#1|) (|SparseEchelonMatrix| |#2| |#1|)))
   (SIGNATURE |jacobiMatrix|
    ((|SparseEchelonMatrix| |#2| |#1|) (|List| |#1|) (|List| (|List| |#2|))))
   (SIGNATURE |jacobiMatrix| ((|SparseEchelonMatrix| |#2| |#1|) (|List| |#1|)))
   (SIGNATURE |class| ((|NonNegativeInteger|) |#1|))
   (SIGNATURE |order| ((|NonNegativeInteger|) |#1|))
   (SIGNATURE |const?| ((|Boolean|) |#1|))
   (SIGNATURE |numDepVar| ((|PositiveInteger|)))
   (SIGNATURE |numIndVar| ((|PositiveInteger|)))
   (SIGNATURE |getNotation| ((|Symbol|)))
   (SIGNATURE |setNotation| ((|Void|) (|Symbol|)))
   (SIGNATURE P (|#1| (|NonNegativeInteger|)))
   (SIGNATURE P (|#1| (|PositiveInteger|) (|NonNegativeInteger|)))
   (SIGNATURE P (|#1| (|List| (|NonNegativeInteger|)))) (SIGNATURE U (|#1|))
   (SIGNATURE X (|#1|))
   (SIGNATURE P (|#1| (|PositiveInteger|) (|List| (|NonNegativeInteger|))))
   (SIGNATURE U (|#1| (|PositiveInteger|)))
   (SIGNATURE X (|#1| (|PositiveInteger|)))
   (SIGNATURE |retractIfCan| ((|Union| |#2| "failed") |#1|))
   (SIGNATURE |gcd| (|#1| |#1| |#1|)) (SIGNATURE |gcd| (|#1| (|List| |#1|)))
   (SIGNATURE |characteristic| ((|NonNegativeInteger|))))
  (|JetBundleFunctionCategory| |#2|) (|JetBundleCategory|))
 (T |JetBundleFunctionCategory&|))
(CATEGORY |domain| (SIGNATURE |autoReduce| ((|List| |#1|) (|List| |#1|)))
 (SIGNATURE |reduceMod| ((|List| |#1|) (|List| |#1|) (|List| |#1|)))
 (SIGNATURE |simpMod|
  ((|Record| (|:| |Sys| (|List| |#1|))
             (|:| JM (|SparseEchelonMatrix| |#2| |#1|))
             (|:| |Depend|
                  (|Union| #1="failed"
                           (|List| (|List| (|NonNegativeInteger|))))))
   (|List| |#1|) (|SparseEchelonMatrix| |#2| |#1|) (|List| |#1|)))
 (SIGNATURE |simpMod| ((|List| |#1|) (|List| |#1|) (|List| |#1|)))
 (SIGNATURE |simpOne| (|#1| |#1|))
 (SIGNATURE |simplify|
  ((|Record| (|:| |Sys| (|List| |#1|))
             (|:| JM (|SparseEchelonMatrix| |#2| |#1|))
             (|:| |Depend|
                  (|Union| #1# (|List| (|List| (|NonNegativeInteger|))))))
   (|List| |#1|) (|SparseEchelonMatrix| |#2| |#1|)))
 (SIGNATURE |dSubst| (|#1| |#1| |#2| |#1|))
 (SIGNATURE |sortLD| ((|List| |#1|) (|List| |#1|)))
 (SIGNATURE |leadingDer| (|#2| |#1|))
 (SIGNATURE |freeOf?| ((|Boolean|) |#1| |#2|))
 (SIGNATURE |orderDim|
  ((|NonNegativeInteger|) (|List| |#1|) (|SparseEchelonMatrix| |#2| |#1|)
   (|NonNegativeInteger|)))
 (SIGNATURE |dimension|
  ((|NonNegativeInteger|) (|List| |#1|) (|SparseEchelonMatrix| |#2| |#1|)
   (|NonNegativeInteger|)))
 (SIGNATURE |formalDiff2|
  ((|Record| (|:| |DSys| (|List| |#1|)) (|:| |JVars| (|List| (|List| |#2|))))
   (|List| |#1|) (|PositiveInteger|) (|SparseEchelonMatrix| |#2| |#1|)))
 (SIGNATURE |formalDiff2|
  ((|Record| (|:| |DPhi| |#1|) (|:| |JVars| (|List| |#2|))) |#1|
   (|PositiveInteger|) (|SparseEchelonMatrix| |#2| |#1|)))
 (SIGNATURE |formalDiff| ((|List| |#1|) (|List| |#1|) (|PositiveInteger|)))
 (SIGNATURE |formalDiff| (|#1| |#1| (|List| (|NonNegativeInteger|))))
 (SIGNATURE |formalDiff| (|#1| |#1| (|PositiveInteger|)))
 (SIGNATURE |symbol| ((|SparseEchelonMatrix| |#2| |#1|) (|List| |#1|)))
 (SIGNATURE |extractSymbol|
  ((|SparseEchelonMatrix| |#2| |#1|) (|SparseEchelonMatrix| |#2| |#1|)))
 (SIGNATURE |jacobiMatrix|
  ((|SparseEchelonMatrix| |#2| |#1|) (|List| |#1|) (|List| (|List| |#2|))))
 (SIGNATURE |jacobiMatrix| ((|SparseEchelonMatrix| |#2| |#1|) (|List| |#1|)))
 (SIGNATURE |class| ((|NonNegativeInteger|) |#1|))
 (SIGNATURE |order| ((|NonNegativeInteger|) |#1|))
 (SIGNATURE |const?| ((|Boolean|) |#1|))
 (SIGNATURE |numDepVar| ((|PositiveInteger|)))
 (SIGNATURE |numIndVar| ((|PositiveInteger|)))
 (SIGNATURE |getNotation| ((|Symbol|)))
 (SIGNATURE |setNotation| ((|Void|) (|Symbol|)))
 (SIGNATURE P (|#1| (|NonNegativeInteger|)))
 (SIGNATURE P (|#1| (|PositiveInteger|) (|NonNegativeInteger|)))
 (SIGNATURE P (|#1| (|List| (|NonNegativeInteger|)))) (SIGNATURE U (|#1|))
 (SIGNATURE X (|#1|))
 (SIGNATURE P (|#1| (|PositiveInteger|) (|List| (|NonNegativeInteger|))))
 (SIGNATURE U (|#1| (|PositiveInteger|)))
 (SIGNATURE X (|#1| (|PositiveInteger|)))
 (SIGNATURE |retractIfCan| ((|Union| |#2| "failed") |#1|))
 (SIGNATURE |gcd| (|#1| |#1| |#1|)) (SIGNATURE |gcd| (|#1| (|List| |#1|)))
 (SIGNATURE |characteristic| ((|NonNegativeInteger|))))
"/git/fricas/src/algebra/JBFC.spad"
((|characteristic| (*1 *2)
  (AND (|ofCategory| *4 (|JetBundleCategory|))
       (|isDomain| *2 (|NonNegativeInteger|))
       (|isDomain| *1 (|JetBundleFunctionCategory&| *3 *4))
       (|ofCategory| *3 (|JetBundleFunctionCategory| *4))))
 (|setNotation| (*1 *2 *3)
  (AND (|isDomain| *3 (|Symbol|)) (|ofCategory| *5 (|JetBundleCategory|))
       (|isDomain| *2 (|Void|))
       (|isDomain| *1 (|JetBundleFunctionCategory&| *4 *5))
       (|ofCategory| *4 (|JetBundleFunctionCategory| *5))))
 (|getNotation| (*1 *2)
  (AND (|ofCategory| *4 (|JetBundleCategory|)) (|isDomain| *2 (|Symbol|))
       (|isDomain| *1 (|JetBundleFunctionCategory&| *3 *4))
       (|ofCategory| *3 (|JetBundleFunctionCategory| *4))))
 (|numIndVar| (*1 *2)
  (AND (|ofCategory| *4 (|JetBundleCategory|))
       (|isDomain| *2 (|PositiveInteger|))
       (|isDomain| *1 (|JetBundleFunctionCategory&| *3 *4))
       (|ofCategory| *3 (|JetBundleFunctionCategory| *4))))
 (|numDepVar| (*1 *2)
  (AND (|ofCategory| *4 (|JetBundleCategory|))
       (|isDomain| *2 (|PositiveInteger|))
       (|isDomain| *1 (|JetBundleFunctionCategory&| *3 *4))
       (|ofCategory| *3 (|JetBundleFunctionCategory| *4)))))
((|symbol| (((|SparseEchelonMatrix| |#2| $) (|List| $)) 94))
 (|sortLD| (((|List| $) (|List| $)) 124))
 (|simplify|
  (((|Record| (|:| |Sys| (|List| $)) (|:| JM (|SparseEchelonMatrix| |#2| $))
              (|:| |Depend|
                   (|Union| #1="failed"
                            (|List| (|List| (|NonNegativeInteger|))))))
    (|List| $) (|SparseEchelonMatrix| |#2| $))
   137))
 (|simpOne| (($ $) 139))
 (|simpMod| (((|List| $) (|List| $) (|List| $)) 145)
  (((|Record| (|:| |Sys| (|List| $)) (|:| JM (|SparseEchelonMatrix| |#2| $))
              (|:| |Depend|
                   (|Union| #1# (|List| (|List| (|NonNegativeInteger|))))))
    (|List| $) (|SparseEchelonMatrix| |#2| $) (|List| $))
   146))
 (|setNotation| (((|Void|) (|Symbol|)) 33))
 (|retractIfCan| (((|Union| |#2| "failed") $) 47))
 (|reduceMod| (((|List| $) (|List| $) (|List| $)) 149))
 (|orderDim|
  (((|NonNegativeInteger|) (|List| $) (|SparseEchelonMatrix| |#2| $)
    (|NonNegativeInteger|))
   73))
 (|order| (((|NonNegativeInteger|) $) 54))
 (|numIndVar| (((|PositiveInteger|)) 36))
 (|numDepVar| (((|PositiveInteger|)) 38)) (|leadingDer| ((|#2| $) 57))
 (|jacobiMatrix| (((|SparseEchelonMatrix| |#2| $) (|List| $)) 77)
  (((|SparseEchelonMatrix| |#2| $) (|List| $) (|List| (|List| |#2|))) 88))
 (|getNotation| (((|Symbol|)) 35)) (|gcd| (($ (|List| $)) NIL) (($ $ $) 40))
 (|freeOf?| (((|Boolean|) $ |#2|) 59))
 (|formalDiff2|
  (((|Record| (|:| |DPhi| $) (|:| |JVars| (|List| |#2|))) $ (|PositiveInteger|)
    (|SparseEchelonMatrix| |#2| $))
   119)
  (((|Record| (|:| |DSys| (|List| $)) (|:| |JVars| (|List| (|List| |#2|))))
    (|List| $) (|PositiveInteger|) (|SparseEchelonMatrix| |#2| $))
   118))
 (|formalDiff| (($ $ (|PositiveInteger|)) 104)
  (($ $ (|List| (|NonNegativeInteger|))) 107)
  (((|List| $) (|List| $) (|PositiveInteger|)) 102))
 (|extractSymbol|
  (((|SparseEchelonMatrix| |#2| $) (|SparseEchelonMatrix| |#2| $)) 98))
 (|dimension|
  (((|NonNegativeInteger|) (|List| $) (|SparseEchelonMatrix| |#2| $)
    (|NonNegativeInteger|))
   71))
 (|dSubst| (($ $ |#2| $) 67)) (|const?| (((|Boolean|) $) 51))
 (|class| (((|NonNegativeInteger|) $) 56))
 (|characteristic| (((|NonNegativeInteger|)) 60))
 (|autoReduce| (((|List| $) (|List| $)) 153))
 (X (($ (|PositiveInteger|)) 13) (($) 20))
 (U (($ (|PositiveInteger|)) 15) (($) 22))
 (P (($ (|PositiveInteger|) (|List| (|NonNegativeInteger|))) 18)
  (($ (|List| (|NonNegativeInteger|))) 24)
  (($ (|PositiveInteger|) (|NonNegativeInteger|)) 27)
  (($ (|NonNegativeInteger|)) 29)))
JBFC-
((|constructor|
  (NIL
   "\\spadtype{JetBundleFunctionCategory} defines the category of functions (local sections) over a jet bundle. The formal derivative is defined already here. It uses the Jacobi matrix of the functions. The columns of the matrices are enumerated by jet variables. Thus they are represented as a \\spadtype{Record} of the matrix and a list of the jet variables. Several simplification routines are implemented already here."))
 (|autoReduce|
  (((|List| $) (|List| $))
   "\\spad{autoReduce(sys)} tries to simplify a system by solving each equation for its leading term and substituting it into the other equations."))
 (|reduceMod|
  (((|List| $) (|List| $) (|List| $))
   "\\spad{reduceMod(sys1,{} sys2)} reduces the system \\spad{sys1} modulo the system \\spad{sys2}."))
 (|simpMod|
  (((|Record| (|:| |Sys| (|List| $)) (|:| JM (|SparseEchelonMatrix| |#2| $))
              (|:| |Depend|
                   (|Union| #1="failed"
                            (|List| (|List| (|NonNegativeInteger|))))))
    (|List| $) (|SparseEchelonMatrix| |#2| $) (|List| $))
   "\\spad{simpMod(sys1,{} sys2)} simplifies the system \\spad{sys1} modulo the system \\spad{sys2}. Returns the same information as \\spad{simplify}.")
  (((|List| $) (|List| $) (|List| $))
   "\\spad{simpMod(sys1,{} sys2)} simplifies the system \\spad{sys1} modulo the system \\spad{sys2}."))
 (|simpOne|
  (($ $)
   "\\spad{simpOne(f)} removes unnecessary coefficients and exponents,{} denominators etc."))
 (|simplify|
  (((|Record| (|:| |Sys| (|List| $)) (|:| JM (|SparseEchelonMatrix| |#2| $))
              (|:| |Depend|
                   (|Union| #1# (|List| (|List| (|NonNegativeInteger|))))))
    (|List| $) (|SparseEchelonMatrix| |#2| $))
   "\\spad{simplify(sys,{} jm)} simplifies a system with given Jacobi matrix. The Jacobi matrix of the simplified system is returned,{} too. \\spad{Depend} contains for each equation of the simplified system the numbers of the equations of the original system out of which it is build,{} if it is possible to obtain this information. If one can generate equations of lower order by purely algebraic operations,{} then \\spad{simplify} should do this."))
 (|dSubst|
  (($ $ |#2| $)
   "\\spad{dSubst(f,{} jv,{} exp)} is like \\spad{subst(f,{} jv,{} exp)}. But additionally for all derivatives of \\spad{jv} the corresponding substitutions are performed."))
 (|solveFor|
  (((|Union| $ "failed") $ |#2|)
   "\\spad{solveFor(fun,{} jv)} tries to solve \\spad{fun} for the jet variable \\spad{jv}."))
 (|sortLD|
  (((|List| $) (|List| $))
   "\\spad{sortLD(sys)} sorts the functions in \\spad{sys} according to their leading derivatives."))
 (|leadingDer|
  ((|#2| $)
   "\\spad{leadingDer(fun)} yields the leading derivative of \\spad{fun}. If \\spad{fun} contains no derivatives \\spad{1} is returned."))
 (|subst|
  (($ $ |#2| $)
   "\\spad{subst(f,{} jv,{} exp)} substitutes \\spad{exp} for the jet variable \\spad{jv} in the function \\spad{f}."))
 (|freeOf?|
  (((|Boolean|) $ |#2|)
   "\\spad{freeOf?(fun,{} jv)} checks whether \\spad{fun} contains the jet variable \\spad{jv}."))
 (|orderDim|
  (((|NonNegativeInteger|) (|List| $) (|SparseEchelonMatrix| |#2| $)
    (|NonNegativeInteger|))
   "\\spad{orderDim(sys,{} jm,{} q)} computes the dimension of the manifold described by the system \\spad{sys} with Jacobi matrix \\spad{jm} in the jet bundle of order \\spad{q} over the jet bundle of order \\spad{q-1}."))
 (|dimension|
  (((|NonNegativeInteger|) (|List| $) (|SparseEchelonMatrix| |#2| $)
    (|NonNegativeInteger|))
   "\\spad{dimension(sys,{} jm,{} q)} computes the dimension of the manifold described by the system \\spad{sys} with Jacobi matrix \\spad{jm} in the jet bundle of order \\spad{q}."))
 (|formalDiff2|
  (((|Record| (|:| |DSys| (|List| $)) (|:| |JVars| (|List| (|List| |#2|))))
    (|List| $) (|PositiveInteger|) (|SparseEchelonMatrix| |#2| $))
   "\\spad{formalDiff2(sys,{} i,{} jm)} is like the other \\spadfun{\\spad{formalDiff2}} but for systems.")
  (((|Record| (|:| |DPhi| $) (|:| |JVars| (|List| |#2|))) $ (|PositiveInteger|)
    (|SparseEchelonMatrix| |#2| $))
   "\\spad{formalDiff2(f,{} i,{} jm)} formally differentiates the function \\spad{f} with the Jacobi matrix \\spad{jm} \\spad{wrt} the \\spad{i}\\spad{-}th independent variable. \\spad{JVars} is a list of the jet variables effectively in the result \\spad{DPhi} (might be too large)."))
 (|formalDiff|
  (((|List| $) (|List| $) (|PositiveInteger|))
   "\\spad{formalDiff(sys,{} i)} formally differentiates a family \\spad{sys} of functions \\spad{wrt} the \\spad{i}\\spad{-}th independent variable.")
  (($ $ (|List| (|NonNegativeInteger|)))
   "\\spad{formalDiff(f,{} mu)} formally differentiates \\spad{f} as indicated by the multi-index \\spad{mu}.")
  (($ $ (|PositiveInteger|))
   "\\spad{formalDiff(f,{} i)} formally (totally) differentiates \\spad{f} \\spad{wrt} the \\spad{i}\\spad{-}th independent variable."))
 (|differentiate|
  (($ $ |#2|)
   "\\spad{differentiate(f,{} jv)} differentiates the function \\spad{f} \\spad{wrt} the jet variable \\spad{jv}."))
 (|symbol|
  (((|SparseEchelonMatrix| |#2| $) (|List| $))
   "\\spad{symbol(sys)} computes directly the symbol of the family \\spad{sys} of functions."))
 (|extractSymbol|
  (((|SparseEchelonMatrix| |#2| $) (|SparseEchelonMatrix| |#2| $))
   "\\spad{extractSymbol(jm)} extracts the highest order part of the Jacobi matrix."))
 (|jacobiMatrix|
  (((|SparseEchelonMatrix| |#2| $) (|List| $) (|List| (|List| |#2|)))
   "\\spad{jacobiMatrix(sys,{} jvars)} constructs the Jacobi matrix of the family \\spad{sys} of functions. \\spad{jvars} contains for each function the effectively occurring jet variables. The columns of the matrix are ordered.")
  (((|SparseEchelonMatrix| |#2| $) (|List| $))
   "\\spad{jacobiMatrix(sys)} constructs the Jacobi matrix of the family \\spad{sys} of functions."))
 (|denominator|
  (($ $) "\\spad{denominator(f)} yields the denominator of \\spad{f}."))
 (|numerator|
  (($ $) "\\spad{numerator(f)} yields the numerator of \\spad{f}."))
 (|class|
  (((|NonNegativeInteger|) $)
   "\\spad{class(f)} is defined as the highest class of the jet variables effectively occurring in \\spad{f}."))
 (|order|
  (((|NonNegativeInteger|) $)
   "\\spad{order(f)} gives highest order of the jet variables effectively occurring in \\spad{f}."))
 (|const?|
  (((|Boolean|) $)
   "\\spad{const?(f)} checks whether \\spad{f} depends of jet variables."))
 (|jetVariables|
  (((|List| |#2|) $)
   "\\spad{jetVariables(f)} yields all jet variables effectively occurring in \\spad{f} in an ordered list."))
 (|coerce|
  (($ |#2|)
   "\\spad{coerce(jv)} coerces the jet variable \\spad{jv} into a local section.")))
(("documentation" 0 10142) ("ancestors" 0 NIL) ("parents" 0 NIL)
 ("abbreviation" 0 10136) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 7607) ("modemaps" 0 6431) ("sourceFile" 0 6395)
 ("constructorCategory" 0 3358) ("constructorModemap" 0 65)
 ("constructorKind" 0 56) ("constructorForm" 0 20))