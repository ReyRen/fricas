11606               (|SExpressionCategory| |Str| |Sym| |Int| |Flt|)
|category|
(((|SExpressionCategory| |#1| |#2| |#3| |#4|) (|Category|) (|SetCategory|)
  (|SetCategory|) (|SetCategory|) (|SetCategory|))
 (T |SExpressionCategory|))
(|Join| (|SetCategory|)
        (CATEGORY |domain| (SIGNATURE |eq| ((|Boolean|) $ $))
         (SIGNATURE |null?| ((|Boolean|) $))
         (SIGNATURE |atom?| ((|Boolean|) $))
         (SIGNATURE |pair?| ((|Boolean|) $))
         (SIGNATURE |list?| ((|Boolean|) $))
         (SIGNATURE |string?| ((|Boolean|) $))
         (SIGNATURE |symbol?| ((|Boolean|) $))
         (SIGNATURE |integer?| ((|Boolean|) $))
         (SIGNATURE |float?| ((|Boolean|) $))
         (SIGNATURE |destruct| ((|List| $) $)) (SIGNATURE |string| (|t#1| $))
         (SIGNATURE |symbol| (|t#2| $)) (SIGNATURE |integer| (|t#3| $))
         (SIGNATURE |float| (|t#4| $)) (SIGNATURE |convert| ($ (|List| $)))
         (SIGNATURE |convert| ($ |t#1|)) (SIGNATURE |convert| ($ |t#2|))
         (SIGNATURE |convert| ($ |t#3|)) (SIGNATURE |convert| ($ |t#4|))
         (SIGNATURE |car| ($ $)) (SIGNATURE |cdr| ($ $))
         (SIGNATURE |#| ((|Integer|) $)) (SIGNATURE |elt| ($ $ (|Integer|)))
         (SIGNATURE |elt| ($ $ (|List| (|Integer|))))))
"/git/fricas/src/algebra/SEXCAT.spad"
((|eq| (*1 *2 *1 *1)
  (AND (|ofCategory| *1 (|SExpressionCategory| *3 *4 *5 *6))
       (|ofCategory| *3 (|SetCategory|)) (|ofCategory| *4 (|SetCategory|))
       (|ofCategory| *5 (|SetCategory|)) (|ofCategory| *6 (|SetCategory|))
       (|isDomain| *2 (|Boolean|))))
 (|null?| (*1 *2 *1)
  (AND (|ofCategory| *1 (|SExpressionCategory| *3 *4 *5 *6))
       (|ofCategory| *3 (|SetCategory|)) (|ofCategory| *4 (|SetCategory|))
       (|ofCategory| *5 (|SetCategory|)) (|ofCategory| *6 (|SetCategory|))
       (|isDomain| *2 (|Boolean|))))
 (|atom?| (*1 *2 *1)
  (AND (|ofCategory| *1 (|SExpressionCategory| *3 *4 *5 *6))
       (|ofCategory| *3 (|SetCategory|)) (|ofCategory| *4 (|SetCategory|))
       (|ofCategory| *5 (|SetCategory|)) (|ofCategory| *6 (|SetCategory|))
       (|isDomain| *2 (|Boolean|))))
 (|pair?| (*1 *2 *1)
  (AND (|ofCategory| *1 (|SExpressionCategory| *3 *4 *5 *6))
       (|ofCategory| *3 (|SetCategory|)) (|ofCategory| *4 (|SetCategory|))
       (|ofCategory| *5 (|SetCategory|)) (|ofCategory| *6 (|SetCategory|))
       (|isDomain| *2 (|Boolean|))))
 (|list?| (*1 *2 *1)
  (AND (|ofCategory| *1 (|SExpressionCategory| *3 *4 *5 *6))
       (|ofCategory| *3 (|SetCategory|)) (|ofCategory| *4 (|SetCategory|))
       (|ofCategory| *5 (|SetCategory|)) (|ofCategory| *6 (|SetCategory|))
       (|isDomain| *2 (|Boolean|))))
 (|string?| (*1 *2 *1)
  (AND (|ofCategory| *1 (|SExpressionCategory| *3 *4 *5 *6))
       (|ofCategory| *3 (|SetCategory|)) (|ofCategory| *4 (|SetCategory|))
       (|ofCategory| *5 (|SetCategory|)) (|ofCategory| *6 (|SetCategory|))
       (|isDomain| *2 (|Boolean|))))
 (|symbol?| (*1 *2 *1)
  (AND (|ofCategory| *1 (|SExpressionCategory| *3 *4 *5 *6))
       (|ofCategory| *3 (|SetCategory|)) (|ofCategory| *4 (|SetCategory|))
       (|ofCategory| *5 (|SetCategory|)) (|ofCategory| *6 (|SetCategory|))
       (|isDomain| *2 (|Boolean|))))
 (|integer?| (*1 *2 *1)
  (AND (|ofCategory| *1 (|SExpressionCategory| *3 *4 *5 *6))
       (|ofCategory| *3 (|SetCategory|)) (|ofCategory| *4 (|SetCategory|))
       (|ofCategory| *5 (|SetCategory|)) (|ofCategory| *6 (|SetCategory|))
       (|isDomain| *2 (|Boolean|))))
 (|float?| (*1 *2 *1)
  (AND (|ofCategory| *1 (|SExpressionCategory| *3 *4 *5 *6))
       (|ofCategory| *3 (|SetCategory|)) (|ofCategory| *4 (|SetCategory|))
       (|ofCategory| *5 (|SetCategory|)) (|ofCategory| *6 (|SetCategory|))
       (|isDomain| *2 (|Boolean|))))
 (|destruct| (*1 *2 *1)
  (AND (|ofCategory| *3 (|SetCategory|)) (|ofCategory| *4 (|SetCategory|))
       (|ofCategory| *5 (|SetCategory|)) (|ofCategory| *6 (|SetCategory|))
       (|isDomain| *2 (|List| *1))
       (|ofCategory| *1 (|SExpressionCategory| *3 *4 *5 *6))))
 (|string| (*1 *2 *1)
  (AND (|ofCategory| *1 (|SExpressionCategory| *2 *3 *4 *5))
       (|ofCategory| *3 (|SetCategory|)) (|ofCategory| *4 (|SetCategory|))
       (|ofCategory| *5 (|SetCategory|)) (|ofCategory| *2 (|SetCategory|))))
 (|symbol| (*1 *2 *1)
  (AND (|ofCategory| *1 (|SExpressionCategory| *3 *2 *4 *5))
       (|ofCategory| *3 (|SetCategory|)) (|ofCategory| *4 (|SetCategory|))
       (|ofCategory| *5 (|SetCategory|)) (|ofCategory| *2 (|SetCategory|))))
 (|integer| (*1 *2 *1)
  (AND (|ofCategory| *1 (|SExpressionCategory| *3 *4 *2 *5))
       (|ofCategory| *3 (|SetCategory|)) (|ofCategory| *4 (|SetCategory|))
       (|ofCategory| *5 (|SetCategory|)) (|ofCategory| *2 (|SetCategory|))))
 (|float| (*1 *2 *1)
          (AND (|ofCategory| *1 (|SExpressionCategory| *3 *4 *5 *2))
               (|ofCategory| *3 (|SetCategory|))
               (|ofCategory| *4 (|SetCategory|))
               (|ofCategory| *5 (|SetCategory|))
               (|ofCategory| *2 (|SetCategory|))))
 (|convert| (*1 *1 *2)
            (AND (|isDomain| *2 (|List| *1))
                 (|ofCategory| *1 (|SExpressionCategory| *3 *4 *5 *6))
                 (|ofCategory| *3 (|SetCategory|))
                 (|ofCategory| *4 (|SetCategory|))
                 (|ofCategory| *5 (|SetCategory|))
                 (|ofCategory| *6 (|SetCategory|))))
 (|convert| (*1 *1 *2)
            (AND (|ofCategory| *1 (|SExpressionCategory| *2 *3 *4 *5))
                 (|ofCategory| *2 (|SetCategory|))
                 (|ofCategory| *3 (|SetCategory|))
                 (|ofCategory| *4 (|SetCategory|))
                 (|ofCategory| *5 (|SetCategory|))))
 (|convert| (*1 *1 *2)
            (AND (|ofCategory| *1 (|SExpressionCategory| *3 *2 *4 *5))
                 (|ofCategory| *3 (|SetCategory|))
                 (|ofCategory| *2 (|SetCategory|))
                 (|ofCategory| *4 (|SetCategory|))
                 (|ofCategory| *5 (|SetCategory|))))
 (|convert| (*1 *1 *2)
            (AND (|ofCategory| *1 (|SExpressionCategory| *3 *4 *2 *5))
                 (|ofCategory| *3 (|SetCategory|))
                 (|ofCategory| *4 (|SetCategory|))
                 (|ofCategory| *2 (|SetCategory|))
                 (|ofCategory| *5 (|SetCategory|))))
 (|convert| (*1 *1 *2)
            (AND (|ofCategory| *1 (|SExpressionCategory| *3 *4 *5 *2))
                 (|ofCategory| *3 (|SetCategory|))
                 (|ofCategory| *4 (|SetCategory|))
                 (|ofCategory| *5 (|SetCategory|))
                 (|ofCategory| *2 (|SetCategory|))))
 (|car| (*1 *1 *1)
  (AND (|ofCategory| *1 (|SExpressionCategory| *2 *3 *4 *5))
       (|ofCategory| *2 (|SetCategory|)) (|ofCategory| *3 (|SetCategory|))
       (|ofCategory| *4 (|SetCategory|)) (|ofCategory| *5 (|SetCategory|))))
 (|cdr| (*1 *1 *1)
  (AND (|ofCategory| *1 (|SExpressionCategory| *2 *3 *4 *5))
       (|ofCategory| *2 (|SetCategory|)) (|ofCategory| *3 (|SetCategory|))
       (|ofCategory| *4 (|SetCategory|)) (|ofCategory| *5 (|SetCategory|))))
 (|#| (*1 *2 *1)
  (AND (|ofCategory| *1 (|SExpressionCategory| *3 *4 *5 *6))
       (|ofCategory| *3 (|SetCategory|)) (|ofCategory| *4 (|SetCategory|))
       (|ofCategory| *5 (|SetCategory|)) (|ofCategory| *6 (|SetCategory|))
       (|isDomain| *2 (|Integer|))))
 (|elt| (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|Integer|))
       (|ofCategory| *1 (|SExpressionCategory| *3 *4 *5 *6))
       (|ofCategory| *3 (|SetCategory|)) (|ofCategory| *4 (|SetCategory|))
       (|ofCategory| *5 (|SetCategory|)) (|ofCategory| *6 (|SetCategory|))))
 (|elt| (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|List| (|Integer|)))
       (|ofCategory| *1 (|SExpressionCategory| *3 *4 *5 *6))
       (|ofCategory| *3 (|SetCategory|)) (|ofCategory| *4 (|SetCategory|))
       (|ofCategory| *5 (|SetCategory|)) (|ofCategory| *6 (|SetCategory|)))))
((~= (((|Boolean|) $ $) 6)) (|symbol?| (((|Boolean|) $) 6))
 (|symbol| ((|#2| $) 6)) (|string?| (((|Boolean|) $) 6))
 (|string| ((|#1| $) 6)) (|pair?| (((|Boolean|) $) 6))
 (|null?| (((|Boolean|) $) 6)) (|list?| (((|Boolean|) $) 6))
 (|latex| (((|String|) $) 6)) (|integer?| (((|Boolean|) $) 6))
 (|integer| ((|#3| $) 6)) (|hashUpdate!| (((|HashState|) (|HashState|) $) 6))
 (|hash| (((|SingleInteger|) $) 6)) (|float?| (((|Boolean|) $) 6))
 (|float| ((|#4| $) 6)) (|eq| (((|Boolean|) $ $) 6))
 (|elt| (($ $ (|Integer|)) 6) (($ $ (|List| (|Integer|))) 6))
 (|destruct| (((|List| $) $) 6))
 (|convert| (($ (|List| $)) 6) (($ |#1|) 6) (($ |#2|) 6) (($ |#3|) 6)
            (($ |#4|) 6))
 (|coerce| (((|OutputForm|) $) 6)) (|cdr| (($ $) 6)) (|car| (($ $) 6))
 (|atom?| (((|Boolean|) $) 6)) (= (((|Boolean|) $ $) 6))
 (|#| (((|Integer|) $) 6)))
SEXCAT
(((|SetCategory|) . T))
(((|BasicType|) . T) ((|CoercibleTo| (|OutputForm|)) . T) ((|SetCategory|) . T))
((|constructor|
  (NIL
   "This category allows the manipulation of Lisp values while keeping the grunge fairly localized."))
 (|elt|
  (($ $ (|List| (|Integer|)))
   "\\spad{elt((a1,{} ...,{} an),{} [i1,{} ...,{} im])} returns \\spad{(a_i1,{} ...,{} a_im)}.")
  (($ $ (|Integer|))
   "\\spad{elt((a1,{} ...,{} an),{} i)} returns \\spad{\\spad{ai}}."))
 (|#| (((|Integer|) $) "\\spad{\\#((a1,{} ...,{} an))} returns \\spad{n}."))
 (|cdr|
  (($ $) "\\spad{cdr((a1,{} ...,{} an))} returns \\spad{(a2,{} ...,{} an)}."))
 (|car| (($ $) "\\spad{car((a1,{} ...,{} an))} returns \\spad{a1}."))
 (|convert| (($ |#4|) "\\spad{convert(x)} returns the Lisp atom \\spad{x}.")
            (($ |#3|) "\\spad{convert(x)} returns the Lisp atom \\spad{x}.")
            (($ |#2|) "\\spad{convert(x)} returns the Lisp atom \\spad{x}.")
            (($ |#1|) "\\spad{convert(x)} returns the Lisp atom \\spad{x}.")
            (($ (|List| $))
             "\\spad{convert([a1,{} ...,{} an])} returns the \\spad{S}-expression \\spad{(a1,{} ...,{} an)}."))
 (|float|
  ((|#4| $)
   "\\spad{float(s)} returns \\spad{s} as an element of \\spad{Flt}; Error: if \\spad{s} is not an atom that also belongs to \\spad{Flt}."))
 (|integer|
  ((|#3| $)
   "\\spad{integer(s)} returns \\spad{s} as an element of Int. Error: if \\spad{s} is not an atom that also belongs to Int."))
 (|symbol|
  ((|#2| $)
   "\\spad{symbol(s)} returns \\spad{s} as an element of \\spad{Sym}. Error: if \\spad{s} is not an atom that also belongs to \\spad{Sym}."))
 (|string|
  ((|#1| $)
   "\\spad{string(s)} returns \\spad{s} as an element of \\spad{Str}. Error: if \\spad{s} is not an atom that also belongs to \\spad{Str}."))
 (|destruct|
  (((|List| $) $)
   "\\spad{destruct((a1,{} ...,{} an))} returns the list [\\spad{a1},{} ...,{} an]."))
 (|float?|
  (((|Boolean|) $)
   "\\spad{float?(s)} is \\spad{true} if \\spad{s} is an atom and belong to \\spad{Flt}."))
 (|integer?|
  (((|Boolean|) $)
   "\\spad{integer?(s)} is \\spad{true} if \\spad{s} is an atom and belong to Int."))
 (|symbol?|
  (((|Boolean|) $)
   "\\spad{symbol?(s)} is \\spad{true} if \\spad{s} is an atom and belong to \\spad{Sym}."))
 (|string?|
  (((|Boolean|) $)
   "\\spad{string?(s)} is \\spad{true} if \\spad{s} is an atom and belong to \\spad{Str}."))
 (|list?|
  (((|Boolean|) $)
   "\\spad{list?(s)} is \\spad{true} if \\spad{s} is a Lisp list,{} possibly ()."))
 (|pair?|
  (((|Boolean|) $)
   "\\spad{pair?(s)} is \\spad{true} if \\spad{s} has is a non-null Lisp list."))
 (|atom?|
  (((|Boolean|) $)
   "\\spad{atom?(s)} is \\spad{true} if \\spad{s} is a Lisp atom."))
 (|null?|
  (((|Boolean|) $)
   "\\spad{null?(s)} is \\spad{true} if \\spad{s} is the \\spad{S}-expression ()."))
 (|eq|
  (((|Boolean|) $ $)
   "\\spad{eq(s,{} t)} is \\spad{true} if EQ(\\spad{s},{} \\spad{t}) is \\spad{true} in Lisp.")))
(("documentation" 0 8759) ("ancestors" 0 8678) ("parents" 0 8654)
 ("abbreviation" 0 8647) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 7806) ("modemaps" 0 1287) ("sourceFile" 0 1249)
 ("constructorCategory" 0 233) ("constructorModemap" 0 79)
 ("constructorKind" 0 68) ("constructorForm" 0 20))