2199                (|NonAssociativeAlgebra| R)
|category|
(((|NonAssociativeAlgebra| |#1|) (|Category|) (|CommutativeRing|))
 (T |NonAssociativeAlgebra|))
(|Join| (|NonAssociativeRng|) (|Module| |t#1|)
        (CATEGORY |domain|
         (SIGNATURE |plenaryPower| ($ $ (|PositiveInteger|)))))
"/git/fricas/src/algebra/NAALG.spad"
((|plenaryPower| (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|PositiveInteger|))
       (|ofCategory| *1 (|NonAssociativeAlgebra| *3))
       (|ofCategory| *3 (|CommutativeRing|)))))
((~= (((|Boolean|) $ $) 6)) (|zero?| (((|Boolean|) $) 6))
 (|subtractIfCan| (((|Union| $ "failed") $ $) 6)) (|sample| (($) 6 T CONST))
 (|rightPower| (($ $ (|PositiveInteger|)) 6))
 (|plenaryPower| (($ $ (|PositiveInteger|)) 6))
 (|opposite?| (((|Boolean|) $ $) 6))
 (|leftPower| (($ $ (|PositiveInteger|)) 6)) (|latex| (((|String|) $) 6))
 (|hashUpdate!| (((|HashState|) (|HashState|) $) 6))
 (|hash| (((|SingleInteger|) $) 6)) (|commutator| (($ $ $) 6))
 (|coerce| (((|OutputForm|) $) 6)) (|associator| (($ $ $ $) 6))
 (|antiCommutator| (($ $ $) 6)) (^ (($ $ (|PositiveInteger|)) 6))
 (|Zero| (($) 6 T CONST)) (= (((|Boolean|) $ $) 6)) (- (($ $ $) 6) (($ $) 6))
 (+ (($ $ $) 6))
 (* (($ (|PositiveInteger|) $) 6) (($ $ $) 6) (($ (|Integer|) $) 6)
    (($ (|NonNegativeInteger|) $) 6) (($ $ |#1|) 6) (($ |#1| $) 6)))
NAALG
(((|NonAssociativeRng|) . T) ((|Module| |#1|) . T))
(((|AbelianGroup|) . T) ((|AbelianMonoid|) . T) ((|AbelianSemiGroup|) . T)
 ((|BasicType|) . T) ((|BiModule| |t#1| |t#1|) . T)
 ((|CancellationAbelianMonoid|) . T) ((|CoercibleTo| (|OutputForm|)) . T)
 ((|LeftModule| |t#1|) . T) ((|Magma|) . T) ((|Module| |#1|) . T)
 ((|NonAssociativeRng|) . T) ((|NonAssociativeSemiRng|) . T)
 ((|RightModule| |t#2|) . T) ((|SetCategory|) . T))
((|constructor|
  (NIL
   "NonAssociativeAlgebra is the category of non associative algebras (modules which are themselves non associative rngs). Axioms \\indented{3}{\\spad{r*}(a*b) = (r*a)\\spad{*b} = a*(\\spad{r*b})}"))
 (|plenaryPower|
  (($ $ (|PositiveInteger|))
   "\\spad{plenaryPower(a,{} n)} is recursively defined to be \\spad{plenaryPower(a,{} n-1)*plenaryPower(a,{} n-1)} for \\spad{n>1} and \\spad{a} for \\spad{n=1}.")))
(("documentation" 0 1763) ("ancestors" 0 1383) ("parents" 0 1331)
 ("abbreviation" 0 1325) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 507) ("modemaps" 0 331) ("sourceFile" 0 294)
 ("constructorCategory" 0 156) ("constructorModemap" 0 59)
 ("constructorKind" 0 48) ("constructorForm" 0 20))