)abbrev category SPFCAT SpecialFunctionCategory
++ Category for the other special functions
++ Author: Manuel Bronstein
++ Description: Category for the other special functions;
SpecialFunctionCategory() : Category == with
    abs :      % -> %
        ++ abs(x) returns the absolute value of x.
    conjugate :      % -> %
        ++ conjugate(x) returns the conjugate of x.
    Gamma :     % -> %
        ++ Gamma(x) is the Euler Gamma function.
    Beta :      (%, %)->%
        ++ Beta(x, y) is \spad{Gamma(x) * Gamma(y)/Gamma(x+y)}.
    digamma :   % -> %
        ++ digamma(x) is the logarithmic derivative of \spad{Gamma(x)}
        ++ (often written \spad{psi(x)} in the literature).
    polygamma : (%, %) -> %
        ++ polygamma(k, x) is the \spad{k-th} derivative of \spad{digamma(x)},
        ++ (often written \spad{psi(k, x)} in the literature).
    Gamma :     (%, %) -> %
        ++ Gamma(a, x) is the incomplete Gamma function.
    besselJ :   (%, %) -> %
        ++ besselJ(v, z) is the Bessel function of the first kind.
    besselY :   (%, %) -> %
        ++ besselY(v, z) is the Bessel function of the second kind.
    besselI :   (%, %) -> %
        ++ besselI(v, z) is the modified Bessel function of the first kind.
    besselK :   (%, %) -> %
        ++ besselK(v, z) is the modified Bessel function of the second kind.
    airyAi :    % -> %
        ++ airyAi(x) is the Airy function \spad{Ai(x)}.
    airyAiPrime : % -> %
        ++ airyAiPrime(x) is the derivative of the Airy function \spad{Ai(x)}.
    airyBi :    % -> %
        ++ airyBi(x) is the Airy function \spad{Bi(x)}.
    airyBiPrime : % -> %
        ++ airyBiPrime is the derivative of the Airy function \spad{Bi(x)}.
    lambertW : % -> %
        ++ lambertW(z) = w is the principial branch of the solution
        ++ to the equation \spad{we^w = z}.
    polylog : (%, %) -> %
        ++ polylog(s, x) is the polylogarithm of order s at x.
    weierstrassP : (%, %, %) -> %
        ++ weierstrassP(g2, g3, z) is the Weierstrass P function.
    weierstrassPPrime : (%, %, %) -> %
        ++ weierstrassPPrime(g2, g3, z) is the derivative of Weierstrass P
        ++ function.
    weierstrassSigma : (%, %, %) -> %
        ++ weierstrassSigma(g2, g3, z) is the Weierstrass Sigma function.
    weierstrassZeta : (%, %, %) -> %
        ++ weierstrassZeta(g2, g3, z) is the Weierstrass Zeta function.
    weierstrassPInverse : (%, %, %) -> %
        ++ weierstrassPInverse(g2, g3, z) is the inverse of Weierstrass
        ++ P function, defined by the formula
        ++ \spad{weierstrassP(g2, g3, weierstrassPInverse(g2, g3, z)) = z}.
    whittakerM : (%, %, %) -> %
        ++ whittakerM(k, m, z) is the Whittaker M function.
    whittakerW : (%, %, %) -> %
        ++ whittakerW(k, m, z) is the Whittaker W function.
    angerJ : (%, %) -> %
        ++ angerJ(v, z) is the Anger J function.
    weberE : (%, %) -> %
        ++ weberE(v, z) is the Weber E function.
    struveH : (%, %) -> %
        ++ struveH(v, z) is the Struve H function.
    struveL : (%, %) -> %
        ++ struveL(v, z) is the Struve L function defined by the formula
        ++ \spad{struveL(v, z) = -%i^exp(-v*%pi*%i/2)*struveH(v, %i*z)}.
    hankelH1 : (%, %) -> %
        ++ hankelH1(v, z) is first Hankel function (Bessel function of
        ++ the third kind).
    hankelH2 : (%, %) -> %
        ++ hankelH2(v, z) is the second Hankel function (Bessel function of
        ++ the third kind).
    lommelS1 : (%, %, %) -> %
        ++ lommelS1(mu, nu, z) is the Lommel s function.
    lommelS2 : (%, %, %) -> %
        ++ lommelS2(mu, nu, z) is the Lommel S function.
    kummerM : (%, %, %) -> %
        ++ kummerM(mu, nu, z) is the Kummer M function.
    kummerU : (%, %, %) -> %
        ++ kummerU(mu, nu, z) is the Kummer U function.
    legendreP : (%, %, %) -> %
        ++ legendreP(nu, mu, z) is the Legendre P function.
    legendreQ : (%, %, %) -> %
        ++ legendreQ(nu, mu, z) is the Legendre Q function.
    kelvinBei : (%, %) -> %
        ++ kelvinBei(v, z) is the Kelvin bei function defined by equality
        ++ \spad{kelvinBei(v, z) = imag(besselJ(v, exp(3*%pi*%i/4)*z))}
        ++ for z and v real.
    kelvinBer : (%, %) -> %
        ++ kelvinBer(v, z) is the Kelvin ber function defined by equality
        ++ \spad{kelvinBer(v, z) = real(besselJ(v, exp(3*%pi*%i/4)*z))}
        ++ for z and v real.
    kelvinKei : (%, %) -> %
        ++ kelvinKei(v, z) is the Kelvin kei function defined by equality
        ++ \spad{kelvinKei(v, z) =
        ++ imag(exp(-v*%pi*%i/2)*besselK(v, exp(%pi*%i/4)*z))}
        ++ for z and v real.
    kelvinKer : (%, %) -> %
        ++ kelvinKer(v, z) is the Kelvin kei function defined by equality
        ++ \spad{kelvinKer(v, z) =
        ++ real(exp(-v*%pi*%i/2)*besselK(v, exp(%pi*%i/4)*z))}
        ++ for z and v real.
    ellipticK : % -> %
        ++ ellipticK(m) is the complete elliptic integral of the
        ++ first kind: \spad{ellipticK(m) =
        ++ integrate(1/sqrt((1-t^2)*(1-m*t^2)), t = 0..1)}.
    ellipticE : % -> %
        ++ ellipticE(m) is the complete elliptic integral of the
        ++ second kind: \spad{ellipticE(m) =
        ++ integrate(sqrt(1-m*t^2)/sqrt(1-t^2), t = 0..1)}.
    ellipticE : (%, %) -> %
        ++ ellipticE(z, m) is the incomplete elliptic integral of the
        ++ second kind: \spad{ellipticE(z, m) =
        ++ integrate(sqrt(1-m*t^2)/sqrt(1-t^2), t = 0..z)}.
    ellipticF : (%, %) -> %
        ++ ellipticF(z, m) is the incomplete elliptic integral of the
        ++ first kind : \spad{ellipticF(z, m) =
        ++ integrate(1/sqrt((1-t^2)*(1-m*t^2)), t = 0..z)}.
    ellipticPi : (%, %, %) -> %
        ++ ellipticPi(z, n, m) is the incomplete elliptic integral of
        ++ the third kind: \spad{ellipticPi(z, n, m) =
        ++ integrate(1/((1-n*t^2)*sqrt((1-t^2)*(1-m*t^2))), t = 0..z)}.
    jacobiSn : (%, %) -> %
        ++ jacobiSn(z, m) is the Jacobi elliptic sn function, defined
        ++ by the formula \spad{jacobiSn(ellipticF(z, m), m) = z}.
    jacobiCn : (%, %) -> %
        ++ jacobiCn(z, m) is the Jacobi elliptic cn function, defined
        ++ by \spad{jacobiCn(z, m)^2 + jacobiSn(z, m)^2 = 1} and
        ++ \spad{jacobiCn(0, m) = 1}.
    jacobiDn : (%, %) -> %
        ++ jacobiDn(z, m) is the Jacobi elliptic dn function, defined
        ++ by \spad{jacobiDn(z, m)^2 + m*jacobiSn(z, m)^2 = 1} and
        ++ \spad{jacobiDn(0, m) = 1}.
    jacobiZeta : (%, %) -> %
        ++ jacobiZeta(z, m) is the Jacobi elliptic zeta function, defined
        ++ by \spad{D(jacobiZeta(z, m), z) =
        ++ jacobiDn(z, m)^2 - ellipticE(m)/ellipticK(m)} and
        ++ \spad{jacobiZeta(0, m) = 0}.
    jacobiTheta : (%, %) -> %
        ++ jacobiTheta(z, m) is the Jacobi Theta function
        ++ in Jacobi notation.
    lerchPhi : (%, %, %) -> %
        ++ lerchPhi(z, s, a) is the Lerch Phi function.
    riemannZeta : % -> %
        ++ riemannZeta(z) is the Riemann Zeta function.
    charlierC : (%, %, %) -> %
        ++ charlierC(n, a, z) is the Charlier polynomial
    hermiteH : (%, %) -> %
        ++ hermiteH(n, z) is the Hermite polynomial
    jacobiP : (%, %, %, %) -> %
        ++ jacobiP(n, a, b, z) is the Jacobi polynomial
    laguerreL: (%, %, %) -> %
        ++ laguerreL(n, a, z) is the Laguerre polynomial
    meixnerM : (%, %, %, %) -> %
        ++ meixnerM(n, b, c, z) is the Meixner polynomial
    if % has RetractableTo(Integer) then
        hypergeometricF : (List %, List %, %) -> %
            ++ hypergeometricF(la, lb, z) is the generalized hypergeometric
            ++ function.
        meijerG : (List %, List %, List %, List %, %) -> %
            ++ meijerG(la, lb, lc, ld, z) is the meijerG function.

--Copyright (c) 1991-2002, The Numerical ALgorithms Group Ltd.
--All rights reserved.
--
--Redistribution and use in source and binary forms, with or without
--modification, are permitted provided that the following conditions are
--met:
--
--    - Redistributions of source code must retain the above copyright
--      notice, this list of conditions and the following disclaimer.
--
--    - Redistributions in binary form must reproduce the above copyright
--      notice, this list of conditions and the following disclaimer in
--      the documentation and/or other materials provided with the
--      distribution.
--
--    - Neither the name of The Numerical ALgorithms Group Ltd. nor the
--      names of its contributors may be used to endorse or promote products
--      derived from this software without specific prior written permission.
--
--THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
--IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
--TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
--PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
--OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
--EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
--PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
--PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
--LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
--NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
--SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
