8504                (|SPointCategory&| S)
|domain|
(((|SPointCategory&| |#1|)
  (CATEGORY |domain| (SIGNATURE |colinearity| ((|DoubleFloat|) |#1| |#1|))
   (SIGNATURE |distance| ((|DoubleFloat|) |#1| |#1|))
   (SIGNATURE |sivec| (|#1| (|Integer|) (|Integer|) (|Integer|)))
   (SIGNATURE |sivec| (|#1| (|Integer|) (|Integer|)))
   (SIGNATURE |sipnt| (|#1| (|Integer|) (|Integer|) (|Integer|)))
   (SIGNATURE |sipnt| (|#1| (|Integer|) (|Integer|))))
  (|SPointCategory|))
 (T |SPointCategory&|))
(CATEGORY |domain| (SIGNATURE |colinearity| ((|DoubleFloat|) |#1| |#1|))
 (SIGNATURE |distance| ((|DoubleFloat|) |#1| |#1|))
 (SIGNATURE |sivec| (|#1| (|Integer|) (|Integer|) (|Integer|)))
 (SIGNATURE |sivec| (|#1| (|Integer|) (|Integer|)))
 (SIGNATURE |sipnt| (|#1| (|Integer|) (|Integer|) (|Integer|)))
 (SIGNATURE |sipnt| (|#1| (|Integer|) (|Integer|))))
"/git/fricas/src/algebra/SPTCAT.spad"
((|sivec| (($ (|Integer|) (|Integer|)) 16)
  (($ (|Integer|) (|Integer|) (|Integer|)) 18))
 (|sipnt| (($ (|Integer|) (|Integer|)) 12)
  (($ (|Integer|) (|Integer|) (|Integer|)) 14))
 (|distance| (((|DoubleFloat|) $ $) 21))
 (|colinearity| (((|DoubleFloat|) $ $) 9)))
SPTCAT-
((|constructor|
  (NIL
   "PointCategory is the category of points and vectors in space. Points may be used to represent shapes in a scenegraph such as: the vertices of a cube or points along a line. Shapes such as these may be defined explicitly or may be plotted. We implement SetCategory to allow us to curry transforms from one point to another."))
 (|coerce| (((|OutputForm|) $) "output"))
 (|extendedCoords|
  (((|List| (|DoubleFloat|)) $)
   "\\spad{extendedCoords(pt)} returns extended coordinates as a list."))
 (|screenCoords|
  (((|List| (|DoubleFloat|)) $)
   "\\spad{screenCoords(pt)} returns screen coordinates as a list."))
 (|screenCoordZ|
  (((|DoubleFloat|) $)
   "\\spad{screenCoordZ(pt)} returns the \\spad{'z'}(out from screen) screen coordinate."))
 (|screenCoordY|
  (((|DoubleFloat|) $)
   "\\spad{screenCoordY(pt)} returns the \\spad{'y'}(bottom to top) screen coordinate."))
 (|screenCoordX|
  (((|DoubleFloat|) $)
   "\\spad{screenCoordX(pt)} returns the \\spad{'x'}(left to right) screen coordinate."))
 (|inBounds?|
  (((|Boolean|) $ $ $)
   "\\spad{inBounds?(pt,{} mns,{} mxs)} returns \\spad{true} if \\spad{pt} is inside bounding box where bounding box is specified by min and max."))
 (|isVector?|
  (((|Boolean|) $)
   "\\spad{isVector? returns} \\spad{true} if this represents a vector as opposed to a point."))
 (|isPoint?|
  (((|Boolean|) $)
   "\\spad{isPoint?(p)} returns \\spad{true} if this represents a point as opposed to a vector."))
 (|toVector|
  (($ $)
   "\\spad{toVector returns} a Vector with the same coordinates as \\spad{p} If \\spad{p} was originally a point then the vector will be the distance from the origin."))
 (|toPoint|
  (($ $)
   "\\spad{toPoint(p)} returns a Point with the same coordinates as \\spad{p} If \\spad{p} was originally a vector then that will be treated as the distance from the origin."))
 (*
  (($ (|DoubleFloat|) $)
   "*(\\spad{s},{} \\spad{x}) gives scalar multiplication Although,{} scalar multiplication is strictly only a valid operation for vectors and not points,{} we allow it here because there are some useful short cuts,{} for instance,{} to find the central point between two points we can add them together and scalar multiply by 0.5."))
 (-
  (($ $ $)
   "\\spad{-(x,{} y)} gives subtraction subtract the corresponding elements of the vector or point. The type (vector or point) depends on the following table: vector - vector = vector point - vector = point vector - point = invalid (but interpret as point) point - point = invalid (but interpret as vector) Although,{} subtracting two points is not strictly a valid operation,{} we allow it here by interpreting the result as the vector distance between the two points."))
 (+
  (($ $ $)
   "+(\\spad{x},{} \\spad{y}) gives addition add the corresponding elements of the vector or point. The type (vector or point) depends on the following table: vector + vector = vector point + vector = point point + point = invalid (but interpret as vector) Although,{} adding two points is not strictly a valid operation,{} we allow it here by interpreting the point as a vector relative to the origin. We do that because there are some useful short cuts,{} for instance,{} to find the central point between two points we can add them together and scalar multiply by 0.5."))
 (|perpendicular|
  (($ $ $)
   "\\spad{perpendicular(x,{} y)} returns a vector perpendicular to the two vectors in the case of 3D Euclidean space this is the cross the product of two vectors. We use this function to compute orthogonal"))
 (|colinearity|
  (((|DoubleFloat|) $ $)
   "\\spad{colinearity(x,{} y)} returns a measure of how parallel two vectors are independent of the length of the vectors: 1.0 is completely parallel 0.0 is completely perpendicular returned value will be between these"))
 (|parallel|
  (((|DoubleFloat|) $ $)
   "\\spad{parallel(x,{} y)} returns the length of the parallel component of two vectors. In the case of Euclidean space this is the dot product of two vectors. We use this function to test the colinearity"))
 (|distance|
  (((|DoubleFloat|) $ $)
   "\\spad{distance(p1,{} p2)} returns the distance between the points \\spad{p1} is the first point. \\spad{p2} is the second point. There are 2 metrics associated with any SPointCategory the underlying space and the space that it is embedded in this is the distance in the underlying space."))
 (|distanceSquared|
  (((|DoubleFloat|) $ $)
   "\\spad{distanceSquared(p1,{} p2)} returns the distance between the points \\spad{p1} and \\spad{p2}. There are 2 metrics associated with any SPointCategory the underlying space and the space that it is embedded in this is the distance in the underlying space."))
 (|unitVector|
  (($ $)
   "\\spad{unitVector(p)} returns a vector with the same direction as \\spad{p} but with unit length. We scale until length is 1"))
 (|Pnan?|
  (((|Boolean|) $)
   "\\spad{Pnan?(p)} returns \\spad{true} if any of its elements are not valid DoubleFloat values. Examples of invalid floating point numbers are when we have divided a given element by zero or taken sqrt of negative number at some stage? Note: we can still represent a point at infinity and we can represent points using complex numbers,{} but we do this using projective or conformal space or by using the appropriate instance of SPointCategory,{} not by using invalid floating point numbers."))
 (|dimension|
  (((|PositiveInteger|) $)
   "\\spad{dimension(p)} returns the number of dimensions that make up the point category \\spad{p}."))
 (|max|
  (($ $ $)
   "\\spad{max(a,{} b)} returns a point whose value in each dimension is the maximum. So if a has the largest \\spad{x} value and \\spad{b} has the largest \\spad{y} value then the result will combine these. This is useful for constructing boundary boxes around sets of points."))
 (|min|
  (($ $ $)
   "\\spad{min(a,{} b)} returns a point whose value in each dimension is the minimum. So if a has the smallest \\spad{x} value and \\spad{b} has the smallest \\spad{y} value then the result will combine these. This is useful for constructing boundary boxes around sets of points."))
 (|sivec|
  (($ (|Integer|) (|Integer|) (|Integer|))
   "\\spad{sivec(a,{} b,{} c)} constructs a 3D vector defined by a,{} \\spad{b} and \\spad{c} of type Integer")
  (($ (|Integer|) (|Integer|))
   "\\spad{sivec(a,{} b)} constructs a 2D vector defined by a and \\spad{b} of type Integer"))
 (|svec|
  (($ (|DoubleFloat|) (|DoubleFloat|) (|DoubleFloat|))
   "\\spad{svec(a,{} b,{} c)} constructs a 3D vector defined by a,{} \\spad{b} and \\spad{c} of type \\spad{R}")
  (($ (|DoubleFloat|) (|DoubleFloat|))
   "\\spad{svec(a,{} b)} constructs a 2D vector defined by a and \\spad{b} of type \\spad{R}"))
 (|sipnt|
  (($ (|Integer|) (|Integer|) (|Integer|))
   "\\spad{sipnt(a,{} b,{} c)} constructs a 3D point defined by a,{} \\spad{b} and \\spad{c} of type Integer")
  (($ (|Integer|) (|Integer|))
   "\\spad{sipnt(a,{} b)} constructs a 2D point defined by a and \\spad{b} of type Integer"))
 (|spnt|
  (($ (|DoubleFloat|) (|DoubleFloat|) (|DoubleFloat|))
   "\\spad{spnt(a,{} b,{} c)} constructs a 3D point defined by a,{} \\spad{b} and \\spad{c} of type \\spad{R}")
  (($ (|DoubleFloat|) (|DoubleFloat|))
   "\\spad{spnt(a,{} b)} constructs a 2D point defined by a and \\spad{b} of type \\spad{R}")))
(("documentation" 0 1165) ("ancestors" 0 NIL) ("parents" 0 NIL)
 ("abbreviation" 0 1157) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 890) ("modemaps" 0 NIL) ("sourceFile" 0 852)
 ("constructorCategory" 0 494) ("constructorModemap" 0 51)
 ("constructorKind" 0 42) ("constructorForm" 0 20))