3639                (MAKEPROP '|Any| 'NILADIC T)
(|Any|)
|domain|
(((|Any|)
  (|Join| (|SetCategory|)
          (CATEGORY |domain| (SIGNATURE |any| ($ (|SExpression|) (|None|)))
           (SIGNATURE |domainOf| ((|OutputForm|) $))
           (SIGNATURE |objectOf| ((|OutputForm|) $))
           (SIGNATURE |dom| ((|SExpression|) $)) (SIGNATURE |obj| ((|None|) $))
           (SIGNATURE |showTypeInOutput| ((|String|) (|Boolean|))))))
 (T |Any|))
(|Join| (|SetCategory|)
        (CATEGORY |domain| (SIGNATURE |any| ($ (|SExpression|) (|None|)))
         (SIGNATURE |domainOf| ((|OutputForm|) $))
         (SIGNATURE |objectOf| ((|OutputForm|) $))
         (SIGNATURE |dom| ((|SExpression|) $)) (SIGNATURE |obj| ((|None|) $))
         (SIGNATURE |showTypeInOutput| ((|String|) (|Boolean|)))))
"/git/fricas/src/algebra/ANY.spad"
((|any| (*1 *1 *2 *3)
  (AND (|isDomain| *2 (|SExpression|)) (|isDomain| *3 (|None|))
       (|isDomain| *1 (|Any|))))
 (|domainOf| (*1 *2 *1)
  (AND (|isDomain| *2 (|OutputForm|)) (|isDomain| *1 (|Any|))))
 (|objectOf| (*1 *2 *1)
  (AND (|isDomain| *2 (|OutputForm|)) (|isDomain| *1 (|Any|))))
 (|dom| (*1 *2 *1)
  (AND (|isDomain| *2 (|SExpression|)) (|isDomain| *1 (|Any|))))
 (|obj| (*1 *2 *1) (AND (|isDomain| *2 (|None|)) (|isDomain| *1 (|Any|))))
 (|showTypeInOutput| (*1 *2 *3)
  (AND (|isDomain| *3 (|Boolean|)) (|isDomain| *2 (|String|))
       (|isDomain| *1 (|Any|)))))
((~= (((|Boolean|) $ $) NIL))
 (|showTypeInOutput| (((|String|) (|Boolean|)) 24))
 (|objectOf| (((|OutputForm|) $) 22)) (|obj| (((|None|) $) 12))
 (|latex| (((|String|) $) NIL))
 (|hashUpdate!| (((|HashState|) (|HashState|) $) NIL))
 (|hash| (((|SingleInteger|) $) NIL)) (|domainOf| (((|OutputForm|) $) 16))
 (|dom| (((|SExpression|) $) 14)) (|coerce| (((|OutputForm|) $) 32))
 (|any| (($ (|SExpression|) (|None|)) 33)) (= (((|Boolean|) $ $) 18)))
ANY
(((|SetCategory|) . T))
(((|BasicType|) . T) ((|CoercibleTo| (|OutputForm|)) . T) ((|SetCategory|) . T))
((|constructor|
  (NIL
   "\\spadtype{Any} implements a type that packages up objects and their types in objects of \\spadtype{Any}. Roughly speaking that means that if \\spad{s : S} then when converted to \\spadtype{Any},{} the new object will include both the original object and its type. This is a way of converting arbitrary objects into a single type without losing any of the original information. Any object can be converted to one of \\spadtype{Any}."))
 (|showTypeInOutput|
  (((|String|) (|Boolean|))
   "\\spad{showTypeInOutput(bool)} affects the way objects of \\spadtype{Any} are displayed. If \\spad{bool} is \\spad{true} then the type of the original object that was converted to \\spadtype{Any} will be printed. If \\spad{bool} is \\spad{false},{} it will not be printed."))
 (|obj|
  (((|None|) $)
   "\\spad{obj(a)} essentially returns the original object that was converted to \\spadtype{Any} except that the type is forced to be \\spadtype{None}."))
 (|dom|
  (((|SExpression|) $)
   "\\spad{dom(a)} returns a \\spadgloss{LISP} form of the type of the original object that was converted to \\spadtype{Any}."))
 (|objectOf|
  (((|OutputForm|) $)
   "\\spad{objectOf(a)} returns a printable form of the original object that was converted to \\spadtype{Any}."))
 (|domainOf|
  (((|OutputForm|) $)
   "\\spad{domainOf(a)} returns a printable form of the type of the original object that was converted to \\spadtype{Any}."))
 (|any|
  (($ (|SExpression|) (|None|))
   "\\spad{any(type,{} object)} is a technical function for creating an object of \\spadtype{Any}. Argument \\spad{type} is a \\spadgloss{LISP} form for the \\spad{type} of \\spad{object}.")))
(("documentation" 0 1965) ("ancestors" 0 1884) ("parents" 0 1860)
 ("abbreviation" 0 1856) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 1408) ("modemaps" 0 826) ("sourceFile" 0 791)
 ("constructorCategory" 0 446) ("constructorModemap" 0 66)
 ("constructorKind" 0 57) ("constructorForm" 0 49) ("NILADIC" 0 20))