12717               (MAKEPROP '|OrientedFacet| 'NILADIC T)
(|OrientedFacet|)
|domain|
(((|OrientedFacet|)
  (|Join| (|FacetCategory|)
          (CATEGORY |domain|
           (SIGNATURE |orientedFacet|
            ($ (|Integer|) (|List| (|NonNegativeInteger|))))
           (SIGNATURE |orientedFacetUnsigned| ($ (|List| (|Integer|))))
           (SIGNATURE |orientedFacetSigned| ($ (|List| (|Integer|))))
           (SIGNATURE |orientedFacet| ($ (|Integer|) (|OrientedFacet|)))
           (SIGNATURE |orientedFacetIfCan| ((|Union| $ "failed") (|List| $)))
           (SIGNATURE |getIndexes| ((|List| (|NonNegativeInteger|)) $))
           (SIGNATURE |minIndex| ((|NonNegativeInteger|) $))
           (SIGNATURE |maxIndex| ((|NonNegativeInteger|) $))
           (SIGNATURE |getIndexesSigned| ((|List| (|Integer|)) $))
           (SIGNATURE |setMult!| ($ $ (|Integer|)))
           (SIGNATURE |boundary| ((|List| $) $))
           (SIGNATURE |allSubsets| ((|List| $) $ (|NonNegativeInteger|)))
           (SIGNATURE |allSubsets|
            ((|List| $) $ (|NonNegativeInteger|) (|NonNegativeInteger|)))
           (SIGNATURE |isSubsetOf?| ((|Boolean|) $ $))
           (SIGNATURE |position| ((|Integer|) $ (|List| $)))
           (SIGNATURE |sameFace?| ((|Boolean|) $ $)) (SIGNATURE |join| ($ $ $))
           (SIGNATURE |subtract| ($ $ $)) (SIGNATURE |reindex| ($ $))
           (SIGNATURE |boolWordPermute|
            ((|List| (|List| (|Boolean|))) (|NonNegativeInteger|)
             (|NonNegativeInteger|)))
           (SIGNATURE |boolWordPermute|
            ((|List| (|List| (|Boolean|))) (|List| (|List| (|Boolean|)))
             (|NonNegativeInteger|) (|NonNegativeInteger|)))
           (SIGNATURE |product| ((|List| (|ProductFacet|)) $ $))
           (SIGNATURE |addVertex| ($ $ (|NonNegativeInteger|)))
           (SIGNATURE |refactorIndexes| ($ $ (|NonNegativeInteger|))))))
 (T |OrientedFacet|))
(|Join| (|FacetCategory|)
        (CATEGORY |domain|
         (SIGNATURE |orientedFacet|
          ($ (|Integer|) (|List| (|NonNegativeInteger|))))
         (SIGNATURE |orientedFacetUnsigned| ($ (|List| (|Integer|))))
         (SIGNATURE |orientedFacetSigned| ($ (|List| (|Integer|))))
         (SIGNATURE |orientedFacet| ($ (|Integer|) (|OrientedFacet|)))
         (SIGNATURE |orientedFacetIfCan| ((|Union| $ "failed") (|List| $)))
         (SIGNATURE |getIndexes| ((|List| (|NonNegativeInteger|)) $))
         (SIGNATURE |minIndex| ((|NonNegativeInteger|) $))
         (SIGNATURE |maxIndex| ((|NonNegativeInteger|) $))
         (SIGNATURE |getIndexesSigned| ((|List| (|Integer|)) $))
         (SIGNATURE |setMult!| ($ $ (|Integer|)))
         (SIGNATURE |boundary| ((|List| $) $))
         (SIGNATURE |allSubsets| ((|List| $) $ (|NonNegativeInteger|)))
         (SIGNATURE |allSubsets|
          ((|List| $) $ (|NonNegativeInteger|) (|NonNegativeInteger|)))
         (SIGNATURE |isSubsetOf?| ((|Boolean|) $ $))
         (SIGNATURE |position| ((|Integer|) $ (|List| $)))
         (SIGNATURE |sameFace?| ((|Boolean|) $ $)) (SIGNATURE |join| ($ $ $))
         (SIGNATURE |subtract| ($ $ $)) (SIGNATURE |reindex| ($ $))
         (SIGNATURE |boolWordPermute|
          ((|List| (|List| (|Boolean|))) (|NonNegativeInteger|)
           (|NonNegativeInteger|)))
         (SIGNATURE |boolWordPermute|
          ((|List| (|List| (|Boolean|))) (|List| (|List| (|Boolean|)))
           (|NonNegativeInteger|) (|NonNegativeInteger|)))
         (SIGNATURE |product| ((|List| (|ProductFacet|)) $ $))
         (SIGNATURE |addVertex| ($ $ (|NonNegativeInteger|)))
         (SIGNATURE |refactorIndexes| ($ $ (|NonNegativeInteger|)))))
"/git/fricas/src/algebra/OFACET.spad"
((|orientedFacet| (*1 *1 *2 *3)
  (AND (|isDomain| *2 (|Integer|))
       (|isDomain| *3 (|List| (|NonNegativeInteger|)))
       (|isDomain| *1 (|OrientedFacet|))))
 (|orientedFacetUnsigned| (*1 *1 *2)
  (AND (|isDomain| *2 (|List| (|Integer|))) (|isDomain| *1 (|OrientedFacet|))))
 (|orientedFacetSigned| (*1 *1 *2)
  (AND (|isDomain| *2 (|List| (|Integer|))) (|isDomain| *1 (|OrientedFacet|))))
 (|orientedFacet| (*1 *1 *2 *1)
  (AND (|isDomain| *2 (|Integer|)) (|isDomain| *1 (|OrientedFacet|))))
 (|orientedFacetIfCan| (*1 *1 *2)
  (|partial| AND (|isDomain| *2 (|List| (|OrientedFacet|)))
   (|isDomain| *1 (|OrientedFacet|))))
 (|getIndexes| (*1 *2 *1)
  (AND (|isDomain| *2 (|List| (|NonNegativeInteger|)))
       (|isDomain| *1 (|OrientedFacet|))))
 (|minIndex| (*1 *2 *1)
  (AND (|isDomain| *2 (|NonNegativeInteger|))
       (|isDomain| *1 (|OrientedFacet|))))
 (|maxIndex| (*1 *2 *1)
  (AND (|isDomain| *2 (|NonNegativeInteger|))
       (|isDomain| *1 (|OrientedFacet|))))
 (|getIndexesSigned| (*1 *2 *1)
  (AND (|isDomain| *2 (|List| (|Integer|))) (|isDomain| *1 (|OrientedFacet|))))
 (|setMult!| (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|Integer|)) (|isDomain| *1 (|OrientedFacet|))))
 (|boundary| (*1 *2 *1)
  (AND (|isDomain| *2 (|List| (|OrientedFacet|)))
       (|isDomain| *1 (|OrientedFacet|))))
 (|allSubsets| (*1 *2 *1 *3)
  (AND (|isDomain| *3 (|NonNegativeInteger|))
       (|isDomain| *2 (|List| (|OrientedFacet|)))
       (|isDomain| *1 (|OrientedFacet|))))
 (|allSubsets| (*1 *2 *1 *3 *3)
  (AND (|isDomain| *3 (|NonNegativeInteger|))
       (|isDomain| *2 (|List| (|OrientedFacet|)))
       (|isDomain| *1 (|OrientedFacet|))))
 (|isSubsetOf?| (*1 *2 *1 *1)
  (AND (|isDomain| *2 (|Boolean|)) (|isDomain| *1 (|OrientedFacet|))))
 (|position| (*1 *2 *1 *3)
             (AND (|isDomain| *3 (|List| (|OrientedFacet|)))
                  (|isDomain| *2 (|Integer|))
                  (|isDomain| *1 (|OrientedFacet|))))
 (|sameFace?| (*1 *2 *1 *1)
  (AND (|isDomain| *2 (|Boolean|)) (|isDomain| *1 (|OrientedFacet|))))
 (|join| (*1 *1 *1 *1) (|isDomain| *1 (|OrientedFacet|)))
 (|subtract| (*1 *1 *1 *1) (|isDomain| *1 (|OrientedFacet|)))
 (|reindex| (*1 *1 *1) (|isDomain| *1 (|OrientedFacet|)))
 (|boolWordPermute| (*1 *2 *3 *3)
  (AND (|isDomain| *3 (|NonNegativeInteger|))
       (|isDomain| *2 (|List| (|List| (|Boolean|))))
       (|isDomain| *1 (|OrientedFacet|))))
 (|boolWordPermute| (*1 *2 *2 *3 *3)
  (AND (|isDomain| *2 (|List| (|List| (|Boolean|))))
       (|isDomain| *3 (|NonNegativeInteger|))
       (|isDomain| *1 (|OrientedFacet|))))
 (|product| (*1 *2 *1 *1)
  (AND (|isDomain| *2 (|List| (|ProductFacet|)))
       (|isDomain| *1 (|OrientedFacet|))))
 (|addVertex| (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|NonNegativeInteger|))
       (|isDomain| *1 (|OrientedFacet|))))
 (|refactorIndexes| (*1 *1 *1 *2)
  (AND (|isDomain| *2 (|NonNegativeInteger|))
       (|isDomain| *1 (|OrientedFacet|)))))
((~= (((|Boolean|) $ $) NIL)) (|subtract| (($ $ $) 59))
 (|smaller?| (((|Boolean|) $ $) NIL)) (|setMult!| (($ $ (|Integer|)) 45))
 (|sameFace?| (((|Boolean|) $ $) 85)) (|reindex| (($ $) 63))
 (|refactorIndexes| (($ $ (|NonNegativeInteger|)) 83))
 (|product| (((|List| (|ProductFacet|)) $ $) 80))
 (|position| (((|Integer|) $ (|List| $)) 33))
 (|orientedFacetUnsigned| (($ (|List| (|Integer|))) 18))
 (|orientedFacetSigned| (($ (|List| (|Integer|))) 19))
 (|orientedFacetIfCan| (((|Union| $ "failed") (|List| $)) 36))
 (|orientedFacet| (($ (|Integer|) (|List| (|NonNegativeInteger|))) 15)
  (($ (|Integer|) (|OrientedFacet|)) 22))
 (|order| (((|NonNegativeInteger|) $) 38))
 (|minIndex| (((|NonNegativeInteger|) $) 39)) (|min| (($ $ $) NIL))
 (|maxIndex| (((|NonNegativeInteger|) $) 40)) (|max| (($ $ $) NIL))
 (|latex| (((|String|) $) NIL)) (|join| (($ $ $) 57))
 (|isSubsetOf?| (((|Boolean|) $ $) 56))
 (|hashUpdate!| (((|HashState|) (|HashState|) $) NIL))
 (|hash| (((|SingleInteger|) $) NIL)) (|getMult| (((|Integer|) $) 44))
 (|getIndexesSigned| (((|List| (|Integer|)) $) 43))
 (|getIndexes| (((|List| (|NonNegativeInteger|)) $) 26))
 (|empty?| (((|Boolean|) $) 48)) (|coerce| (((|OutputForm|) $) 96))
 (|boundary| (((|List| $) $) 31))
 (|boolWordPermute|
  (((|List| (|List| (|Boolean|))) (|NonNegativeInteger|)
    (|NonNegativeInteger|))
   66)
  (((|List| (|List| (|Boolean|))) (|List| (|List| (|Boolean|)))
    (|NonNegativeInteger|) (|NonNegativeInteger|))
   65))
 (|allSubsets| (((|List| $) $ (|NonNegativeInteger|)) 53)
  (((|List| $) $ (|NonNegativeInteger|) (|NonNegativeInteger|)) 54))
 (|addVertex| (($ $ (|NonNegativeInteger|)) 82)) (>= (((|Boolean|) $ $) NIL))
 (> (((|Boolean|) $ $) NIL)) (= (((|Boolean|) $ $) 55))
 (<= (((|Boolean|) $ $) 87)) (< (((|Boolean|) $ $) 86)))
OFACET
(((|FacetCategory|) . T))
(((|BasicType|) . T) ((|CoercibleTo| (|OutputForm|)) . T) ((|Comparable|) . T)
 ((|FacetCategory|) . T) ((|OrderedSet|) . T) ((|PartialOrder|) . T)
 ((|SetCategory|) . T))
((|constructor|
  (NIL
   "\\indented{2}{A single vertex,{} edge,{} triangle...} \\indented{2}{for more documentation see:} \\indented{2}{http://www.euclideanspace.com/prog/scratchpad/mycode/topology/simplex/} Date Created: March 2016 Basic Operations: Related packages: Related categories: FacetCategory Related Domains: Also See: AMS Classifications:"))
 (|refactorIndexes|
  (($ $ (|NonNegativeInteger|))
   "adds \\spad{'n'} to each index. Used to refactor simplexes so that they don\\spad{'t} overlap."))
 (|addVertex|
  (($ $ (|NonNegativeInteger|)) "used by cone. Adds a vertex to face."))
 (|product|
  (((|List| (|ProductFacet|)) $ $)
   "This function returns the product of two facets. For more detailed explanation of simplex product code see: \\url{http://www.euclideanspace.com/prog/scratchpad/mycode/topology/simplex/product/} Also see Hatcher [9]. page 277 - The simplical cross product. page 278 - The cohomology cross product. Returns list,{} each entry is a 'lattice path' from (0,{} 0) to (\\spad{x},{} \\spad{y}) where \\spad{x} is number of entries in sa and \\spad{y} is number of entries in \\spad{sb}."))
 (|boolWordPermute|
  (((|List| (|List| (|Boolean|))) (|List| (|List| (|Boolean|)))
    (|NonNegativeInteger|) (|NonNegativeInteger|))
   "recursive part of boolWordPermute")
  (((|List| (|List| (|Boolean|))) (|NonNegativeInteger|)
    (|NonNegativeInteger|))
   "boolean word permutation find all permutations of numZeros and numOnes used by product to calculate all paths through lattice"))
 (|reindex|
  (($ $) "re-index so that indexes start at 1 and are then consecutive."))
 (|subtract|
  (($ $ $)
   "used by link. Returns face 'a' minus the vertices in face \\spad{'b'}."))
 (|join|
  (($ $ $)
   "used by simplicalJoin. Returns join (union) of 'a' and \\spad{'b'}. That is: returns a facet containing indexes in both 'a' and \\spad{'b'}."))
 (|sameFace?|
  (((|Boolean|) $ $)
   "\\spad{true} if this is the same face although the orientation may be different"))
 (|position|
  (((|Integer|) $ (|List| $))
   "return index of \\spad{e} in \\spad{lst}. Index will be negative if \\spad{e} has negative multiplier."))
 (|isSubsetOf?|
  (((|Boolean|) $ $)
   "returns \\spad{true} if face 'a' is contained in face \\spad{'b'}. \\spad{true} subset only : returns \\spad{false} if a=b"))
 (|allSubsets|
  (((|List| $) $ (|NonNegativeInteger|) (|NonNegativeInteger|))
   "\\spad{allSubsets of} a given length returned in reverse order subsets returned are not oriented")
  (((|List| $) $ (|NonNegativeInteger|))
   "\\spad{allSubsets of} a given facet returned in reverse order subsets returned are not oriented"))
 (|boundary|
  (((|List| $) $)
   "construct the boundary. This is like hollowing out the facet."))
 (|setMult!| (($ $ (|Integer|)) "sets multiplier of face"))
 (|getIndexesSigned|
  (((|List| (|Integer|)) $)
   "returns indexes in face with sign to give orientation"))
 (|maxIndex| (((|NonNegativeInteger|) $) "returns maximum index"))
 (|minIndex| (((|NonNegativeInteger|) $) "returns minimum index"))
 (|getIndexes| (((|List| (|NonNegativeInteger|)) $) "returns indexes in face"))
 (|orientedFacetIfCan|
  (((|Union| $ "failed") (|List| $))
   "Constructor for oriented face from its boundary. This is like filling-in the boundary,{} in that sense it is the inverse of 'boundary'. May fail,{} for instance in 'implied' loops,{} where both ends of an edge are the same point. Also similar cases for higher order facets."))
 (|orientedFacetSigned|
  (($ (|List| (|Integer|)))
   "Constructor for oriented face which removes duplicates If the face is positive then we expect the sequence to be: + - + - ..."))
 (|orientedFacetUnsigned|
  (($ (|List| (|Integer|)))
   "Constructor for oriented face which removes duplicates and ignores orientation"))
 (|orientedFacet|
  (($ (|Integer|) (|OrientedFacet|)) "Copy constructor which can change mul")
  (($ (|Integer|) (|List| (|NonNegativeInteger|)))
   "Constructor for oriented facet oriented facet is always stored in vertex order orientation is calculated by the number of edges that have to be flipped to put it in order.")))
(("documentation" 0 8592) ("ancestors" 0 8420) ("parents" 0 8394)
 ("abbreviation" 0 8387) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 6594) ("modemaps" 0 3665) ("sourceFile" 0 3627)
 ("constructorCategory" 0 1908) ("constructorModemap" 0 86)
 ("constructorKind" 0 77) ("constructorForm" 0 59) ("NILADIC" 0 20))