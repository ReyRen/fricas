6863                (MAKEPROP '|TexFormat| 'NILADIC T)
(|TexFormat|)
|domain|
(((|TexFormat|)
  (|Join| (|SetCategory|)
          (CATEGORY |domain| (SIGNATURE |coerce| ($ (|OutputForm|)))
           (SIGNATURE |convert| ($ (|OutputForm|) (|Integer|)))
           (SIGNATURE |convert| ($ (|OutputForm|) (|Integer|) (|OutputForm|)))
           (SIGNATURE |display| ((|Void|) $ (|Integer|)))
           (SIGNATURE |display| ((|Void|) $))
           (SIGNATURE |epilogue| ((|List| (|String|)) $))
           (SIGNATURE |tex| ((|List| (|String|)) $)) (SIGNATURE |new| ($))
           (SIGNATURE |prologue| ((|List| (|String|)) $))
           (SIGNATURE |setEpilogue!|
            ((|List| (|String|)) $ (|List| (|String|))))
           (SIGNATURE |setTex!| ((|List| (|String|)) $ (|List| (|String|))))
           (SIGNATURE |setPrologue!|
            ((|List| (|String|)) $ (|List| (|String|)))))))
 (T |TexFormat|))
(|Join| (|SetCategory|)
        (CATEGORY |domain| (SIGNATURE |coerce| ($ (|OutputForm|)))
         (SIGNATURE |convert| ($ (|OutputForm|) (|Integer|)))
         (SIGNATURE |convert| ($ (|OutputForm|) (|Integer|) (|OutputForm|)))
         (SIGNATURE |display| ((|Void|) $ (|Integer|)))
         (SIGNATURE |display| ((|Void|) $))
         (SIGNATURE |epilogue| ((|List| (|String|)) $))
         (SIGNATURE |tex| ((|List| (|String|)) $)) (SIGNATURE |new| ($))
         (SIGNATURE |prologue| ((|List| (|String|)) $))
         (SIGNATURE |setEpilogue!| ((|List| (|String|)) $ (|List| (|String|))))
         (SIGNATURE |setTex!| ((|List| (|String|)) $ (|List| (|String|))))
         (SIGNATURE |setPrologue!|
          ((|List| (|String|)) $ (|List| (|String|))))))
"/git/fricas/src/algebra/TEX.spad"
((|coerce| (*1 *1 *2)
           (AND (|isDomain| *2 (|OutputForm|)) (|isDomain| *1 (|TexFormat|))))
 (|convert| (*1 *1 *2 *3)
            (AND (|isDomain| *2 (|OutputForm|)) (|isDomain| *3 (|Integer|))
                 (|isDomain| *1 (|TexFormat|))))
 (|convert| (*1 *1 *2 *3 *2)
            (AND (|isDomain| *2 (|OutputForm|)) (|isDomain| *3 (|Integer|))
                 (|isDomain| *1 (|TexFormat|))))
 (|display| (*1 *2 *1 *3)
            (AND (|isDomain| *3 (|Integer|)) (|isDomain| *2 (|Void|))
                 (|isDomain| *1 (|TexFormat|))))
 (|display| (*1 *2 *1)
            (AND (|isDomain| *2 (|Void|)) (|isDomain| *1 (|TexFormat|))))
 (|epilogue| (*1 *2 *1)
  (AND (|isDomain| *2 (|List| (|String|))) (|isDomain| *1 (|TexFormat|))))
 (|tex| (*1 *2 *1)
  (AND (|isDomain| *2 (|List| (|String|))) (|isDomain| *1 (|TexFormat|))))
 (|new| (*1 *1) (|isDomain| *1 (|TexFormat|)))
 (|prologue| (*1 *2 *1)
  (AND (|isDomain| *2 (|List| (|String|))) (|isDomain| *1 (|TexFormat|))))
 (|setEpilogue!| (*1 *2 *1 *2)
  (AND (|isDomain| *2 (|List| (|String|))) (|isDomain| *1 (|TexFormat|))))
 (|setTex!| (*1 *2 *1 *2)
  (AND (|isDomain| *2 (|List| (|String|))) (|isDomain| *1 (|TexFormat|))))
 (|setPrologue!| (*1 *2 *1 *2)
  (AND (|isDomain| *2 (|List| (|String|))) (|isDomain| *1 (|TexFormat|)))))
((~= (((|Boolean|) $ $) NIL)) (|tex| (((|List| (|String|)) $) 35))
 (|setTex!| (((|List| (|String|)) $ (|List| (|String|))) 38))
 (|setPrologue!| (((|List| (|String|)) $ (|List| (|String|))) 37))
 (|setEpilogue!| (((|List| (|String|)) $ (|List| (|String|))) 39))
 (|prologue| (((|List| (|String|)) $) 34)) (|new| (($) 22))
 (|latex| (((|String|) $) NIL))
 (|hashUpdate!| (((|HashState|) (|HashState|) $) NIL))
 (|hash| (((|SingleInteger|) $) NIL)) (|epilogue| (((|List| (|String|)) $) 36))
 (|display| (((|Void|) $ (|Integer|)) 31) (((|Void|) $) 32))
 (|convert| (($ (|OutputForm|) (|Integer|)) 28)
            (($ (|OutputForm|) (|Integer|) (|OutputForm|)) NIL))
 (|coerce| (((|OutputForm|) $) 41) (($ (|OutputForm|)) 26))
 (= (((|Boolean|) $ $) NIL)))
TEX
(((|SetCategory|) . T))
(((|BasicType|) . T) ((|CoercibleTo| (|OutputForm|)) . T) ((|SetCategory|) . T))
((|constructor|
  (NIL
   "\\spadtype{TexFormat} provides a coercion from \\spadtype{OutputForm} to \\TeX{} format. The particular dialect of \\TeX{} used is \\LaTeX{}. The basic object consists of three parts: a prologue,{} a tex part and an epilogue. The functions \\spadfun{prologue},{} \\spadfun{tex} and \\spadfun{epilogue} extract these parts,{} respectively. The main guts of the expression go into the tex part. The other parts can be set (\\spadfun{setPrologue!},{} \\spadfun{setEpilogue!}) so that contain the appropriate tags for printing. For example,{} the prologue and epilogue might simply contain \\spad{``}\\verb+\\spad{\\[}+\\spad{''} and \\spad{``}\\verb+\\spad{\\]}+\\spad{''},{} respectively,{} so that the TeX section will be printed in LaTeX display math mode."))
 (|setPrologue!|
  (((|List| (|String|)) $ (|List| (|String|)))
   "\\spad{setPrologue!(t,{} strings)} sets the prologue section of a TeX form \\spad{t} to strings."))
 (|setTex!|
  (((|List| (|String|)) $ (|List| (|String|)))
   "\\spad{setTex!(t,{} strings)} sets the TeX section of a TeX form \\spad{t} to strings."))
 (|setEpilogue!|
  (((|List| (|String|)) $ (|List| (|String|)))
   "\\spad{setEpilogue!(t,{} strings)} sets the epilogue section of a TeX form \\spad{t} to strings."))
 (|prologue|
  (((|List| (|String|)) $)
   "\\spad{prologue(t)} extracts the prologue section of a TeX form \\spad{t}."))
 (|new|
  (($)
   "\\spad{new()} create a new,{} empty object. Use \\spadfun{setPrologue!},{} \\spadfun{setTex!} and \\spadfun{setEpilogue!} to set the various components of this object."))
 (|tex|
  (((|List| (|String|)) $)
   "\\spad{tex(t)} extracts the TeX section of a TeX form \\spad{t}."))
 (|epilogue|
  (((|List| (|String|)) $)
   "\\spad{epilogue(t)} extracts the epilogue section of a TeX form \\spad{t}."))
 (|display|
  (((|Void|) $)
   "\\spad{display(t)} outputs the TeX formatted code \\spad{t} so that each line has length less than or equal to the value set by the system command \\spadsyscom{set output length}.")
  (((|Void|) $ (|Integer|))
   "\\spad{display(t,{} width)} outputs the TeX formatted code \\spad{t} so that each line has length less than or equal to \\spadvar{width}."))
 (|convert|
  (($ (|OutputForm|) (|Integer|) (|OutputForm|))
   "\\spad{convert(o,{} step,{} type)} changes \\spad{o} in standard output format to TeX format and also adds the given \\spad{step} number and type. This is useful if you want to create equations with given numbers or have the equation numbers correspond to the interpreter \\spad{step} numbers.")
  (($ (|OutputForm|) (|Integer|))
   "\\spad{convert(o,{} step)} changes \\spad{o} in standard output format to TeX format and also adds the given step number. This is useful if you want to create equations with given numbers or have the equation numbers correspond to the interpreter step numbers."))
 (|coerce|
  (($ (|OutputForm|))
   "\\spad{coerce(o)} changes \\spad{o} in the standard output format to TeX format.")))
(("documentation" 0 3874) ("ancestors" 0 3793) ("parents" 0 3769)
 ("abbreviation" 0 3765) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 3011) ("modemaps" 0 1710) ("sourceFile" 0 1675)
 ("constructorCategory" 0 913) ("constructorModemap" 0 78)
 ("constructorKind" 0 69) ("constructorForm" 0 55) ("NILADIC" 0 20))