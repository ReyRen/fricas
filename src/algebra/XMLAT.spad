)abbrev domain XMLAT XmlAttribute
++ Author: Martin John Baker
++ Date Created: September 2010
++ Basic Operations: writeXml, writeVRML
++ Related Constructors: xmlAttribute, xmlElement
++ Also See:
++ AMS Classifications:
++ Keywords:
++ References:
++ http://www.euclideanspace.com/prog/scratchpad/mycode/graph/
++ Description:
++ This package provides support for XML files
++ XML attributes are inside the opening tag:
++ <tagname attributes>
++ and usually have the form: name=value

XmlAttribute() : Exports==Implementation where
 Exports == with
  xmlAttribute : (name : String, value : String) -> %
    ++ xmlAttribute(name, value) construct a xmlAttribute from its name
    ++ and value
  xmlAttribute : (name : String, values : List String) -> %
    ++ xmlAttribute: (name: String, values: List String) constructs a
    ++ xmlAttribute from its name and list of values
  coerce : % -> String
    ++ coerce(x) outputs x as a string
  outputVRML : (rp : %, f1 : TextFile) -> Void
    ++ outputVRML(rp, f1) writes the attribute as VRML2. VRML2 is
    ++ not xml but it has the same semantics and node names as X3D
    ++ but a different syntax so it makes sense to create an XML structure
    ++ and then format the output differently.

 Implementation == add

  Rep := Record(n : String, v : List String)

  -- construct a xmlAttribute from its name and value
  xmlAttribute(name : String, value : String) : % == [name, [value]]

  -- construct a xmlAttribute from its name and list of values
  xmlAttribute(name : String, values : List String) : % == [name, values]

  coerce(rp : %) : String ==
   val:String := ""
   for vn in rp.v repeat
     if val = "" then val := vn
     else val := concat([val," ",vn])$String
   concat([" ",rp.n,concat("=",quote()),concat(val,quote())])$String

  -- outputVRML(rp, f1) writes the attribute as VRML2. VRML2 is
  -- not xml but it has the same semantics and node names as X3D
  -- but a different syntax so it makes sense to create an XML structure
  -- and then format the output differently.
  outputVRML(rp : %, f1 : TextFile) : Void ==
   val:String := ""
   for vn in rp.v repeat
     if val = "" then
       val := vn
     else val := concat([val,",",vn])$String
   writeLine!(f1,concat([rp.n," ",val])$String)
   Void


)if false

\section{XmlElement domain}
)endif

