3828                (|VectorCategory&| S R)
|domain|
(((|VectorCategory&| |#1| |#2|)
  (CATEGORY |domain| (SIGNATURE |length| (|#2| |#1|))
   (SIGNATURE |cross| (|#1| |#1| |#1|))
   (SIGNATURE |outerProduct| ((|Matrix| |#2|) |#1| |#1|))
   (SIGNATURE |dot| (|#2| |#1| |#1|)) (SIGNATURE * (|#1| |#1| |#2|))
   (SIGNATURE * (|#1| |#2| |#1|)) (SIGNATURE * (|#1| (|Integer|) |#1|))
   (SIGNATURE - (|#1| |#1| |#1|)) (SIGNATURE - (|#1| |#1|))
   (SIGNATURE |zero?| ((|Boolean|) |#1|))
   (SIGNATURE |zero| (|#1| (|NonNegativeInteger|)))
   (SIGNATURE + (|#1| |#1| |#1|)))
  (|VectorCategory| |#2|) (|Type|))
 (T |VectorCategory&|))
(CATEGORY |domain| (SIGNATURE |length| (|#2| |#1|))
 (SIGNATURE |cross| (|#1| |#1| |#1|))
 (SIGNATURE |outerProduct| ((|Matrix| |#2|) |#1| |#1|))
 (SIGNATURE |dot| (|#2| |#1| |#1|)) (SIGNATURE * (|#1| |#1| |#2|))
 (SIGNATURE * (|#1| |#2| |#1|)) (SIGNATURE * (|#1| (|Integer|) |#1|))
 (SIGNATURE - (|#1| |#1| |#1|)) (SIGNATURE - (|#1| |#1|))
 (SIGNATURE |zero?| ((|Boolean|) |#1|))
 (SIGNATURE |zero| (|#1| (|NonNegativeInteger|)))
 (SIGNATURE + (|#1| |#1| |#1|)))
"/git/fricas/src/algebra/VECTCAT.spad"
((|zero?| (((|Boolean|) $) 24)) (|zero| (($ (|NonNegativeInteger|)) 19))
 (|outerProduct| (((|Matrix| |#2|) $ $) 41)) (|length| ((|#2| $) 48))
 (|dot| ((|#2| $ $) 37)) (|cross| (($ $ $) 45)) (- (($ $) 28) (($ $ $) 33))
 (+ (($ $ $) 16)) (* (($ (|Integer|) $) 30) (($ |#2| $) 36) (($ $ |#2|) 35)))
((|HasCategory| |#2| '(|RadicalCategory|)) (|HasCategory| |#2| '(|Ring|))
 (|HasCategory| |#2| '(|SemiRng|)) (|HasCategory| |#2| '(|SemiGroup|))
 (|HasCategory| |#2| '(|AbelianGroup|)) (|HasCategory| |#2| '(|AbelianMonoid|))
 (|HasCategory| |#2| '(|AbelianSemiGroup|)))
VECTCAT-
((|constructor|
  (NIL
   "\\spadtype{VectorCategory} represents the type of vector like objects,{} \\spadignore{i.e.} finite sequences indexed by some finite segment of the integers. The operations available on vectors depend on the structure of the underlying components. Many operations from the component domain are defined for vectors componentwise. It can by assumed that extraction or updating components can be done in constant time."))
 (|length|
  ((|#2| $)
   "\\spad{length(v)} computes the sqrt(dot(\\spad{v},{} \\spad{v})),{} \\spadignore{i.e.} the euclidean length"))
 (|cross|
  (($ $ $)
   "\\spad{cross(u,{} v)} constructs the cross product of \\spad{u} and \\spad{v}. Error: if \\spad{u} and \\spad{v} are not of length 3."))
 (|outerProduct|
  (((|Matrix| |#2|) $ $)
   "\\spad{outerProduct(u,{} v)} constructs the matrix whose (\\spad{i},{} \\spad{j})\\spad{'}th element is \\spad{u}(\\spad{i})\\spad{*v}(\\spad{j})."))
 (|dot|
  ((|#2| $ $)
   "\\spad{dot(x,{} y)} computes the inner product of the two vectors \\spad{x} and \\spad{y}. Error: if \\spad{x} and \\spad{y} are not of the same length."))
 (*
  (($ $ |#2|)
   "\\spad{y * r} multiplies each component of the vector \\spad{y} by the element \\spad{r}.")
  (($ |#2| $)
   "\\spad{r * y} multiplies the element \\spad{r} times each component of the vector \\spad{y}.")
  (($ (|Integer|) $)
   "\\spad{n * y} multiplies each component of the vector \\spad{y} by the integer \\spad{n}."))
 (-
  (($ $ $)
   "\\spad{x - y} returns the component-wise difference of the vectors \\spad{x} and \\spad{y}. Error: if \\spad{x} and \\spad{y} are not of the same length.")
  (($ $) "\\spad{-x} negates all components of the vector \\spad{x}."))
 (|zero?|
  (((|Boolean|) $)
   "\\spad{zero?(x)} returns \\spad{true} if \\spad{x} is a zero vector,{} \\spad{false} otherwise."))
 (|zero|
  (($ (|NonNegativeInteger|))
   "\\spad{zero(n)} creates a zero vector of length \\spad{n}."))
 (+
  (($ $ $)
   "\\spad{x + y} returns the component-wise sum of the vectors \\spad{x} and \\spad{y}. Error: if \\spad{x} and \\spad{y} are not of the same length.")))
(("documentation" 0 1706) ("ancestors" 0 NIL) ("parents" 0 NIL)
 ("abbreviation" 0 1697) ("predicates" 0 1427) ("superDomain" 0 NIL)
 ("operationAlist" 0 1130) ("modemaps" 0 NIL) ("sourceFile" 0 1091)
 ("constructorCategory" 0 627) ("constructorModemap" 0 53)
 ("constructorKind" 0 44) ("constructorForm" 0 20))