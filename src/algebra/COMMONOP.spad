)abbrev package COMMONOP CommonOperators
++ Provides commonly used operators
++ Author: Manuel Bronstein
++ Date Created: 25 Mar 1988
++ Description:
++ This package exports the elementary operators, with some semantics
++ already attached to them. The semantics that is attached here is not
++ dependent on the set in which the operators will be applied.
++ Keywords: operator.
CommonOperators() : Exports == Implementation where
  OP  ==> BasicOperator
  O   ==> OutputForm
  POWER ==> '%power
  ALGOP ==> '%alg
  EVEN  ==> 'even
  ODD   ==> 'odd
  DUMMYVAR ==> '%dummyVar

  Exports ==> with
    operator : Symbol -> OP
        ++ operator(s) returns an operator with name s, with the
        ++ appropriate semantics if s is known. If s is not known,
        ++ the result has no semantics.

  Implementation ==> add
    dpi        : List O -> O
    dgamma     : List O -> O
    dquote     : List O -> O
    dexp       : O -> O
    dfact      : O -> O
    startUp    : Boolean -> Void
    setDummyVar : (OP, NonNegativeInteger) -> OP

    brandNew? : Reference(Boolean) := ref true

    opalg   := operator('rootOf, 2)$OP
    oproot  := operator('nthRoot, 2)
    oppi    := operator('pi, 0)
    oplog   := operator('log, 1)
    opexp   := operator('exp, 1)
    opabs   := operator('abs, 1)
    opsin   := operator('sin, 1)
    opcos   := operator('cos, 1)
    optan   := operator('tan, 1)
    opcot   := operator('cot, 1)
    opsec   := operator('sec, 1)
    opcsc   := operator('csc, 1)
    opasin  := operator('asin, 1)
    opacos  := operator('acos, 1)
    opatan  := operator('atan, 1)
    opacot  := operator('acot, 1)
    opasec  := operator('asec, 1)
    opacsc  := operator('acsc, 1)
    opsinh  := operator('sinh, 1)
    opcosh  := operator('cosh, 1)
    optanh  := operator('tanh, 1)
    opcoth  := operator('coth, 1)
    opsech  := operator('sech, 1)
    opcsch  := operator('csch, 1)
    opasinh := operator('asinh, 1)
    opacosh := operator('acosh, 1)
    opatanh := operator('atanh, 1)
    opacoth := operator('acoth, 1)
    opasech := operator('asech, 1)
    opacsch := operator('acsch, 1)
    opbox   := operator('%box, 1)$OP
    oppren  := operator('%paren, 1)$OP
    opquote := operator('%quote)$OP
    opdiff  := operator('%diff, 3)
    opsi    := operator('Si, 1)
    opci    := operator('Ci, 1)
    opshi   := operator('Shi, 1)
    opchi   := operator('Chi, 1)
    opei    := operator('Ei, 1)
    opli    := operator('li, 1)
    operf   := operator('erf, 1)
    operfi  := operator('erfi, 1)
    opli2   := operator('dilog, 1)
    opfis   := operator('fresnelS, 1)
    opfic   := operator('fresnelC, 1)
    opGamma     := operator('Gamma, 1)
    opGamma2    := operator('Gamma2, 2)
    opBeta      := operator('Beta, 2)
    opdigamma   := operator('digamma, 1)
    oppolygamma := operator('polygamma, 2)
    opBesselJ   := operator('besselJ, 2)
    opBesselY   := operator('besselY, 2)
    opBesselI   := operator('besselI, 2)
    opBesselK   := operator('besselK, 2)
    opAiryAi    := operator('airyAi,  1)
    opAiryAiPrime := operator('airyAiPrime,  1)
    opAiryBi    := operator('airyBi , 1)
    opAiryBiPrime := operator('airyBiPrime,  1)
    opLambertW := operator('lambertW,  1)
    opPolylog := operator('polylog, 2)
    opWeierstrassP := operator('weierstrassP, 3)
    opWeierstrassPPrime := operator('weierstrassPPrime, 3)
    opWeierstrassSigma := operator('weierstrassSigma, 3)
    opWeierstrassZeta := operator('weierstrassZeta, 3)
    -- arbitrary arity
    opHypergeometricF := operator('hypergeometricF)$BasicOperator
    opMeijerG := operator('meijerG)$BasicOperator

    opWhittakerM := operator('whittakerM, 3)$OP
    opWhittakerW := operator('whittakerW, 3)$OP
    opAngerJ := operator('angerJ, 2)$OP
    opWeberE := operator('weberE, 2)$OP
    opStruveH := operator('struveH, 2)$OP
    opStruveL := operator('struveL, 2)$OP
    opHankelH1 := operator('hankelH1, 2)$OP
    opHankelH2 := operator('hankelH2, 2)$OP
    opLommelS1 := operator('lommelS1, 3)$OP
    opLommelS2 := operator('lommelS2, 3)$OP
    opKummerM := operator('kummerM, 3)$OP
    opKummerU := operator('kummerU, 3)$OP
    opLegendreP := operator('legendreP, 3)$OP
    opLegendreQ := operator('legendreQ, 3)$OP
    opKelvinBei := operator('kelvinBei, 2)$OP
    opKelvinBer := operator('kelvinBer, 2)$OP
    opKelvinKei := operator('kelvinKei, 2)$OP
    opKelvinKer := operator('kelvinKer, 2)$OP
    opEllipticK := operator('ellipticK, 1)$OP
    opEllipticE := operator('ellipticE, 1)$OP
    opEllipticE2 := operator('ellipticE2, 2)$OP
    opEllipticF := operator('ellipticF, 2)$OP
    opEllipticPi := operator('ellipticPi, 3)$OP
    opJacobiSn := operator('jacobiSn, 2)$OP
    opJacobiCn := operator('jacobiCn, 2)$OP
    opJacobiDn := operator('jacobiDn, 2)$OP
    opJacobiZeta := operator('jacobiZeta, 2)$OP
    opJacobiTheta := operator('jacobiTheta, 2)$OP
    opWeierstrassPInverse := operator('weierstrassPInverse, 3)$OP
    opLerchPhi := operator('lerchPhi, 3)$OP
    opRiemannZeta := operator('riemannZeta, 1)$OP

    -- orthogonal polynomials
    opCharlierC := operator('charlierC, 3)$OP
    opHermiteH := operator('hermiteH, 2)$OP
    opJacobiP := operator('jacobiP, 4)$OP
    opLaguerreL := operator('laguerreL, 3)$OP
    opMeixnerM := operator('meixnerM, 4)$OP

    op_log_gamma := operator('%logGamma, 1)$OP
    op_eis := operator('%eis, 1)$OP
    op_erfs := operator('%erfs, 1)$OP
    op_erfis := operator('%erfis, 1)$OP

    opint   := operator('integral, 3)
    -- arbitrary arity
    opiint  := operator('%iint)$BasicOperator
    opdint  := operator('%defint, 5)
    opfact  := operator('factorial, 1)
    opperm  := operator('permutation, 2)
    opbinom := operator('binomial, 2)
    oppow   := operator(POWER, 2)
    opsum   := operator('summation, 3)
    opdsum  := operator('%defsum, 5)
    opprod  := operator('product, 3)
    opdprod := operator('%defprod, 5)

    oprootsum := operator('%root_sum, 3)
    opfloor := operator('floor, 1)
    opceil := operator('ceil, 1)
    opreal := operator('real, 1)
    opimag := operator('imag, 1)
    opconjugate := operator('conjugate, 1)
    oparg := operator('arg, 1)
    opsign := operator('sign, 1)
    opDiracDelta := operator('diracDelta, 1)
    -- arbitrary arity
    opmax := operator('max)$BasicOperator
    opmin := operator('min)$BasicOperator

    algop   := [oproot, opalg]$List(OP)
    rtrigop := [opsin, opcos, optan, opcot, opsec, opcsc,
                         opasin, opacos, opatan, opacot, opasec, opacsc]
    htrigop := [opsinh, opcosh, optanh, opcoth, opsech, opcsch,
                   opasinh, opacosh, opatanh, opacoth, opasech, opacsch]
    trigop  := concat(rtrigop, htrigop)
    elemop  := concat(trigop, [oppi, oplog, opexp])
    primop  := [opei, opli, opsi, opci, opshi, opchi, operf, operfi, opli2,
                   opint, opdint, opfis, opfic, opiint]
    combop  := [opfact, opperm, opbinom, oppow,
                                         opsum, opdsum, opprod, opdprod]
    specop  := [opGamma, opGamma2, opBeta, opdigamma, oppolygamma, opabs,
               opfloor, opceil, opreal, opimag, opsign, opmax, opmin,
                 opDiracDelta, oparg, opconjugate, op_log_gamma,
                   op_eis, op_erfs, op_erfis,
                opBesselJ, opBesselY, opBesselI, opBesselK, opAiryAi, opAiryBi,
                 opAiryAiPrime, opAiryBiPrime, opLambertW, opPolylog,
                  opWeierstrassP, opWeierstrassPPrime, opWeierstrassZeta,
                   opWeierstrassSigma, opHypergeometricF, opMeijerG, _
    opWhittakerM, _
    opWhittakerW, _
    opAngerJ, _
    opWeberE, _
    opStruveH, _
    opStruveL, _
    opHankelH1, _
    opHankelH2, _
    opLommelS1, _
    opLommelS2, _
    opKummerM, _
    opKummerU, _
    opLegendreP, _
    opLegendreQ, _
    opKelvinBei, _
    opKelvinBer, _
    opKelvinKei, _
    opKelvinKer, _
    opEllipticK, _
    opEllipticE, _
    opEllipticE2, _
    opEllipticF, _
    opEllipticPi, _
    opJacobiSn, _
    opJacobiCn, _
    opJacobiDn, _
    opJacobiZeta, _
    opJacobiTheta, _
    opLerchPhi, _
    opRiemannZeta, _
    opCharlierC, _
    opHermiteH, _
    opJacobiP, _
    opLaguerreL, _
    opMeixnerM _
    ]
    -- opWeierstrassPInverse, _

    anyop   := [oppren, opdiff, opbox, opquote]
    allop   := concat(concat(concat(concat(concat(
                            algop, elemop), primop), combop), specop), anyop)

    -- odd and even single argument operators, must be maintained current!
    evenop := [opcos, opsec, opcosh, opsech, opabs, opDiracDelta]
    oddop  := [opsin, opcsc, optan, opcot, opasin, opacsc, opatan,
               opsinh, opcsch, optanh, opcoth, opasinh, opacsch, opatanh,
                opacoth, opsi, opshi, operf, operfi, opfis, opfic,
                 opsign, opreal, opimag]

-- operators whose second argument is a dummy variable
    dummyvarop1 := [opdiff, opalg, opint, oprootsum, opsum, opprod]
-- operators whose second and third arguments are dummy variables
    dummyvarop2 := [opdint, opdsum, opdprod]

    operator s ==
      if (deref brandNew?) then startUp false
      for op in allop repeat
        is?(op, s) => return copy op
      operator(s)$OP

    dpi l    == '%pi::O
    dfact x  == postfix("!"::Symbol::O, (ATOM(x)$Lisp => x; paren x))
    dquote l == prefix(quote(first(l)::O), rest l)
    dgamma l == prefix('Gamma::O, l)
    dEllipticE2(l : List O) : O == prefix('ellipticE::O, l)

    setDummyVar(op, n) == setProperty(op, DUMMYVAR, n pretend None)

    dexp x ==
      e := '%e::O
      x = 1::O => e
      e ^ x

    startUp b ==
      brandNew?() := b
      display(oppren, paren)
      display(opbox, commaSeparate)
      display(oppi, dpi)
      display(opexp, dexp)
      display(opGamma2, dgamma)
      display(opEllipticE2, dEllipticE2)
      display(opfact, dfact)
      display(opquote, dquote)
      display(opperm, (z1 : List O) : O +-> supersub('A::O, z1))
      display(opbinom, (z1 : List O) : O +-> binomial(first z1, second z1))
      display(oppow, (z1 : List O) : O +-> first(z1) ^ second(z1))
      display(opsum, (z1 : List O) : O +-> sum(first z1, second z1, third z1))
      display(opprod, (z1 : List O) : O +-> prod(first z1, second z1, third z1))
      display(opint, (z1 : List O) : O +-> int(first z1 * hconcat('d::O, second z1),
                                                   empty(), third z1))
      input(oppren, (z1 : List InputForm) : InputForm +-> convert concat(convert("("::Symbol)@InputForm,
                            concat(z1, convert(")"::Symbol)@InputForm)))
      input(oppow, (z1 : List InputForm) : InputForm +-> convert concat(convert("^"::Symbol)@InputForm, z1))
      input(oproot,
            (z1 : List InputForm) : InputForm +-> convert [convert("^"::Symbol)@InputForm, first z1, 1 / second z1])
      for op in algop   repeat assert(op, ALGOP)
      for op in rtrigop repeat assert(op, 'rtrig)
      for op in htrigop repeat assert(op, 'htrig)
      for op in trigop  repeat assert(op, 'trig)
      for op in elemop  repeat assert(op, 'elem)
      for op in primop  repeat assert(op, 'prim)
      for op in combop  repeat assert(op, 'comb)
      for op in specop  repeat assert(op, 'special)
      for op in anyop   repeat assert(op, 'any)
      for op in evenop  repeat assert(op, EVEN)
      for op in oddop   repeat assert(op, ODD)
      for op in dummyvarop1 repeat setDummyVar(op, 1)
      for op in dummyvarop2 repeat setDummyVar(op, 2)
      assert(oppren, 'linear)
      void

--Copyright (c) 1991-2002, The Numerical ALgorithms Group Ltd.
--All rights reserved.
--
--Redistribution and use in source and binary forms, with or without
--modification, are permitted provided that the following conditions are
--met:
--
--    - Redistributions of source code must retain the above copyright
--      notice, this list of conditions and the following disclaimer.
--
--    - Redistributions in binary form must reproduce the above copyright
--      notice, this list of conditions and the following disclaimer in
--      the documentation and/or other materials provided with the
--      distribution.
--
--    - Neither the name of The Numerical ALgorithms Group Ltd. nor the
--      names of its contributors may be used to endorse or promote products
--      derived from this software without specific prior written permission.
--
--THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
--IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
--TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
--PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
--OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
--EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
--PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
--PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
--LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
--NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
--SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

-- SPAD files for the functional world should be compiled in the
-- following order:
--
--   OP  kl  expr function
