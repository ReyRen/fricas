)abbrev package MAPPKG3 MappingPackage3
++ Description: various Currying operations.
MappingPackage3(A : SetCategory, B : SetCategory, C : SetCategory) : _
  MPcat == MPdef where
    NNI   ==>  NonNegativeInteger

    MPcat ==  with
        curryRight :   ((A, B)->C, B) -> (A ->C)
          ++\spad{curryRight(f, b)} is the function \spad{g} such that
          ++ \spad{g a = f(a, b)}.
        curryLeft :   ((A, B)->C, A) -> (B ->C)
          ++\spad{curryLeft(f, a)} is the function \spad{g}
          ++ such that \spad{g b = f(a, b)}.

        constantRight :   (A -> C)      -> ((A, B)->C)
          ++\spad{constantRight(f)} is the function \spad{g}
          ++ such that \spad{g (a, b)= f a}.
        constantLeft :   (B -> C)      -> ((A, B)->C)
          ++\spad{constantLeft(f)} is the function \spad{g}
          ++ such that \spad{g (a, b)= f b}.

        twist : ((A, B)->C)    -> ((B, A)->C)
          ++\spad{twist(f)} is the function \spad{g}
          ++ such that \spad{g (a, b)= f(b, a)}.

        "*":   (B->C, A->B) -> (A->C)
          ++\spad{f*g} is the function \spad{h}
          ++ such that \spad{h x= f(g x)}.


    MPdef == add

        import from MappingPackageInternalHacks3(A, B, C)

        a : A
        b : B
        c : C
        faa :  A -> A
        f0c :  ()-> C
        fac :  A -> C
        fbc :  B -> C
        fab :  A -> B
        fabc : (A, B)->C
        faac : (A, A)->C

        -- Fix left and right arguments as constants.
        curryRight(fabc, b) == (a : A) : C +-> fabc(a, b)
        curryLeft(fabc, a)  == (b : B) : C +-> fabc(a, b)

        -- Add left and right arguments which are ignored.
        constantRight fac     == (a : A, b : B) : C +-> fac a
        constantLeft fbc      == (a : A, b : B) : C +-> fbc b

        -- Combinators to rearrange arguments.
        twist fabc  == (b : B, a : A) : C +-> fabc(a, b)
        -- Functional composition
        fbc*fab == (a : A) : C +-> comp(fbc, fab, a)

--Copyright (c) 1991-2002, The Numerical ALgorithms Group Ltd.
--All rights reserved.
--
--Redistribution and use in source and binary forms, with or without
--modification, are permitted provided that the following conditions are
--met:
--
--    - Redistributions of source code must retain the above copyright
--      notice, this list of conditions and the following disclaimer.
--
--    - Redistributions in binary form must reproduce the above copyright
--      notice, this list of conditions and the following disclaimer in
--      the documentation and/or other materials provided with the
--      distribution.
--
--    - Neither the name of The Numerical ALgorithms Group Ltd. nor the
--      names of its contributors may be used to endorse or promote products
--      derived from this software without specific prior written permission.
--
--THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
--IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
--TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
--PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
--OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
--EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
--PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
--PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
--LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
--NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
--SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
