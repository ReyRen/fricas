6368                (|Dequeue| S)
|domain|
(((|Dequeue| |#1|)
  (|Join| (|DequeueAggregate| |#1|)
          (CATEGORY |domain| (SIGNATURE |dequeue| ($ (|List| |#1|)))))
  (|SetCategory|))
 (T |Dequeue|))
(|Join| (|DequeueAggregate| |#1|)
        (CATEGORY |domain| (SIGNATURE |dequeue| ($ (|List| |#1|)))))
"/git/fricas/src/algebra/DEQUEUE.spad"
((|dequeue| (*1 *1 *2)
  (AND (|isDomain| *2 (|List| *3)) (|ofCategory| *3 (|SetCategory|))
       (|isDomain| *1 (|Dequeue| *3)))))
((~=
  (((|Boolean|) $ $) NIL
   (OR (AND (|has| $ (|finiteAggregate|)) (|has| |#1| (|BasicType|)))
       (|has| |#1| (|SetCategory|)))))
 (|top| ((|#1| $) 24)) (|size?| (((|Boolean|) $ (|NonNegativeInteger|)) NIL))
 (|select|
  (($ (|Mapping| (|Boolean|) |#1|) $) NIL (|has| $ (|finiteAggregate|))))
 (|sample| (($) NIL T CONST)) (|rotate!| (($ $) NIL)) (|reverse!| (($ $) 29))
 (|removeDuplicates|
  (($ $) NIL (AND (|has| $ (|finiteAggregate|)) (|has| |#1| (|BasicType|)))))
 (|remove|
  (($ (|Mapping| (|Boolean|) |#1|) $) NIL (|has| $ (|finiteAggregate|)))
  (($ |#1| $) NIL
   (AND (|has| $ (|finiteAggregate|)) (|has| |#1| (|BasicType|)))))
 (|reduce|
  ((|#1| (|Mapping| |#1| |#1| |#1|) $) NIL (|has| $ (|finiteAggregate|)))
  ((|#1| (|Mapping| |#1| |#1| |#1|) $ |#1|) NIL (|has| $ (|finiteAggregate|)))
  ((|#1| (|Mapping| |#1| |#1| |#1|) $ |#1| |#1|) NIL
   (AND (|has| $ (|finiteAggregate|)) (|has| |#1| (|BasicType|)))))
 (|push!| ((|#1| |#1| $) 31)) (|pop!| ((|#1| $) 30))
 (|parts| (((|List| |#1|) $) NIL (|has| $ (|finiteAggregate|))))
 (|more?| (((|Boolean|) $ (|NonNegativeInteger|)) NIL))
 (|min|
  ((|#1| $) NIL
   (AND (|has| $ (|finiteAggregate|)) (|has| |#1| (|OrderedSet|)))))
 (|members| (((|List| |#1|) $) NIL (|has| $ (|finiteAggregate|))))
 (|member?|
  (((|Boolean|) |#1| $) NIL
   (AND (|has| $ (|finiteAggregate|)) (|has| |#1| (|BasicType|)))))
 (|max|
  ((|#1| (|Mapping| (|Boolean|) |#1| |#1|) $) NIL
   (|has| $ (|finiteAggregate|)))
  ((|#1| $) NIL
   (AND (|has| $ (|finiteAggregate|)) (|has| |#1| (|OrderedSet|)))))
 (|map!| (($ (|Mapping| |#1| |#1|) $) NIL (|has| $ (|shallowlyMutable|))))
 (|map| (($ (|Mapping| |#1| |#1|) $) NIL))
 (|less?| (((|Boolean|) $ (|NonNegativeInteger|)) NIL))
 (|latex| (((|String|) $) NIL (|has| |#1| (|SetCategory|))))
 (|inspect| ((|#1| $) NIL)) (|insertTop!| ((|#1| |#1| $) 26))
 (|insertBottom!| ((|#1| |#1| $) 28)) (|insert!| (($ |#1| $) NIL))
 (|hashUpdate!|
  (((|HashState|) (|HashState|) $) NIL (|has| |#1| (|SetCategory|))))
 (|hash| (((|SingleInteger|) $) NIL (|has| |#1| (|SetCategory|))))
 (|front| ((|#1| $) NIL))
 (|find| (((|Union| |#1| "failed") (|Mapping| (|Boolean|) |#1|) $) NIL))
 (|extractTop!| ((|#1| $) 25)) (|extractBottom!| ((|#1| $) 23))
 (|extract!| ((|#1| $) NIL))
 (|every?|
  (((|Boolean|) (|Mapping| (|Boolean|) |#1|) $) NIL
   (|has| $ (|finiteAggregate|))))
 (|eval|
  (($ $ (|List| (|Equation| |#1|))) NIL
   (AND (|has| |#1| (|Evalable| |#1|)) (|has| |#1| (|SetCategory|))))
  (($ $ (|Equation| |#1|)) NIL
   (AND (|has| |#1| (|Evalable| |#1|)) (|has| |#1| (|SetCategory|))))
  (($ $ |#1| |#1|) NIL
   (AND (|has| |#1| (|Evalable| |#1|)) (|has| |#1| (|SetCategory|))))
  (($ $ (|List| |#1|) (|List| |#1|)) NIL
   (AND (|has| |#1| (|Evalable| |#1|)) (|has| |#1| (|SetCategory|)))))
 (|eq?| (((|Boolean|) $ $) NIL)) (|enqueue!| ((|#1| |#1| $) NIL))
 (|empty?| (((|Boolean|) $) 9)) (|empty| (($) NIL)) (|dequeue!| ((|#1| $) NIL))
 (|dequeue| (($ (|List| |#1|)) 15))
 (|count|
  (((|NonNegativeInteger|) (|Mapping| (|Boolean|) |#1|) $) NIL
   (|has| $ (|finiteAggregate|)))
  (((|NonNegativeInteger|) |#1| $) NIL
   (AND (|has| $ (|finiteAggregate|)) (|has| |#1| (|BasicType|)))))
 (|copy| (($ $) NIL))
 (|convert|
  (((|InputForm|) $) NIL (|has| |#1| (|ConvertibleTo| (|InputForm|)))))
 (|construct| (($ (|List| |#1|)) 14))
 (|coerce|
  (((|OutputForm|) $) NIL (|has| |#1| (|CoercibleTo| (|OutputForm|)))))
 (|bottom| ((|#1| $) 13)) (|back| ((|#1| $) NIL))
 (|any?|
  (((|Boolean|) (|Mapping| (|Boolean|) |#1|) $) NIL
   (|has| $ (|finiteAggregate|))))
 (=
  (((|Boolean|) $ $) NIL
   (OR (AND (|has| $ (|finiteAggregate|)) (|has| |#1| (|BasicType|)))
       (|has| |#1| (|SetCategory|)))))
 (|#| (((|NonNegativeInteger|) $) NIL (|has| $ (|finiteAggregate|)))))
((|HasCategory| |#1| '(|SetCategory|))
 (AND (|HasCategory| |#1| (LIST '|Evalable| (|devaluate| |#1|)))
      (|HasCategory| |#1| '(|SetCategory|)))
 (|HasCategory| |#1| (LIST '|ConvertibleTo| '(|InputForm|)))
 (|HasCategory| |#1| '(|OrderedSet|)) (|HasCategory| |#1| '(|BasicType|))
 (OR (|HasCategory| |#1| '(|BasicType|)) (|HasCategory| |#1| '(|SetCategory|)))
 (|HasCategory| |#1| (LIST '|CoercibleTo| '(|OutputForm|)))
 (OR (|HasCategory| |#1| (LIST '|CoercibleTo| '(|OutputForm|)))
     (AND (|HasCategory| |#1| (LIST '|Evalable| (|devaluate| |#1|)))
          (|HasCategory| |#1| '(|SetCategory|))))
 (|HasCategory| $ '(|shallowlyMutable|)) (|HasCategory| $ '(|finiteAggregate|))
 (AND (|HasCategory| |#1| '(|OrderedSet|))
      (|HasCategory| $ '(|finiteAggregate|)))
 (AND (|HasCategory| |#1| '(|BasicType|))
      (|HasCategory| $ '(|finiteAggregate|)))
 (OR
  (AND (|HasCategory| |#1| '(|BasicType|))
       (|HasCategory| $ '(|finiteAggregate|)))
  (|HasCategory| |#1| '(|SetCategory|))))
DEQUEUE
(((|DequeueAggregate| |#1|) . T))
(((|Aggregate|) . T) ((|BagAggregate| |t#1|) . T)
 ((|BasicType|) OR (|has| |t#1| (|SetCategory|))
  (AND (|has| $ (|finiteAggregate|)) (|has| |t#1| (|BasicType|))))
 ((|CoercibleTo| (|OutputForm|)) |has| |t#1| (|CoercibleTo| (|OutputForm|)))
 ((|Collection| |t#1|) . T)
 ((|ConvertibleTo| (|InputForm|)) |has| |t#1| (|ConvertibleTo| (|InputForm|)))
 ((|DequeueAggregate| |#1|) . T)
 ((|Evalable| |t#1|) AND (|has| |t#1| (|Evalable| |t#1|))
  (|has| |t#1| (|SetCategory|)))
 ((|HomogeneousAggregate| |t#1|) . T)
 ((|InnerEvalable| |t#1| |t#1|) AND (|has| |t#1| (|Evalable| |t#1|))
  (|has| |t#1| (|SetCategory|)))
 ((|QueueAggregate| |t#1|) . T) ((|SetCategory|) |has| |t#1| (|SetCategory|))
 ((|StackAggregate| |t#1|) . T) ((|Type|) . T) ((|finiteAggregate|) . T)
 ((|shallowlyMutable|) . T))
((|constructor| (NIL "Linked list implementation of a Dequeue"))
 (|dequeue|
  (($ (|List| |#1|))
   "\\spad{dequeue([x,{} y,{} ...,{} z])} creates a dequeue with first (top or front) element \\spad{x},{} second element \\spad{y},{} ...,{} and last (bottom or back) element \\spad{z}.")))
(("documentation" 0 6079) ("ancestors" 0 5285) ("parents" 0 5251)
 ("abbreviation" 0 5243) ("predicates" 0 4242) ("superDomain" 0 NIL)
 ("operationAlist" 0 479) ("modemaps" 0 346) ("sourceFile" 0 307)
 ("constructorCategory" 0 204) ("constructorModemap" 0 43)
 ("constructorKind" 0 34) ("constructorForm" 0 20))