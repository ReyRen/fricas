)abbrev package FSRED FunctionSpaceReduce
++ Reduction from a function space to the rational numbers
++ Author: Manuel Bronstein
++ Date Created: 1988
++ Description:
++ This package provides function which replaces transcendental kernels
++ in a function space by random integers. The correspondence between
++ the kernels and the integers is fixed between calls to newReduc().
++ Keywords: function, space, redcution.
FunctionSpaceReduce(R, F) : Exports == Implementation where
  R : Join(Comparable, IntegralDomain, RetractableTo Integer)
  F : FunctionSpace R

  Z   ==> Integer
  Q   ==> Fraction Integer
  UP  ==> SparseUnivariatePolynomial Q
  K   ==> Kernel F

  Exports ==> with
    bringDown : F -> Q
        ++ bringDown(f) replaces transcendental kernels in f
        ++ by random integers.  Error if f contains algebraic
        ++ kernel.
    bringDown : (F, K) -> UP
        ++ bringDown(f, k) is like bringDown(f) but k is
        ++ algebraic kernel and the result is reduced modulo
        ++ minimal polynomial of k.
    newReduc : Integer -> Void
        ++ newReduc(n) empties reduction state.  n is size
        ++ of random integers to use during next reduction.

  Implementation ==> add
    import from SparseUnivariatePolynomialFunctions2(F, Q)
    import from PolynomialCategoryQuotientFunctions(IndexedExponents K,
                         K, R, SparseMultivariatePolynomial(R, K), F)

    ALGOP  := '%alg

    K2Z : K -> F

    redmap := table()$AssociationList(K, Z)
    nn : Integer := 10^6

    newReduc(n) ==
      nn := n
      for k in keys redmap repeat remove!(k, redmap)

    bringDown(f, k) ==
      ff := univariate(f, k)
      (bc := extendedEuclidean(map(bringDown, denom ff),
                m := map(bringDown, minPoly k), 1)) case "failed" =>
                     error "denominator is 0"
      (map(bringDown, numer ff) * bc.coef1) rem m

    bringDown f ==
      retract(eval(f, lk := kernels f, [K2Z k for k in lk]))@Q

    K2Z k ==
      has?(operator k, ALGOP) => error "Cannot reduce constant field"
      (u := search(k, redmap)) case "failed" =>
                                      setelt!(redmap, k, random(nn)$Z)::F
      u::Z::F

