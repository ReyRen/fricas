6994                (|PAdicIntegerCategory| |p|)
|category|
(((|PAdicIntegerCategory| |#1|) (|Category|) (|Integer|))
 (T |PAdicIntegerCategory|))
(|Join| (|EuclideanDomain|) (|CharacteristicZero|)
        (CATEGORY |domain| (SIGNATURE |digits| ((|Stream| (|Integer|)) $))
         (SIGNATURE |order| ((|NonNegativeInteger|) $))
         (SIGNATURE |extend| ($ $ (|Integer|))) (SIGNATURE |complete| ($ $))
         (SIGNATURE |modulus| ((|Integer|)))
         (SIGNATURE |moduloP| ((|Integer|) $)) (SIGNATURE |quotientByP| ($ $))
         (SIGNATURE |approximate| ((|Integer|) $ (|Integer|)))
         (SIGNATURE |sqrt| ($ $ (|Integer|)))
         (SIGNATURE |root|
          ($ (|SparseUnivariatePolynomial| (|Integer|)) (|Integer|)))))
"/git/fricas/src/algebra/PADICCT.spad"
((|digits| (*1 *2 *1)
  (AND (|ofCategory| *1 (|PAdicIntegerCategory| *3))
       (|isDomain| *2 (|Stream| (|Integer|)))))
 (|order| (*1 *2 *1)
  (AND (|ofCategory| *1 (|PAdicIntegerCategory| *3))
       (|isDomain| *2 (|NonNegativeInteger|))))
 (|extend| (*1 *1 *1 *2)
  (AND (|ofCategory| *1 (|PAdicIntegerCategory| *3))
       (|isDomain| *2 (|Integer|))))
 (|complete| (*1 *1 *1) (|ofCategory| *1 (|PAdicIntegerCategory| *2)))
 (|modulus| (*1 *2)
  (AND (|ofCategory| *1 (|PAdicIntegerCategory| *3))
       (|isDomain| *2 (|Integer|))))
 (|moduloP| (*1 *2 *1)
  (AND (|ofCategory| *1 (|PAdicIntegerCategory| *3))
       (|isDomain| *2 (|Integer|))))
 (|quotientByP| (*1 *1 *1) (|ofCategory| *1 (|PAdicIntegerCategory| *2)))
 (|approximate| (*1 *2 *1 *2)
  (AND (|ofCategory| *1 (|PAdicIntegerCategory| *3))
       (|isDomain| *2 (|Integer|))))
 (|sqrt| (*1 *1 *1 *2)
  (AND (|ofCategory| *1 (|PAdicIntegerCategory| *3))
       (|isDomain| *2 (|Integer|))))
 (|root| (*1 *1 *2 *3)
  (AND (|isDomain| *2 (|SparseUnivariatePolynomial| (|Integer|)))
       (|isDomain| *3 (|Integer|))
       (|ofCategory| *1 (|PAdicIntegerCategory| *4)))))
((~= (((|Boolean|) $ $) 6)) (|zero?| (((|Boolean|) $) 6))
 (|unitNormal|
  (((|Record| (|:| |unit| $) (|:| |canonical| $) (|:| |associate| $)) $) 6))
 (|unitCanonical| (($ $) 6)) (|unit?| (((|Boolean|) $) 6))
 (|subtractIfCan| (((|Union| $ "failed") $ $) 6))
 (|sqrt| (($ $ (|Integer|)) 6)) (|sizeLess?| (((|Boolean|) $ $) 6))
 (|sample| (($) 6 T CONST))
 (|root| (($ (|SparseUnivariatePolynomial| (|Integer|)) (|Integer|)) 6))
 (|rightRecip| (((|Union| $ #1="failed") $) 6))
 (|rightPower| (($ $ (|PositiveInteger|)) 6) (($ $ (|NonNegativeInteger|)) 6))
 (|rem| (($ $ $) 6)) (|recip| (((|Union| $ #1#) $) 6))
 (|quotientByP| (($ $) 6)) (|quo| (($ $ $) 6))
 (|principalIdeal|
  (((|Record| (|:| |coef| (|List| $)) (|:| |generator| $)) (|List| $)) 6))
 (|order| (((|NonNegativeInteger|) $) 6)) (|opposite?| (((|Boolean|) $ $) 6))
 (|one?| (((|Boolean|) $) 6))
 (|multiEuclidean| (((|Union| (|List| $) #2="failed") (|List| $) $) 6))
 (|modulus| (((|Integer|)) 6)) (|moduloP| (((|Integer|) $) 6))
 (|leftRecip| (((|Union| $ #1#) $) 6))
 (|leftPower| (($ $ (|PositiveInteger|)) 6) (($ $ (|NonNegativeInteger|)) 6))
 (|lcmCoef|
  (((|Record| (|:| |llcm_res| $) (|:| |coeff1| $) (|:| |coeff2| $)) $ $) 6))
 (|lcm| (($ $ $) 6) (($ (|List| $)) 6)) (|latex| (((|String|) $) 6))
 (|hashUpdate!| (((|HashState|) (|HashState|) $) 6))
 (|hash| (((|SingleInteger|) $) 6))
 (|gcdPolynomial|
  (((|SparseUnivariatePolynomial| $) (|SparseUnivariatePolynomial| $)
    (|SparseUnivariatePolynomial| $))
   6))
 (|gcd| (($ $ $) 6) (($ (|List| $)) 6))
 (|extendedEuclidean|
  (((|Record| (|:| |coef1| $) (|:| |coef2| $) (|:| |generator| $)) $ $) 6)
  (((|Union| (|Record| (|:| |coef1| $) (|:| |coef2| $)) #2#) $ $ $) 6))
 (|extend| (($ $ (|Integer|)) 6)) (|exquo| (((|Union| $ "failed") $ $) 6))
 (|expressIdealMember| (((|Union| (|List| $) "failed") (|List| $) $) 6))
 (|euclideanSize| (((|NonNegativeInteger|) $) 6))
 (|divide| (((|Record| (|:| |quotient| $) (|:| |remainder| $)) $ $) 6))
 (|digits| (((|Stream| (|Integer|)) $) 6)) (|complete| (($ $) 6))
 (|commutator| (($ $ $) 6))
 (|coerce| (((|OutputForm|) $) 6) (($ (|Integer|)) 6) (($ $) 6))
 (|characteristic| (((|NonNegativeInteger|)) 6)) (|associator| (($ $ $ $) 6))
 (|associates?| (((|Boolean|) $ $) 6))
 (|approximate| (((|Integer|) $ (|Integer|)) 6)) (|antiCommutator| (($ $ $) 6))
 (|annihilate?| (((|Boolean|) $ $) 6))
 (^ (($ $ (|PositiveInteger|)) 6) (($ $ (|NonNegativeInteger|)) 6))
 (|Zero| (($) 6 T CONST)) (|One| (($) 6 T CONST)) (= (((|Boolean|) $ $) 6))
 (- (($ $ $) 6) (($ $) 6)) (+ (($ $ $) 6))
 (* (($ (|PositiveInteger|) $) 6) (($ $ $) 6) (($ (|Integer|) $) 6)
    (($ (|NonNegativeInteger|) $) 6)))
PADICCT
(((|EuclideanDomain|) . T) ((|CharacteristicZero|) . T))
(((|AbelianGroup|) . T) ((|AbelianMonoid|) . T) ((|AbelianSemiGroup|) . T)
 ((|Algebra| $) . T) ((|BasicType|) . T) ((|BiModule| |t#1| |t#1|) . T)
 ((|BiModule| $ $) . T) ((|CancellationAbelianMonoid|) . T)
 ((|CharacteristicZero|) . T) ((|CoercibleTo| (|OutputForm|)) . T)
 ((|CommutativeRing|) . T) ((|CommutativeStar|) . T) ((|EntireRing|) . T)
 ((|EuclideanDomain|) . T) ((|GcdDomain|) . T) ((|IntegralDomain|) . T)
 ((|LeftModule| |t#1|) . T) ((|LeftOreRing|) . T) ((|Magma|) . T)
 ((|MagmaWithUnit|) . T) ((|Module| |t#1|) . T) ((|Monoid|) . T)
 ((|NonAssociativeRing|) . T) ((|NonAssociativeRng|) . T)
 ((|NonAssociativeSemiRing|) . T) ((|NonAssociativeSemiRng|) . T)
 ((|PrincipalIdealDomain|) . T) ((|RightModule| |t#2|) . T) ((|Ring|) . T)
 ((|Rng|) . T) ((|SemiGroup|) . T) ((|SemiRing|) . T) ((|SemiRng|) . T)
 ((|SetCategory|) . T) ((|TwoSidedRecip|) . T) ((|noZeroDivisors|) . T)
 ((|unitsKnown|) . T))
((|constructor|
  (NIL
   "This is the catefory of stream-based representations of \\indented{2}{the \\spad{p}-adic integers.}"))
 (|root|
  (($ (|SparseUnivariatePolynomial| (|Integer|)) (|Integer|))
   "\\spad{root(f,{} a)} returns a root of the polynomial \\spad{f}. Argument \\spad{a} must be a root of \\spad{f} \\spad{(mod p)}."))
 (|sqrt|
  (($ $ (|Integer|))
   "\\spad{sqrt(b,{} a)} returns a square root of \\spad{b}. Argument \\spad{a} is a square root of \\spad{b} \\spad{(mod p)}."))
 (|approximate|
  (((|Integer|) $ (|Integer|))
   "\\spad{approximate(x,{} n)} returns an integer \\spad{y} such that \\spad{y = x (mod p^n)} when \\spad{n} is positive,{} and 0 otherwise."))
 (|quotientByP|
  (($ $)
   "\\spad{quotientByP(x)} returns \\spad{b},{} where \\spad{x = a + b p}."))
 (|moduloP|
  (((|Integer|) $)
   "\\spad{modulo(x)} returns a,{} where \\spad{x = a + b p}."))
 (|modulus|
  (((|Integer|)) "\\spad{modulus()} returns the value of \\spad{p}."))
 (|complete|
  (($ $) "\\spad{complete(x)} forces the computation of all digits."))
 (|extend|
  (($ $ (|Integer|))
   "\\spad{extend(x,{} n)} forces the computation of digits up to order \\spad{n}."))
 (|order|
  (((|NonNegativeInteger|) $)
   "\\spad{order(x)} returns the exponent of the highest power of \\spad{p} dividing \\spad{x}."))
 (|digits|
  (((|Stream| (|Integer|)) $)
   "\\spad{digits(x)} returns a stream of \\spad{p}-adic digits of \\spad{x}.")))
(("documentation" 0 5559) ("ancestors" 0 4642) ("parents" 0 4585)
 ("abbreviation" 0 4577) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 1918) ("modemaps" 0 777) ("sourceFile" 0 738)
 ("constructorCategory" 0 147) ("constructorModemap" 0 60)
 ("constructorKind" 0 49) ("constructorForm" 0 20))