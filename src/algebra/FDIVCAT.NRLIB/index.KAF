7950                (|FiniteDivisorCategory| F UP UPUP R)
|category|
(((|FiniteDivisorCategory| |#1| |#2| |#3| |#4|) (|Category|) (|Field|)
  (|UnivariatePolynomialCategory| |t#1|)
  (|UnivariatePolynomialCategory| (|Fraction| |t#2|))
  (|FunctionFieldCategory| |t#1| |t#2| |t#3|))
 (T |FiniteDivisorCategory|))
(|Join| (|AbelianGroup|)
        (CATEGORY |domain|
         (SIGNATURE |ideal|
          ((|FractionalIdeal| |t#2| (|Fraction| |t#2|) |t#3| |t#4|) $))
         (SIGNATURE |divisor|
          ($ (|FractionalIdeal| |t#2| (|Fraction| |t#2|) |t#3| |t#4|)))
         (SIGNATURE |divisor| ($ |t#4|)) (SIGNATURE |divisor| ($ |t#1| |t#1|))
         (SIGNATURE |divisor| ($ |t#1| |t#1| (|Integer|)))
         (SIGNATURE |decompose|
          ((|Record|
            (|:| |id| (|FractionalIdeal| |t#2| (|Fraction| |t#2|) |t#3| |t#4|))
            (|:| |principalPart| |t#4|))
           $))
         (SIGNATURE |reduce| ($ $)) (SIGNATURE |principal?| ((|Boolean|) $))
         (SIGNATURE |generator| ((|Union| |t#4| "failed") $))
         (SIGNATURE |divisor| ($ |t#4| |t#2| |t#2| |t#2| |t#1|))))
"/git/fricas/src/algebra/FDIVCAT.spad"
((|ideal| (*1 *2 *1)
  (AND (|ofCategory| *1 (|FiniteDivisorCategory| *3 *4 *5 *6))
       (|ofCategory| *3 (|Field|))
       (|ofCategory| *4 (|UnivariatePolynomialCategory| *3))
       (|ofCategory| *5 (|UnivariatePolynomialCategory| (|Fraction| *4)))
       (|ofCategory| *6 (|FunctionFieldCategory| *3 *4 *5))
       (|isDomain| *2 (|FractionalIdeal| *4 (|Fraction| *4) *5 *6))))
 (|divisor| (*1 *1 *2)
  (AND (|isDomain| *2 (|FractionalIdeal| *4 (|Fraction| *4) *5 *6))
       (|ofCategory| *4 (|UnivariatePolynomialCategory| *3))
       (|ofCategory| *5 (|UnivariatePolynomialCategory| (|Fraction| *4)))
       (|ofCategory| *6 (|FunctionFieldCategory| *3 *4 *5))
       (|ofCategory| *3 (|Field|))
       (|ofCategory| *1 (|FiniteDivisorCategory| *3 *4 *5 *6))))
 (|divisor| (*1 *1 *2)
  (AND (|ofCategory| *3 (|Field|))
       (|ofCategory| *4 (|UnivariatePolynomialCategory| *3))
       (|ofCategory| *5 (|UnivariatePolynomialCategory| (|Fraction| *4)))
       (|ofCategory| *1 (|FiniteDivisorCategory| *3 *4 *5 *2))
       (|ofCategory| *2 (|FunctionFieldCategory| *3 *4 *5))))
 (|divisor| (*1 *1 *2 *2)
  (AND (|ofCategory| *2 (|Field|))
       (|ofCategory| *3 (|UnivariatePolynomialCategory| *2))
       (|ofCategory| *4 (|UnivariatePolynomialCategory| (|Fraction| *3)))
       (|ofCategory| *1 (|FiniteDivisorCategory| *2 *3 *4 *5))
       (|ofCategory| *5 (|FunctionFieldCategory| *2 *3 *4))))
 (|divisor| (*1 *1 *2 *2 *3)
  (AND (|isDomain| *3 (|Integer|)) (|ofCategory| *2 (|Field|))
       (|ofCategory| *4 (|UnivariatePolynomialCategory| *2))
       (|ofCategory| *5 (|UnivariatePolynomialCategory| (|Fraction| *4)))
       (|ofCategory| *1 (|FiniteDivisorCategory| *2 *4 *5 *6))
       (|ofCategory| *6 (|FunctionFieldCategory| *2 *4 *5))))
 (|decompose| (*1 *2 *1)
  (AND (|ofCategory| *1 (|FiniteDivisorCategory| *3 *4 *5 *6))
       (|ofCategory| *3 (|Field|))
       (|ofCategory| *4 (|UnivariatePolynomialCategory| *3))
       (|ofCategory| *5 (|UnivariatePolynomialCategory| (|Fraction| *4)))
       (|ofCategory| *6 (|FunctionFieldCategory| *3 *4 *5))
       (|isDomain| *2
                   (|Record|
                    (|:| |id| (|FractionalIdeal| *4 (|Fraction| *4) *5 *6))
                    (|:| |principalPart| *6)))))
 (|reduce| (*1 *1 *1)
  (AND (|ofCategory| *1 (|FiniteDivisorCategory| *2 *3 *4 *5))
       (|ofCategory| *2 (|Field|))
       (|ofCategory| *3 (|UnivariatePolynomialCategory| *2))
       (|ofCategory| *4 (|UnivariatePolynomialCategory| (|Fraction| *3)))
       (|ofCategory| *5 (|FunctionFieldCategory| *2 *3 *4))))
 (|principal?| (*1 *2 *1)
  (AND (|ofCategory| *1 (|FiniteDivisorCategory| *3 *4 *5 *6))
       (|ofCategory| *3 (|Field|))
       (|ofCategory| *4 (|UnivariatePolynomialCategory| *3))
       (|ofCategory| *5 (|UnivariatePolynomialCategory| (|Fraction| *4)))
       (|ofCategory| *6 (|FunctionFieldCategory| *3 *4 *5))
       (|isDomain| *2 (|Boolean|))))
 (|generator| (*1 *2 *1)
  (|partial| AND (|ofCategory| *1 (|FiniteDivisorCategory| *3 *4 *5 *2))
   (|ofCategory| *3 (|Field|))
   (|ofCategory| *4 (|UnivariatePolynomialCategory| *3))
   (|ofCategory| *5 (|UnivariatePolynomialCategory| (|Fraction| *4)))
   (|ofCategory| *2 (|FunctionFieldCategory| *3 *4 *5))))
 (|divisor| (*1 *1 *2 *3 *3 *3 *4)
  (AND (|ofCategory| *4 (|Field|))
       (|ofCategory| *3 (|UnivariatePolynomialCategory| *4))
       (|ofCategory| *5 (|UnivariatePolynomialCategory| (|Fraction| *3)))
       (|ofCategory| *1 (|FiniteDivisorCategory| *4 *3 *5 *2))
       (|ofCategory| *2 (|FunctionFieldCategory| *4 *3 *5)))))
((~= (((|Boolean|) $ $) 6)) (|zero?| (((|Boolean|) $) 6))
 (|subtractIfCan| (((|Union| $ "failed") $ $) 6)) (|sample| (($) 6 T CONST))
 (|reduce| (($ $) 6)) (|principal?| (((|Boolean|) $) 6))
 (|opposite?| (((|Boolean|) $ $) 6)) (|latex| (((|String|) $) 6))
 (|ideal| (((|FractionalIdeal| |#2| (|Fraction| |#2|) |#3| |#4|) $) 6))
 (|hashUpdate!| (((|HashState|) (|HashState|) $) 6))
 (|hash| (((|SingleInteger|) $) 6))
 (|generator| (((|Union| |#4| "failed") $) 6))
 (|divisor| (($ (|FractionalIdeal| |#2| (|Fraction| |#2|) |#3| |#4|)) 6)
  (($ |#4|) 6) (($ |#1| |#1|) 6) (($ |#1| |#1| (|Integer|)) 6)
  (($ |#4| |#2| |#2| |#2| |#1|) 6))
 (|decompose|
  (((|Record| (|:| |id| (|FractionalIdeal| |#2| (|Fraction| |#2|) |#3| |#4|))
              (|:| |principalPart| |#4|))
    $)
   6))
 (|coerce| (((|OutputForm|) $) 6)) (|Zero| (($) 6 T CONST))
 (= (((|Boolean|) $ $) 6)) (- (($ $) 6) (($ $ $) 6)) (+ (($ $ $) 6))
 (* (($ (|PositiveInteger|) $) 6) (($ (|NonNegativeInteger|) $) 6)
    (($ (|Integer|) $) 6)))
FDIVCAT
(((|AbelianGroup|) . T))
(((|AbelianGroup|) . T) ((|AbelianMonoid|) . T) ((|AbelianSemiGroup|) . T)
 ((|BasicType|) . T) ((|CancellationAbelianMonoid|) . T)
 ((|CoercibleTo| (|OutputForm|)) . T) ((|SetCategory|) . T))
((|constructor|
  (NIL
   "This category describes finite rational divisors on a curve,{} that is finite formal sums SUM(\\spad{n} * \\spad{P}) where the \\spad{n}\\spad{'s} are integers and the \\spad{P}\\spad{'s} are finite rational points on the curve."))
 (|generator|
  (((|Union| |#4| "failed") $)
   "\\spad{generator(d)} returns \\spad{f} if \\spad{(f) = d},{} \"failed\" if \\spad{d} is not principal."))
 (|principal?|
  (((|Boolean|) $)
   "\\spad{principal?(D)} tests if the argument is the divisor of a function."))
 (|reduce|
  (($ $)
   "\\spad{reduce(D)} converts \\spad{D} to some reduced form (the reduced forms can be differents in different implementations)."))
 (|decompose|
  (((|Record| (|:| |id| (|FractionalIdeal| |#2| (|Fraction| |#2|) |#3| |#4|))
              (|:| |principalPart| |#4|))
    $)
   "\\spad{decompose(d)} returns \\spad{[id,{} f]} where \\spad{d = (id) + div(f)}."))
 (|divisor|
  (($ |#4| |#2| |#2| |#2| |#1|)
   "\\spad{divisor(h,{} d,{} d',{} g,{} r)} returns the sum of all the finite points where \\spad{h/d} has residue \\spad{r}. \\spad{h} must be integral. \\spad{d} must be squarefree. \\spad{d'} is some derivative of \\spad{d} (not necessarily dd/dx). \\spad{g = gcd(d,{} discriminant)} contains the ramified zeros of \\spad{d}")
  (($ |#1| |#1| (|Integer|))
   "\\spad{divisor(a,{} b,{} n)} makes the divisor \\spad{nP} where \\spad{P:} \\spad{(x = a,{} y = b)}. \\spad{P} is allowed to be singular if \\spad{n} is a multiple of the rank.")
  (($ |#1| |#1|)
   "\\spad{divisor(a,{} b)} makes the divisor \\spad{P:} \\spad{(x = a,{} y = b)}. Error: if \\spad{P} is singular.")
  (($ |#4|)
   "\\spad{divisor(g)} returns the divisor of the function \\spad{g}.")
  (($ (|FractionalIdeal| |#2| (|Fraction| |#2|) |#3| |#4|))
   "\\spad{divisor(I)} makes a divisor \\spad{D} from an ideal \\spad{I}."))
 (|ideal|
  (((|FractionalIdeal| |#2| (|Fraction| |#2|) |#3| |#4|) $)
   "\\spad{ideal(D)} returns the ideal corresponding to a divisor \\spad{D}.")))
(("documentation" 0 5947) ("ancestors" 0 5754) ("parents" 0 5729)
 ("abbreviation" 0 5721) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 4711) ("modemaps" 0 1138) ("sourceFile" 0 1099)
 ("constructorCategory" 0 312) ("constructorModemap" 0 69)
 ("constructorKind" 0 58) ("constructorForm" 0 20))