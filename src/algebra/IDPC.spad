)abbrev category IDPC IndexedDirectProductCategory
++ Author: James Davenport
++ Basic Functions:
++ Related Constructors:
++ Also See:
++ AMS Classifications:
++ Keywords:
++ References:
++ Description:
++ This category represents the direct product of some set with
++ respect to an ordered indexing set.
++ The ordered set \spad{S} is considered as the ``basis elements'' and
++ the elements from \spad{A} as ``coefficients''.

IndexedDirectProductCategory(A : SetCategory, S : SetCategory
                            ) : Category == Export where
  Term ==> Record(k : S, c : A)

  Export ==  AbelianProductCategory(A) with

      if A has Comparable and S has Comparable then Comparable
      if S has OrderedSet then
          if A has OrderedAbelianMonoid then OrderedAbelianMonoid
          if A has OrderedAbelianMonoidSup then OrderedAbelianMonoidSup

      map :           (A -> A, %) -> %
         ++ map(f, z) returns the new element created by applying the
         ++ function f to each component of the direct product element z.
      monomial :         (A, S) -> %
         ++ monomial(a, s) constructs a direct product element with the s
         ++ component set to \spad{a}
      monomial? : % -> Boolean
         ++ \spad{monomial?(x)} returns true if \spad{x} is a single
         ++ monomial, that is support of \spad{x} consists of a
         ++ single element.
      construct : List Term -> %
         ++ \spad{construct(l)} takes a list of terms and creates
         ++ the object with these components.  First components
         ++ of elements of \spad{l} should be different.
      listOfTerms : % -> List Term
         ++ \spad{listOfTerms(x)} returns a list \spad{lt} of terms with type
         ++ \spad{Record(k: S, c: R)} such that \spad{x} equals
         ++ \spad{construct(lt)}.  If \spad{S has Comparable} than
         ++ \spad{x} equals \spad{constructOrdered(lt)}.
      numberOfMonomials  : % -> NonNegativeInteger
         ++ \spad{numberOfMonomials(x)} returns the number
         ++ of monomials of \spad{x}.
      if S has Comparable then
          leadingMonomial    : % -> %
             ++ \spad{leadingMonomial(x)} returns the monomial supported by
             ++ the first element from \spad{S}.  Error: if x has no support.
          leadingCoefficient :   % -> A
             ++ leadingCoefficient(z) returns the coefficient of the leading
             ++ (with respect to the ordering on the indexing set)
             ++ monomial of z.
             ++ Error: if z has no support.
          leadingSupport :   % -> S
             ++ leadingSupport(z) returns the index of leading (with respect
             ++ to the ordering on the indexing set) monomial of z.
             ++ Error: if z has no support.
          reductum :      % -> %
             ++ \spad{reductum(z)} returns a new element created by removing
             ++ the leading coefficient/support pair from the element z.
             ++ Error: if z has no support.
          constructOrdered : List Term -> %
             ++ \spad{constructOrdered(l)} takes a list of terms and creates
             ++ the object with these components.
             ++ The list is assumed to be sorted (in reverse order) with
             ++ respect to the ordering of S.  If R is a monoid, then the
             ++ list is assumend to contain no zero elements.
             ++ Caution: No checking is performed, so this should only be
             ++ used in cases where those conditions are assured. If in
             ++ doubt use \spad{construct}.
          leadingTerm : % -> Term
             ++ \spad{leadingTerm(x)} returns the leading
             ++ (with respect to the ordering on the indexing set) term of z.
             ++ Error: if z has no support.

