12621               (|CliffordAlgebra| |n| K |bLin|)
|domain|
(((|CliffordAlgebra| |#1| |#2| |#3|)
  (|Join| (|Ring|) (|Algebra| |#2|)
          (CATEGORY |domain| (SIGNATURE |e| ($ (|PositiveInteger|)))
           (SIGNATURE |ee| ($ (|List| (|PositiveInteger|))))
           (SIGNATURE |multivector| ($ (|List| |#2|)))
           (SIGNATURE |eFromBinaryMap| ($ (|NonNegativeInteger|)))
           (SIGNATURE |ePseudoscalar| ($))
           (SIGNATURE |grade| ((|NonNegativeInteger|) $))
           (SIGNATURE |monomial| ($ |#2| (|List| (|PositiveInteger|))))
           (SIGNATURE |coefficient| (|#2| $ (|List| (|PositiveInteger|))))
           (SIGNATURE |recip| ((|Union| $ "failed") $))
           (SIGNATURE |toTable| ((|Matrix| $) (|Mapping| $ $ $)))
           (SIGNATURE |toTable| ((|Matrix| $) (|Mapping| $ $)))
           (SIGNATURE |/\\| ($ $ $)) (SIGNATURE |\\/| ($ $ $))
           (SIGNATURE |lc| ($ $ $)) (SIGNATURE |rc| ($ $ $))
           (SIGNATURE ~ ($ $)) (SIGNATURE |gradeInvolution| ($ $))
           (SIGNATURE |reverse| ($ $)) (SIGNATURE |conj| ($ $))
           (SIGNATURE |setMode| ((|Boolean|) (|String|) (|Boolean|)))))
  (|PositiveInteger|) (|Field|) (|SquareMatrix| |#1| |#2|))
 (T |CliffordAlgebra|))
(|Join| (|Ring|) (|Algebra| |#2|)
        (CATEGORY |domain| (SIGNATURE |e| ($ (|PositiveInteger|)))
         (SIGNATURE |ee| ($ (|List| (|PositiveInteger|))))
         (SIGNATURE |multivector| ($ (|List| |#2|)))
         (SIGNATURE |eFromBinaryMap| ($ (|NonNegativeInteger|)))
         (SIGNATURE |ePseudoscalar| ($))
         (SIGNATURE |grade| ((|NonNegativeInteger|) $))
         (SIGNATURE |monomial| ($ |#2| (|List| (|PositiveInteger|))))
         (SIGNATURE |coefficient| (|#2| $ (|List| (|PositiveInteger|))))
         (SIGNATURE |recip| ((|Union| $ "failed") $))
         (SIGNATURE |toTable| ((|Matrix| $) (|Mapping| $ $ $)))
         (SIGNATURE |toTable| ((|Matrix| $) (|Mapping| $ $)))
         (SIGNATURE |/\\| ($ $ $)) (SIGNATURE |\\/| ($ $ $))
         (SIGNATURE |lc| ($ $ $)) (SIGNATURE |rc| ($ $ $)) (SIGNATURE ~ ($ $))
         (SIGNATURE |gradeInvolution| ($ $)) (SIGNATURE |reverse| ($ $))
         (SIGNATURE |conj| ($ $))
         (SIGNATURE |setMode| ((|Boolean|) (|String|) (|Boolean|)))))
"/git/fricas/src/algebra/CLIF.spad"
((|recip| (*1 *1 *1)
  (|partial| AND (|isDomain| *1 (|CliffordAlgebra| *2 *3 *4))
   (|ofType| *2 (|PositiveInteger|)) (|ofCategory| *3 (|Field|))
   (|ofType| *4 (|SquareMatrix| *2 *3))))
 (|e| (*1 *1 *2)
  (AND (|isDomain| *2 (|PositiveInteger|))
       (|isDomain| *1 (|CliffordAlgebra| *3 *4 *5)) (|ofType| *3 *2)
       (|ofCategory| *4 (|Field|)) (|ofType| *5 (|SquareMatrix| *3 *4))))
 (|ee| (*1 *1 *2)
  (AND (|isDomain| *2 (|List| (|PositiveInteger|)))
       (|isDomain| *1 (|CliffordAlgebra| *3 *4 *5))
       (|ofType| *3 (|PositiveInteger|)) (|ofCategory| *4 (|Field|))
       (|ofType| *5 (|SquareMatrix| *3 *4))))
 (|multivector| (*1 *1 *2)
  (AND (|isDomain| *2 (|List| *4)) (|ofCategory| *4 (|Field|))
       (|ofType| *5 (|SquareMatrix| *3 *4))
       (|isDomain| *1 (|CliffordAlgebra| *3 *4 *5))
       (|ofType| *3 (|PositiveInteger|))))
 (|eFromBinaryMap| (*1 *1 *2)
  (AND (|isDomain| *2 (|NonNegativeInteger|))
       (|isDomain| *1 (|CliffordAlgebra| *3 *4 *5))
       (|ofType| *3 (|PositiveInteger|)) (|ofCategory| *4 (|Field|))
       (|ofType| *5 (|SquareMatrix| *3 *4))))
 (|ePseudoscalar| (*1 *1)
  (AND (|isDomain| *1 (|CliffordAlgebra| *2 *3 *4))
       (|ofType| *2 (|PositiveInteger|)) (|ofCategory| *3 (|Field|))
       (|ofType| *4 (|SquareMatrix| *2 *3))))
 (|grade| (*1 *2 *1)
  (AND (|isDomain| *2 (|NonNegativeInteger|))
       (|isDomain| *1 (|CliffordAlgebra| *3 *4 *5))
       (|ofType| *3 (|PositiveInteger|)) (|ofCategory| *4 (|Field|))
       (|ofType| *5 (|SquareMatrix| *3 *4))))
 (|monomial| (*1 *1 *2 *3)
  (AND (|isDomain| *3 (|List| (|PositiveInteger|)))
       (|isDomain| *1 (|CliffordAlgebra| *4 *2 *5))
       (|ofType| *4 (|PositiveInteger|)) (|ofCategory| *2 (|Field|))
       (|ofType| *5 (|SquareMatrix| *4 *2))))
 (|coefficient| (*1 *2 *1 *3)
  (AND (|isDomain| *3 (|List| (|PositiveInteger|))) (|ofCategory| *2 (|Field|))
       (|isDomain| *1 (|CliffordAlgebra| *4 *2 *5))
       (|ofType| *4 (|PositiveInteger|)) (|ofType| *5 (|SquareMatrix| *4 *2))))
 (|toTable| (*1 *2 *3)
  (AND
   (|isDomain| *3
               (|Mapping| (|CliffordAlgebra| *4 *5 *6)
                          (|CliffordAlgebra| *4 *5 *6)
                          (|CliffordAlgebra| *4 *5 *6)))
   (|isDomain| *2 (|Matrix| (|CliffordAlgebra| *4 *5 *6)))
   (|isDomain| *1 (|CliffordAlgebra| *4 *5 *6))
   (|ofType| *4 (|PositiveInteger|)) (|ofCategory| *5 (|Field|))
   (|ofType| *6 (|SquareMatrix| *4 *5))))
 (|toTable| (*1 *2 *3)
  (AND
   (|isDomain| *3
               (|Mapping| (|CliffordAlgebra| *4 *5 *6)
                          (|CliffordAlgebra| *4 *5 *6)))
   (|isDomain| *2 (|Matrix| (|CliffordAlgebra| *4 *5 *6)))
   (|isDomain| *1 (|CliffordAlgebra| *4 *5 *6))
   (|ofType| *4 (|PositiveInteger|)) (|ofCategory| *5 (|Field|))
   (|ofType| *6 (|SquareMatrix| *4 *5))))
 (|/\\| (*1 *1 *1 *1)
  (AND (|isDomain| *1 (|CliffordAlgebra| *2 *3 *4))
       (|ofType| *2 (|PositiveInteger|)) (|ofCategory| *3 (|Field|))
       (|ofType| *4 (|SquareMatrix| *2 *3))))
 (|\\/| (*1 *1 *1 *1)
  (AND (|isDomain| *1 (|CliffordAlgebra| *2 *3 *4))
       (|ofType| *2 (|PositiveInteger|)) (|ofCategory| *3 (|Field|))
       (|ofType| *4 (|SquareMatrix| *2 *3))))
 (|lc| (*1 *1 *1 *1)
  (AND (|isDomain| *1 (|CliffordAlgebra| *2 *3 *4))
       (|ofType| *2 (|PositiveInteger|)) (|ofCategory| *3 (|Field|))
       (|ofType| *4 (|SquareMatrix| *2 *3))))
 (|rc| (*1 *1 *1 *1)
  (AND (|isDomain| *1 (|CliffordAlgebra| *2 *3 *4))
       (|ofType| *2 (|PositiveInteger|)) (|ofCategory| *3 (|Field|))
       (|ofType| *4 (|SquareMatrix| *2 *3))))
 (~ (*1 *1 *1)
  (AND (|isDomain| *1 (|CliffordAlgebra| *2 *3 *4))
       (|ofType| *2 (|PositiveInteger|)) (|ofCategory| *3 (|Field|))
       (|ofType| *4 (|SquareMatrix| *2 *3))))
 (|gradeInvolution| (*1 *1 *1)
  (AND (|isDomain| *1 (|CliffordAlgebra| *2 *3 *4))
       (|ofType| *2 (|PositiveInteger|)) (|ofCategory| *3 (|Field|))
       (|ofType| *4 (|SquareMatrix| *2 *3))))
 (|reverse| (*1 *1 *1)
  (AND (|isDomain| *1 (|CliffordAlgebra| *2 *3 *4))
       (|ofType| *2 (|PositiveInteger|)) (|ofCategory| *3 (|Field|))
       (|ofType| *4 (|SquareMatrix| *2 *3))))
 (|conj| (*1 *1 *1)
  (AND (|isDomain| *1 (|CliffordAlgebra| *2 *3 *4))
       (|ofType| *2 (|PositiveInteger|)) (|ofCategory| *3 (|Field|))
       (|ofType| *4 (|SquareMatrix| *2 *3))))
 (|setMode| (*1 *2 *3 *2)
  (AND (|isDomain| *2 (|Boolean|)) (|isDomain| *3 (|String|))
       (|isDomain| *1 (|CliffordAlgebra| *4 *5 *6))
       (|ofType| *4 (|PositiveInteger|)) (|ofCategory| *5 (|Field|))
       (|ofType| *6 (|SquareMatrix| *4 *5)))))
((~= (((|Boolean|) $ $) NIL)) (~ (($ $) 96)) (|zero?| (((|Boolean|) $) NIL))
 (|toTable| (((|Matrix| $) (|Mapping| $ $ $)) 76)
  (((|Matrix| $) (|Mapping| $ $)) 78))
 (|subtractIfCan| (((|Union| $ "failed") $ $) NIL))
 (|setMode| (((|Boolean|) (|String|) (|Boolean|)) 83))
 (|sample| (($) NIL T CONST)) (|rightRecip| (((|Union| $ #1="failed") $) NIL))
 (|rightPower| (($ $ (|PositiveInteger|)) NIL)
  (($ $ (|NonNegativeInteger|)) NIL))
 (|reverse| (($ $) 81)) (|recip| (((|Union| $ #1#) $) 130)) (|rc| (($ $ $) 93))
 (|opposite?| (((|Boolean|) $ $) NIL)) (|one?| (((|Boolean|) $) NIL))
 (|multivector| (($ (|List| |#2|)) 68))
 (|monomial| (($ |#2| (|List| (|PositiveInteger|))) 100))
 (|leftRecip| (((|Union| $ #1#) $) NIL))
 (|leftPower| (($ $ (|PositiveInteger|)) NIL)
  (($ $ (|NonNegativeInteger|)) NIL))
 (|lc| (($ $ $) 88)) (|latex| (((|String|) $) NIL))
 (|hashUpdate!| (((|HashState|) (|HashState|) $) NIL))
 (|hash| (((|SingleInteger|) $) NIL)) (|gradeInvolution| (($ $) 80))
 (|grade| (((|NonNegativeInteger|) $) 79))
 (|ee| (($ (|List| (|PositiveInteger|))) 65)) (|ePseudoscalar| (($) 70))
 (|eFromBinaryMap| (($ (|NonNegativeInteger|)) 69))
 (|e| (($ (|PositiveInteger|)) 59)) (|conj| (($ $) 82))
 (|commutator| (($ $ $) NIL))
 (|coerce| (((|OutputForm|) $) 113) (($ (|Integer|)) 46) (($ |#2|) 47))
 (|coefficient| ((|#2| $ (|List| (|PositiveInteger|))) 102))
 (|characteristic| (((|NonNegativeInteger|)) 25))
 (|associator| (($ $ $ $) NIL)) (|antiCommutator| (($ $ $) NIL))
 (|annihilate?| (((|Boolean|) $ $) NIL))
 (^ (($ $ (|PositiveInteger|)) NIL) (($ $ (|NonNegativeInteger|)) NIL))
 (|\\/| (($ $ $) 87)) (|Zero| (($) 42 T CONST)) (|One| (($) 44 T CONST))
 (= (((|Boolean|) $ $) 29)) (|/\\| (($ $ $) 60)) (- (($ $ $) 34) (($ $) 36))
 (+ (($ $ $) 32))
 (* (($ (|PositiveInteger|) $) NIL) (($ $ $) 86) (($ (|Integer|) $) 39)
    (($ (|NonNegativeInteger|) $) NIL) (($ |#2| $) 41) (($ $ |#2|) NIL)))
CLIF
(((|Ring|) . T) ((|Algebra| |#2|) . T))
(((|AbelianGroup|) . T) ((|AbelianMonoid|) . T) ((|AbelianSemiGroup|) . T)
 ((|Algebra| |#2|) . T) ((|BasicType|) . T) ((|BiModule| |t#1| |t#1|) . T)
 ((|BiModule| $ $) . T) ((|CancellationAbelianMonoid|) . T)
 ((|CoercibleTo| (|OutputForm|)) . T) ((|LeftModule| |t#1|) . T)
 ((|Magma|) . T) ((|MagmaWithUnit|) . T) ((|Module| |t#1|) . T)
 ((|Monoid|) . T) ((|NonAssociativeRing|) . T) ((|NonAssociativeRng|) . T)
 ((|NonAssociativeSemiRing|) . T) ((|NonAssociativeSemiRng|) . T)
 ((|RightModule| |t#2|) . T) ((|Ring|) . T) ((|Rng|) . T) ((|SemiGroup|) . T)
 ((|SemiRing|) . T) ((|SemiRng|) . T) ((|SetCategory|) . T)
 ((|unitsKnown|) . T))
((|constructor|
  (NIL
   "CliffordAlgebra(\\spad{n},{} \\spad{K},{} bLin) defines a module of dimension \\spad{2^n} over \\spad{K},{} given a bilinear form bLin on \\spad{K^n}. \\blankline Examples of Clifford Algebras are: gaussians,{} quaternions,{} exterior algebras and spin algebras."))
 (|setMode|
  (((|Boolean|) (|String|) (|Boolean|))
   "allows override of parameters such as orthogonal used for debugging"))
 (|conj|
  (($ $)
   "implements Clifford conjugate for a multivector by involution and reverse of each term separately using: grade: 0 1 2 3... multi: 1 \\spad{-1} \\spad{-1} 1..."))
 (|reverse|
  (($ $)
   "implements reverse for a single term by using: grade: 0 1 2 3... multi: 1 1 \\spad{-1} \\spad{-1}..."))
 (|gradeInvolution|
  (($ $) "\\spad{x} = ((\\spad{-1})^grade(\\spad{x}))\\spad{*x}"))
 (~ (($ $) "reverse,{} complement,{} canonical dual basis"))
 (|rc| (($ $ $) "right contraction inner product"))
 (|lc| (($ $ $) "left contraction inner product"))
 (|\\/|
  (($ $ $)
   "Implement regressive inner,{} meet product operator need to check precidence when used as an infix operator"))
 (|/\\|
  (($ $ $)
   "Implement exterior grassmann product operator need to check precidence when used as an infix operator"))
 (|toTable|
  (((|Matrix| $) (|Mapping| $ $))
   "displays table of unary function such as inverse,{} reverse,{} complement,{} or dual basis could have returned type 'List List \\%' but matrix displays better")
  (((|Matrix| $) (|Mapping| $ $ $))
   "displays multiplication table for binary operation which is represented as a function with two parameters. row number represents first operand in binary order column number represents second operand in binary order could have returned type 'List List \\%' but matrix displays better"))
 (|recip|
  (((|Union| $ "failed") $)
   "\\spad{recip(x)} computes the multiplicative inverse of \\spad{x} or \"failed\" if \\spad{x} is not invertible."))
 (|coefficient|
  ((|#2| $ (|List| (|PositiveInteger|)))
   "\\spad{coefficient(x,{} [i1,{} i2,{} ...,{} iN])} extracts the coefficient of \\spad{e(i1)*e(i2)*...*e(iN)} in \\spad{x}."))
 (|monomial|
  (($ |#2| (|List| (|PositiveInteger|)))
   "\\spad{monomial(c,{} [i1,{} i2,{} ...,{} iN])} produces the value given by \\spad{c*e(i1)*e(i2)*...*e(iN)}."))
 (|grade|
  (((|NonNegativeInteger|) $)
   "return the max grade of multivector,{} for example 1 is grade 0 \\spad{e1} is grade 1 e1/\\e2 is grade 2 and so on"))
 (|ePseudoscalar| (($) "unit pseudoscalar"))
 (|eFromBinaryMap|
  (($ (|NonNegativeInteger|))
   "\\spad{eFromBinaryMap(n)} sets the appropriate Grassmann basis,{} for example: eFromBinaryMap(0) = 1 (scalar) eFromBinaryMap(1) = \\spad{e1} eFromBinaryMap(2) = \\spad{e2} eFromBinaryMap(3) = e1/\\e2"))
 (|multivector|
  (($ (|List| |#2|))
   "to allow entries like: 1+2*e1+3*e2+4*e1e2 = multivector[1,{} 2,{} 3,{} 4]"))
 (|ee| (($ (|List| (|PositiveInteger|))) "to allow entries like: ee[1,{} 2]"))
 (|e|
  (($ (|PositiveInteger|))
   "\\spad{e(n)} produces phi(e_i) where e_i is \\spad{i}-th basis vector in \\spad{K^n} and phi is canonical embedding of \\spad{K^n} into Clifford algebra.")))
(("documentation" 0 9471) ("ancestors" 0 8830) ("parents" 0 8790)
 ("abbreviation" 0 8785) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 6870) ("modemaps" 0 2283) ("sourceFile" 0 2247)
 ("constructorCategory" 0 1232) ("constructorModemap" 0 62)
 ("constructorKind" 0 53) ("constructorForm" 0 20))