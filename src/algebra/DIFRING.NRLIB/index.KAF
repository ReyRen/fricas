3311                (MAKEPROP '|DifferentialRing| 'NILADIC T)
(|DifferentialRing|)
|category|
(((|DifferentialRing|) (|Category|)) (T |DifferentialRing|))
(|Join| (|Ring|)
        (CATEGORY |domain| (SIGNATURE |differentiate| ($ $))
         (SIGNATURE D ($ $))
         (SIGNATURE |differentiate| ($ $ (|NonNegativeInteger|)))
         (SIGNATURE D ($ $ (|NonNegativeInteger|)))))
"/git/fricas/src/algebra/DIFRING.spad"
((|differentiate| (*1 *1 *1) (|ofCategory| *1 (|DifferentialRing|)))
 (D (*1 *1 *1) (|ofCategory| *1 (|DifferentialRing|)))
 (|differentiate| (*1 *1 *1 *2)
  (AND (|ofCategory| *1 (|DifferentialRing|))
       (|isDomain| *2 (|NonNegativeInteger|))))
 (D (*1 *1 *1 *2)
  (AND (|ofCategory| *1 (|DifferentialRing|))
       (|isDomain| *2 (|NonNegativeInteger|)))))
((~= (((|Boolean|) $ $) 6)) (|zero?| (((|Boolean|) $) 6))
 (|subtractIfCan| (((|Union| $ "failed") $ $) 6)) (|sample| (($) 6 T CONST))
 (|rightRecip| (((|Union| $ #1="failed") $) 6))
 (|rightPower| (($ $ (|PositiveInteger|)) 6) (($ $ (|NonNegativeInteger|)) 6))
 (|recip| (((|Union| $ #1#) $) 6)) (|opposite?| (((|Boolean|) $ $) 6))
 (|one?| (((|Boolean|) $) 6)) (|leftRecip| (((|Union| $ #1#) $) 6))
 (|leftPower| (($ $ (|PositiveInteger|)) 6) (($ $ (|NonNegativeInteger|)) 6))
 (|latex| (((|String|) $) 6))
 (|hashUpdate!| (((|HashState|) (|HashState|) $) 6))
 (|hash| (((|SingleInteger|) $) 6))
 (|differentiate| (($ $) 6) (($ $ (|NonNegativeInteger|)) 6))
 (|commutator| (($ $ $) 6))
 (|coerce| (((|OutputForm|) $) 6) (($ (|Integer|)) 6))
 (|characteristic| (((|NonNegativeInteger|)) 6)) (|associator| (($ $ $ $) 6))
 (|antiCommutator| (($ $ $) 6)) (|annihilate?| (((|Boolean|) $ $) 6))
 (^ (($ $ (|PositiveInteger|)) 6) (($ $ (|NonNegativeInteger|)) 6))
 (|Zero| (($) 6 T CONST)) (|One| (($) 6 T CONST))
 (D (($ $) 6) (($ $ (|NonNegativeInteger|)) 6)) (= (((|Boolean|) $ $) 6))
 (- (($ $ $) 6) (($ $) 6)) (+ (($ $ $) 6))
 (* (($ (|PositiveInteger|) $) 6) (($ $ $) 6) (($ (|Integer|) $) 6)
    (($ (|NonNegativeInteger|) $) 6)))
DIFRING
(((|Ring|) . T))
(((|AbelianGroup|) . T) ((|AbelianMonoid|) . T) ((|AbelianSemiGroup|) . T)
 ((|BasicType|) . T) ((|BiModule| $ $) . T) ((|CancellationAbelianMonoid|) . T)
 ((|CoercibleTo| (|OutputForm|)) . T) ((|LeftModule| |t#1|) . T)
 ((|Magma|) . T) ((|MagmaWithUnit|) . T) ((|Monoid|) . T)
 ((|NonAssociativeRing|) . T) ((|NonAssociativeRng|) . T)
 ((|NonAssociativeSemiRing|) . T) ((|NonAssociativeSemiRng|) . T)
 ((|RightModule| |t#2|) . T) ((|Ring|) . T) ((|Rng|) . T) ((|SemiGroup|) . T)
 ((|SemiRing|) . T) ((|SemiRng|) . T) ((|SetCategory|) . T)
 ((|unitsKnown|) . T))
((|constructor|
  (NIL
   "An ordinary differential ring,{} that is,{} a ring with an operation \\spadfun{differentiate}. \\blankline"))
 (D
  (($ $ (|NonNegativeInteger|))
   "\\spad{D(x,{} n)} returns the \\spad{n}-th derivative of \\spad{x}.")
  (($ $)
   "\\spad{D(x)} returns the derivative of \\spad{x}. This function is a simple differential operator where no variable needs to be specified."))
 (|differentiate|
  (($ $ (|NonNegativeInteger|))
   "\\spad{differentiate(x,{} n)} returns the \\spad{n}-th derivative of \\spad{x}.")
  (($ $)
   "\\spad{differentiate(x)} returns the derivative of \\spad{x}. This function is a simple differential operator where no variable needs to be specified.")))
(("documentation" 0 2605) ("ancestors" 0 2042) ("parents" 0 2025)
 ("abbreviation" 0 2017) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 784) ("modemaps" 0 421) ("sourceFile" 0 382)
 ("constructorCategory" 0 155) ("constructorModemap" 0 94)
 ("constructorKind" 0 83) ("constructorForm" 0 62) ("NILADIC" 0 20))