18538               (MAKEPROP '|PermutationGroupExamples| 'NILADIC T)
(|PermutationGroupExamples|)
|package|
(((|PermutationGroupExamples|)
  (CATEGORY |package|
   (SIGNATURE |symmetricGroup|
    ((|PermutationGroup| (|Integer|)) (|PositiveInteger|)))
   (SIGNATURE |symmetricGroup|
    ((|PermutationGroup| (|Integer|)) (|List| (|Integer|))))
   (SIGNATURE |alternatingGroup|
    ((|PermutationGroup| (|Integer|)) (|PositiveInteger|)))
   (SIGNATURE |alternatingGroup|
    ((|PermutationGroup| (|Integer|)) (|List| (|Integer|))))
   (SIGNATURE |abelianGroup|
    ((|PermutationGroup| (|Integer|)) (|List| (|PositiveInteger|))))
   (SIGNATURE |cyclicGroup|
    ((|PermutationGroup| (|Integer|)) (|PositiveInteger|)))
   (SIGNATURE |cyclicGroup|
    ((|PermutationGroup| (|Integer|)) (|List| (|Integer|))))
   (SIGNATURE |dihedralGroup|
    ((|PermutationGroup| (|Integer|)) (|PositiveInteger|)))
   (SIGNATURE |dihedralGroup|
    ((|PermutationGroup| (|Integer|)) (|List| (|Integer|))))
   (SIGNATURE |mathieu11|
    ((|PermutationGroup| (|Integer|)) (|List| (|Integer|))))
   (SIGNATURE |mathieu11| ((|PermutationGroup| (|Integer|))))
   (SIGNATURE |mathieu12|
    ((|PermutationGroup| (|Integer|)) (|List| (|Integer|))))
   (SIGNATURE |mathieu12| ((|PermutationGroup| (|Integer|))))
   (SIGNATURE |mathieu22|
    ((|PermutationGroup| (|Integer|)) (|List| (|Integer|))))
   (SIGNATURE |mathieu22| ((|PermutationGroup| (|Integer|))))
   (SIGNATURE |mathieu23|
    ((|PermutationGroup| (|Integer|)) (|List| (|Integer|))))
   (SIGNATURE |mathieu23| ((|PermutationGroup| (|Integer|))))
   (SIGNATURE |mathieu24|
    ((|PermutationGroup| (|Integer|)) (|List| (|Integer|))))
   (SIGNATURE |mathieu24| ((|PermutationGroup| (|Integer|))))
   (SIGNATURE |janko2| ((|PermutationGroup| (|Integer|)) (|List| (|Integer|))))
   (SIGNATURE |janko2| ((|PermutationGroup| (|Integer|))))
   (SIGNATURE |rubiksGroup| ((|PermutationGroup| (|Integer|))))
   (SIGNATURE |youngGroup|
    ((|PermutationGroup| (|Integer|)) (|List| (|Integer|))))
   (SIGNATURE |youngGroup| ((|PermutationGroup| (|Integer|)) (|Partition|)))))
 (T |PermutationGroupExamples|))
(CATEGORY |package|
 (SIGNATURE |symmetricGroup|
  ((|PermutationGroup| (|Integer|)) (|PositiveInteger|)))
 (SIGNATURE |symmetricGroup|
  ((|PermutationGroup| (|Integer|)) (|List| (|Integer|))))
 (SIGNATURE |alternatingGroup|
  ((|PermutationGroup| (|Integer|)) (|PositiveInteger|)))
 (SIGNATURE |alternatingGroup|
  ((|PermutationGroup| (|Integer|)) (|List| (|Integer|))))
 (SIGNATURE |abelianGroup|
  ((|PermutationGroup| (|Integer|)) (|List| (|PositiveInteger|))))
 (SIGNATURE |cyclicGroup|
  ((|PermutationGroup| (|Integer|)) (|PositiveInteger|)))
 (SIGNATURE |cyclicGroup|
  ((|PermutationGroup| (|Integer|)) (|List| (|Integer|))))
 (SIGNATURE |dihedralGroup|
  ((|PermutationGroup| (|Integer|)) (|PositiveInteger|)))
 (SIGNATURE |dihedralGroup|
  ((|PermutationGroup| (|Integer|)) (|List| (|Integer|))))
 (SIGNATURE |mathieu11|
  ((|PermutationGroup| (|Integer|)) (|List| (|Integer|))))
 (SIGNATURE |mathieu11| ((|PermutationGroup| (|Integer|))))
 (SIGNATURE |mathieu12|
  ((|PermutationGroup| (|Integer|)) (|List| (|Integer|))))
 (SIGNATURE |mathieu12| ((|PermutationGroup| (|Integer|))))
 (SIGNATURE |mathieu22|
  ((|PermutationGroup| (|Integer|)) (|List| (|Integer|))))
 (SIGNATURE |mathieu22| ((|PermutationGroup| (|Integer|))))
 (SIGNATURE |mathieu23|
  ((|PermutationGroup| (|Integer|)) (|List| (|Integer|))))
 (SIGNATURE |mathieu23| ((|PermutationGroup| (|Integer|))))
 (SIGNATURE |mathieu24|
  ((|PermutationGroup| (|Integer|)) (|List| (|Integer|))))
 (SIGNATURE |mathieu24| ((|PermutationGroup| (|Integer|))))
 (SIGNATURE |janko2| ((|PermutationGroup| (|Integer|)) (|List| (|Integer|))))
 (SIGNATURE |janko2| ((|PermutationGroup| (|Integer|))))
 (SIGNATURE |rubiksGroup| ((|PermutationGroup| (|Integer|))))
 (SIGNATURE |youngGroup|
  ((|PermutationGroup| (|Integer|)) (|List| (|Integer|))))
 (SIGNATURE |youngGroup| ((|PermutationGroup| (|Integer|)) (|Partition|))))
"/git/fricas/src/algebra/PGE.spad"
((|youngGroup| (*1 *2 *3)
  (AND (|isDomain| *3 (|Partition|))
       (|isDomain| *2 (|PermutationGroup| (|Integer|)))
       (|isDomain| *1 (|PermutationGroupExamples|))))
 (|youngGroup| (*1 *2 *3)
  (AND (|isDomain| *3 (|List| (|Integer|)))
       (|isDomain| *2 (|PermutationGroup| (|Integer|)))
       (|isDomain| *1 (|PermutationGroupExamples|))))
 (|rubiksGroup| (*1 *2)
  (AND (|isDomain| *2 (|PermutationGroup| (|Integer|)))
       (|isDomain| *1 (|PermutationGroupExamples|))))
 (|janko2| (*1 *2)
  (AND (|isDomain| *2 (|PermutationGroup| (|Integer|)))
       (|isDomain| *1 (|PermutationGroupExamples|))))
 (|janko2| (*1 *2 *3)
  (AND (|isDomain| *3 (|List| (|Integer|)))
       (|isDomain| *2 (|PermutationGroup| (|Integer|)))
       (|isDomain| *1 (|PermutationGroupExamples|))))
 (|mathieu24| (*1 *2)
  (AND (|isDomain| *2 (|PermutationGroup| (|Integer|)))
       (|isDomain| *1 (|PermutationGroupExamples|))))
 (|mathieu24| (*1 *2 *3)
  (AND (|isDomain| *3 (|List| (|Integer|)))
       (|isDomain| *2 (|PermutationGroup| (|Integer|)))
       (|isDomain| *1 (|PermutationGroupExamples|))))
 (|mathieu23| (*1 *2)
  (AND (|isDomain| *2 (|PermutationGroup| (|Integer|)))
       (|isDomain| *1 (|PermutationGroupExamples|))))
 (|mathieu23| (*1 *2 *3)
  (AND (|isDomain| *3 (|List| (|Integer|)))
       (|isDomain| *2 (|PermutationGroup| (|Integer|)))
       (|isDomain| *1 (|PermutationGroupExamples|))))
 (|mathieu22| (*1 *2)
  (AND (|isDomain| *2 (|PermutationGroup| (|Integer|)))
       (|isDomain| *1 (|PermutationGroupExamples|))))
 (|mathieu22| (*1 *2 *3)
  (AND (|isDomain| *3 (|List| (|Integer|)))
       (|isDomain| *2 (|PermutationGroup| (|Integer|)))
       (|isDomain| *1 (|PermutationGroupExamples|))))
 (|mathieu12| (*1 *2)
  (AND (|isDomain| *2 (|PermutationGroup| (|Integer|)))
       (|isDomain| *1 (|PermutationGroupExamples|))))
 (|mathieu12| (*1 *2 *3)
  (AND (|isDomain| *3 (|List| (|Integer|)))
       (|isDomain| *2 (|PermutationGroup| (|Integer|)))
       (|isDomain| *1 (|PermutationGroupExamples|))))
 (|mathieu11| (*1 *2)
  (AND (|isDomain| *2 (|PermutationGroup| (|Integer|)))
       (|isDomain| *1 (|PermutationGroupExamples|))))
 (|mathieu11| (*1 *2 *3)
  (AND (|isDomain| *3 (|List| (|Integer|)))
       (|isDomain| *2 (|PermutationGroup| (|Integer|)))
       (|isDomain| *1 (|PermutationGroupExamples|))))
 (|dihedralGroup| (*1 *2 *3)
  (AND (|isDomain| *3 (|List| (|Integer|)))
       (|isDomain| *2 (|PermutationGroup| (|Integer|)))
       (|isDomain| *1 (|PermutationGroupExamples|))))
 (|dihedralGroup| (*1 *2 *3)
  (AND (|isDomain| *3 (|PositiveInteger|))
       (|isDomain| *2 (|PermutationGroup| (|Integer|)))
       (|isDomain| *1 (|PermutationGroupExamples|))))
 (|cyclicGroup| (*1 *2 *3)
  (AND (|isDomain| *3 (|List| (|Integer|)))
       (|isDomain| *2 (|PermutationGroup| (|Integer|)))
       (|isDomain| *1 (|PermutationGroupExamples|))))
 (|cyclicGroup| (*1 *2 *3)
  (AND (|isDomain| *3 (|PositiveInteger|))
       (|isDomain| *2 (|PermutationGroup| (|Integer|)))
       (|isDomain| *1 (|PermutationGroupExamples|))))
 (|abelianGroup| (*1 *2 *3)
  (AND (|isDomain| *3 (|List| (|PositiveInteger|)))
       (|isDomain| *2 (|PermutationGroup| (|Integer|)))
       (|isDomain| *1 (|PermutationGroupExamples|))))
 (|alternatingGroup| (*1 *2 *3)
  (AND (|isDomain| *3 (|List| (|Integer|)))
       (|isDomain| *2 (|PermutationGroup| (|Integer|)))
       (|isDomain| *1 (|PermutationGroupExamples|))))
 (|alternatingGroup| (*1 *2 *3)
  (AND (|isDomain| *3 (|PositiveInteger|))
       (|isDomain| *2 (|PermutationGroup| (|Integer|)))
       (|isDomain| *1 (|PermutationGroupExamples|))))
 (|symmetricGroup| (*1 *2 *3)
  (AND (|isDomain| *3 (|List| (|Integer|)))
       (|isDomain| *2 (|PermutationGroup| (|Integer|)))
       (|isDomain| *1 (|PermutationGroupExamples|))))
 (|symmetricGroup| (*1 *2 *3)
  (AND (|isDomain| *3 (|PositiveInteger|))
       (|isDomain| *2 (|PermutationGroup| (|Integer|)))
       (|isDomain| *1 (|PermutationGroupExamples|)))))
((|youngGroup| (((|PermutationGroup| (|Integer|)) (|Partition|)) 25)
  (((|PermutationGroup| (|Integer|)) (|List| (|Integer|))) 22))
 (|symmetricGroup| (((|PermutationGroup| (|Integer|)) (|List| (|Integer|))) 50)
  (((|PermutationGroup| (|Integer|)) (|PositiveInteger|)) 51))
 (|rubiksGroup| (((|PermutationGroup| (|Integer|))) 26))
 (|mathieu24| (((|PermutationGroup| (|Integer|))) 39)
  (((|PermutationGroup| (|Integer|)) (|List| (|Integer|))) 38))
 (|mathieu23| (((|PermutationGroup| (|Integer|))) 37)
  (((|PermutationGroup| (|Integer|)) (|List| (|Integer|))) 36))
 (|mathieu22| (((|PermutationGroup| (|Integer|))) 35)
  (((|PermutationGroup| (|Integer|)) (|List| (|Integer|))) 34))
 (|mathieu12| (((|PermutationGroup| (|Integer|))) 33)
  (((|PermutationGroup| (|Integer|)) (|List| (|Integer|))) 32))
 (|mathieu11| (((|PermutationGroup| (|Integer|))) 31)
  (((|PermutationGroup| (|Integer|)) (|List| (|Integer|))) 30))
 (|janko2| (((|PermutationGroup| (|Integer|))) 41)
  (((|PermutationGroup| (|Integer|)) (|List| (|Integer|))) 40))
 (|dihedralGroup| (((|PermutationGroup| (|Integer|)) (|List| (|Integer|))) 54)
  (((|PermutationGroup| (|Integer|)) (|PositiveInteger|)) 55))
 (|cyclicGroup| (((|PermutationGroup| (|Integer|)) (|List| (|Integer|))) 52)
  (((|PermutationGroup| (|Integer|)) (|PositiveInteger|)) 53))
 (|alternatingGroup|
  (((|PermutationGroup| (|Integer|)) (|List| (|Integer|))) 48)
  (((|PermutationGroup| (|Integer|)) (|PositiveInteger|)) 49))
 (|abelianGroup|
  (((|PermutationGroup| (|Integer|)) (|List| (|PositiveInteger|))) 45)))
PGE
((|constructor|
  (NIL
   "PermutationGroupExamples provides permutation groups for some classes of groups: symmetric,{} alternating,{} dihedral,{} cyclic,{} direct products of cyclic,{} which are in fact the finite abelian groups of symmetric groups called Young subgroups. Furthermore,{} Rubik\\spad{'s} group as permutation group of 48 integers and a list of sporadic simple groups derived from the atlas of finite groups."))
 (|youngGroup|
  (((|PermutationGroup| (|Integer|)) (|Partition|))
   "\\spad{youngGroup(lambda)} constructs the direct product of the symmetric groups given by the parts of the partition {\\em lambda}.")
  (((|PermutationGroup| (|Integer|)) (|List| (|Integer|)))
   "\\spad{youngGroup([n1,{} ...,{} nk])} constructs the direct product of the symmetric groups {\\em Sn1},{} ...,{} {\\em Snk}."))
 (|rubiksGroup|
  (((|PermutationGroup| (|Integer|)))
   "\\spad{rubiksGroup constructs} the permutation group representing Rubic\\spad{'s} Cube acting on integers {\\em 10*i+j} for {\\em 1 <= i <= 6},{} {\\em 1 <= j <= 8}. The faces of Rubik\\spad{'s} Cube are labelled in the obvious way Front,{} Right,{} Up,{} Down,{} Left,{} Back and numbered from 1 to 6 in this given ordering,{} the pieces on each face (except the unmoveable center piece) are clockwise numbered from 1 to 8 starting with the piece in the upper left corner. The moves of the cube are represented as permutations on these pieces,{} represented as a two digit integer {\\em ij} where \\spad{i} is the numer of theface (1 to 6) and \\spad{j} is the number of the piece on this face. The remaining ambiguities are resolved by looking at the 6 generators,{} which represent a 90 degree turns of the faces,{} or from the following pictorial description. Permutation group representing Rubic\\spad{'s} Cube acting on integers 10*i+j for 1 \\spad{<=} \\spad{i} \\spad{<=} 6,{} 1 \\spad{<=} \\spad{j} \\spad{<=8}. \\blankline\\begin{verbatim}Rubik's Cube:   +-----+ +-- B   where: marks Side # :               / U   /|/              /     / |         F(ront)    <->    1      L -->  +-----+ R|         R(ight)    <->    2             |     |  +         U(p)       <->    3             |  F  | /          D(own)     <->    4             |     |/           L(eft)     <->    5             +-----+            B(ack)     <->    6                ^                |                DThe Cube's surface:                               The pieces on each side            +---+              (except the unmoveable center            |567|              piece) are clockwise numbered            |4U8|              from 1 to 8 starting with the            |321|              piece in the upper left        +---+---+---+          corner (see figure on the        |781|123|345|          left).  The moves of the cube        |6L2|8F4|2R6|          are represented as        |543|765|187|          permutations on these pieces.        +---+---+---+          Each of the pieces is            |123|              represented as a two digit            |8D4|              integer ij where i is the            |765|              # of the side ( 1 to 6 for            +---+              F to B (see table above ))            |567|              and j is the # of the piece.            |4B8|            |321|            +---+\\end{verbatim}"))
 (|janko2|
  (((|PermutationGroup| (|Integer|)))
   "\\spad{janko2 constructs} the janko group acting on the integers 1,{} ...,{} 100.")
  (((|PermutationGroup| (|Integer|)) (|List| (|Integer|)))
   "\\spad{janko2(\\spad{li})} constructs the janko group acting on the 100 integers given in the list {\\em \\spad{li}}. Note: duplicates in the list will be removed. Error: if {\\em \\spad{li}} has less or more than 100 different entries"))
 (|mathieu24|
  (((|PermutationGroup| (|Integer|)))
   "\\spad{mathieu24 constructs} the mathieu group acting on the integers 1,{} ...,{} 24.")
  (((|PermutationGroup| (|Integer|)) (|List| (|Integer|)))
   "\\spad{mathieu24(\\spad{li})} constructs the mathieu group acting on the 24 integers given in the list {\\em \\spad{li}}. Note: duplicates in the list will be removed. Error: if {\\em \\spad{li}} has less or more than 24 different entries."))
 (|mathieu23|
  (((|PermutationGroup| (|Integer|)))
   "\\spad{mathieu23 constructs} the mathieu group acting on the integers 1,{} ...,{} 23.")
  (((|PermutationGroup| (|Integer|)) (|List| (|Integer|)))
   "\\spad{mathieu23(\\spad{li})} constructs the mathieu group acting on the 23 integers given in the list {\\em \\spad{li}}. Note: duplicates in the list will be removed. Error: if {\\em \\spad{li}} has less or more than 23 different entries."))
 (|mathieu22|
  (((|PermutationGroup| (|Integer|)))
   "\\spad{mathieu22 constructs} the mathieu group acting on the integers 1,{} ...,{} 22.")
  (((|PermutationGroup| (|Integer|)) (|List| (|Integer|)))
   "\\spad{mathieu22(\\spad{li})} constructs the mathieu group acting on the 22 integers given in the list {\\em \\spad{li}}. Note: duplicates in the list will be removed. Error: if {\\em \\spad{li}} has less or more than 22 different entries."))
 (|mathieu12|
  (((|PermutationGroup| (|Integer|)))
   "\\spad{mathieu12 constructs} the mathieu group acting on the integers 1,{} ...,{} 12.")
  (((|PermutationGroup| (|Integer|)) (|List| (|Integer|)))
   "\\spad{mathieu12(\\spad{li})} constructs the mathieu group acting on the 12 integers given in the list {\\em \\spad{li}}. Note: duplicates in the list will be removed Error: if {\\em \\spad{li}} has less or more than 12 different entries."))
 (|mathieu11|
  (((|PermutationGroup| (|Integer|)))
   "\\spad{mathieu11 constructs} the mathieu group acting on the integers 1,{} ...,{} 11.")
  (((|PermutationGroup| (|Integer|)) (|List| (|Integer|)))
   "\\spad{mathieu11(\\spad{li})} constructs the mathieu group acting on the 11 integers given in the list {\\em \\spad{li}}. Note: duplicates in the list will be removed. error,{} if {\\em \\spad{li}} has less or more than 11 different entries."))
 (|dihedralGroup|
  (((|PermutationGroup| (|Integer|)) (|List| (|Integer|)))
   "\\spad{dihedralGroup([i1,{} ...,{} ik])} constructs the dihedral group of order 2k acting on the integers out of {\\em i1},{} ...,{} {\\em ik}. Note: duplicates in the list will be removed.")
  (((|PermutationGroup| (|Integer|)) (|PositiveInteger|))
   "\\spad{dihedralGroup(n)} constructs the dihedral group of order 2n acting on integers 1,{} ...,{} \\spad{N}."))
 (|cyclicGroup|
  (((|PermutationGroup| (|Integer|)) (|List| (|Integer|)))
   "\\spad{cyclicGroup([i1,{} ...,{} ik])} constructs the cyclic group of order \\spad{k} acting on the integers {\\em i1},{} ...,{} {\\em ik}. Note: duplicates in the list will be removed.")
  (((|PermutationGroup| (|Integer|)) (|PositiveInteger|))
   "\\spad{cyclicGroup(n)} constructs the cyclic group of order \\spad{n} acting on the integers 1,{} ...,{} \\spad{n}."))
 (|abelianGroup|
  (((|PermutationGroup| (|Integer|)) (|List| (|PositiveInteger|)))
   "\\spad{abelianGroup([n1,{} ...,{} nk])} constructs the abelian group that is the direct product of cyclic groups with order {\\em \\spad{ni}}."))
 (|alternatingGroup|
  (((|PermutationGroup| (|Integer|)) (|List| (|Integer|)))
   "\\spad{alternatingGroup(\\spad{li})} constructs the alternating group acting on the integers in the list {\\em \\spad{li}},{} generators are in general the {\\em n-2}-cycle {\\em (\\spad{li}.3,{} ...,{} \\spad{li}.n)} and the 3-cycle {\\em (\\spad{li}.1,{} \\spad{li}.2,{} \\spad{li}.3)},{} if \\spad{n} is odd and product of the 2-cycle {\\em (\\spad{li}.1,{} \\spad{li}.2)} with {\\em n-2}-cycle {\\em (\\spad{li}.3,{} ...,{} \\spad{li}.n)} and the 3-cycle {\\em (\\spad{li}.1,{} \\spad{li}.2,{} \\spad{li}.3)},{} if \\spad{n} is even. Note: duplicates in the list will be removed.")
  (((|PermutationGroup| (|Integer|)) (|PositiveInteger|))
   "\\spad{alternatingGroup(n)} constructs the alternating group {\\em An} acting on the integers 1,{} ...,{} \\spad{n},{} generators are in general the {\\em n-2}-cycle {\\em (3,{} ...,{} n)} and the 3-cycle {\\em (1,{} 2,{} 3)} if \\spad{n} is odd and the product of the 2-cycle {\\em (1,{} 2)} with {\\em n-2}-cycle {\\em (3,{} ...,{} n)} and the 3-cycle {\\em (1,{} 2,{} 3)} if \\spad{n} is even."))
 (|symmetricGroup|
  (((|PermutationGroup| (|Integer|)) (|List| (|Integer|)))
   "\\spad{symmetricGroup(\\spad{li})} constructs the symmetric group acting on the integers in the list {\\em \\spad{li}},{} generators are the cycle given by {\\em \\spad{li}} and the 2-cycle {\\em (\\spad{li}.1,{} \\spad{li}.2)}. Note: duplicates in the list will be removed.")
  (((|PermutationGroup| (|Integer|)) (|PositiveInteger|))
   "\\spad{symmetricGroup(n)} constructs the symmetric group {\\em Sn} acting on the integers 1,{} ...,{} \\spad{n},{} generators are the {\\em n}-cycle {\\em (1,{} ...,{} n)} and the 2-cycle {\\em (1,{} 2)}.")))
(("documentation" 0 9616) ("ancestors" 0 NIL) ("parents" 0 NIL)
 ("abbreviation" 0 9612) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 8055) ("modemaps" 0 4053) ("sourceFile" 0 4018)
 ("constructorCategory" 0 2136) ("constructorModemap" 0 109)
 ("constructorKind" 0 99) ("constructorForm" 0 70) ("NILADIC" 0 20))