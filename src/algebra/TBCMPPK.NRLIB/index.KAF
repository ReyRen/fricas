5405                (|TabulatedComputationPackage| |Key| |Entry|)
|package|
(((|TabulatedComputationPackage| |#1| |#2|)
  (CATEGORY |package| (SIGNATURE |initTable!| ((|Void|)))
   (SIGNATURE |printInfo!| ((|Void|) (|String|) (|String|)))
   (SIGNATURE |startStats!| ((|Void|) (|String|)))
   (SIGNATURE |printStats!| ((|Void|))) (SIGNATURE |clearTable!| ((|Void|)))
   (SIGNATURE |usingTable?| ((|Boolean|)))
   (SIGNATURE |printingInfo?| ((|Boolean|)))
   (SIGNATURE |makingStats?| ((|Boolean|)))
   (SIGNATURE |extractIfCan| ((|Union| |#2| "failed") |#1|))
   (SIGNATURE |insert!| ((|Void|) |#1| |#2|)))
  (|SetCategory|) (|SetCategory|))
 (T |TabulatedComputationPackage|))
(CATEGORY |package| (SIGNATURE |initTable!| ((|Void|)))
 (SIGNATURE |printInfo!| ((|Void|) (|String|) (|String|)))
 (SIGNATURE |startStats!| ((|Void|) (|String|)))
 (SIGNATURE |printStats!| ((|Void|))) (SIGNATURE |clearTable!| ((|Void|)))
 (SIGNATURE |usingTable?| ((|Boolean|)))
 (SIGNATURE |printingInfo?| ((|Boolean|)))
 (SIGNATURE |makingStats?| ((|Boolean|)))
 (SIGNATURE |extractIfCan| ((|Union| |#2| "failed") |#1|))
 (SIGNATURE |insert!| ((|Void|) |#1| |#2|)))
"/git/fricas/src/algebra/TBCMPPK.spad"
((|insert!| (*1 *2 *3 *4)
  (AND (|isDomain| *2 (|Void|))
       (|isDomain| *1 (|TabulatedComputationPackage| *3 *4))
       (|ofCategory| *3 (|SetCategory|)) (|ofCategory| *4 (|SetCategory|))))
 (|extractIfCan| (*1 *2 *3)
  (|partial| AND (|ofCategory| *2 (|SetCategory|))
   (|isDomain| *1 (|TabulatedComputationPackage| *3 *2))
   (|ofCategory| *3 (|SetCategory|))))
 (|makingStats?| (*1 *2)
  (AND (|isDomain| *2 (|Boolean|))
       (|isDomain| *1 (|TabulatedComputationPackage| *3 *4))
       (|ofCategory| *3 (|SetCategory|)) (|ofCategory| *4 (|SetCategory|))))
 (|printingInfo?| (*1 *2)
  (AND (|isDomain| *2 (|Boolean|))
       (|isDomain| *1 (|TabulatedComputationPackage| *3 *4))
       (|ofCategory| *3 (|SetCategory|)) (|ofCategory| *4 (|SetCategory|))))
 (|usingTable?| (*1 *2)
  (AND (|isDomain| *2 (|Boolean|))
       (|isDomain| *1 (|TabulatedComputationPackage| *3 *4))
       (|ofCategory| *3 (|SetCategory|)) (|ofCategory| *4 (|SetCategory|))))
 (|clearTable!| (*1 *2)
  (AND (|isDomain| *2 (|Void|))
       (|isDomain| *1 (|TabulatedComputationPackage| *3 *4))
       (|ofCategory| *3 (|SetCategory|)) (|ofCategory| *4 (|SetCategory|))))
 (|printStats!| (*1 *2)
  (AND (|isDomain| *2 (|Void|))
       (|isDomain| *1 (|TabulatedComputationPackage| *3 *4))
       (|ofCategory| *3 (|SetCategory|)) (|ofCategory| *4 (|SetCategory|))))
 (|startStats!| (*1 *2 *3)
  (AND (|isDomain| *3 (|String|)) (|isDomain| *2 (|Void|))
       (|isDomain| *1 (|TabulatedComputationPackage| *4 *5))
       (|ofCategory| *4 (|SetCategory|)) (|ofCategory| *5 (|SetCategory|))))
 (|printInfo!| (*1 *2 *3 *3)
  (AND (|isDomain| *3 (|String|)) (|isDomain| *2 (|Void|))
       (|isDomain| *1 (|TabulatedComputationPackage| *4 *5))
       (|ofCategory| *4 (|SetCategory|)) (|ofCategory| *5 (|SetCategory|))))
 (|initTable!| (*1 *2)
  (AND (|isDomain| *2 (|Void|))
       (|isDomain| *1 (|TabulatedComputationPackage| *3 *4))
       (|ofCategory| *3 (|SetCategory|)) (|ofCategory| *4 (|SetCategory|)))))
((|usingTable?| (((|Boolean|)) 24)) (|startStats!| (((|Void|) (|String|)) 26))
 (|printingInfo?| (((|Boolean|)) 36)) (|printStats!| (((|Void|)) 34))
 (|printInfo!| (((|Void|) (|String|) (|String|)) 25))
 (|makingStats?| (((|Boolean|)) 37)) (|insert!| (((|Void|) |#1| |#2|) 44))
 (|initTable!| (((|Void|)) 20))
 (|extractIfCan| (((|Union| |#2| "failed") |#1|) 42))
 (|clearTable!| (((|Void|)) 35)))
TBCMPPK
((|constructor|
  (NIL
   "\\spad{TabulatedComputationPackage(Key ,{} Entry)} provides some modest support for dealing with operations with type \\spad{Key -> Entry}. The result of such operations can be stored and retrieved with this package by using a hash-table. The user does not need to worry about the management of this hash-table. However,{} only one hash-table is built by calling \\spad{TabulatedComputationPackage(Key ,{} Entry)}."))
 (|insert!|
  (((|Void|) |#1| |#2|)
   "\\spad{insert!(x,{} y)} stores the item whose key is \\spad{x} and whose entry is \\spad{y}."))
 (|extractIfCan|
  (((|Union| |#2| "failed") |#1|)
   "\\spad{extractIfCan(x)} searches the item whose key is \\spad{x}."))
 (|makingStats?|
  (((|Boolean|))
   "\\spad{makingStats?()} returns \\spad{true} iff the statistics process is running."))
 (|printingInfo?|
  (((|Boolean|))
   "\\spad{printingInfo?()} returns \\spad{true} iff messages are printed when manipulating items from the hash-table."))
 (|usingTable?|
  (((|Boolean|))
   "\\spad{usingTable?()} returns \\spad{true} iff the hash-table is used"))
 (|clearTable!|
  (((|Void|))
   "\\spad{clearTable!()} clears the hash-table and assumes that it will no longer be used."))
 (|printStats!| (((|Void|)) "\\spad{printStats!()} prints the statistics."))
 (|startStats!|
  (((|Void|) (|String|))
   "\\spad{startStats!(x)} initializes the statistics process and sets the comments to display when statistics are printed"))
 (|printInfo!|
  (((|Void|) (|String|) (|String|))
   "\\spad{printInfo!(x,{} y)} initializes the messages to be printed when manipulating items from the hash-table. If a key is retrieved then \\spad{x} is displayed. If an item is stored then \\spad{y} is displayed."))
 (|initTable!| (((|Void|)) "\\spad{initTable!()} initializes the hash-table.")))
(("documentation" 0 3589) ("ancestors" 0 NIL) ("parents" 0 NIL)
 ("abbreviation" 0 3581) ("predicates" 0 NIL) ("superDomain" 0 NIL)
 ("operationAlist" 0 3183) ("modemaps" 0 1186) ("sourceFile" 0 1147)
 ("constructorCategory" 0 678) ("constructorModemap" 0 76)
 ("constructorKind" 0 66) ("constructorForm" 0 20))